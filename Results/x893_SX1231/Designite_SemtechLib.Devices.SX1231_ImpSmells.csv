Implementation smell,Namespace,Class,File,Method,Description
Long Method,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The method has 444 lines of code.
Long Method,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The method has 303 lines of code.
Long Method,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The method has 198 lines of code.
Long Method,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The method has 105 lines of code.
Long Method,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The method has 131 lines of code.
Long Method,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The method has 1548 lines of code.
Long Method,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The method has 1094 lines of code.
Long Method,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The method has 551 lines of code.
Long Method,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,PopulateDioCbox,The method has 415 lines of code.
Long Method,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The method has 234 lines of code.
Long Method,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The method has 1080 lines of code.
Long Method,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,OnSX1231PropertyChanged,The method has 492 lines of code.
Long Method,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The method has 1771 lines of code.
Long Method,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The method has 129 lines of code.
Long Method,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,PopulateRegisters,The method has 111 lines of code.
Long Method,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The method has 432 lines of code.
Complex Method,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,OnSX1231PropertyChanged,Cyclomatic complexity of the method is 27
Complex Method,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,tBox_TextChanged,Cyclomatic complexity of the method is 8
Complex Method,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,UpdatePaSwitchSelCheck,Cyclomatic complexity of the method is 9
Complex Method,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,Cyclomatic complexity of the method is 13
Complex Method,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,RssiAnalyserForm_Load,Cyclomatic complexity of the method is 10
Complex Method,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,OnSX1231PropertyChanged,Cyclomatic complexity of the method is 18
Complex Method,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,PacketLogForm_Load,Cyclomatic complexity of the method is 10
Complex Method,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,control_MouseEnter,Cyclomatic complexity of the method is 28
Complex Method,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,UpdateSyncValueLimits,Cyclomatic complexity of the method is 9
Complex Method,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,UpdateBitRateLimits,Cyclomatic complexity of the method is 9
Complex Method,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,UpdateFdevLimits,Cyclomatic complexity of the method is 9
Complex Method,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,UpdateFrequencyRfLimits,Cyclomatic complexity of the method is 9
Complex Method,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,PopulateDioCbox,Cyclomatic complexity of the method is 8
Complex Method,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,OnSX1231PropertyChanged,Cyclomatic complexity of the method is 328
Complex Method,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,Cyclomatic complexity of the method is 8
Complex Method,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,control_MouseEnter,Cyclomatic complexity of the method is 10
Complex Method,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,rBtnLnaGain_CheckedChanged,Cyclomatic complexity of the method is 8
Complex Method,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,BitRateFdevCheck,Cyclomatic complexity of the method is 8
Complex Method,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,Cyclomatic complexity of the method is 30
Complex Method,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,PopulateRegisters,Cyclomatic complexity of the method is 10
Complex Method,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDefaultValues,Cyclomatic complexity of the method is 13
Complex Method,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetModeLeds,Cyclomatic complexity of the method is 11
Complex Method,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,Cyclomatic complexity of the method is 21
Complex Method,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,Cyclomatic complexity of the method is 269
Long Parameter List,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,CreateLineGraph,The method has 12 parameters.
Long Parameter List,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,SetupGraphPane,The method has 12 parameters.
Long Parameter List,SemtechLib.Devices.SX1231.Controls,SpectrumGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\SpectrumGraphControl.cs,CreateLineGraph,The method has 12 parameters.
Long Parameter List,SemtechLib.Devices.SX1231.Controls,SpectrumGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\SpectrumGraphControl.cs,SetupGraphPane,The method has 12 parameters.
Long Parameter List,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The method has 5 parameters.
Long Statement,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,rBtnRfPaSwitchSel_CheckedChanged,The length of the statement  "	this.sx1231.RfPaSwitchSel = this.rBtnRfPaSwitchPaIo.Checked ? RfPaSwitchSelEnum.RF_IO_RFIO : RfPaSwitchSelEnum.RF_IO_PA_BOOST; " is 126.
Long Statement,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,txtBox_Validating,The length of the statement  "		MessageBox.Show (exception.Message + "\rInput Format: Hex 0x" + num.ToString ("X02") + " - 0x" + num2.ToString ("X02")' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 181.
Long Statement,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,IsFormLocatedInScreen,The length of the statement  "		if (((frm.Left < screens [i].WorkingArea.Left) || (frm.Top < screens [i].WorkingArea.Top)) || ((frm.Left > screens [i].WorkingArea.Right) || (frm.Top > screens [i].WorkingArea.Bottom))) { " is 187.
Long Statement,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,IsFormLocatedInScreen,The length of the statement  "		if (((frm.Left < screens [i].WorkingArea.Left) || (frm.Top < screens [i].WorkingArea.Top)) || ((frm.Left > screens [i].WorkingArea.Right) || (frm.Top > screens [i].WorkingArea.Bottom))) { " is 187.
Long Statement,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,nudChanBw_ValueChanged,The length of the statement  "	decimal[] array = SemtechLib.Devices.SX1231.SX1231.ComputeRxBwFreqTable (this.sx1231.FrequencyXo' this.sx1231.ModulationType); " is 126.
Long Statement,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,nudChanBw_ValueChanged,The length of the statement  "		SemtechLib.Devices.SX1231.SX1231.ComputeRxBwMantExp (this.sx1231.FrequencyXo' this.sx1231.ModulationType' this.nudChanBw.Value' ref mant' ref exp); " is 147.
Long Statement,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,UpdatePointsList,The length of the statement  "		this.points.Add (new PointPair ((double)(this.sx1231.SpectrumFrequencyMin + (this.sx1231.SpectrumFrequencyStep * i))' -127.5)); " is 127.
Long Statement,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,IsFormLocatedInScreen,The length of the statement  "		if (((frm.Left < screens [i].WorkingArea.Left) || (frm.Top < screens [i].WorkingArea.Top)) || ((frm.Left > screens [i].WorkingArea.Right) || (frm.Top > screens [i].WorkingArea.Bottom))) { " is 187.
Long Statement,SemtechLib.Devices.SX1231.Forms,RegistersForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RegistersForm.cs,IsFormLocatedInScreen,The length of the statement  "		if (((frm.Left < screens [i].WorkingArea.Left) || (frm.Top < screens [i].WorkingArea.Top)) || ((frm.Left > screens [i].WorkingArea.Right) || (frm.Top > screens [i].WorkingArea.Bottom))) { " is 187.
Long Statement,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,control_MouseEnter,The length of the statement  "	else if (((sender == pnlAddressInPayload) || (sender == rBtnNodeAddressInPayloadYes)) || (sender == rBtnNodeAddressInPayloadNo)) " is 128.
Long Statement,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,control_MouseEnter,The length of the statement  "	else if (((sender == pnlAddressFiltering) || (sender == rBtnAddressFilteringOff)) || ((sender == rBtnAddressFilteringNode) || (sender == rBtnAddressFilteringNodeBroadcast))) " is 173.
Long Statement,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,control_MouseEnter,The length of the statement  "	else if (((sender == pnlDcFree) || (sender == rBtnDcFreeOff)) || ((sender == rBtnDcFreeManchester) || (sender == rBtnDcFreeWhitening))) " is 135.
Long Statement,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The length of the statement  "	rBtnAddressFilteringNodeBroadcast.CheckedChanged += new EventHandler (rBtnAddressFilteringNodeBroadcast_CheckedChanged); " is 120.
Long Statement,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,rBtnFifoFill_CheckedChanged,The length of the statement  "	FifoFillCondition = rBtnFifoFillSyncAddress.Checked ? FifoFillConditionEnum.OnSyncAddressIrq : FifoFillConditionEnum.Allways; " is 125.
Long Statement,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,tBoxAesKey_KeyDown,The length of the statement  "	if (e.Shift || e.Control || Uri.IsHexDigit ((char)e.KeyData) || (e.KeyData >= Keys.NumPad0 && e.KeyData <= Keys.NumPad9) || e.KeyData == Keys.Back || e.KeyData == Keys.Delete || e.KeyData == Keys.Left || e.KeyData == Keys.Right) { " is 230.
Long Statement,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,tBoxSyncValue_KeyDown,The length of the statement  "	if ((((e.Shift || e.Control) || Uri.IsHexDigit ((char)((ushort)e.KeyData))) || ((e.KeyData >= Keys.NumPad0) && (e.KeyData <= Keys.NumPad9))) || (((e.KeyData == Keys.Back) || (e.KeyData == Keys.Delete)) || ((e.KeyData == Keys.Left) || (e.KeyData == Keys.Right)))) { " is 264.
Long Statement,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The length of the statement  "	this.cBoxListenResolIdle.SelectedIndexChanged += new System.EventHandler (this.cBoxListenResolIdle_SelectedIndexChanged); " is 121.
Long Statement,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,rBtnListenCriteria_CheckedChanged,The length of the statement  "	ListenCriteria = rBtnListenCriteria0.Checked ? ListenCriteriaEnum.RssiThresh : ListenCriteriaEnum.RssiThreshSyncAddress; " is 120.
Long Statement,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,CreateLineGraph,The length of the statement  "	SetupGraphPane (graphPane' title' xAxisTitle' yAxisTitle' xAxisTitleVisible' yAxisTitleVisible' xScaleVisible' yScaleVisible' xMajorGridVisible' xIsBetweenLabels' yMajorGridVisible' yIsBetweenLabels); " is 200.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.BitRateChanged += new SemtechLib.General.Events.DecimalEventHandler (this.commonViewControl1_BitRateChanged); " is 133.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.DataModeChanged += new SemtechLib.Devices.SX1231.Events.DataModeEventHandler (this.commonViewControl1_DataModeChanged); " is 143.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.DocumentationChanged += new SemtechLib.General.Interfaces.DocumentationChangedEventHandler (this.commonViewControl1_DocumentationChanged); " is 162.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.FdevChanged += new SemtechLib.General.Events.DecimalEventHandler (this.commonViewControl1_FdevChanged); " is 127.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.FrequencyRfChanged += new SemtechLib.General.Events.DecimalEventHandler (this.commonViewControl1_FrequencyRfChanged); " is 141.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.FrequencyXoChanged += new SemtechLib.General.Events.DecimalEventHandler (this.commonViewControl1_FrequencyXoChanged); " is 141.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.ListenCoefIdleChanged += new SemtechLib.General.Events.DecimalEventHandler (this.commonViewControl1_ListenCoefIdleChanged); " is 147.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.ListenCoefRxChanged += new SemtechLib.General.Events.DecimalEventHandler (this.commonViewControl1_ListenCoefRxChanged); " is 143.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.ListenCriteriaChanged += new SemtechLib.Devices.SX1231.Events.ListenCriteriaEventHandler (this.commonViewControl1_ListenCriteriaChanged); " is 161.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.ListenEndChanged += new SemtechLib.Devices.SX1231.Events.ListenEndEventHandler (this.commonViewControl1_ListenEndChanged); " is 146.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.ListenModeAbortChanged += new System.EventHandler (this.commonViewControl1_ListenModeAbortChanged); " is 123.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.ListenModeChanged += new SemtechLib.General.Events.BooleanEventHandler (this.commonViewControl1_ListenModeChanged); " is 139.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.ListenResolIdleChanged += new SemtechLib.Devices.SX1231.Events.ListenResolEventHandler (this.commonViewControl1_ListenResolIdleChanged); " is 160.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.ListenResolRxChanged += new SemtechLib.Devices.SX1231.Events.ListenResolEventHandler (this.commonViewControl1_ListenResolRxChanged); " is 156.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.LowBatOnChanged += new SemtechLib.General.Events.BooleanEventHandler (this.commonViewControl1_LowBatOnChanged); " is 135.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.LowBatTrimChanged += new SemtechLib.Devices.SX1231.Events.LowBatTrimEventHandler (this.commonViewControl1_LowBatTrimChanged); " is 149.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.ModulationShapingChanged += new SemtechLib.General.Events.ByteEventHandler (this.commonViewControl1_ModulationShapingChanged); " is 150.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.ModulationTypeChanged += new SemtechLib.Devices.SX1231.Events.ModulationTypeEventHandler (this.commonViewControl1_ModulationTypeChanged); " is 161.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.commonViewControl1.SequencerChanged += new SemtechLib.General.Events.BooleanEventHandler (this.commonViewControl1_SequencerChanged); " is 137.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.transmitterViewControl1.DocumentationChanged += new SemtechLib.General.Interfaces.DocumentationChangedEventHandler (this.transmitterViewControl1_DocumentationChanged); " is 172.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.transmitterViewControl1.OcpOnChanged += new SemtechLib.General.Events.BooleanEventHandler (this.transmitterViewControl1_OcpOnChanged); " is 139.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.transmitterViewControl1.OcpTrimChanged += new SemtechLib.General.Events.DecimalEventHandler (this.transmitterViewControl1_OcpTrimChanged); " is 143.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.transmitterViewControl1.OutputPowerChanged += new SemtechLib.General.Events.DecimalEventHandler (this.transmitterViewControl1_OutputPowerChanged); " is 151.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.transmitterViewControl1.PaModeChanged += new SemtechLib.Devices.SX1231.Events.PaModeEventHandler (this.transmitterViewControl1_PaModeChanged); " is 147.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.transmitterViewControl1.PaRampChanged += new SemtechLib.Devices.SX1231.Events.PaRampEventHandler (this.transmitterViewControl1_PaRampChanged); " is 147.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.OokAverageThreshFilt = SemtechLib.Devices.SX1231.Enumerations.OokAverageThreshFiltEnum.COEF_2; " is 120.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.OokPeakThreshDec = SemtechLib.Devices.SX1231.Enumerations.OokPeakThreshDecEnum.EVERY_1_CHIPS_1_TIMES; " is 127.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.AfcAutoClearOnChanged += new SemtechLib.General.Events.BooleanEventHandler (this.receiverViewControl1_AfcAutoClearOnChanged); " is 151.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.AfcAutoOnChanged += new SemtechLib.General.Events.BooleanEventHandler (this.receiverViewControl1_AfcAutoOnChanged); " is 141.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.AfcDccFreqChanged += new SemtechLib.General.Events.DecimalEventHandler (this.receiverViewControl1_AfcDccFreqChanged); " is 143.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.AfcLowBetaOnChanged += new SemtechLib.General.Events.BooleanEventHandler (this.receiverViewControl1_AfcLowBetaOnChanged); " is 147.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.AfcRxBwChanged += new SemtechLib.General.Events.DecimalEventHandler (this.receiverViewControl1_AfcRxBwChanged); " is 137.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.AgcAutoRefChanged += new SemtechLib.General.Events.BooleanEventHandler (this.receiverViewControl1_AgcAutoRefChanged); " is 143.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.AgcRefLevelChanged += new SemtechLib.General.Events.Int32EventHandler (this.receiverViewControl1_AgcRefLevelChanged); " is 143.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.AgcSnrMarginChanged += new SemtechLib.General.Events.ByteEventHandler (this.receiverViewControl1_AgcSnrMarginChanged); " is 144.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.AgcStepChanged += new SemtechLib.Devices.SX1231.Events.AgcStepEventHandler (this.receiverViewControl1_AgcStepChanged); " is 144.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.AutoRxRestartOnChanged += new SemtechLib.General.Events.BooleanEventHandler (this.receiverViewControl1_AutoRxRestartOnChanged); " is 153.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.DagcOnChanged += new SemtechLib.General.Events.BooleanEventHandler (this.receiverViewControl1_DagcOnChanged); " is 135.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.DccFreqChanged += new SemtechLib.General.Events.DecimalEventHandler (this.receiverViewControl1_DccFreqChanged); " is 137.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.DocumentationChanged += new SemtechLib.General.Interfaces.DocumentationChangedEventHandler (this.receiverViewControl1_DocumentationChanged); " is 166.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.FastRxChanged += new SemtechLib.General.Events.BooleanEventHandler (this.receiverViewControl1_FastRxChanged); " is 135.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.LnaGainChanged += new SemtechLib.Devices.SX1231.Events.LnaGainEventHandler (this.receiverViewControl1_LnaGainChanged); " is 144.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.LnaLowPowerOnChanged += new SemtechLib.General.Events.BooleanEventHandler (this.receiverViewControl1_LnaLowPowerOnChanged); " is 149.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.LnaZinChanged += new SemtechLib.Devices.SX1231.Events.LnaZinEventHandler (this.receiverViewControl1_LnaZinChanged); " is 141.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.LowBetaAfcOffsetChanged += new SemtechLib.General.Events.DecimalEventHandler (this.receiverViewControl1_LowBetaAfcOffsetChanged); " is 155.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.OokAverageThreshFiltChanged += new SemtechLib.Devices.SX1231.Events.OokAverageThreshFiltEventHandler (this.receiverViewControl1_OokAverageThreshFiltChanged); " is 183.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.OokFixedThreshChanged += new SemtechLib.General.Events.ByteEventHandler (this.receiverViewControl1_OokFixedThreshChanged); " is 148.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.OokPeakThreshDecChanged += new SemtechLib.Devices.SX1231.Events.OokPeakThreshDecEventHandler (this.receiverViewControl1_OokPeakThreshDecChanged); " is 171.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.OokPeakThreshStepChanged += new SemtechLib.General.Events.DecimalEventHandler (this.receiverViewControl1_OokPeakThreshStepChanged); " is 157.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.OokThreshTypeChanged += new SemtechLib.Devices.SX1231.Events.OokThreshTypeEventHandler (this.receiverViewControl1_OokThreshTypeChanged); " is 162.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.RssiAutoThreshChanged += new SemtechLib.General.Events.BooleanEventHandler (this.receiverViewControl1_RssiAutoThreshChanged); " is 151.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.RssiThreshChanged += new SemtechLib.General.Events.DecimalEventHandler (this.receiverViewControl1_RssiThreshChanged); " is 143.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.RxBwChanged += new SemtechLib.General.Events.DecimalEventHandler (this.receiverViewControl1_RxBwChanged); " is 131.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.SensitivityBoostOnChanged += new SemtechLib.General.Events.BooleanEventHandler (this.receiverViewControl1_SensitivityBoostOnChanged); " is 159.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.TimeoutRssiThreshChanged += new SemtechLib.General.Events.DecimalEventHandler (this.receiverViewControl1_TimeoutRssiThreshChanged); " is 157.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.receiverViewControl1.TimeoutRxStartChanged += new SemtechLib.General.Events.DecimalEventHandler (this.receiverViewControl1_TimeoutRxStartChanged); " is 151.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.irqMapViewControl1.ClockOutChanged += new SemtechLib.Devices.SX1231.Events.ClockOutEventHandler (this.irqMapViewControl1_ClockOutChanged); " is 143.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.irqMapViewControl1.DioMappingChanged += new SemtechLib.Devices.SX1231.Events.DioMappingEventHandler (this.irqMapViewControl1_DioMappingChanged); " is 149.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.irqMapViewControl1.DocumentationChanged += new SemtechLib.General.Interfaces.DocumentationChangedEventHandler (this.irqMapViewControl1_DocumentationChanged); " is 162.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.FifoFillCondition = SemtechLib.Devices.SX1231.Enumerations.FifoFillConditionEnum.OnSyncAddressIrq; " is 122.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.AddressFilteringChanged += new SemtechLib.Devices.SX1231.Events.AddressFilteringEventHandler (this.packetHandlerView1_AddressFilteringChanged); " is 167.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.AesKeyChanged += new SemtechLib.General.Events.ByteArrayEventHandler (this.packetHandlerView1_AesKeyChanged); " is 133.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.AesOnChanged += new SemtechLib.General.Events.BooleanEventHandler (this.packetHandlerView1_AesOnChanged); " is 129.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.BroadcastAddressChanged += new SemtechLib.General.Events.ByteEventHandler (this.packetHandlerView1_BroadcastAddressChanged); " is 148.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.CrcAutoClearOffChanged += new SemtechLib.General.Events.BooleanEventHandler (this.packetHandlerView1_CrcAutoClearOffChanged); " is 149.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.CrcOnChanged += new SemtechLib.General.Events.BooleanEventHandler (this.packetHandlerView1_CrcOnChanged); " is 129.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.DcFreeChanged += new SemtechLib.Devices.SX1231.Events.DcFreeEventHandler (this.packetHandlerView1_DcFreeChanged); " is 137.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.DocumentationChanged += new SemtechLib.General.Interfaces.DocumentationChangedEventHandler (this.packetHandlerView1_DocumentationChanged); " is 162.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.EnterConditionChanged += new SemtechLib.Devices.SX1231.Events.EnterConditionEventHandler (this.packetHandlerView1_EnterConditionChanged); " is 161.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.ExitConditionChanged += new SemtechLib.Devices.SX1231.Events.ExitConditionEventHandler (this.packetHandlerView1_ExitConditionChanged); " is 158.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.FifoFillConditionChanged += new SemtechLib.Devices.SX1231.Events.FifoFillConditionEventHandler (this.packetHandlerView1_FifoFillConditionChanged); " is 170.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.FifoThresholdChanged += new SemtechLib.General.Events.ByteEventHandler (this.packetHandlerView1_FifoThresholdChanged); " is 142.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.IntermediateModeChanged += new SemtechLib.Devices.SX1231.Events.IntermediateModeEventHandler (this.packetHandlerView1_IntermediateModeChanged); " is 167.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.InterPacketRxDelayChanged += new SemtechLib.General.Events.Int32EventHandler (this.packetHandlerView1_InterPacketRxDelayChanged); " is 153.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.MaxPacketNumberChanged += new SemtechLib.General.Events.Int32EventHandler (this.packetHandlerView1_MaxPacketNumberChanged); " is 147.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.MessageChanged += new SemtechLib.General.Events.ByteArrayEventHandler (this.packetHandlerView1_MessageChanged); " is 135.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.MessageLengthChanged += new SemtechLib.General.Events.Int32EventHandler (this.packetHandlerView1_MessageLengthChanged); " is 143.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.NodeAddressChanged += new SemtechLib.General.Events.ByteEventHandler (this.packetHandlerView1_NodeAddressChanged); " is 138.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.PacketFormatChanged += new SemtechLib.Devices.SX1231.Events.PacketFormatEventHandler (this.packetHandlerView1_PacketFormatChanged); " is 155.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.PacketHandlerLogEnableChanged += new SemtechLib.General.Events.BooleanEventHandler (this.packetHandlerView1_PacketHandlerLogEnableChanged); " is 163.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.PayloadLengthChanged += new SemtechLib.General.Events.ByteEventHandler (this.packetHandlerView1_PayloadLengthChanged); " is 142.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.PreambleSizeChanged += new SemtechLib.General.Events.Int32EventHandler (this.packetHandlerView1_PreambleSizeChanged); " is 141.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.StartStopChanged += new SemtechLib.General.Events.BooleanEventHandler (this.packetHandlerView1_StartStopChanged); " is 137.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.SyncOnChanged += new SemtechLib.General.Events.BooleanEventHandler (this.packetHandlerView1_SyncOnChanged); " is 131.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.SyncSizeChanged += new SemtechLib.General.Events.ByteEventHandler (this.packetHandlerView1_SyncSizeChanged); " is 132.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.SyncTolChanged += new SemtechLib.General.Events.ByteEventHandler (this.packetHandlerView1_SyncTolChanged); " is 130.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.SyncValueChanged += new SemtechLib.General.Events.ByteArrayEventHandler (this.packetHandlerView1_SyncValueChanged); " is 139.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.packetHandlerView1.TxStartConditionChanged += new SemtechLib.General.Events.BooleanEventHandler (this.packetHandlerView1_TxStartConditionChanged); " is 151.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.temperatureViewControl1.AdcLowPowerOnChanged += new SemtechLib.General.Events.BooleanEventHandler (this.temperatureViewControl1_AdcLowPowerOnChanged); " is 155.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.temperatureViewControl1.DocumentationChanged += new SemtechLib.General.Interfaces.DocumentationChangedEventHandler (this.temperatureViewControl1_DocumentationChanged); " is 172.
Long Statement,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The length of the statement  "	this.temperatureViewControl1.TempCalibrateChanged += new SemtechLib.General.Events.DecimalEventHandler (this.temperatureViewControl1_TempCalibrateChanged); " is 155.
Long Statement,SemtechLib.Devices.SX1231.Controls,SpectrumGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\SpectrumGraphControl.cs,CreateLineGraph,The length of the statement  "	SetupGraphPane (graphPane' title' xAxisTitle' yAxisTitle' xAxisTitleVisible' yAxisTitleVisible' xScaleVisible' yScaleVisible' xMajorGridVisible' xIsBetweenLabels' yMajorGridVisible' yIsBetweenLabels); " is 200.
Long Statement,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,tBox_Validating,The length of the statement  "		MessageBox.Show (exception.Message + "\rInput Format: Hex 0x" + num.ToString ("X02") + " - 0x" + num2.ToString ("X02")' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 181.
Long Statement,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAfcDccFreq_ValueChanged,The length of the statement  "	int num = (int)((Math.Log10 ((double)((4.0M * AfcRxBw) / (6.283185307179580M * AfcDccFreq))) / Math.Log10 (2.0)) - 2.0); " is 120.
Long Statement,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAfcDccFreq_ValueChanged,The length of the statement  "	int num2 = (int)((Math.Log10 ((double)((4.0M * AfcRxBw) / (6.283185307179580M * nudAfcDccFreq.Value))) / Math.Log10 (2.0)) - 2.0); " is 130.
Long Statement,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudDccFreq_ValueChanged,The length of the statement  "	int num2 = (int)((Math.Log10 ((double)((4.0M * RxBw) / (6.283185307179580M * nudDccFreq.Value))) / Math.Log10 (2.0)) - 2.0); " is 124.
Long Statement,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudRxFilterBw_ValueChanged,The length of the statement  "		SemtechLib.Devices.SX1231.SX1231.ComputeRxBwMantExp (frequencyXo' ModulationType' nudRxFilterBw.Value' ref mant' ref exp); " is 122.
Long Statement,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudRxFilterBwAfc_ValueChanged,The length of the statement  "		SemtechLib.Devices.SX1231.SX1231.ComputeRxBwMantExp (frequencyXo' ModulationType' nudRxFilterBwAfc.Value' ref mant' ref exp); " is 125.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,BitRateFdevCheck,The length of the statement  "			OnBitRateLimitStatusChanged (LimitCheckStatusEnum.OUT_OF_RANGE' "The bitrate is out of range.\nThe valid range is [" + num2.ToString () + "' " + num.ToString () + "]"); " is 168.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,BitRateFdevCheck,The length of the statement  "				OnFdevLimitStatusChanged (LimitCheckStatusEnum.OUT_OF_RANGE' "The frequency deviation is out of range.\nThe valid range is [600' 300000]"); " is 139.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,BitRateFdevCheck,The length of the statement  "				OnFdevLimitStatusChanged (LimitCheckStatusEnum.ERROR' "The single sided band width has been exceeded.\n Fdev + ( Bitrate / 2 ) > 500000 Hz"); " is 141.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,BitRateFdevCheck,The length of the statement  "					OnFdevLimitStatusChanged (LimitCheckStatusEnum.ERROR' "The modulation index is out of range.\nThe valid range is [0.5' 10]"); " is 125.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,FrequencyRfCheck,The length of the statement  "		if ((value >= 290000000M && value <= 340000000M) || (value >= 424000000M && value <= 510000000M) || (value >= 862000000M && value <= 1020000000M)) " is 146.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,FrequencyRfCheck,The length of the statement  "			OnFrequencyRfLimitStatusChanged (LimitCheckStatusEnum.OUT_OF_RANGE' "The RF frequency is out of range.\nThe valid ranges are:\n" + strArray2 [0] + "\n" + strArray2 [1] + "\n" + strArray2 [2]); " is 192.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The length of the statement  "				throw new Exception ("At line " + lineNumber.ToString () + ": A configuration line must start either by\n\"#\" for comments\nor a\n\"R\" for the register name."); " is 162.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The length of the statement  "					throw new Exception (string.Concat ("At line "' lineNumber.ToString ()' ": The number of columns is "' tokens.Length.ToString ()' " and it should be 4 or 2.")); " is 160.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The length of the statement  "				if (tokens [1] != "RegVersion" && (Version != "2.1" || (tokens [1] != "RegTestLna" && tokens [1] != "RegTestAfc" && tokens [1] != "RegTestDagc"))) { " is 148.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,PacketHandlerStart,The length of the statement  "				MessageBox.Show ("Message must be at least one byte long"' "SX1231SKB-PacketHandler"' MessageBoxButtons.OK' MessageBoxIcon.Hand); " is 129.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RcCalStart,The length of the statement  "			MessageBox.Show ("The chip must be in Standby mode in order to calibrate the RC oscillator!"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Hand); " is 146.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Save,The length of the statement  "			writer.WriteLine ("REG\t{0}\t0x{1}\t0x{2}"' m_registers [i].Name' m_registers [i].Address.ToString ("X02")' m_registers [i].Value.ToString ("X02")); " is 148.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcDccFreq,The length of the statement  "			m_registers ["RegAfcBw"].Value = (m_registers ["RegAfcBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((4.0M * AfcRxBw) / (6.283185307179580M * value))) / Math.Log10 (2.0)) - 2.0) << 5); " is 188.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetClockOut,The length of the statement  "			m_registers ["RegDioMapping2"].Value = (m_registers ["RegDioMapping2"].Value & 0xF8) | (uint)(value & ClockOutEnum.CLOCK_OUT_111); " is 130.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDccFreq,The length of the statement  "			m_registers ["RegRxBw"].Value = (m_registers ["RegRxBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((double)((4.0M * RxBw) / (6.283185307179580M * value)))) / Math.Log10 (2.0)) - 2.0) << 5); " is 193.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetFifoFillCondition,The length of the statement  "			m_registers ["RegSyncConfig"].Value = (m_registers ["RegSyncConfig"].Value & 0xBF) | (uint)(value == FifoFillConditionEnum.Allways ? 0x40 : 0); " is 143.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenCriteria,The length of the statement  "			m_registers ["RegListen1"].Value = (m_registers ["RegListen1"].Value & 0xF7) | (uint)(value == ListenCriteriaEnum.RssiThresh ? 0 : 8); " is 134.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokPeakThreshStep,The length of the statement  "			m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0xC7) | (((uint)Array.IndexOf<decimal> (OoPeakThreshStepTable' value) & 7) << 3); " is 152.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetPacketFormat,The length of the statement  "			m_registers ["RegPacketConfig1"].Value = (m_registers ["RegPacketConfig1"].Value & 0x7F) | (uint)(value == PacketFormatEnum.Variable ? 0x80 : 0); " is 145.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetTimeoutRssiThresh,The length of the statement  "			m_registers ["RegRxTimeout2"].Value = (uint)Math.Round ((decimal)((value / 1000M) / (16M / BitRate))' MidpointRounding.AwayFromZero); " is 133.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetTimeoutRxStart,The length of the statement  "			m_registers ["RegRxTimeout1"].Value = (uint)Math.Round ((decimal)((value / 1000M) / (16M / BitRate))' MidpointRounding.AwayFromZero); " is 133.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The length of the statement  "		FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep; " is 149.
Long Statement,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The length of the statement  "		m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq; " is 132.
Long Statement,SemtechLib.Devices.SX1231.General,PacketLog,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\PacketLog.cs,GenerateFileHeader,The length of the statement  "	this.streamWriter.WriteLine ("#\tSX1231 packet log generated the " + DateTime.Now.ToShortDateString () + " at " + DateTime.Now.ToShortTimeString ()); " is 149.
Long Statement,SemtechLib.Devices.SX1231.General,PacketLog,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\PacketLog.cs,Start,The length of the statement  "		this.fileStream = new FileStream (this.path + @"\" + this.fileName' FileMode.Create' FileAccess.ReadWrite' FileShare.Read); " is 123.
Long Statement,SemtechLib.Devices.SX1231.General,PacketLog,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\PacketLog.cs,Update,The length of the statement  "			str = ((((str + DateTime.Now.ToString ("HH:mm:ss.fff"' this.ci) + "\t") + ((this.sx1231.Mode == OperatingModeEnum.Tx) ? "Tx\t" : ((this.sx1231.Mode == OperatingModeEnum.Rx) ? "Rx\t" : "\t")) + ((this.sx1231.Mode == OperatingModeEnum.Rx) ? (this.sx1231.Packet.Rssi.ToString ("F1") + "\t") : "\t")) + this.maxPacketNumber.ToString () + "\t") + this.packetNumber.ToString () + "\t") + this.sx1231.Packet.PreambleSize.ToString () + "\t"; " is 433.
Long Statement,SemtechLib.Devices.SX1231.General,PacketLog,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\PacketLog.cs,Update,The length of the statement  "				str = str + ((this.sx1231.Packet.AddressFiltering != AddressFilteringEnum.OFF) ? this.sx1231.Packet.NodeAddressRx.ToString ("X02") : ""); " is 137.
Long Statement,SemtechLib.Devices.SX1231.General,PacketLog,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\PacketLog.cs,Update,The length of the statement  "				str = str + ((this.sx1231.Packet.AddressFiltering != AddressFilteringEnum.OFF) ? this.sx1231.Packet.NodeAddress.ToString ("X02") : ""); " is 135.
Long Statement,SemtechLib.Devices.SX1231.General,PacketLog,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\PacketLog.cs,Update,The length of the statement  "			str = str + (this.sx1231.Packet.CrcOn ? (((this.sx1231.Packet.Crc >> 8)).ToString ("X02") + "-" + ((this.sx1231.Packet.Crc & 0xff)).ToString ("X02") + "\t") : "\t"); " is 165.
Long Statement,SemtechLib.Devices.SX1231.General,MaskValidationType,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\MaskValidationType.cs,doParsing,The length of the statement  "		throw new ArgumentException (string.Format (CultureInfo.CurrentCulture' "The provided string {0} is not valid"' new object[] { " is 126.
Long Statement,SemtechLib.Devices.SX1231.General,Packet,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\Packet.cs,GetSaveData,The length of the statement  "	str = (((str + ";") + ((this.AddressFiltering != AddressFilteringEnum.OFF) ? 1.ToString () : 0.ToString ()) + ";") + this.payloadLength.ToString () + ";") + this.nodeAddress.ToString () + ";"; " is 192.
Long Statement,SemtechLib.Devices.SX1231.General,Packet,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\Packet.cs,UpdatePayloadLengthMaxMin,The length of the statement  "	this.maxLengthIndex = (byte)(this.maxLengthIndex | ((this.PacketFormat == PacketFormatEnum.Variable) ? ((byte)2) : ((byte)0))); " is 127.
Long Statement,SemtechLib.Devices.SX1231.General,Packet,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\Packet.cs,UpdatePayloadLengthMaxMin,The length of the statement  "	this.maxLengthIndex = (byte)(this.maxLengthIndex | ((this.AddressFiltering != AddressFilteringEnum.OFF) ? ((byte)1) : ((byte)0))); " is 130.
Long Statement,SemtechLib.Devices.SX1231.General,DataLog,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\DataLog.cs,GenerateFileHeader,The length of the statement  "	this.streamWriter.WriteLine ("#\tSX1231 data log generated the " + DateTime.Now.ToShortDateString () + " at " + DateTime.Now.ToShortTimeString ()); " is 147.
Long Statement,SemtechLib.Devices.SX1231.General,DataLog,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\DataLog.cs,Start,The length of the statement  "		this.fileStream = new FileStream (this.path + @"\" + this.fileName' FileMode.Create' FileAccess.ReadWrite' FileShare.Read); " is 123.
Long Statement,SemtechLib.Devices.SX1231.General,DataLog,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\DataLog.cs,Update,The length of the statement  "				str = str2 + DateTime.Now.ToString ("HH:mm:ss.fff"' this.ci) + "\t" + this.sx1231.RfPaRssiValue.ToString ("F1") + "\t" + this.sx1231.RfIoRssiValue.ToString ("F1"); " is 163.
Complex Conditional,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,IsFormLocatedInScreen,The conditional expression  "((frm.Left < screens [i].WorkingArea.Left) || (frm.Top < screens [i].WorkingArea.Top)) || ((frm.Left > screens [i].WorkingArea.Right) || (frm.Top > screens [i].WorkingArea.Bottom))"  is complex.
Complex Conditional,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,log_PropertyChanged,The conditional expression  "((((str = e.PropertyName) != null) && (str != "Path")) && (str != "FileName")) && (str == "MaxSamples")"  is complex.
Complex Conditional,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,IsFormLocatedInScreen,The conditional expression  "((frm.Left < screens [i].WorkingArea.Left) || (frm.Top < screens [i].WorkingArea.Top)) || ((frm.Left > screens [i].WorkingArea.Right) || (frm.Top > screens [i].WorkingArea.Bottom))"  is complex.
Complex Conditional,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,IsFormLocatedInScreen,The conditional expression  "((frm.Left < screens [i].WorkingArea.Left) || (frm.Top < screens [i].WorkingArea.Top)) || ((frm.Left > screens [i].WorkingArea.Right) || (frm.Top > screens [i].WorkingArea.Bottom))"  is complex.
Complex Conditional,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,log_PropertyChanged,The conditional expression  "((((str = e.PropertyName) != null) && (str != "Path")) && (str != "FileName")) && (str == "MaxSamples")"  is complex.
Complex Conditional,SemtechLib.Devices.SX1231.Forms,RegistersForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RegistersForm.cs,IsFormLocatedInScreen,The conditional expression  "((frm.Left < screens [i].WorkingArea.Left) || (frm.Top < screens [i].WorkingArea.Top)) || ((frm.Left > screens [i].WorkingArea.Right) || (frm.Top > screens [i].WorkingArea.Bottom))"  is complex.
Complex Conditional,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,control_MouseEnter,The conditional expression  "((sender == pnlAddressFiltering) || (sender == rBtnAddressFilteringOff)) || ((sender == rBtnAddressFilteringNode) || (sender == rBtnAddressFilteringNodeBroadcast))"  is complex.
Complex Conditional,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,control_MouseEnter,The conditional expression  "((sender == pnlDcFree) || (sender == rBtnDcFreeOff)) || ((sender == rBtnDcFreeManchester) || (sender == rBtnDcFreeWhitening))"  is complex.
Complex Conditional,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,tBoxAesKey_KeyDown,The conditional expression  "e.Shift || e.Control || Uri.IsHexDigit ((char)e.KeyData) || (e.KeyData >= Keys.NumPad0 && e.KeyData <= Keys.NumPad9) || e.KeyData == Keys.Back || e.KeyData == Keys.Delete || e.KeyData == Keys.Left || e.KeyData == Keys.Right"  is complex.
Complex Conditional,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,tBoxSyncValue_KeyDown,The conditional expression  "(((e.Shift || e.Control) || Uri.IsHexDigit ((char)((ushort)e.KeyData))) || ((e.KeyData >= Keys.NumPad0) && (e.KeyData <= Keys.NumPad9))) || (((e.KeyData == Keys.Back) || (e.KeyData == Keys.Delete)) || ((e.KeyData == Keys.Left) || (e.KeyData == Keys.Right)))"  is complex.
Complex Conditional,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,FrequencyRfCheck,The conditional expression  "(value >= 290000000M && value <= 340000000M) || (value >= 424000000M && value <= 510000000M) || (value >= 862000000M && value <= 1020000000M)"  is complex.
Complex Conditional,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The conditional expression  "tokens [1] != "RegVersion" && (Version != "2.1" || (tokens [1] != "RegTestLna" && tokens [1] != "RegTestAfc" && tokens [1] != "RegTestDagc"))"  is complex.
Complex Conditional,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetTempMeasStart,The conditional expression  "(calibrating || TempCalDone) && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))"  is complex.
Empty Catch Block,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,tBox_TextChanged,The method has an empty catch block.
Empty Catch Block,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,RssiAnalyserForm_FormClosed,The method has an empty catch block.
Empty Catch Block,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,SpectrumAnalyserForm_FormClosed,The method has an empty catch block.
Empty Catch Block,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,PacketLogForm_FormClosed,The method has an empty catch block.
Empty Catch Block,SemtechLib.Devices.SX1231.Forms,RegistersForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RegistersForm.cs,RegistersForm_FormClosed,The method has an empty catch block.
Empty Catch Block,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,btnTempCalibrate_Click,The method has an empty catch block.
Empty Catch Block,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,tBox_TextChanged,The method has an empty catch block.
Empty Catch Block,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The method has an empty catch block.
Empty Catch Block,SemtechLib.Devices.SX1231.General,PacketLog,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\PacketLog.cs,Stop,The method has an empty catch block.
Empty Catch Block,SemtechLib.Devices.SX1231.General,DataLog,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\DataLog.cs,Stop,The method has an empty catch block.
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.tsLblStatus.Size = new Size (11' 0x11);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.Location = new Point (12' 0x76);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlRfPaSwitchSel.Location = new Point (70' 0x2f);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlRfPaSwitchSel.Size = new Size (20' 0x48);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlRfPaSwitchSel.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchPaIo.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchPaIo.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchPaIo.MinimumSize = new Size (0' 30);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchPaIo.Size = new Size (14' 30);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchPaIo.Size = new Size (14' 30);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchIoPa.Location = new Point (3' 0x27);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchIoPa.Margin = new Padding (3' 4' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchIoPa.Margin = new Padding (3' 4' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchIoPa.Margin = new Padding (3' 4' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchIoPa.Margin = new Padding (3' 4' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchIoPa.MinimumSize = new Size (0' 30);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchIoPa.Size = new Size (14' 30);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchIoPa.Size = new Size (14' 30);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label44.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label44.Size = new Size (0x16' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new Point (0x60' 50);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new Size (0x16' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 15;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label34.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label34.Size = new Size (0x19' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label34.TabIndex = 20;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label32.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label32.Size = new Size (0x20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label43.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label43.Size = new Size (0x19' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new Size (0x16' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label35.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label35.Size = new Size (0x26' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label35.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label37.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label37.Size = new Size (0x16' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label37.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label42.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label42.Size = new Size (0x29' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label42.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label33.Location = new Point (0xc2' 50);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label33.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label33.Size = new Size (0x19' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label33.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label38.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label38.Size = new Size (0x40' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label38.TabIndex = 9;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label36.Location = new Point (0xe1' 50);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label36.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label36.Size = new Size (0x29' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label36.TabIndex = 13;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label41.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label41.Size = new Size (0x26' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label41.TabIndex = 10;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label31.Location = new Point (0x7c' 50);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label31.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label31.Size = new Size (0x40' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label31.TabIndex = 11;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label39.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label39.Size = new Size (0x19' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label39.TabIndex = 12;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label40.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label40.Size = new Size (0x20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label40.TabIndex = 14;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new Point (0x2d' 130);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new Point (6' 130);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new Point (6' 130);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new Size (0x26' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new Point (6' 0x4d);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new Size (0x36' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new Point (6' 0x18);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new Size (0x2a' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlRfPaSwitchEnable.Location = new Point (70' 0x13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlRfPaSwitchEnable.Size = new Size (170' 0x17);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchAuto.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchAuto.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchManual.Location = new Point (0x38' 2);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchManual.Size = new Size (60' 0x11);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRfPaSwitchOff.Location = new Point (0x7a' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new Point (12' 12);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new Point (12' 12);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new Size (0x127' 100);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.btnRead.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.tlRegisters.ColumnCount = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.tlRegisters.RowCount = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.lblAddress.Location = new Point (4' 1);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.lblAddress.Size = new Size (0x41' 20);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.lblDataWrite.Size = new Size (0x41' 20);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.tBoxRegAddress.MaxLength = 4;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.tBoxRegAddress.Size = new Size (0x47' 20);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.tBoxRegAddress.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.tBoxRegValue.MaxLength = 4;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.tBoxRegValue.Size = new Size (0x47' 20);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: this.tBoxRegValue.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,InitializeComponent,The following statement contains a magic number: base.ClientSize = new Size (0x13f' 320);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName != null) {  	if (!(propertyName == "Mode") && !(propertyName == "PaMode")) {  		if (!(propertyName == "RfPaSwitchSel")) {  			if (propertyName == "RfPaSwitchEnabled") {  				this.rBtnRfPaSwitchAuto.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  				this.rBtnRfPaSwitchManual.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  				this.rBtnRfPaSwitchOff.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  				switch (this.sx1231.RfPaSwitchEnabled) {  				case 0:  					this.rBtnRfPaSwitchAuto.Checked = false;  					this.rBtnRfPaSwitchManual.Checked = false;  					this.rBtnRfPaSwitchOff.Checked = true;  					break;  				case 1:  					this.rBtnRfPaSwitchAuto.Checked = false;  					this.rBtnRfPaSwitchManual.Checked = true;  					this.rBtnRfPaSwitchOff.Checked = false;  					break;  				case 2:  					this.rBtnRfPaSwitchAuto.Checked = true;  					this.rBtnRfPaSwitchManual.Checked = false;  					this.rBtnRfPaSwitchOff.Checked = false;  					break;  				}  				this.pnlRfPaSwitchSel.Enabled = this.rBtnRfPaSwitchManual.Checked;  				this.rBtnRfPaSwitchAuto.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  				this.rBtnRfPaSwitchManual.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  				this.rBtnRfPaSwitchOff.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  			}  			return;  		}  	}  	else {  		this.UpdatePaSwitchSelCheck ();  		return;  	}  	this.rBtnRfPaSwitchPaIo.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchSel_CheckedChanged);  	this.rBtnRfPaSwitchIoPa.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchSel_CheckedChanged);  	if (this.sx1231.RfPaSwitchEnabled != 2) {  		this.UpdatePaSwitchSelCheck ();  		switch (this.sx1231.RfPaSwitchSel) {  		case RfPaSwitchSelEnum.RF_IO_RFIO:  			this.rBtnRfPaSwitchPaIo.Checked = true;  			this.rBtnRfPaSwitchIoPa.Checked = false;  			break;  		case RfPaSwitchSelEnum.RF_IO_PA_BOOST:  			this.rBtnRfPaSwitchPaIo.Checked = false;  			this.rBtnRfPaSwitchIoPa.Checked = true;  			break;  		}  	}  	this.rBtnRfPaSwitchPaIo.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchSel_CheckedChanged);  	this.rBtnRfPaSwitchIoPa.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchSel_CheckedChanged);  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName != null) {  	if (!(propertyName == "Mode") && !(propertyName == "PaMode")) {  		if (!(propertyName == "RfPaSwitchSel")) {  			if (propertyName == "RfPaSwitchEnabled") {  				this.rBtnRfPaSwitchAuto.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  				this.rBtnRfPaSwitchManual.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  				this.rBtnRfPaSwitchOff.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  				switch (this.sx1231.RfPaSwitchEnabled) {  				case 0:  					this.rBtnRfPaSwitchAuto.Checked = false;  					this.rBtnRfPaSwitchManual.Checked = false;  					this.rBtnRfPaSwitchOff.Checked = true;  					break;  				case 1:  					this.rBtnRfPaSwitchAuto.Checked = false;  					this.rBtnRfPaSwitchManual.Checked = true;  					this.rBtnRfPaSwitchOff.Checked = false;  					break;  				case 2:  					this.rBtnRfPaSwitchAuto.Checked = true;  					this.rBtnRfPaSwitchManual.Checked = false;  					this.rBtnRfPaSwitchOff.Checked = false;  					break;  				}  				this.pnlRfPaSwitchSel.Enabled = this.rBtnRfPaSwitchManual.Checked;  				this.rBtnRfPaSwitchAuto.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  				this.rBtnRfPaSwitchManual.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  				this.rBtnRfPaSwitchOff.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  			}  			return;  		}  	}  	else {  		this.UpdatePaSwitchSelCheck ();  		return;  	}  	this.rBtnRfPaSwitchPaIo.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchSel_CheckedChanged);  	this.rBtnRfPaSwitchIoPa.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchSel_CheckedChanged);  	if (this.sx1231.RfPaSwitchEnabled != 2) {  		this.UpdatePaSwitchSelCheck ();  		switch (this.sx1231.RfPaSwitchSel) {  		case RfPaSwitchSelEnum.RF_IO_RFIO:  			this.rBtnRfPaSwitchPaIo.Checked = true;  			this.rBtnRfPaSwitchIoPa.Checked = false;  			break;  		case RfPaSwitchSelEnum.RF_IO_PA_BOOST:  			this.rBtnRfPaSwitchPaIo.Checked = false;  			this.rBtnRfPaSwitchIoPa.Checked = true;  			break;  		}  	}  	this.rBtnRfPaSwitchPaIo.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchSel_CheckedChanged);  	this.rBtnRfPaSwitchIoPa.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchSel_CheckedChanged);  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (!(propertyName == "Mode") && !(propertyName == "PaMode")) {  	if (!(propertyName == "RfPaSwitchSel")) {  		if (propertyName == "RfPaSwitchEnabled") {  			this.rBtnRfPaSwitchAuto.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  			this.rBtnRfPaSwitchManual.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  			this.rBtnRfPaSwitchOff.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  			switch (this.sx1231.RfPaSwitchEnabled) {  			case 0:  				this.rBtnRfPaSwitchAuto.Checked = false;  				this.rBtnRfPaSwitchManual.Checked = false;  				this.rBtnRfPaSwitchOff.Checked = true;  				break;  			case 1:  				this.rBtnRfPaSwitchAuto.Checked = false;  				this.rBtnRfPaSwitchManual.Checked = true;  				this.rBtnRfPaSwitchOff.Checked = false;  				break;  			case 2:  				this.rBtnRfPaSwitchAuto.Checked = true;  				this.rBtnRfPaSwitchManual.Checked = false;  				this.rBtnRfPaSwitchOff.Checked = false;  				break;  			}  			this.pnlRfPaSwitchSel.Enabled = this.rBtnRfPaSwitchManual.Checked;  			this.rBtnRfPaSwitchAuto.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  			this.rBtnRfPaSwitchManual.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  			this.rBtnRfPaSwitchOff.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  		}  		return;  	}  }  else {  	this.UpdatePaSwitchSelCheck ();  	return;  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (!(propertyName == "RfPaSwitchSel")) {  	if (propertyName == "RfPaSwitchEnabled") {  		this.rBtnRfPaSwitchAuto.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  		this.rBtnRfPaSwitchManual.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  		this.rBtnRfPaSwitchOff.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  		switch (this.sx1231.RfPaSwitchEnabled) {  		case 0:  			this.rBtnRfPaSwitchAuto.Checked = false;  			this.rBtnRfPaSwitchManual.Checked = false;  			this.rBtnRfPaSwitchOff.Checked = true;  			break;  		case 1:  			this.rBtnRfPaSwitchAuto.Checked = false;  			this.rBtnRfPaSwitchManual.Checked = true;  			this.rBtnRfPaSwitchOff.Checked = false;  			break;  		case 2:  			this.rBtnRfPaSwitchAuto.Checked = true;  			this.rBtnRfPaSwitchManual.Checked = false;  			this.rBtnRfPaSwitchOff.Checked = false;  			break;  		}  		this.pnlRfPaSwitchSel.Enabled = this.rBtnRfPaSwitchManual.Checked;  		this.rBtnRfPaSwitchAuto.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  		this.rBtnRfPaSwitchManual.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  		this.rBtnRfPaSwitchOff.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  	}  	return;  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RfPaSwitchEnabled") {  	this.rBtnRfPaSwitchAuto.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  	this.rBtnRfPaSwitchManual.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  	this.rBtnRfPaSwitchOff.CheckedChanged -= new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  	switch (this.sx1231.RfPaSwitchEnabled) {  	case 0:  		this.rBtnRfPaSwitchAuto.Checked = false;  		this.rBtnRfPaSwitchManual.Checked = false;  		this.rBtnRfPaSwitchOff.Checked = true;  		break;  	case 1:  		this.rBtnRfPaSwitchAuto.Checked = false;  		this.rBtnRfPaSwitchManual.Checked = true;  		this.rBtnRfPaSwitchOff.Checked = false;  		break;  	case 2:  		this.rBtnRfPaSwitchAuto.Checked = true;  		this.rBtnRfPaSwitchManual.Checked = false;  		this.rBtnRfPaSwitchOff.Checked = false;  		break;  	}  	this.pnlRfPaSwitchSel.Enabled = this.rBtnRfPaSwitchManual.Checked;  	this.rBtnRfPaSwitchAuto.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  	this.rBtnRfPaSwitchManual.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  	this.rBtnRfPaSwitchOff.CheckedChanged += new EventHandler (this.rBtnRfPaSwitchEnable_CheckedChanged);  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: switch (this.sx1231.RfPaSwitchEnabled) {  case 0:  	this.rBtnRfPaSwitchAuto.Checked = false;  	this.rBtnRfPaSwitchManual.Checked = false;  	this.rBtnRfPaSwitchOff.Checked = true;  	break;  case 1:  	this.rBtnRfPaSwitchAuto.Checked = false;  	this.rBtnRfPaSwitchManual.Checked = true;  	this.rBtnRfPaSwitchOff.Checked = false;  	break;  case 2:  	this.rBtnRfPaSwitchAuto.Checked = true;  	this.rBtnRfPaSwitchManual.Checked = false;  	this.rBtnRfPaSwitchOff.Checked = false;  	break;  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (this.sx1231.RfPaSwitchEnabled != 2) {  	this.UpdatePaSwitchSelCheck ();  	switch (this.sx1231.RfPaSwitchSel) {  	case RfPaSwitchSelEnum.RF_IO_RFIO:  		this.rBtnRfPaSwitchPaIo.Checked = true;  		this.rBtnRfPaSwitchIoPa.Checked = false;  		break;  	case RfPaSwitchSelEnum.RF_IO_PA_BOOST:  		this.rBtnRfPaSwitchPaIo.Checked = false;  		this.rBtnRfPaSwitchIoPa.Checked = true;  		break;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,rBtnRfPaSwitchEnable_CheckedChanged,The following statement contains a magic number: if (this.rBtnRfPaSwitchAuto.Checked) {  	this.sx1231.RfPaSwitchEnabled = 2;  }  else if (this.rBtnRfPaSwitchManual.Checked) {  	this.sx1231.RfPaSwitchEnabled = 1;  }  else {  	this.sx1231.RfPaSwitchEnabled = 0;  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,rBtnRfPaSwitchEnable_CheckedChanged,The following statement contains a magic number: this.sx1231.RfPaSwitchEnabled = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,btnLogBrowseFile_Click,The following statement contains a magic number: try {  	this.sfLogSaveFileDlg.InitialDirectory = this.log.Path;  	this.sfLogSaveFileDlg.FileName = this.log.FileName;  	if (this.sfLogSaveFileDlg.ShowDialog () == DialogResult.OK) {  		string[] strArray = this.sfLogSaveFileDlg.FileName.Split (new char[] {  			'\\'  		});  		this.log.FileName = strArray [strArray.Length - 1];  		this.log.Path = "";  		int index = 0;  		while (index < (strArray.Length - 2)) {  			this.log.Path = this.log.Path + strArray [index] + @"\";  			index++;  		}  		this.log.Path = this.log.Path + strArray [index];  	}  }  catch (Exception exception) {  	this.OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,btnLogBrowseFile_Click,The following statement contains a magic number: if (this.sfLogSaveFileDlg.ShowDialog () == DialogResult.OK) {  	string[] strArray = this.sfLogSaveFileDlg.FileName.Split (new char[] {  		'\\'  	});  	this.log.FileName = strArray [strArray.Length - 1];  	this.log.Path = "";  	int index = 0;  	while (index < (strArray.Length - 2)) {  		this.log.Path = this.log.Path + strArray [index] + @"\";  		index++;  	}  	this.log.Path = this.log.Path + strArray [index];  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,btnLogBrowseFile_Click,The following statement contains a magic number: while (index < (strArray.Length - 2)) {  	this.log.Path = this.log.Path + strArray [index] + @"\";  	index++;  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Location = new Point (9' 0xc4);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.btnLogBrowseFile.Location = new Point (15' 70);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.btnLogBrowseFile.Location = new Point (15' 70);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.btnLogBrowseFile.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.pBarLog.Location = new Point (15' 0x33);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.pBarLog.Size = new Size (0xb3' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.ColumnCount = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Location = new Point (15' 0x13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.tBoxLogMaxSamples.Location = new Point (0x5e' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.tBoxLogMaxSamples.Size = new Size (0x52' 20);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCommandsLogMaxSamples.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.cBtnLogOnOff.Location = new Point (0x77' 70);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.cBtnLogOnOff.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.panel3.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRssiAutoThreshOff.Location = new Point (50' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRssiAutoThreshOff.Location = new Point (50' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRssiAutoThreshOn.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.rBtnRssiAutoThreshOn.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new Point (6' 150);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new Point (6' 150);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new Size (0x69' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: bits [0] = 5;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: bits [3] = 0x10000;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: numArray3 [3] = -2147418112;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: numArray3 [3] = -2147418112;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.nudRssiThresh.Size = new Size (60' 20);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.nudRssiThresh.Size = new Size (60' 20);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.nudRssiThresh.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: numArray4 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: numArray4 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label55.Location = new Point (6' 0xab);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label55.Size = new Size (0x36' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label55.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new Point (6' 90);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new Point (6' 90);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new Size (0x52' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Margin = new Padding (3' 3' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Margin = new Padding (3' 3' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Margin = new Padding (3' 3' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new Size (0x19' 2);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new Point (6' 0x1d);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new Size (0x45' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new Size (0x19' 2);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new Point (6' 0x30);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new Size (0x42' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new Size (0x19' 2);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new Point (6' 0x43);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new Size (0x20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new Size (0x19' 2);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName != null) {  	if (!(propertyName == "RssiAutoThresh")) {  		if (propertyName == "RssiValue") {  			if (this.sx1231.RfPaSwitchEnabled == 0) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  			}  		}  		else if (propertyName == "RfPaSwitchEnabled") {  			this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  			this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  		}  		else if (propertyName == "RfPaRssiValue") {  			if (this.sx1231.RfPaSwitchEnabled == 1) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  				this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  			}  		}  		else if (propertyName == "RfIoRssiValue") {  			if (this.sx1231.RfPaSwitchEnabled != 0) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  				this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  			}  		}  		else if (propertyName == "RssiThresh") {  			if (!this.sx1231.RssiAutoThresh) {  				this.nudRssiThresh.Value = this.sx1231.RssiThresh;  			}  			else if (this.sx1231.AgcReference < -127) {  				this.nudRssiThresh.Value = -127.5M;  			}  			else {  				this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  			}  		}  	}  	else {  		this.rBtnRssiAutoThreshOn.Checked = this.sx1231.RssiAutoThresh;  		this.rBtnRssiAutoThreshOff.Checked = !this.sx1231.RssiAutoThresh;  		this.nudRssiThresh.Enabled = !this.sx1231.RssiAutoThresh;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName != null) {  	if (!(propertyName == "RssiAutoThresh")) {  		if (propertyName == "RssiValue") {  			if (this.sx1231.RfPaSwitchEnabled == 0) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  			}  		}  		else if (propertyName == "RfPaSwitchEnabled") {  			this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  			this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  		}  		else if (propertyName == "RfPaRssiValue") {  			if (this.sx1231.RfPaSwitchEnabled == 1) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  				this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  			}  		}  		else if (propertyName == "RfIoRssiValue") {  			if (this.sx1231.RfPaSwitchEnabled != 0) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  				this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  			}  		}  		else if (propertyName == "RssiThresh") {  			if (!this.sx1231.RssiAutoThresh) {  				this.nudRssiThresh.Value = this.sx1231.RssiThresh;  			}  			else if (this.sx1231.AgcReference < -127) {  				this.nudRssiThresh.Value = -127.5M;  			}  			else {  				this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  			}  		}  	}  	else {  		this.rBtnRssiAutoThreshOn.Checked = this.sx1231.RssiAutoThresh;  		this.rBtnRssiAutoThreshOff.Checked = !this.sx1231.RssiAutoThresh;  		this.nudRssiThresh.Enabled = !this.sx1231.RssiAutoThresh;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName != null) {  	if (!(propertyName == "RssiAutoThresh")) {  		if (propertyName == "RssiValue") {  			if (this.sx1231.RfPaSwitchEnabled == 0) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  			}  		}  		else if (propertyName == "RfPaSwitchEnabled") {  			this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  			this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  		}  		else if (propertyName == "RfPaRssiValue") {  			if (this.sx1231.RfPaSwitchEnabled == 1) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  				this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  			}  		}  		else if (propertyName == "RfIoRssiValue") {  			if (this.sx1231.RfPaSwitchEnabled != 0) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  				this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  			}  		}  		else if (propertyName == "RssiThresh") {  			if (!this.sx1231.RssiAutoThresh) {  				this.nudRssiThresh.Value = this.sx1231.RssiThresh;  			}  			else if (this.sx1231.AgcReference < -127) {  				this.nudRssiThresh.Value = -127.5M;  			}  			else {  				this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  			}  		}  	}  	else {  		this.rBtnRssiAutoThreshOn.Checked = this.sx1231.RssiAutoThresh;  		this.rBtnRssiAutoThreshOff.Checked = !this.sx1231.RssiAutoThresh;  		this.nudRssiThresh.Enabled = !this.sx1231.RssiAutoThresh;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName != null) {  	if (!(propertyName == "RssiAutoThresh")) {  		if (propertyName == "RssiValue") {  			if (this.sx1231.RfPaSwitchEnabled == 0) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  			}  		}  		else if (propertyName == "RfPaSwitchEnabled") {  			this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  			this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  		}  		else if (propertyName == "RfPaRssiValue") {  			if (this.sx1231.RfPaSwitchEnabled == 1) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  				this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  			}  		}  		else if (propertyName == "RfIoRssiValue") {  			if (this.sx1231.RfPaSwitchEnabled != 0) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  				this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  			}  		}  		else if (propertyName == "RssiThresh") {  			if (!this.sx1231.RssiAutoThresh) {  				this.nudRssiThresh.Value = this.sx1231.RssiThresh;  			}  			else if (this.sx1231.AgcReference < -127) {  				this.nudRssiThresh.Value = -127.5M;  			}  			else {  				this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  			}  		}  	}  	else {  		this.rBtnRssiAutoThreshOn.Checked = this.sx1231.RssiAutoThresh;  		this.rBtnRssiAutoThreshOff.Checked = !this.sx1231.RssiAutoThresh;  		this.nudRssiThresh.Enabled = !this.sx1231.RssiAutoThresh;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName != null) {  	if (!(propertyName == "RssiAutoThresh")) {  		if (propertyName == "RssiValue") {  			if (this.sx1231.RfPaSwitchEnabled == 0) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  			}  		}  		else if (propertyName == "RfPaSwitchEnabled") {  			this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  			this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  		}  		else if (propertyName == "RfPaRssiValue") {  			if (this.sx1231.RfPaSwitchEnabled == 1) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  				this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  			}  		}  		else if (propertyName == "RfIoRssiValue") {  			if (this.sx1231.RfPaSwitchEnabled != 0) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  				this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  			}  		}  		else if (propertyName == "RssiThresh") {  			if (!this.sx1231.RssiAutoThresh) {  				this.nudRssiThresh.Value = this.sx1231.RssiThresh;  			}  			else if (this.sx1231.AgcReference < -127) {  				this.nudRssiThresh.Value = -127.5M;  			}  			else {  				this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  			}  		}  	}  	else {  		this.rBtnRssiAutoThreshOn.Checked = this.sx1231.RssiAutoThresh;  		this.rBtnRssiAutoThreshOff.Checked = !this.sx1231.RssiAutoThresh;  		this.nudRssiThresh.Enabled = !this.sx1231.RssiAutoThresh;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName != null) {  	if (!(propertyName == "RssiAutoThresh")) {  		if (propertyName == "RssiValue") {  			if (this.sx1231.RfPaSwitchEnabled == 0) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  			}  		}  		else if (propertyName == "RfPaSwitchEnabled") {  			this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  			this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  			this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  		}  		else if (propertyName == "RfPaRssiValue") {  			if (this.sx1231.RfPaSwitchEnabled == 1) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  				this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  			}  		}  		else if (propertyName == "RfIoRssiValue") {  			if (this.sx1231.RfPaSwitchEnabled != 0) {  				this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  				this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  				this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  			}  		}  		else if (propertyName == "RssiThresh") {  			if (!this.sx1231.RssiAutoThresh) {  				this.nudRssiThresh.Value = this.sx1231.RssiThresh;  			}  			else if (this.sx1231.AgcReference < -127) {  				this.nudRssiThresh.Value = -127.5M;  			}  			else {  				this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  			}  		}  	}  	else {  		this.rBtnRssiAutoThreshOn.Checked = this.sx1231.RssiAutoThresh;  		this.rBtnRssiAutoThreshOff.Checked = !this.sx1231.RssiAutoThresh;  		this.nudRssiThresh.Enabled = !this.sx1231.RssiAutoThresh;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (!(propertyName == "RssiAutoThresh")) {  	if (propertyName == "RssiValue") {  		if (this.sx1231.RfPaSwitchEnabled == 0) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  		}  	}  	else if (propertyName == "RfPaSwitchEnabled") {  		this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  		this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	}  	else if (propertyName == "RfPaRssiValue") {  		if (this.sx1231.RfPaSwitchEnabled == 1) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  			this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  		}  	}  	else if (propertyName == "RfIoRssiValue") {  		if (this.sx1231.RfPaSwitchEnabled != 0) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  			this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  		}  	}  	else if (propertyName == "RssiThresh") {  		if (!this.sx1231.RssiAutoThresh) {  			this.nudRssiThresh.Value = this.sx1231.RssiThresh;  		}  		else if (this.sx1231.AgcReference < -127) {  			this.nudRssiThresh.Value = -127.5M;  		}  		else {  			this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  		}  	}  }  else {  	this.rBtnRssiAutoThreshOn.Checked = this.sx1231.RssiAutoThresh;  	this.rBtnRssiAutoThreshOff.Checked = !this.sx1231.RssiAutoThresh;  	this.nudRssiThresh.Enabled = !this.sx1231.RssiAutoThresh;  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (!(propertyName == "RssiAutoThresh")) {  	if (propertyName == "RssiValue") {  		if (this.sx1231.RfPaSwitchEnabled == 0) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  		}  	}  	else if (propertyName == "RfPaSwitchEnabled") {  		this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  		this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	}  	else if (propertyName == "RfPaRssiValue") {  		if (this.sx1231.RfPaSwitchEnabled == 1) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  			this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  		}  	}  	else if (propertyName == "RfIoRssiValue") {  		if (this.sx1231.RfPaSwitchEnabled != 0) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  			this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  		}  	}  	else if (propertyName == "RssiThresh") {  		if (!this.sx1231.RssiAutoThresh) {  			this.nudRssiThresh.Value = this.sx1231.RssiThresh;  		}  		else if (this.sx1231.AgcReference < -127) {  			this.nudRssiThresh.Value = -127.5M;  		}  		else {  			this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  		}  	}  }  else {  	this.rBtnRssiAutoThreshOn.Checked = this.sx1231.RssiAutoThresh;  	this.rBtnRssiAutoThreshOff.Checked = !this.sx1231.RssiAutoThresh;  	this.nudRssiThresh.Enabled = !this.sx1231.RssiAutoThresh;  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (!(propertyName == "RssiAutoThresh")) {  	if (propertyName == "RssiValue") {  		if (this.sx1231.RfPaSwitchEnabled == 0) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  		}  	}  	else if (propertyName == "RfPaSwitchEnabled") {  		this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  		this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	}  	else if (propertyName == "RfPaRssiValue") {  		if (this.sx1231.RfPaSwitchEnabled == 1) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  			this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  		}  	}  	else if (propertyName == "RfIoRssiValue") {  		if (this.sx1231.RfPaSwitchEnabled != 0) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  			this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  		}  	}  	else if (propertyName == "RssiThresh") {  		if (!this.sx1231.RssiAutoThresh) {  			this.nudRssiThresh.Value = this.sx1231.RssiThresh;  		}  		else if (this.sx1231.AgcReference < -127) {  			this.nudRssiThresh.Value = -127.5M;  		}  		else {  			this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  		}  	}  }  else {  	this.rBtnRssiAutoThreshOn.Checked = this.sx1231.RssiAutoThresh;  	this.rBtnRssiAutoThreshOff.Checked = !this.sx1231.RssiAutoThresh;  	this.nudRssiThresh.Enabled = !this.sx1231.RssiAutoThresh;  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (!(propertyName == "RssiAutoThresh")) {  	if (propertyName == "RssiValue") {  		if (this.sx1231.RfPaSwitchEnabled == 0) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  		}  	}  	else if (propertyName == "RfPaSwitchEnabled") {  		this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  		this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	}  	else if (propertyName == "RfPaRssiValue") {  		if (this.sx1231.RfPaSwitchEnabled == 1) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  			this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  		}  	}  	else if (propertyName == "RfIoRssiValue") {  		if (this.sx1231.RfPaSwitchEnabled != 0) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  			this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  		}  	}  	else if (propertyName == "RssiThresh") {  		if (!this.sx1231.RssiAutoThresh) {  			this.nudRssiThresh.Value = this.sx1231.RssiThresh;  		}  		else if (this.sx1231.AgcReference < -127) {  			this.nudRssiThresh.Value = -127.5M;  		}  		else {  			this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  		}  	}  }  else {  	this.rBtnRssiAutoThreshOn.Checked = this.sx1231.RssiAutoThresh;  	this.rBtnRssiAutoThreshOff.Checked = !this.sx1231.RssiAutoThresh;  	this.nudRssiThresh.Enabled = !this.sx1231.RssiAutoThresh;  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (!(propertyName == "RssiAutoThresh")) {  	if (propertyName == "RssiValue") {  		if (this.sx1231.RfPaSwitchEnabled == 0) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  		}  	}  	else if (propertyName == "RfPaSwitchEnabled") {  		this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  		this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	}  	else if (propertyName == "RfPaRssiValue") {  		if (this.sx1231.RfPaSwitchEnabled == 1) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  			this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  		}  	}  	else if (propertyName == "RfIoRssiValue") {  		if (this.sx1231.RfPaSwitchEnabled != 0) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  			this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  		}  	}  	else if (propertyName == "RssiThresh") {  		if (!this.sx1231.RssiAutoThresh) {  			this.nudRssiThresh.Value = this.sx1231.RssiThresh;  		}  		else if (this.sx1231.AgcReference < -127) {  			this.nudRssiThresh.Value = -127.5M;  		}  		else {  			this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  		}  	}  }  else {  	this.rBtnRssiAutoThreshOn.Checked = this.sx1231.RssiAutoThresh;  	this.rBtnRssiAutoThreshOff.Checked = !this.sx1231.RssiAutoThresh;  	this.nudRssiThresh.Enabled = !this.sx1231.RssiAutoThresh;  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (!(propertyName == "RssiAutoThresh")) {  	if (propertyName == "RssiValue") {  		if (this.sx1231.RfPaSwitchEnabled == 0) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  		}  	}  	else if (propertyName == "RfPaSwitchEnabled") {  		this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  		this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  		this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	}  	else if (propertyName == "RfPaRssiValue") {  		if (this.sx1231.RfPaSwitchEnabled == 1) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  			this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  		}  	}  	else if (propertyName == "RfIoRssiValue") {  		if (this.sx1231.RfPaSwitchEnabled != 0) {  			this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  			this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  			this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  		}  	}  	else if (propertyName == "RssiThresh") {  		if (!this.sx1231.RssiAutoThresh) {  			this.nudRssiThresh.Value = this.sx1231.RssiThresh;  		}  		else if (this.sx1231.AgcReference < -127) {  			this.nudRssiThresh.Value = -127.5M;  		}  		else {  			this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  		}  	}  }  else {  	this.rBtnRssiAutoThreshOn.Checked = this.sx1231.RssiAutoThresh;  	this.rBtnRssiAutoThreshOff.Checked = !this.sx1231.RssiAutoThresh;  	this.nudRssiThresh.Enabled = !this.sx1231.RssiAutoThresh;  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  	}  }  else if (propertyName == "RfPaSwitchEnabled") {  	this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  }  else if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  	}  }  else if (propertyName == "RfPaSwitchEnabled") {  	this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  }  else if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  	}  }  else if (propertyName == "RfPaSwitchEnabled") {  	this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  }  else if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  	}  }  else if (propertyName == "RfPaSwitchEnabled") {  	this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  }  else if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  	}  }  else if (propertyName == "RfPaSwitchEnabled") {  	this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  }  else if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  	}  }  else if (propertyName == "RfPaSwitchEnabled") {  	this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  }  else if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (this.sx1231.RfPaSwitchEnabled == 0) {  	this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  	this.graph.UpdateLineGraph (this.time' (double)this.sx1231.RssiValue);  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RfPaSwitchEnabled") {  	this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  }  else if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RfPaSwitchEnabled") {  	this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  }  else if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RfPaSwitchEnabled") {  	this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  }  else if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RfPaSwitchEnabled") {  	this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  }  else if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RfPaSwitchEnabled") {  	this.label9.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label7.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label5.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label4.Visible = this.sx1231.RfPaSwitchEnabled != 0;  	this.label2.Visible = this.sx1231.RfPaSwitchEnabled == 0;  	this.label8.Visible = this.sx1231.RfPaSwitchEnabled == 0;  }  else if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RfPaRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled == 1) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (this.sx1231.RfPaSwitchEnabled == 1) {  	this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  	this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  	this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (this.sx1231.RfPaSwitchEnabled == 1) {  	this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  	this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  	this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RfIoRssiValue") {  	if (this.sx1231.RfPaSwitchEnabled != 0) {  		this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  		this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  		this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  	}  }  else if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (this.sx1231.RfPaSwitchEnabled != 0) {  	this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  	this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  	this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (this.sx1231.RfPaSwitchEnabled != 0) {  	this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  	this.graph.UpdateLineGraph (1' this.time' (double)this.sx1231.RfPaRssiValue);  	this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: this.time = ((double)(Environment.TickCount - this.tickStart)) / 1000.0;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: this.graph.UpdateLineGraph (2' this.time' (double)this.sx1231.RfIoRssiValue);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (propertyName == "RssiThresh") {  	if (!this.sx1231.RssiAutoThresh) {  		this.nudRssiThresh.Value = this.sx1231.RssiThresh;  	}  	else if (this.sx1231.AgcReference < -127) {  		this.nudRssiThresh.Value = -127.5M;  	}  	else {  		this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (!this.sx1231.RssiAutoThresh) {  	this.nudRssiThresh.Value = this.sx1231.RssiThresh;  }  else if (this.sx1231.AgcReference < -127) {  	this.nudRssiThresh.Value = -127.5M;  }  else {  	this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,RssiAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RssiAnalyserForm.cs,OnSX1231PropertyChanged,The following statement contains a magic number: if (this.sx1231.AgcReference < -127) {  	this.nudRssiThresh.Value = -127.5M;  }  else {  	this.nudRssiThresh.Value = this.sx1231.AgcReference - this.sx1231.AgcSnrMargin;  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,TemperatureCalibrationForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TemperatureCalibrationForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new Point (12' 0x4d);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TemperatureCalibrationForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TemperatureCalibrationForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new Size (0x7d' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TemperatureCalibrationForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TemperatureCalibrationForm.cs,InitializeComponent,The following statement contains a magic number: numArray2 [0] = 40;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TemperatureCalibrationForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TemperatureCalibrationForm.cs,InitializeComponent,The following statement contains a magic number: numArray2 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TemperatureCalibrationForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TemperatureCalibrationForm.cs,InitializeComponent,The following statement contains a magic number: numArray2 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TemperatureCalibrationForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TemperatureCalibrationForm.cs,InitializeComponent,The following statement contains a magic number: this.nudTempRoom.Size = new Size (0x27' 20);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TemperatureCalibrationForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TemperatureCalibrationForm.cs,InitializeComponent,The following statement contains a magic number: this.nudTempRoom.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TemperatureCalibrationForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TemperatureCalibrationForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new Size (0x12' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TemperatureCalibrationForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TemperatureCalibrationForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Forms,TemperatureCalibrationForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TemperatureCalibrationForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new Point (13' 10);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TemperatureCalibrationForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TemperatureCalibrationForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new Point (13' 10);  
Magic Number,SemtechLib.Devices.SX1231.Forms,TemperatureCalibrationForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TemperatureCalibrationForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new Size (0xdf' 370);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.cBoxLanGainSelect.TabIndex = 10;  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.nudFreqCenter.Size = new Size (0x62' 20);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.nudFreqSpan.Size = new Size (0x62' 20);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.nudFreqSpan.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.nudChanBw.Size = new Size (0x62' 20);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.nudChanBw.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new Point (-2' 0x85);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new Size (0x23' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new Point (-2' 0x6b);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new Size (0x5b' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new Point (-2' 0xb9);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new Size (0x36' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 9;  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new Point (-2' 0x9f);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new Size (0x65' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new Size (0x22d' 370);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: base.ClientSize = new Size (780' 370);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,InitializeComponent,The following statement contains a magic number: base.ClientSize = new Size (780' 370);  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,UpdatePointsList,The following statement contains a magic number: for (int i = 0; i < this.sx1231.SpectrumNbFrequenciesMax; i++) {  	this.points.Add (new PointPair ((double)(this.sx1231.SpectrumFrequencyMin + (this.sx1231.SpectrumFrequencyStep * i))' -127.5));  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,UpdatePointsList,The following statement contains a magic number: this.points.Add (new PointPair ((double)(this.sx1231.SpectrumFrequencyMin + (this.sx1231.SpectrumFrequencyStep * i))' -127.5));  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,btnLogBrowseFile_Click,The following statement contains a magic number: try {  	this.sfLogSaveFileDlg.InitialDirectory = this.log.Path;  	this.sfLogSaveFileDlg.FileName = this.log.FileName;  	if (this.sfLogSaveFileDlg.ShowDialog () == DialogResult.OK) {  		string[] strArray = this.sfLogSaveFileDlg.FileName.Split (new char[] {  			'\\'  		});  		this.log.FileName = strArray [strArray.Length - 1];  		this.log.Path = "";  		int index = 0;  		while (index < (strArray.Length - 2)) {  			this.log.Path = this.log.Path + strArray [index] + @"\";  			index++;  		}  		this.log.Path = this.log.Path + strArray [index];  	}  }  catch (Exception exception) {  	this.OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,btnLogBrowseFile_Click,The following statement contains a magic number: if (this.sfLogSaveFileDlg.ShowDialog () == DialogResult.OK) {  	string[] strArray = this.sfLogSaveFileDlg.FileName.Split (new char[] {  		'\\'  	});  	this.log.FileName = strArray [strArray.Length - 1];  	this.log.Path = "";  	int index = 0;  	while (index < (strArray.Length - 2)) {  		this.log.Path = this.log.Path + strArray [index] + @"\";  		index++;  	}  	this.log.Path = this.log.Path + strArray [index];  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,btnLogBrowseFile_Click,The following statement contains a magic number: while (index < (strArray.Length - 2)) {  	this.log.Path = this.log.Path + strArray [index] + @"\";  	index++;  }  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Location = new Point (12' 12);  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Location = new Point (12' 12);  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.btnLogBrowseFile.Location = new Point (15' 70);  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.btnLogBrowseFile.Location = new Point (15' 70);  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.btnLogBrowseFile.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.pBarLog.Location = new Point (15' 0x33);  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.pBarLog.Size = new Size (0xb3' 13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.ColumnCount = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Location = new Point (15' 0x13);  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.tBoxLogMaxSamples.Location = new Point (0x5e' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.tBoxLogMaxSamples.Size = new Size (0x52' 20);  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCommandsLogMaxSamples.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.cBtnLogOnOff.Location = new Point (0x77' 70);  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.cBtnLogOnOff.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Forms,PacketLogForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\PacketLogForm.cs,InitializeComponent,The following statement contains a magic number: base.Opacity = 0.9;  
Magic Number,SemtechLib.Devices.SX1231.Forms,RegistersForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RegistersForm.cs,InitializeComponent,The following statement contains a magic number: this.ssLblStatus.Size = new Size (11' 0x11);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RegistersForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RegistersForm.cs,InitializeComponent,The following statement contains a magic number: this.registerTableControl1.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RegistersForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RegistersForm.cs,InitializeComponent,The following statement contains a magic number: this.registerTableControl1.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Forms,RegistersForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\RegistersForm.cs,InitializeComponent,The following statement contains a magic number: this.registerTableControl1.Split = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: btnCalibrate.Location = new Point (0x25' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: lblMeasuring.Size = new Size (0x3b' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: pnlAdcLowPower.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAdcLowPowerOff.Location = new Point (0x36' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAdcLowPowerOn.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAdcLowPowerOn.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: label3.Size = new Size (0x53' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: label3.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: thermometerCtrl.LargeTicFreq = 10;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: thermometerCtrl.Location = new Point (0x145' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: thermometerCtrl.Range.Max = 90.0;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: thermometerCtrl.Range.Min = -40.0;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: thermometerCtrl.SmallTicFreq = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: thermometerCtrl.Value = 25.0;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: ledTempMeasRunning.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: ledTempMeasRunning.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: ledTempMeasRunning.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: ledTempMeasRunning.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TemperatureViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TemperatureViewControl.cs,InitializeComponent,The following statement contains a magic number: ledTempMeasRunning.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: errorProvider.SetIconPadding (tBoxSyncValue' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxSyncValue.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxSyncValue.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxSyncValue.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxSyncValue.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxSyncValue.Size = new Size (0x8f' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxSyncValue.TabIndex = 14;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: errorProvider.SetIconPadding (nudPreambleSize' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudPreambleSize.Location = new Point (0xa3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudPreambleSize.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudPreambleSize.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudPreambleSize.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudPreambleSize.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudPreambleSize.Size = new Size (0x3b' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: numArray2 [0] = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label12.Size = new Size (0x20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label1.Location = new Point (3' 5);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label1.Location = new Point (3' 5);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label1.Size = new Size (0x4b' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label6.Size = new Size (0x20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label6.TabIndex = 9;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label8.Size = new Size (0x17' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label8.TabIndex = 12;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label2.Location = new Point (0x155' 5);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label2.Size = new Size (0x20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label2.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label18.Location = new Point (3' 0x1d);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label18.Size = new Size (0x74' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label18.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.SetColumnSpan (tBoxAesKey' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxAesKey.Margin = new Padding (3' 3' 3' 4);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxAesKey.Margin = new Padding (3' 3' 3' 4);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxAesKey.Margin = new Padding (3' 3' 3' 4);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxAesKey.Margin = new Padding (3' 3' 3' 4);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxAesKey.Size = new Size (0x115' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxAesKey.TabIndex = 15;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label11.Location = new Point (3' 0xad);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label11.Size = new Size (80' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label11.Size = new Size (80' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label20.Location = new Point (3' 0x4d);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label20.Size = new Size (0x62' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label20.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label10.Location = new Point (3' 0x95);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label10.Size = new Size (0x4c' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label10.TabIndex = 15;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label21.Location = new Point (3' 0x65);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label21.Size = new Size (0x2e' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label21.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label7.Location = new Point (3' 0x65);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label7.Size = new Size (0x6b' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label7.TabIndex = 10;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label5.Location = new Point (3' 0x4d);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label5.Size = new Size (0x51' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label5.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label25.Location = new Point (3' 0xc7);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label25.Size = new Size (0x33' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label25.TabIndex = 14;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label24.Location = new Point (3' 0xad);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label24.Size = new Size (0x1f' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label24.TabIndex = 12;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label19.Location = new Point (3' 0x35);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label19.Size = new Size (0x4c' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label19.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblInterPacketRxDelayUnit.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblInterPacketRxDelayUnit.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxEnterCondition.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxEnterCondition.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxEnterCondition.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxEnterCondition.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label14.Location = new Point (3' 0xc6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label14.Size = new Size (0x7c' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxExitCondition.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxExitCondition.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxExitCondition.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxExitCondition.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label15.Location = new Point (3' 0xdf);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label15.Size = new Size (0x74' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxIntermediateMode.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxIntermediateMode.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxIntermediateMode.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxIntermediateMode.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label28.Location = new Point (3' 0x113);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label28.Size = new Size (0x6f' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label28.TabIndex = 20;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label16.Location = new Point (3' 0xf8);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label16.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label16.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label27.Location = new Point (3' 250);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label27.Location = new Point (3' 250);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label27.Size = new Size (0x53' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label26.Location = new Point (3' 0xe1);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label26.Size = new Size (0x2d' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAesEncryption.Location = new Point (0x81' 170);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAesEncryption.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAesEncryption.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAesEncryption.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAesEncryption.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAesEncryption.Size = new Size (0x66' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAesEncryption.TabIndex = 13;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAesOff.Location = new Point (0x36' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAesOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAesOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAesOn.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAesOn.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAesOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAesOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlDcFree.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlDcFree.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlDcFree.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlDcFree.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlDcFree.Size = new Size (0xd9' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlDcFree.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnDcFreeWhitening.Location = new Point (0x8d' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnDcFreeWhitening.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnDcFreeWhitening.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnDcFreeWhitening.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnDcFreeManchester.Location = new Point (0x36' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnDcFreeManchester.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnDcFreeManchester.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnDcFreeOff.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnDcFreeOff.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnDcFreeOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnDcFreeOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAddressInPayload.Location = new Point (0x81' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAddressInPayload.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAddressInPayload.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAddressInPayload.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAddressInPayload.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAddressInPayload.Size = new Size (0x62' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnNodeAddressInPayloadNo.Location = new Point (0x36' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnNodeAddressInPayloadNo.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnNodeAddressInPayloadNo.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnNodeAddressInPayloadYes.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnNodeAddressInPayloadYes.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnNodeAddressInPayloadYes.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnNodeAddressInPayloadYes.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label17.Location = new Point (3' 5);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label17.Location = new Point (3' 5);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label17.Size = new Size (120' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label17.Size = new Size (120' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlFifoFillCondition.Location = new Point (0xa3' 50);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlFifoFillCondition.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlFifoFillCondition.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlFifoFillCondition.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlFifoFillCondition.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlFifoFillCondition.Size = new Size (0x9f' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlFifoFillCondition.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnFifoFillAlways.Location = new Point (0x62' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnFifoFillAlways.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnFifoFillAlways.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnFifoFillSyncAddress.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnFifoFillSyncAddress.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnFifoFillSyncAddress.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnFifoFillSyncAddress.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label4.Location = new Point (3' 0x35);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label4.Size = new Size (0x5b' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label4.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlSync.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlSync.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlSync.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlSync.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlSync.Size = new Size (0x62' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlSync.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnSyncOff.Location = new Point (50' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnSyncOff.Location = new Point (50' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnSyncOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnSyncOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnSyncOn.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnSyncOn.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnSyncOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnSyncOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label3.Location = new Point (3' 0x1d);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label3.Size = new Size (60' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label3.Size = new Size (60' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label3.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label9.Location = new Point (3' 0x7d);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label9.Size = new Size (0x59' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label9.TabIndex = 13;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlCrcAutoClear.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlCrcAutoClear.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlCrcAutoClear.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlCrcAutoClear.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlCrcAutoClear.Size = new Size (0x66' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlCrcAutoClear.TabIndex = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnCrcAutoClearOff.Location = new Point (0x36' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnCrcAutoClearOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnCrcAutoClearOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnCrcAutoClearOn.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnCrcAutoClearOn.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnCrcAutoClearOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnCrcAutoClearOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label23.Location = new Point (3' 0x95);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label23.Size = new Size (0x52' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label23.TabIndex = 10;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlCrcCalculation.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlCrcCalculation.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlCrcCalculation.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlCrcCalculation.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlCrcCalculation.Size = new Size (0x66' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlCrcCalculation.TabIndex = 9;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnCrcOff.Location = new Point (0x36' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnCrcOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnCrcOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnCrcOn.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnCrcOn.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnCrcOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnCrcOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label22.Location = new Point (3' 0x7d);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label22.Size = new Size (0x56' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label22.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlTxStart.Margin = new Padding (3' 3' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlTxStart.Margin = new Padding (3' 3' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlTxStart.Margin = new Padding (3' 3' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlTxStart.Margin = new Padding (3' 3' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlTxStart.Size = new Size (0xa8' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnTxStartFifoNotEmpty.Location = new Point (0x4d' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnTxStartFifoNotEmpty.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnTxStartFifoNotEmpty.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnTxStartFifoLevel.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnTxStartFifoLevel.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnTxStartFifoLevel.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnTxStartFifoLevel.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAddressFiltering.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAddressFiltering.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAddressFiltering.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAddressFiltering.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAddressFiltering.Size = new Size (0xe4' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlAddressFiltering.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAddressFilteringNodeBroadcast.Location = new Point (0x6f' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAddressFilteringNodeBroadcast.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAddressFilteringNodeBroadcast.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAddressFilteringNodeBroadcast.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAddressFilteringNode.Location = new Point (0x36' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAddressFilteringNode.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAddressFilteringNode.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAddressFilteringOff.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAddressFilteringOff.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAddressFilteringOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnAddressFilteringOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblNodeAddress.Size = new Size (0x3b' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPayloadLength.Size = new Size (0x3b' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblBroadcastAddress.Size = new Size (0x3b' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlPacketFormat.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlPacketFormat.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlPacketFormat.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlPacketFormat.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlPacketFormat.Size = new Size (0x7d' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnPacketFormatFixed.Location = new Point (0x48' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnPacketFormatFixed.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnPacketFormatFixed.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnPacketFormatFixed.Size = new Size (50' 0x11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnPacketFormatVariable.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnPacketFormatVariable.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnPacketFormatVariable.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: rBtnPacketFormatVariable.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.ColumnCount = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (pnlPayloadLength' 1' 7);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (pnlPacketFormat' 1' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label4' 0' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label5' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label7' 0' 4);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label9' 0' 5);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label10' 0' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label11' 0' 7);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (pnlFifoFillCondition' 1' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (cBoxEnterCondition' 1' 8);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (cBoxExitCondition' 1' 9);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (tBoxSyncValue' 1' 5);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label12' 2' 7);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label12' 2' 7);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label14' 0' 8);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label15' 0' 9);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label16' 0' 10);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (cBoxIntermediateMode' 1' 10);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label2' 2' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (nudSyncSize' 1' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label6' 2' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label6' 2' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (nudSyncTol' 1' 4);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label8' 2' 4);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Controls.Add (label8' 2' 4);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel1.RowCount = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlPayloadLength.Location = new Point (0xa3' 170);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlPayloadLength.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlPayloadLength.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlPayloadLength.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlPayloadLength.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlPayloadLength.Size = new Size (0x7f' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudPayloadLength.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudPayloadLength.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudPayloadLength.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudPayloadLength.Size = new Size (0x3b' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudSyncSize.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudSyncSize.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudSyncSize.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudSyncSize.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: numArray5 [0] = 8;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudSyncSize.Size = new Size (0x3b' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudSyncSize.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: numArray7 [0] = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudSyncTol.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudSyncTol.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudSyncTol.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudSyncTol.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: numArray8 [0] = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudSyncTol.Size = new Size (0x3b' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudSyncTol.TabIndex = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlNodeAddress.Location = new Point (0x81' 50);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlNodeAddress.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlNodeAddress.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlNodeAddress.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlNodeAddress.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlNodeAddress.Size = new Size (0x7f' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudNodeAddress.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudNodeAddress.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudNodeAddress.Size = new Size (0x3b' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlBroadcastAddress.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlBroadcastAddress.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlBroadcastAddress.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlBroadcastAddress.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlBroadcastAddress.Size = new Size (0x7f' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlBroadcastAddress.TabIndex = 60;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudBroadcastAddress.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudBroadcastAddress.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudBroadcastAddress.Size = new Size (0x3b' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.ColumnCount = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (pnlBroadcastAddress' 1' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (lblInterPacketRxDelayUnit' 2' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (lblInterPacketRxDelayUnit' 2' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (pnlTxStart' 1' 9);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (pnlAesEncryption' 1' 7);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (nudFifoThreshold' 1' 10);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (pnlCrcAutoClear' 1' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (pnlNodeAddress' 1' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (pnlCrcCalculation' 1' 5);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (tBoxAesKey' 1' 8);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (label19' 0' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (pnlDcFree' 1' 4);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (label20' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (label21' 0' 4);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (label22' 0' 5);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (label23' 0' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (label24' 0' 7);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (label25' 0' 8);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (label26' 0' 9);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (label27' 0' 10);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (label28' 0' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Controls.Add (cBoxInterPacketRxDelay' 1' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.Location = new Point (0x183' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tableLayoutPanel2.RowCount = 12;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudFifoThreshold.Margin = new Padding (3' 3' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudFifoThreshold.Margin = new Padding (3' 3' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudFifoThreshold.Margin = new Padding (3' 3' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudFifoThreshold.Margin = new Padding (3' 3' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: nudFifoThreshold.Size = new Size (0x3b' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxInterPacketRxDelay.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxInterPacketRxDelay.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxInterPacketRxDelay.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: cBoxInterPacketRxDelay.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: gBoxDeviceStatus.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblOperatingMode.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblOperatingMode.Size = new Size (0x27' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblOperatingMode.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label37.Location = new Point (3' 0x3a);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label37.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label37.Size = new Size (0x55' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label37.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblBitSynchroniser.Location = new Point (0x92' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblBitSynchroniser.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblBitSynchroniser.Size = new Size (0x19' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblDataMode.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblDataMode.Size = new Size (0x2f' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblDataMode.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label38.Location = new Point (3' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label38.Location = new Point (3' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label38.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label38.Size = new Size (0x56' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label39.Location = new Point (3' 0x27);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label39.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label39.Size = new Size (0x3e' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label39.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: gBoxControl.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxPacketsNb.Size = new Size (0x4f' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxPacketsNb.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPacketsNb.Location = new Point (3' 0x33);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPacketsNb.Size = new Size (0x40' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxPacketsRepeatValue.Location = new Point (0x95' 70);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxPacketsRepeatValue.Size = new Size (0x4f' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tBoxPacketsRepeatValue.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPacketsRepeatValue.Location = new Point (3' 0x49);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPacketsRepeatValue.Size = new Size (0x4a' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPacketsRepeatValue.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: gBoxPacket.Location = new Point (3' 0x13d);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: gBoxPacket.Margin = new Padding (3' 1' 3' 1);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: gBoxPacket.Margin = new Padding (3' 1' 3' 1);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: gBoxPacket.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: imgPacketMessage.Location = new Point (5' 0x3d);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: imgPacketMessage.Size = new Size (0x223' 5);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: gBoxMessage.Location = new Point (6' 0x43);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: gBoxMessage.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tblPayloadMessage.ColumnCount = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tblPayloadMessage.Location = new Point (20' 0x13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tblPayloadMessage.RowCount = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tblPayloadMessage.SetColumnSpan (hexBoxPayload' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: hexBoxPayload.LineInfoDigits = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: hexBoxPayload.Location = new Point (3' 0x10);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: hexBoxPayload.ShadowSelectionColor = Color.FromArgb (100' 60' 0xbc' 0xff);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: hexBoxPayload.ShadowSelectionColor = Color.FromArgb (100' 60' 0xbc' 0xff);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: hexBoxPayload.Size = new Size (0x1f5' 60);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: hexBoxPayload.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label36.Size = new Size (0xaf' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label35.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label35.Size = new Size (320' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label35.Size = new Size (320' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tblPacket.ColumnCount = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tblPacket.Controls.Add (label31' 2' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tblPacket.Controls.Add (label32' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tblPacket.Controls.Add (label33' 4' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tblPacket.Controls.Add (label34' 5' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tblPacket.Controls.Add (lblPayload' 4' 1);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tblPacket.Controls.Add (pnlPacketCrc' 5' 1);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tblPacket.Controls.Add (pnlPacketAddr' 3' 1);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tblPacket.Controls.Add (lblPacketLength' 2' 1);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tblPacket.Location = new Point (5' 0x11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: tblPacket.RowCount = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label29.Size = new Size (0x67' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label30.Size = new Size (0x98' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label31.Size = new Size (0x3b' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label31.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label32.Size = new Size (0x57' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label32.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label33.Size = new Size (0x55' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label33.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label34.Size = new Size (0x33' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: label34.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPacketPreamble.Size = new Size (0x6a' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPacketPreamble.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPayload.Size = new Size (0x55' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPayload.TabIndex = 9;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlPacketCrc.Size = new Size (0x33' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: ledPacketCrc.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: ledPacketCrc.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: ledPacketCrc.Location = new Point (0x11' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: ledPacketCrc.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: ledPacketCrc.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPacketCrc.Size = new Size (0x33' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlPacketAddr.Size = new Size (0x57' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: pnlPacketAddr.TabIndex = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPacketAddr.Size = new Size (0x57' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPacketLength.Size = new Size (0x3b' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPacketLength.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPacketSyncValue.Size = new Size (0x98' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,InitializeComponent,The following statement contains a magic number: lblPacketSyncValue.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.btnRcCalibration.Location = new System.Drawing.Point (164' 51);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.btnRcCalibration.Location = new System.Drawing.Point (164' 51);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.btnRcCalibration.Size = new System.Drawing.Size (75' 23);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.btnRcCalibration.Size = new System.Drawing.Size (75' 23);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.btnRcCalibration.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxLowBatTrim.Location = new System.Drawing.Point (166' 45);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxLowBatTrim.Location = new System.Drawing.Point (166' 45);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxLowBatTrim.Size = new System.Drawing.Size (124' 21);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxLowBatTrim.Size = new System.Drawing.Size (124' 21);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxLowBatTrim.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Location = new System.Drawing.Point (166' 19);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Location = new System.Drawing.Point (166' 19);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Size = new System.Drawing.Size (102' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Size = new System.Drawing.Size (102' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnLowBatOff.Location = new System.Drawing.Point (54' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnLowBatOff.Location = new System.Drawing.Point (54' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnLowBatOff.Margin = new System.Windows.Forms.Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnLowBatOff.Margin = new System.Windows.Forms.Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnLowBatOff.Size = new System.Drawing.Size (45' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnLowBatOff.Size = new System.Drawing.Size (45' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnLowBatOn.Location = new System.Drawing.Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnLowBatOn.Location = new System.Drawing.Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnLowBatOn.Margin = new System.Windows.Forms.Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnLowBatOn.Margin = new System.Windows.Forms.Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnLowBatOn.Size = new System.Drawing.Size (41' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnLowBatOn.Size = new System.Drawing.Size (41' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (6' 23);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (6' 23);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (78' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (78' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point (164' 19);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point (164' 19);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size (105' 23);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size (105' 23);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationTypeOok.Location = new System.Drawing.Point (54' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationTypeOok.Location = new System.Drawing.Point (54' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationTypeOok.Size = new System.Drawing.Size (48' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationTypeOok.Size = new System.Drawing.Size (48' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationTypeFsk.Location = new System.Drawing.Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationTypeFsk.Location = new System.Drawing.Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationTypeFsk.Size = new System.Drawing.Size (45' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationTypeFsk.Size = new System.Drawing.Size (45' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Location = new System.Drawing.Point (164' 48);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Location = new System.Drawing.Point (164' 48);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size (144' 92);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size (144' 92);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel3.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShaping11.Location = new System.Drawing.Point (3' 72);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShaping11.Location = new System.Drawing.Point (3' 72);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShaping11.Size = new System.Drawing.Size (138' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShaping11.Size = new System.Drawing.Size (138' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShaping11.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShaping10.Location = new System.Drawing.Point (3' 49);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShaping10.Location = new System.Drawing.Point (3' 49);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShaping10.Size = new System.Drawing.Size (138' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShaping10.Size = new System.Drawing.Size (138' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShaping10.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShaping01.Location = new System.Drawing.Point (3' 26);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShaping01.Location = new System.Drawing.Point (3' 26);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShaping01.Size = new System.Drawing.Size (138' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShaping01.Size = new System.Drawing.Size (138' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShapingOff.Location = new System.Drawing.Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShapingOff.Location = new System.Drawing.Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShapingOff.Size = new System.Drawing.Size (45' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnModulationShapingOff.Size = new System.Drawing.Size (45' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point (6' 24);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point (6' 24);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size (62' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size (62' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point (164' 19);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point (164' 19);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (128' 69);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (128' 69);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnContinousBitSyncOff.Location = new System.Drawing.Point (3' 49);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnContinousBitSyncOff.Location = new System.Drawing.Point (3' 49);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnContinousBitSyncOff.Size = new System.Drawing.Size (98' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnContinousBitSyncOff.Size = new System.Drawing.Size (98' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnContinousBitSyncOff.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnContinousBitSyncOn.Location = new System.Drawing.Point (3' 26);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnContinousBitSyncOn.Location = new System.Drawing.Point (3' 26);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnContinousBitSyncOn.Size = new System.Drawing.Size (97' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnContinousBitSyncOn.Size = new System.Drawing.Size (97' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnPacketHandler.Location = new System.Drawing.Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnPacketHandler.Location = new System.Drawing.Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnPacketHandler.Size = new System.Drawing.Size (122' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnPacketHandler.Size = new System.Drawing.Size (122' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point (6' 49);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point (6' 49);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size (40' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size (40' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point (6' 53);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point (6' 53);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size (102' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size (102' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point (6' 75);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point (6' 75);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size (34' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size (34' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label10.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point (294' 23);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point (294' 23);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label14.Location = new System.Drawing.Point (6' 23);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label14.Location = new System.Drawing.Point (6' 23);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label14.Size = new System.Drawing.Size (74' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label14.Size = new System.Drawing.Size (74' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label16.Location = new System.Drawing.Point (296' 49);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label16.Location = new System.Drawing.Point (296' 49);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new System.Drawing.Size (14' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new System.Drawing.Size (14' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label16.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblRcOscillatorCalStat.Location = new System.Drawing.Point (6' 81);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblRcOscillatorCalStat.Location = new System.Drawing.Point (6' 81);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblRcOscillatorCalStat.Size = new System.Drawing.Size (151' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblRcOscillatorCalStat.Size = new System.Drawing.Size (151' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblRcOscillatorCalStat.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblRcOscillatorCal.Location = new System.Drawing.Point (6' 56);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblRcOscillatorCal.Location = new System.Drawing.Point (6' 56);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblRcOscillatorCal.Size = new System.Drawing.Size (120' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblRcOscillatorCal.Size = new System.Drawing.Size (120' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblRcOscillatorCal.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label15.Location = new System.Drawing.Point (8' 24);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label15.Location = new System.Drawing.Point (8' 24);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label15.Size = new System.Drawing.Size (107' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label15.Size = new System.Drawing.Size (107' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label13.Location = new System.Drawing.Point (294' 23);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label13.Location = new System.Drawing.Point (294' 23);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label13.Size = new System.Drawing.Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label13.Size = new System.Drawing.Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label13.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point (8' 48);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point (8' 48);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size (130' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size (130' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label17.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point (294' 75);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point (294' 75);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label11.TabIndex = 9;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label18.Location = new System.Drawing.Point (8' 73);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label18.Location = new System.Drawing.Point (8' 73);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label18.Size = new System.Drawing.Size (108' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label18.Size = new System.Drawing.Size (108' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label18.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point (294' 49);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point (294' 49);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size (24' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size (24' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label8.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point (137' 75);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point (137' 75);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size (21' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size (21' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label12.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSequencerOff.Location = new System.Drawing.Point (50' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSequencerOff.Margin = new System.Windows.Forms.Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSequencerOff.Margin = new System.Windows.Forms.Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSequencerOff.Size = new System.Drawing.Size (45' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSequencerOff.Size = new System.Drawing.Size (45' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSequencerOn.Location = new System.Drawing.Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSequencerOn.Margin = new System.Windows.Forms.Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSequencerOn.Margin = new System.Windows.Forms.Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSequencerOn.Size = new System.Drawing.Size (41' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSequencerOn.Size = new System.Drawing.Size (41' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label19.Location = new System.Drawing.Point (7' 99);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label19.Location = new System.Drawing.Point (7' 99);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label19.Size = new System.Drawing.Size (62' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label19.Size = new System.Drawing.Size (62' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label19.TabIndex = 10;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel5.Location = new System.Drawing.Point (164' 97);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel5.Location = new System.Drawing.Point (164' 97);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel5.Size = new System.Drawing.Size (98' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel5.Size = new System.Drawing.Size (98' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel5.TabIndex = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label20.Location = new System.Drawing.Point (8' 87);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label20.Location = new System.Drawing.Point (8' 87);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label20.Size = new System.Drawing.Size (67' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label20.Size = new System.Drawing.Size (67' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel6.Location = new System.Drawing.Point (165' 85);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel6.Location = new System.Drawing.Point (165' 85);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel6.Size = new System.Drawing.Size (98' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel6.Size = new System.Drawing.Size (98' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenModeOff.Location = new System.Drawing.Point (50' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenModeOff.Margin = new System.Windows.Forms.Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenModeOff.Margin = new System.Windows.Forms.Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenModeOff.Size = new System.Drawing.Size (45' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenModeOff.Size = new System.Drawing.Size (45' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenModeOn.Location = new System.Drawing.Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenModeOn.Margin = new System.Windows.Forms.Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenModeOn.Margin = new System.Windows.Forms.Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenModeOn.Size = new System.Drawing.Size (41' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenModeOn.Size = new System.Drawing.Size (41' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.btnListenModeAbort.Location = new System.Drawing.Point (269' 82);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.btnListenModeAbort.Location = new System.Drawing.Point (269' 82);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.btnListenModeAbort.Size = new System.Drawing.Size (75' 23);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.btnListenModeAbort.Size = new System.Drawing.Size (75' 23);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.btnListenModeAbort.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label21.Location = new System.Drawing.Point (8' 114);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label21.Location = new System.Drawing.Point (8' 114);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label21.Size = new System.Drawing.Size (105' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label21.Size = new System.Drawing.Size (105' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label21.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxListenResolIdle.Location = new System.Drawing.Point (165' 108);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxListenResolIdle.Location = new System.Drawing.Point (165' 108);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxListenResolIdle.Size = new System.Drawing.Size (124' 21);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxListenResolIdle.Size = new System.Drawing.Size (124' 21);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxListenResolIdle.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label22.Location = new System.Drawing.Point (295' 112);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label22.Location = new System.Drawing.Point (295' 112);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label22.Size = new System.Drawing.Size (18' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label22.Size = new System.Drawing.Size (18' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label22.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel7.Location = new System.Drawing.Point (165' 162);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel7.Location = new System.Drawing.Point (165' 162);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel7.Size = new System.Drawing.Size (226' 46);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel7.Size = new System.Drawing.Size (226' 46);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.panel7.TabIndex = 10;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenCriteria1.Location = new System.Drawing.Point (3' 26);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenCriteria1.Location = new System.Drawing.Point (3' 26);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenCriteria1.Size = new System.Drawing.Size (220' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenCriteria1.Size = new System.Drawing.Size (220' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenCriteria0.Location = new System.Drawing.Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenCriteria0.Location = new System.Drawing.Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenCriteria0.Size = new System.Drawing.Size (101' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnListenCriteria0.Size = new System.Drawing.Size (101' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label23.Location = new System.Drawing.Point (8' 167);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label23.Location = new System.Drawing.Point (8' 167);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label23.Size = new System.Drawing.Size (72' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label23.Size = new System.Drawing.Size (72' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label23.TabIndex = 9;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label24.Location = new System.Drawing.Point (8' 217);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label24.Location = new System.Drawing.Point (8' 217);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label24.Size = new System.Drawing.Size (59' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label24.Size = new System.Drawing.Size (59' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label24.TabIndex = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxListenEnd.Location = new System.Drawing.Point (165' 214);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxListenEnd.Location = new System.Drawing.Point (165' 214);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxListenEnd.Size = new System.Drawing.Size (124' 21);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxListenEnd.Size = new System.Drawing.Size (124' 21);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxListenEnd.TabIndex = 12;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label25.Location = new System.Drawing.Point (295' 245);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label25.Location = new System.Drawing.Point (295' 245);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label25.Size = new System.Drawing.Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label25.Size = new System.Drawing.Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label25.TabIndex = 15;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label26.Location = new System.Drawing.Point (295' 271);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label26.Location = new System.Drawing.Point (295' 271);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label26.Size = new System.Drawing.Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label26.Size = new System.Drawing.Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label26.TabIndex = 18;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label27.Location = new System.Drawing.Point (8' 245);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label27.Location = new System.Drawing.Point (8' 245);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label27.Size = new System.Drawing.Size (79' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label27.Size = new System.Drawing.Size (79' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label27.TabIndex = 13;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label28.Location = new System.Drawing.Point (8' 270);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label28.Location = new System.Drawing.Point (8' 270);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label28.Size = new System.Drawing.Size (76' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label28.Size = new System.Drawing.Size (76' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label28.TabIndex = 16;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.errorProvider.SetIconPadding (this.nudBitRate' 30);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudBitRate.Location = new System.Drawing.Point (164' 45);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudBitRate.Location = new System.Drawing.Point (164' 45);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudBitRate.Maximum = new decimal (new int[] {  	603774'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudBitRate.Minimum = new decimal (new int[] {  	600'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudBitRate.Size = new System.Drawing.Size (124' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudBitRate.Size = new System.Drawing.Size (124' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudBitRate.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudBitRate.Value = new decimal (new int[] {  	4800'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.errorProvider.SetIconPadding (this.nudFdev' 30);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFdev.Increment = new decimal (new int[] {  	61'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFdev.Location = new System.Drawing.Point (164' 71);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFdev.Location = new System.Drawing.Point (164' 71);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFdev.Maximum = new decimal (new int[] {  	300000'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFdev.Size = new System.Drawing.Size (124' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFdev.Size = new System.Drawing.Size (124' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFdev.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFdev.Value = new decimal (new int[] {  	5005'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.errorProvider.SetIconPadding (this.nudFrequencyRf' 30);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFrequencyRf.Increment = new decimal (new int[] {  	61'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFrequencyRf.Location = new System.Drawing.Point (164' 19);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFrequencyRf.Location = new System.Drawing.Point (164' 19);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFrequencyRf.Maximum = new decimal (new int[] {  	1020000000'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFrequencyRf.Minimum = new decimal (new int[] {  	290000000'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFrequencyRf.Size = new System.Drawing.Size (124' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFrequencyRf.Size = new System.Drawing.Size (124' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFrequencyRf.Value = new decimal (new int[] {  	915000000'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblListenResolRx.Location = new System.Drawing.Point (8' 141);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblListenResolRx.Location = new System.Drawing.Point (8' 141);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblListenResolRx.Size = new System.Drawing.Size (102' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblListenResolRx.Size = new System.Drawing.Size (102' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblListenResolRx.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label30.Location = new System.Drawing.Point (295' 139);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label30.Location = new System.Drawing.Point (295' 139);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label30.Size = new System.Drawing.Size (18' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label30.Size = new System.Drawing.Size (18' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label30.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxListenResolRx.Location = new System.Drawing.Point (165' 135);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxListenResolRx.Location = new System.Drawing.Point (165' 135);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxListenResolRx.Size = new System.Drawing.Size (124' 21);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxListenResolRx.Size = new System.Drawing.Size (124' 21);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxListenResolRx.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxGeneral.Location = new System.Drawing.Point (16' 9);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxGeneral.Location = new System.Drawing.Point (16' 9);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxGeneral.Size = new System.Drawing.Size (355' 122);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxGeneral.Size = new System.Drawing.Size (355' 122);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxBitSyncDataMode.Location = new System.Drawing.Point (16' 137);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxBitSyncDataMode.Location = new System.Drawing.Point (16' 137);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxBitSyncDataMode.Size = new System.Drawing.Size (355' 91);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxBitSyncDataMode.Size = new System.Drawing.Size (355' 91);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxModulation.Location = new System.Drawing.Point (16' 234);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxModulation.Location = new System.Drawing.Point (16' 234);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxModulation.Size = new System.Drawing.Size (355' 143);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxModulation.Size = new System.Drawing.Size (355' 143);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxModulation.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxOscillators.Location = new System.Drawing.Point (16' 383);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxOscillators.Location = new System.Drawing.Point (16' 383);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxOscillators.Size = new System.Drawing.Size (355' 100);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxOscillators.Size = new System.Drawing.Size (355' 100);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxOscillators.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFrequencyXo.Location = new System.Drawing.Point (164' 19);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFrequencyXo.Location = new System.Drawing.Point (164' 19);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFrequencyXo.Maximum = new decimal (new int[] {  	32000000'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFrequencyXo.Minimum = new decimal (new int[] {  	26000000'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFrequencyXo.Size = new System.Drawing.Size (124' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFrequencyXo.Size = new System.Drawing.Size (124' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudFrequencyXo.Value = new decimal (new int[] {  	32000000'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRcCalibration.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRcCalibration.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRcCalibration.Location = new System.Drawing.Point (164' 80);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRcCalibration.Location = new System.Drawing.Point (164' 80);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRcCalibration.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRcCalibration.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRcCalibration.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxBatteryManagement.Location = new System.Drawing.Point (377' 383);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxBatteryManagement.Location = new System.Drawing.Point (377' 383);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxBatteryManagement.Size = new System.Drawing.Size (405' 100);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxBatteryManagement.Size = new System.Drawing.Size (405' 100);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxBatteryManagement.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBatMonitor.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBatMonitor.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBatMonitor.Location = new System.Drawing.Point (166' 72);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBatMonitor.Location = new System.Drawing.Point (166' 72);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBatMonitor.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBatMonitor.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBatMonitor.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxListenMode.Location = new System.Drawing.Point (377' 9);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxListenMode.Location = new System.Drawing.Point (377' 9);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxListenMode.Size = new System.Drawing.Size (405' 368);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxListenMode.Size = new System.Drawing.Size (405' 368);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxListenMode.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefRx.DecimalPlaces = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefRx.Increment = new decimal (new int[] {  	41'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefRx.Increment = new decimal (new int[] {  	41'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefRx.Location = new System.Drawing.Point (165' 267);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefRx.Location = new System.Drawing.Point (165' 267);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefRx.Maximum = new decimal (new int[] {  	10455'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefRx.Maximum = new decimal (new int[] {  	10455'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefRx.Size = new System.Drawing.Size (124' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefRx.Size = new System.Drawing.Size (124' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefRx.TabIndex = 17;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefRx.Value = new decimal (new int[] {  	1312'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefRx.Value = new decimal (new int[] {  	1312'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefIdle.DecimalPlaces = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefIdle.Increment = new decimal (new int[] {  	41'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefIdle.Increment = new decimal (new int[] {  	41'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefIdle.Location = new System.Drawing.Point (165' 241);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefIdle.Location = new System.Drawing.Point (165' 241);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefIdle.Maximum = new decimal (new int[] {  	10455'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefIdle.Maximum = new decimal (new int[] {  	10455'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefIdle.Size = new System.Drawing.Size (124' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefIdle.Size = new System.Drawing.Size (124' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefIdle.TabIndex = 14;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefIdle.Value = new decimal (new int[] {  	10045'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.nudListenCoefIdle.Value = new decimal (new int[] {  	10045'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,rBtnModulationShaping_CheckedChanged,The following statement contains a magic number: if (rBtnModulationShapingOff.Checked)  	ModulationShaping = 0;  else if (rBtnModulationShaping01.Checked)  	ModulationShaping = 1;  else if (rBtnModulationShaping10.Checked)  	ModulationShaping = 2;  else if (rBtnModulationShaping11.Checked)  	ModulationShaping = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,rBtnModulationShaping_CheckedChanged,The following statement contains a magic number: if (rBtnModulationShapingOff.Checked)  	ModulationShaping = 0;  else if (rBtnModulationShaping01.Checked)  	ModulationShaping = 1;  else if (rBtnModulationShaping10.Checked)  	ModulationShaping = 2;  else if (rBtnModulationShaping11.Checked)  	ModulationShaping = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,rBtnModulationShaping_CheckedChanged,The following statement contains a magic number: if (rBtnModulationShaping01.Checked)  	ModulationShaping = 1;  else if (rBtnModulationShaping10.Checked)  	ModulationShaping = 2;  else if (rBtnModulationShaping11.Checked)  	ModulationShaping = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,rBtnModulationShaping_CheckedChanged,The following statement contains a magic number: if (rBtnModulationShaping01.Checked)  	ModulationShaping = 1;  else if (rBtnModulationShaping10.Checked)  	ModulationShaping = 2;  else if (rBtnModulationShaping11.Checked)  	ModulationShaping = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,rBtnModulationShaping_CheckedChanged,The following statement contains a magic number: if (rBtnModulationShaping10.Checked)  	ModulationShaping = 2;  else if (rBtnModulationShaping11.Checked)  	ModulationShaping = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,rBtnModulationShaping_CheckedChanged,The following statement contains a magic number: if (rBtnModulationShaping10.Checked)  	ModulationShaping = 2;  else if (rBtnModulationShaping11.Checked)  	ModulationShaping = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,rBtnModulationShaping_CheckedChanged,The following statement contains a magic number: ModulationShaping = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,rBtnModulationShaping_CheckedChanged,The following statement contains a magic number: if (rBtnModulationShaping11.Checked)  	ModulationShaping = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,rBtnModulationShaping_CheckedChanged,The following statement contains a magic number: ModulationShaping = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,cBoxDio2Mapping_SelectedIndexChanged,The following statement contains a magic number: this.OnDioMappingChanged (2' (DioMappingEnum)this.cBoxDio2Mapping.SelectedIndex);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,cBoxDio3Mapping_SelectedIndexChanged,The following statement contains a magic number: this.OnDioMappingChanged (3' (DioMappingEnum)this.cBoxDio3Mapping.SelectedIndex);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,cBoxDio4Mapping_SelectedIndexChanged,The following statement contains a magic number: this.OnDioMappingChanged (4' (DioMappingEnum)this.cBoxDio4Mapping.SelectedIndex);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,cBoxDio5Mapping_SelectedIndexChanged,The following statement contains a magic number: this.OnDioMappingChanged (5' (DioMappingEnum)this.cBoxDio5Mapping.SelectedIndex);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxDio5Mapping.Size = new Size (100' 0x15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new Point (6' 0x39);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new Size (0x55' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new Point (6' 0x17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new Size (0x23' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new Point (6' 50);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new Point (6' 50);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new Size (0x23' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new Point (6' 0x4d);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new Size (0x23' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new Point (6' 0x68);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new Size (0x23' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new Point (6' 0x83);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new Size (0x23' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new Point (6' 0x9e);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new Size (0x23' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 10;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblOperatingMode.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblOperatingMode.Size = new Size (0x27' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblOperatingMode.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxDio4Mapping.Size = new Size (100' 0x15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxDio4Mapping.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxDio3Mapping.Size = new Size (100' 0x15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxDio3Mapping.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxDio2Mapping.Location = new Point (0xa2' 100);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxDio2Mapping.Size = new Size (100' 0x15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxDio2Mapping.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxDio1Mapping.Size = new Size (100' 0x15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxDio1Mapping.TabIndex = 9;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxDio0Mapping.Size = new Size (100' 0x15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxDio0Mapping.TabIndex = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label13.Location = new Point (6' 0x26);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label13.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label13.Size = new Size (0x3e' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label13.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblDataMode.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblDataMode.Size = new Size (0x2f' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblDataMode.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label15.Location = new Point (5' 0x17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label15.Size = new Size (60' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label15.Size = new Size (60' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.cBoxClockOut.Size = new Size (100' 0x15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label16.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new Size (0x2a' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label17.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label18.Size = new Size (50' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label18.Size = new Size (50' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label18.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label19.Size = new Size (0x33' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label19.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lbModeReady.Location = new Point (0x72' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lbModeReady.Size = new Size (0x41' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label20.Size = new Size (0x63' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label20.TabIndex = 15;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label21.Size = new Size (0x38' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label21.TabIndex = 13;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label22.Size = new Size (0x2d' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label22.TabIndex = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label23.Location = new Point (0xfe' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label23.Size = new Size (0x1b' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label23.TabIndex = 9;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label24.Size = new Size (0x3e' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label25.Size = new Size (50' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label25.Size = new Size (50' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label26.Size = new Size (70' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label26.Size = new Size (70' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label27.Location = new Point (0x18a' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label27.Size = new Size (40' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label27.Size = new Size (40' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label28.Size = new Size (0x2b' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label29.Size = new Size (0x25' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label30.Size = new Size (0x4c' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label31.Location = new Point (0x216' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label31.Size = new Size (0x3f' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxIrqFlags.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledModeReady.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledModeReady.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledModeReady.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledModeReady.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBat.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBat.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBat.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBat.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBat.TabIndex = 30;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoOverrun.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoOverrun.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoOverrun.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoOverrun.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.TabIndex = 14;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledCrcOk.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledCrcOk.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledCrcOk.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledCrcOk.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoLevel.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoLevel.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoLevel.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoLevel.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoLevel.TabIndex = 20;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledAutoMode.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledAutoMode.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledAutoMode.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledAutoMode.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledAutoMode.TabIndex = 12;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTxReady.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTxReady.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTxReady.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTxReady.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTxReady.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPayloadReady.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPayloadReady.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPayloadReady.Location = new Point (0x201' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPayloadReady.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPayloadReady.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoNotEmpty.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoNotEmpty.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoNotEmpty.Location = new Point (0x175' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoNotEmpty.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoNotEmpty.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTimeout.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTimeout.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTimeout.Location = new Point (0xe9' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTimeout.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTimeout.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTimeout.TabIndex = 10;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRxReady.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRxReady.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRxReady.Location = new Point (0x5d' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRxReady.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRxReady.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRxReady.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPacketSent.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPacketSent.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPacketSent.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPacketSent.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoFull.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoFull.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoFull.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoFull.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new Point (6' 0x13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label8.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new Size (0x56' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblBitSynchroniser.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lblBitSynchroniser.Size = new Size (0x19' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxDeviceStatus.Location = new Point (0xfd' 90);  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxClockOut.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,PopulateDioCbox,The following statement contains a magic number: this.Dio2Mapping = (DioMappingEnum)numArray [2];  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,PopulateDioCbox,The following statement contains a magic number: this.Dio3Mapping = (DioMappingEnum)numArray [3];  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,PopulateDioCbox,The following statement contains a magic number: this.Dio4Mapping = (DioMappingEnum)numArray [4];  
Magic Number,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,PopulateDioCbox,The following statement contains a magic number: this.Dio5Mapping = (DioMappingEnum)numArray [5];  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxOverloadCurrentProtection.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: panel4.Size = new Size (0x66' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnOcpOff.Location = new Point (0x36' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnOcpOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnOcpOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnOcpOn.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnOcpOn.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnOcpOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnOcpOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: label5.Location = new Point (6' 0x31);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: label5.Size = new Size (0x34' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: bits [0] = 120;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: nudOcpTrim.Size = new Size (0x7c' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: nudOcpTrim.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray3 [0] = 100;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixOCPtrim.Size = new Size (0x16' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixOCPtrim.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray4 [0] = 13;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray5 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray5 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: nudOutputPower.Size = new Size (0x7c' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray6 [0] = 13;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixOutputPower.Size = new Size (0x1c' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: cBoxPaRamp.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnPaControlPa1Pa2.Location = new Point (3' 0x31);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnPaControlPa1Pa2.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnPaControlPa1.Location = new Point (3' 0x1a);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnPaControlPa0.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnPaControlPa0.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixPAramp.Size = new Size (0x12' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixPAramp.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: label3.Location = new Point (6' 0x62);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: label3.Size = new Size (50' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,TransmitterViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\TransmitterViewControl.cs,InitializeComponent,The following statement contains a magic number: label3.Size = new Size (50' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,RssiGraphControl,The following statement contains a magic number: MasterPaneAddGraph (CreateLineGraph (3' ""' "Samples"' "Power [dBm]"' true' true' false' true' false' false' true' false));  
Magic Number,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,InitializeComponent,The following statement contains a magic number: graph.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,SetupGraphPane,The following statement contains a magic number: graphPane.YAxis.Scale.Min = -150.0;  
Magic Number,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,UpdateLineGraph,The following statement contains a magic number: try {  	GraphPane pane = masterPane.PaneList [0];  	if (pane.CurveList.Count > 0) {  		LineItem item = pane.CurveList [serie] as LineItem;  		if (item != null) {  			IPointListEdit points = item.Points as IPointListEdit;  			if (points != null) {  				points.Add (time' value);  				if ((time > pane.XAxis.Scale.Max) || (pane.XAxis.Scale.Max > 10.0)) {  					pane.XAxis.Scale.Max = time;  					pane.XAxis.Scale.Min = pane.XAxis.Scale.Max - 10.0;  				}  				pane.AxisChange ();  				graph.Invalidate ();  			}  		}  	}  }  catch {  	throw new Exception ("While updating data graph");  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,UpdateLineGraph,The following statement contains a magic number: try {  	GraphPane pane = masterPane.PaneList [0];  	if (pane.CurveList.Count > 0) {  		LineItem item = pane.CurveList [serie] as LineItem;  		if (item != null) {  			IPointListEdit points = item.Points as IPointListEdit;  			if (points != null) {  				points.Add (time' value);  				if ((time > pane.XAxis.Scale.Max) || (pane.XAxis.Scale.Max > 10.0)) {  					pane.XAxis.Scale.Max = time;  					pane.XAxis.Scale.Min = pane.XAxis.Scale.Max - 10.0;  				}  				pane.AxisChange ();  				graph.Invalidate ();  			}  		}  	}  }  catch {  	throw new Exception ("While updating data graph");  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,UpdateLineGraph,The following statement contains a magic number: if (pane.CurveList.Count > 0) {  	LineItem item = pane.CurveList [serie] as LineItem;  	if (item != null) {  		IPointListEdit points = item.Points as IPointListEdit;  		if (points != null) {  			points.Add (time' value);  			if ((time > pane.XAxis.Scale.Max) || (pane.XAxis.Scale.Max > 10.0)) {  				pane.XAxis.Scale.Max = time;  				pane.XAxis.Scale.Min = pane.XAxis.Scale.Max - 10.0;  			}  			pane.AxisChange ();  			graph.Invalidate ();  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,UpdateLineGraph,The following statement contains a magic number: if (pane.CurveList.Count > 0) {  	LineItem item = pane.CurveList [serie] as LineItem;  	if (item != null) {  		IPointListEdit points = item.Points as IPointListEdit;  		if (points != null) {  			points.Add (time' value);  			if ((time > pane.XAxis.Scale.Max) || (pane.XAxis.Scale.Max > 10.0)) {  				pane.XAxis.Scale.Max = time;  				pane.XAxis.Scale.Min = pane.XAxis.Scale.Max - 10.0;  			}  			pane.AxisChange ();  			graph.Invalidate ();  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,UpdateLineGraph,The following statement contains a magic number: if (item != null) {  	IPointListEdit points = item.Points as IPointListEdit;  	if (points != null) {  		points.Add (time' value);  		if ((time > pane.XAxis.Scale.Max) || (pane.XAxis.Scale.Max > 10.0)) {  			pane.XAxis.Scale.Max = time;  			pane.XAxis.Scale.Min = pane.XAxis.Scale.Max - 10.0;  		}  		pane.AxisChange ();  		graph.Invalidate ();  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,UpdateLineGraph,The following statement contains a magic number: if (item != null) {  	IPointListEdit points = item.Points as IPointListEdit;  	if (points != null) {  		points.Add (time' value);  		if ((time > pane.XAxis.Scale.Max) || (pane.XAxis.Scale.Max > 10.0)) {  			pane.XAxis.Scale.Max = time;  			pane.XAxis.Scale.Min = pane.XAxis.Scale.Max - 10.0;  		}  		pane.AxisChange ();  		graph.Invalidate ();  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,UpdateLineGraph,The following statement contains a magic number: if (points != null) {  	points.Add (time' value);  	if ((time > pane.XAxis.Scale.Max) || (pane.XAxis.Scale.Max > 10.0)) {  		pane.XAxis.Scale.Max = time;  		pane.XAxis.Scale.Min = pane.XAxis.Scale.Max - 10.0;  	}  	pane.AxisChange ();  	graph.Invalidate ();  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,UpdateLineGraph,The following statement contains a magic number: if (points != null) {  	points.Add (time' value);  	if ((time > pane.XAxis.Scale.Max) || (pane.XAxis.Scale.Max > 10.0)) {  		pane.XAxis.Scale.Max = time;  		pane.XAxis.Scale.Min = pane.XAxis.Scale.Max - 10.0;  	}  	pane.AxisChange ();  	graph.Invalidate ();  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,UpdateLineGraph,The following statement contains a magic number: if ((time > pane.XAxis.Scale.Max) || (pane.XAxis.Scale.Max > 10.0)) {  	pane.XAxis.Scale.Max = time;  	pane.XAxis.Scale.Min = pane.XAxis.Scale.Max - 10.0;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,UpdateLineGraph,The following statement contains a magic number: if ((time > pane.XAxis.Scale.Max) || (pane.XAxis.Scale.Max > 10.0)) {  	pane.XAxis.Scale.Max = time;  	pane.XAxis.Scale.Min = pane.XAxis.Scale.Max - 10.0;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RssiGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RssiGraphControl.cs,UpdateLineGraph,The following statement contains a magic number: pane.XAxis.Scale.Min = pane.XAxis.Scale.Max - 10.0;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Location = new System.Drawing.Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Location = new System.Drawing.Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size (807' 519);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size (807' 519);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabCommon.Location = new System.Drawing.Point (4' 22);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabCommon.Location = new System.Drawing.Point (4' 22);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabCommon.Padding = new System.Windows.Forms.Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabCommon.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabCommon.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.commonViewControl1.BitRate = new decimal (new int[] {  	4800'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.commonViewControl1.Fdev = new decimal (new int[] {  	5002'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.commonViewControl1.FrequencyRf = new decimal (new int[] {  	915000000'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.commonViewControl1.FrequencyStep = new decimal (new int[] {  	61'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.commonViewControl1.FrequencyXo = new decimal (new int[] {  	32000000'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.commonViewControl1.ListenCoefIdle = new decimal (new int[] {  	10045'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.commonViewControl1.ListenCoefIdle = new decimal (new int[] {  	10045'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.commonViewControl1.ListenCoefRx = new decimal (new int[] {  	131'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.commonViewControl1.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.commonViewControl1.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabTransmitter.Location = new System.Drawing.Point (4' 22);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabTransmitter.Location = new System.Drawing.Point (4' 22);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabTransmitter.Padding = new System.Windows.Forms.Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabTransmitter.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabTransmitter.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.transmitterViewControl1.OcpTrim = new decimal (new int[] {  	1000'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.transmitterViewControl1.OcpTrim = new decimal (new int[] {  	1000'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.transmitterViewControl1.OutputPower = new decimal (new int[] {  	13'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.transmitterViewControl1.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.transmitterViewControl1.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabReceiver.Location = new System.Drawing.Point (4' 22);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabReceiver.Location = new System.Drawing.Point (4' 22);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabReceiver.Padding = new System.Windows.Forms.Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabReceiver.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabReceiver.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabReceiver.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AfcDccFreq = new decimal (new int[] {  	-905921831'  	295814893'  	539237922'  	1638400  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AfcDccFreq = new decimal (new int[] {  	-905921831'  	295814893'  	539237922'  	1638400  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AfcDccFreq = new decimal (new int[] {  	-905921831'  	295814893'  	539237922'  	1638400  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AfcDccFreq = new decimal (new int[] {  	-905921831'  	295814893'  	539237922'  	1638400  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AfcDccFreqMax = new decimal (new int[] {  	1657'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AfcDccFreqMin = new decimal (new int[] {  	12'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AfcRxBw = new decimal (new int[] {  	50000'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AfcRxBwMax = new decimal (new int[] {  	400000'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AfcRxBwMin = new decimal (new int[] {  	3125'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AfcValue = new decimal (new int[] {  	0'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AgcReference = -80;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AgcRefLevel = -80;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AgcSnrMargin = ((byte)(5));  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AgcStep1 = ((byte)(16));  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AgcStep2 = ((byte)(7));  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AgcStep3 = ((byte)(11));  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AgcStep4 = ((byte)(9));  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.AgcStep5 = ((byte)(11));  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.BitRate = new decimal (new int[] {  	4800'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.DccFreq = new decimal (new int[] {  	-163586584'  	-1389046539'  	-2048070723'  	1703936  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.DccFreq = new decimal (new int[] {  	-163586584'  	-1389046539'  	-2048070723'  	1703936  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.DccFreq = new decimal (new int[] {  	-163586584'  	-1389046539'  	-2048070723'  	1703936  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.DccFreq = new decimal (new int[] {  	-163586584'  	-1389046539'  	-2048070723'  	1703936  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.DccFreqMax = new decimal (new int[] {  	1657'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.DccFreqMin = new decimal (new int[] {  	12'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.FeiValue = new decimal (new int[] {  	0'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.FrequencyXo = new decimal (new int[] {  	32000000'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.LowBetaAfcOffset = new decimal (new int[] {  	0'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.OokFixedThresh = ((byte)(6));  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.OokPeakThreshStep = new decimal (new int[] {  	5'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.OokPeakThreshStep = new decimal (new int[] {  	5'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.RssiThresh = new decimal (new int[] {  	85'  	0'  	0'  	-2147483648  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.RssiThresh = new decimal (new int[] {  	85'  	0'  	0'  	-2147483648  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.RssiValue = new decimal (new int[] {  	1275'  	0'  	0'  	-2147418112  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.RssiValue = new decimal (new int[] {  	1275'  	0'  	0'  	-2147418112  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.RxBw = new decimal (new int[] {  	1890233003'  	-2135170438'  	564688631'  	1572864  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.RxBw = new decimal (new int[] {  	1890233003'  	-2135170438'  	564688631'  	1572864  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.RxBw = new decimal (new int[] {  	1890233003'  	-2135170438'  	564688631'  	1572864  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.RxBw = new decimal (new int[] {  	1890233003'  	-2135170438'  	564688631'  	1572864  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.RxBwMax = new decimal (new int[] {  	500000'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.RxBwMin = new decimal (new int[] {  	3906'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.receiverViewControl1.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabIrqMap.Location = new System.Drawing.Point (4' 22);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabIrqMap.Location = new System.Drawing.Point (4' 22);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabIrqMap.Padding = new System.Windows.Forms.Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabIrqMap.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabIrqMap.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabIrqMap.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.irqMapViewControl1.FrequencyXo = new decimal (new int[] {  	32000000'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.irqMapViewControl1.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.irqMapViewControl1.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabPacketHandler.Location = new System.Drawing.Point (4' 22);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabPacketHandler.Location = new System.Drawing.Point (4' 22);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabPacketHandler.Padding = new System.Windows.Forms.Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabPacketHandler.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabPacketHandler.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabPacketHandler.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.packetHandlerView1.FifoThreshold = ((byte)(15));  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.packetHandlerView1.PayloadLength = ((byte)(66));  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.packetHandlerView1.PreambleSize = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.packetHandlerView1.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.packetHandlerView1.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.packetHandlerView1.SyncSize = ((byte)(4));  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.packetHandlerView1.SyncValue = new byte[] {  	((byte)(170))'  	((byte)(170))'  	((byte)(170))'  	((byte)(170))  };  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.packetHandlerView1.SyncValue = new byte[] {  	((byte)(170))'  	((byte)(170))'  	((byte)(170))'  	((byte)(170))  };  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.packetHandlerView1.SyncValue = new byte[] {  	((byte)(170))'  	((byte)(170))'  	((byte)(170))'  	((byte)(170))  };  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.packetHandlerView1.SyncValue = new byte[] {  	((byte)(170))'  	((byte)(170))'  	((byte)(170))'  	((byte)(170))  };  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabTemperature.Location = new System.Drawing.Point (4' 22);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabTemperature.Location = new System.Drawing.Point (4' 22);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabTemperature.Padding = new System.Windows.Forms.Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabTemperature.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabTemperature.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.tabTemperature.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.temperatureViewControl1.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.temperatureViewControl1.Size = new System.Drawing.Size (799' 493);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.temperatureViewControl1.TempValue = new decimal (new int[] {  	25'  	0'  	0'  	0  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.temperatureViewControl1.TempValueRoom = new decimal (new int[] {  	250'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.temperatureViewControl1.TempValueRoom = new decimal (new int[] {  	250'  	0'  	0'  	65536  });  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxOperatingMode.Location = new System.Drawing.Point (816' 411);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxOperatingMode.Location = new System.Drawing.Point (816' 411);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxOperatingMode.Size = new System.Drawing.Size (189' 107);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxOperatingMode.Size = new System.Drawing.Size (189' 107);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxOperatingMode.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnTransmitter.Location = new System.Drawing.Point (94' 80);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnTransmitter.Location = new System.Drawing.Point (94' 80);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnTransmitter.Size = new System.Drawing.Size (77' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnTransmitter.Size = new System.Drawing.Size (77' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnTransmitter.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnReceiver.Location = new System.Drawing.Point (16' 80);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnReceiver.Location = new System.Drawing.Point (16' 80);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnReceiver.Size = new System.Drawing.Size (68' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnReceiver.Size = new System.Drawing.Size (68' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnReceiver.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSynthesizer.Location = new System.Drawing.Point (94' 51);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSynthesizer.Location = new System.Drawing.Point (94' 51);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSynthesizer.Size = new System.Drawing.Size (79' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSynthesizer.Size = new System.Drawing.Size (79' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSynthesizer.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnStandby.Location = new System.Drawing.Point (16' 51);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnStandby.Location = new System.Drawing.Point (16' 51);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnStandby.Size = new System.Drawing.Size (64' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnStandby.Size = new System.Drawing.Size (64' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSleep.Location = new System.Drawing.Point (16' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSleep.Location = new System.Drawing.Point (16' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSleep.Size = new System.Drawing.Size (52' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.rBtnSleep.Size = new System.Drawing.Size (52' 17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lbModeReady.Location = new System.Drawing.Point (55' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lbModeReady.Location = new System.Drawing.Point (55' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lbModeReady.Size = new System.Drawing.Size (65' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.lbModeReady.Size = new System.Drawing.Size (65' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label19.Location = new System.Drawing.Point (55' 41);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label19.Location = new System.Drawing.Point (55' 41);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label19.Size = new System.Drawing.Size (51' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label19.Size = new System.Drawing.Size (51' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label19.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label18.Location = new System.Drawing.Point (55' 62);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label18.Location = new System.Drawing.Point (55' 62);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label18.Size = new System.Drawing.Size (50' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label18.Size = new System.Drawing.Size (50' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label18.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point (55' 83);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point (55' 83);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size (42' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size (42' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label17.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label23.Location = new System.Drawing.Point (55' 110);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label23.Location = new System.Drawing.Point (55' 110);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label23.Size = new System.Drawing.Size (27' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label23.Size = new System.Drawing.Size (27' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label23.TabIndex = 9;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label22.Location = new System.Drawing.Point (55' 131);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label22.Location = new System.Drawing.Point (55' 131);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label22.Size = new System.Drawing.Size (45' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label22.Size = new System.Drawing.Size (45' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label22.TabIndex = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label21.Location = new System.Drawing.Point (55' 152);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label21.Location = new System.Drawing.Point (55' 152);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label21.Size = new System.Drawing.Size (56' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label21.Size = new System.Drawing.Size (56' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label21.TabIndex = 13;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label20.Location = new System.Drawing.Point (55' 173);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label20.Location = new System.Drawing.Point (55' 173);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label20.Size = new System.Drawing.Size (99' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label20.Size = new System.Drawing.Size (99' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label20.TabIndex = 15;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label27.Location = new System.Drawing.Point (55' 200);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label27.Location = new System.Drawing.Point (55' 200);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label27.Size = new System.Drawing.Size (40' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label27.Size = new System.Drawing.Size (40' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label27.TabIndex = 17;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label26.Location = new System.Drawing.Point (55' 221);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label26.Location = new System.Drawing.Point (55' 221);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label26.Size = new System.Drawing.Size (70' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label26.Size = new System.Drawing.Size (70' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label26.TabIndex = 19;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label25.Location = new System.Drawing.Point (55' 242);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label25.Location = new System.Drawing.Point (55' 242);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label25.Size = new System.Drawing.Size (50' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label25.Size = new System.Drawing.Size (50' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label25.TabIndex = 21;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label24.Location = new System.Drawing.Point (55' 263);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label24.Location = new System.Drawing.Point (55' 263);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label24.Size = new System.Drawing.Size (62' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label24.Size = new System.Drawing.Size (62' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label24.TabIndex = 23;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label31.Location = new System.Drawing.Point (55' 290);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label31.Location = new System.Drawing.Point (55' 290);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label31.Size = new System.Drawing.Size (63' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label31.Size = new System.Drawing.Size (63' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label31.TabIndex = 25;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label30.Location = new System.Drawing.Point (55' 311);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label30.Location = new System.Drawing.Point (55' 311);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label30.Size = new System.Drawing.Size (76' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label30.Size = new System.Drawing.Size (76' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label30.TabIndex = 27;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label29.Location = new System.Drawing.Point (55' 332);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label29.Location = new System.Drawing.Point (55' 332);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label29.Size = new System.Drawing.Size (37' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label29.Size = new System.Drawing.Size (37' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label29.TabIndex = 29;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label28.Location = new System.Drawing.Point (55' 353);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label28.Location = new System.Drawing.Point (55' 353);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label28.Size = new System.Drawing.Size (43' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label28.Size = new System.Drawing.Size (43' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.label28.TabIndex = 31;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxIrqFlags.Location = new System.Drawing.Point (816' 25);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxIrqFlags.Location = new System.Drawing.Point (816' 25);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxIrqFlags.Size = new System.Drawing.Size (189' 380);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.gBoxIrqFlags.Size = new System.Drawing.Size (189' 380);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBat.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBat.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBat.Location = new System.Drawing.Point (34' 352);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBat.Location = new System.Drawing.Point (34' 352);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBat.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBat.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledLowBat.TabIndex = 30;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledCrcOk.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledCrcOk.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledCrcOk.Location = new System.Drawing.Point (34' 331);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledCrcOk.Location = new System.Drawing.Point (34' 331);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledCrcOk.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledCrcOk.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledCrcOk.TabIndex = 28;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRxReady.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRxReady.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRxReady.Location = new System.Drawing.Point (34' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRxReady.Location = new System.Drawing.Point (34' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRxReady.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRxReady.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRxReady.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPayloadReady.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPayloadReady.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPayloadReady.Location = new System.Drawing.Point (34' 310);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPayloadReady.Location = new System.Drawing.Point (34' 310);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPayloadReady.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPayloadReady.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPayloadReady.TabIndex = 26;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTxReady.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTxReady.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTxReady.Location = new System.Drawing.Point (34' 61);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTxReady.Location = new System.Drawing.Point (34' 61);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTxReady.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTxReady.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTxReady.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPacketSent.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPacketSent.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPacketSent.Location = new System.Drawing.Point (34' 289);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPacketSent.Location = new System.Drawing.Point (34' 289);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPacketSent.Margin = new System.Windows.Forms.Padding (3' 6' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPacketSent.Margin = new System.Windows.Forms.Padding (3' 6' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPacketSent.Margin = new System.Windows.Forms.Padding (3' 6' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPacketSent.Margin = new System.Windows.Forms.Padding (3' 6' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPacketSent.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPacketSent.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPacketSent.TabIndex = 24;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.Location = new System.Drawing.Point (34' 82);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.Location = new System.Drawing.Point (34' 82);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.Margin = new System.Windows.Forms.Padding (3' 3' 3' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.Margin = new System.Windows.Forms.Padding (3' 3' 3' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.Margin = new System.Windows.Forms.Padding (3' 3' 3' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.Margin = new System.Windows.Forms.Padding (3' 3' 3' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledPllLock.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledModeReady.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledModeReady.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledModeReady.Location = new System.Drawing.Point (34' 19);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledModeReady.Location = new System.Drawing.Point (34' 19);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledModeReady.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledModeReady.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoOverrun.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoOverrun.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoOverrun.Location = new System.Drawing.Point (34' 262);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoOverrun.Location = new System.Drawing.Point (34' 262);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoOverrun.Margin = new System.Windows.Forms.Padding (3' 3' 3' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoOverrun.Margin = new System.Windows.Forms.Padding (3' 3' 3' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoOverrun.Margin = new System.Windows.Forms.Padding (3' 3' 3' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoOverrun.Margin = new System.Windows.Forms.Padding (3' 3' 3' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoOverrun.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoOverrun.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoOverrun.TabIndex = 22;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.Location = new System.Drawing.Point (34' 109);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.Location = new System.Drawing.Point (34' 109);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.Margin = new System.Windows.Forms.Padding (3' 6' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.Margin = new System.Windows.Forms.Padding (3' 6' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.Margin = new System.Windows.Forms.Padding (3' 6' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.Margin = new System.Windows.Forms.Padding (3' 6' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledRssi.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoLevel.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoLevel.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoLevel.Location = new System.Drawing.Point (34' 241);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoLevel.Location = new System.Drawing.Point (34' 241);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoLevel.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoLevel.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoLevel.TabIndex = 20;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTimeout.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTimeout.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTimeout.Location = new System.Drawing.Point (34' 130);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTimeout.Location = new System.Drawing.Point (34' 130);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTimeout.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTimeout.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledTimeout.TabIndex = 10;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoNotEmpty.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoNotEmpty.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoNotEmpty.Location = new System.Drawing.Point (34' 220);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoNotEmpty.Location = new System.Drawing.Point (34' 220);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoNotEmpty.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoNotEmpty.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoNotEmpty.TabIndex = 18;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledAutoMode.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledAutoMode.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledAutoMode.Location = new System.Drawing.Point (34' 151);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledAutoMode.Location = new System.Drawing.Point (34' 151);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledAutoMode.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledAutoMode.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledAutoMode.TabIndex = 12;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoFull.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoFull.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoFull.Location = new System.Drawing.Point (34' 199);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoFull.Location = new System.Drawing.Point (34' 199);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoFull.Margin = new System.Windows.Forms.Padding (3' 6' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoFull.Margin = new System.Windows.Forms.Padding (3' 6' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoFull.Margin = new System.Windows.Forms.Padding (3' 6' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoFull.Margin = new System.Windows.Forms.Padding (3' 6' 3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoFull.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoFull.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledFifoFull.TabIndex = 16;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.LedSize = new System.Drawing.Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.Location = new System.Drawing.Point (34' 172);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.Location = new System.Drawing.Point (34' 172);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.Margin = new System.Windows.Forms.Padding (3' 3' 3' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.Margin = new System.Windows.Forms.Padding (3' 3' 3' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.Margin = new System.Windows.Forms.Padding (3' 3' 3' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.Margin = new System.Windows.Forms.Padding (3' 3' 3' 6);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.Size = new System.Drawing.Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.ledSyncAddressMatch.TabIndex = 14;  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (1008' 525);  
Magic Number,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (1008' 525);  
Magic Number,SemtechLib.Devices.SX1231.Controls,SpectrumGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\SpectrumGraphControl.cs,InitializeComponent,The following statement contains a magic number: graph.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,SpectrumGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\SpectrumGraphControl.cs,SetupGraphPane,The following statement contains a magic number: graphPane.XAxis.Scale.Min = 914000000.0;  
Magic Number,SemtechLib.Devices.SX1231.Controls,SpectrumGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\SpectrumGraphControl.cs,SetupGraphPane,The following statement contains a magic number: graphPane.XAxis.Scale.Max = 915000000.0;  
Magic Number,SemtechLib.Devices.SX1231.Controls,SpectrumGraphControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\SpectrumGraphControl.cs,SetupGraphPane,The following statement contains a magic number: graphPane.YAxis.Scale.Min = -150.0;  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,AddHeaderLabel,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	label = new Label ();  	label.AutoSize = false;  	label.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Bold' GraphicsUnit.Point' 0);  	label.TextAlign = ContentAlignment.MiddleCenter;  	label.TabIndex = tabIndex++;  	labelList.Add (label);  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,AddHeaderLabel,The following statement contains a magic number: labelList [col + 1].Size = new Size (0x27' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,AddHeaderLabel,The following statement contains a magic number: labelList [col + 2].Text = "Value";  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,AddHeaderLabel,The following statement contains a magic number: labelList [col + 2].Size = new Size (0x27' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,AddHeaderLabel,The following statement contains a magic number: labelList [col + 2].Size = new Size (0x27' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,AddHeaderLabel,The following statement contains a magic number: panel.Controls.Add (labelList [col + 2]' col + 2' row);  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,AddHeaderLabel,The following statement contains a magic number: panel.Controls.Add (labelList [col + 2]' col + 2' row);  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: for (int i = 0; i < registers.Count; i++) {  	if (registers [i].Visible) {  		label = new Label ();  		label.AutoSize = false;  		Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Bold' GraphicsUnit.Point' 0);  		label.TextAlign = ContentAlignment.MiddleLeft;  		label.TabIndex = tabIndex++;  		label.Margin = new Padding (0);  		label.Size = new Size (LABEL_SIZE_WIDTH' LABEL_SIZE_HEIGHT);  		label.Text = registers [i].Name;  		panel.Controls.Add (label' column' row);  		label = new Label ();  		label.AutoSize = false;  		label.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  		label.TextAlign = ContentAlignment.MiddleCenter;  		label.TabIndex = tabIndex++;  		label.Margin = new Padding (0);  		label.Size = new Size (0x27' 20);  		label.Text = "0x" + registers [i].Address.ToString ("X02");  		panel.Controls.Add (label' column + 1' row);  		TextBox control = new TextBox ();  		control.AutoSize = false;  		control.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  		control.TextAlign = HorizontalAlignment.Center;  		control.MaxLength = 4;  		control.TabIndex = tabIndex++;  		control.Tag = "0x" + registers [i].Address.ToString ("X02");  		control.Margin = new Padding (0);  		control.Size = new Size (0x2d' 20);  		control.Text = "0x" + registers [i].Value.ToString ("X02");  		control.ReadOnly = registers [i].ReadOnly;  		control.Validated += new EventHandler (tBox_Validated);  		control.Enter += new EventHandler (tBox_Enter);  		control.Validating += new CancelEventHandler (tBox_Validating);  		control.TextChanged += new EventHandler (tBox_TextChanged);  		panel.Controls.Add (control' column + 2' row++);  		if (row > ((registers.Count - invisibleCnt) / split)) {  			row = 1;  			column += 3;  			if (column < (split * 3) || ((registers.Count - invisibleCnt) % split) != 0L) {  				AddHeaderLabel (column' 0);  			}  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: for (int i = 0; i < registers.Count; i++) {  	if (registers [i].Visible) {  		label = new Label ();  		label.AutoSize = false;  		Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Bold' GraphicsUnit.Point' 0);  		label.TextAlign = ContentAlignment.MiddleLeft;  		label.TabIndex = tabIndex++;  		label.Margin = new Padding (0);  		label.Size = new Size (LABEL_SIZE_WIDTH' LABEL_SIZE_HEIGHT);  		label.Text = registers [i].Name;  		panel.Controls.Add (label' column' row);  		label = new Label ();  		label.AutoSize = false;  		label.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  		label.TextAlign = ContentAlignment.MiddleCenter;  		label.TabIndex = tabIndex++;  		label.Margin = new Padding (0);  		label.Size = new Size (0x27' 20);  		label.Text = "0x" + registers [i].Address.ToString ("X02");  		panel.Controls.Add (label' column + 1' row);  		TextBox control = new TextBox ();  		control.AutoSize = false;  		control.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  		control.TextAlign = HorizontalAlignment.Center;  		control.MaxLength = 4;  		control.TabIndex = tabIndex++;  		control.Tag = "0x" + registers [i].Address.ToString ("X02");  		control.Margin = new Padding (0);  		control.Size = new Size (0x2d' 20);  		control.Text = "0x" + registers [i].Value.ToString ("X02");  		control.ReadOnly = registers [i].ReadOnly;  		control.Validated += new EventHandler (tBox_Validated);  		control.Enter += new EventHandler (tBox_Enter);  		control.Validating += new CancelEventHandler (tBox_Validating);  		control.TextChanged += new EventHandler (tBox_TextChanged);  		panel.Controls.Add (control' column + 2' row++);  		if (row > ((registers.Count - invisibleCnt) / split)) {  			row = 1;  			column += 3;  			if (column < (split * 3) || ((registers.Count - invisibleCnt) % split) != 0L) {  				AddHeaderLabel (column' 0);  			}  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: for (int i = 0; i < registers.Count; i++) {  	if (registers [i].Visible) {  		label = new Label ();  		label.AutoSize = false;  		Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Bold' GraphicsUnit.Point' 0);  		label.TextAlign = ContentAlignment.MiddleLeft;  		label.TabIndex = tabIndex++;  		label.Margin = new Padding (0);  		label.Size = new Size (LABEL_SIZE_WIDTH' LABEL_SIZE_HEIGHT);  		label.Text = registers [i].Name;  		panel.Controls.Add (label' column' row);  		label = new Label ();  		label.AutoSize = false;  		label.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  		label.TextAlign = ContentAlignment.MiddleCenter;  		label.TabIndex = tabIndex++;  		label.Margin = new Padding (0);  		label.Size = new Size (0x27' 20);  		label.Text = "0x" + registers [i].Address.ToString ("X02");  		panel.Controls.Add (label' column + 1' row);  		TextBox control = new TextBox ();  		control.AutoSize = false;  		control.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  		control.TextAlign = HorizontalAlignment.Center;  		control.MaxLength = 4;  		control.TabIndex = tabIndex++;  		control.Tag = "0x" + registers [i].Address.ToString ("X02");  		control.Margin = new Padding (0);  		control.Size = new Size (0x2d' 20);  		control.Text = "0x" + registers [i].Value.ToString ("X02");  		control.ReadOnly = registers [i].ReadOnly;  		control.Validated += new EventHandler (tBox_Validated);  		control.Enter += new EventHandler (tBox_Enter);  		control.Validating += new CancelEventHandler (tBox_Validating);  		control.TextChanged += new EventHandler (tBox_TextChanged);  		panel.Controls.Add (control' column + 2' row++);  		if (row > ((registers.Count - invisibleCnt) / split)) {  			row = 1;  			column += 3;  			if (column < (split * 3) || ((registers.Count - invisibleCnt) % split) != 0L) {  				AddHeaderLabel (column' 0);  			}  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: for (int i = 0; i < registers.Count; i++) {  	if (registers [i].Visible) {  		label = new Label ();  		label.AutoSize = false;  		Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Bold' GraphicsUnit.Point' 0);  		label.TextAlign = ContentAlignment.MiddleLeft;  		label.TabIndex = tabIndex++;  		label.Margin = new Padding (0);  		label.Size = new Size (LABEL_SIZE_WIDTH' LABEL_SIZE_HEIGHT);  		label.Text = registers [i].Name;  		panel.Controls.Add (label' column' row);  		label = new Label ();  		label.AutoSize = false;  		label.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  		label.TextAlign = ContentAlignment.MiddleCenter;  		label.TabIndex = tabIndex++;  		label.Margin = new Padding (0);  		label.Size = new Size (0x27' 20);  		label.Text = "0x" + registers [i].Address.ToString ("X02");  		panel.Controls.Add (label' column + 1' row);  		TextBox control = new TextBox ();  		control.AutoSize = false;  		control.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  		control.TextAlign = HorizontalAlignment.Center;  		control.MaxLength = 4;  		control.TabIndex = tabIndex++;  		control.Tag = "0x" + registers [i].Address.ToString ("X02");  		control.Margin = new Padding (0);  		control.Size = new Size (0x2d' 20);  		control.Text = "0x" + registers [i].Value.ToString ("X02");  		control.ReadOnly = registers [i].ReadOnly;  		control.Validated += new EventHandler (tBox_Validated);  		control.Enter += new EventHandler (tBox_Enter);  		control.Validating += new CancelEventHandler (tBox_Validating);  		control.TextChanged += new EventHandler (tBox_TextChanged);  		panel.Controls.Add (control' column + 2' row++);  		if (row > ((registers.Count - invisibleCnt) / split)) {  			row = 1;  			column += 3;  			if (column < (split * 3) || ((registers.Count - invisibleCnt) % split) != 0L) {  				AddHeaderLabel (column' 0);  			}  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: for (int i = 0; i < registers.Count; i++) {  	if (registers [i].Visible) {  		label = new Label ();  		label.AutoSize = false;  		Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Bold' GraphicsUnit.Point' 0);  		label.TextAlign = ContentAlignment.MiddleLeft;  		label.TabIndex = tabIndex++;  		label.Margin = new Padding (0);  		label.Size = new Size (LABEL_SIZE_WIDTH' LABEL_SIZE_HEIGHT);  		label.Text = registers [i].Name;  		panel.Controls.Add (label' column' row);  		label = new Label ();  		label.AutoSize = false;  		label.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  		label.TextAlign = ContentAlignment.MiddleCenter;  		label.TabIndex = tabIndex++;  		label.Margin = new Padding (0);  		label.Size = new Size (0x27' 20);  		label.Text = "0x" + registers [i].Address.ToString ("X02");  		panel.Controls.Add (label' column + 1' row);  		TextBox control = new TextBox ();  		control.AutoSize = false;  		control.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  		control.TextAlign = HorizontalAlignment.Center;  		control.MaxLength = 4;  		control.TabIndex = tabIndex++;  		control.Tag = "0x" + registers [i].Address.ToString ("X02");  		control.Margin = new Padding (0);  		control.Size = new Size (0x2d' 20);  		control.Text = "0x" + registers [i].Value.ToString ("X02");  		control.ReadOnly = registers [i].ReadOnly;  		control.Validated += new EventHandler (tBox_Validated);  		control.Enter += new EventHandler (tBox_Enter);  		control.Validating += new CancelEventHandler (tBox_Validating);  		control.TextChanged += new EventHandler (tBox_TextChanged);  		panel.Controls.Add (control' column + 2' row++);  		if (row > ((registers.Count - invisibleCnt) / split)) {  			row = 1;  			column += 3;  			if (column < (split * 3) || ((registers.Count - invisibleCnt) % split) != 0L) {  				AddHeaderLabel (column' 0);  			}  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: for (int i = 0; i < registers.Count; i++) {  	if (registers [i].Visible) {  		label = new Label ();  		label.AutoSize = false;  		Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Bold' GraphicsUnit.Point' 0);  		label.TextAlign = ContentAlignment.MiddleLeft;  		label.TabIndex = tabIndex++;  		label.Margin = new Padding (0);  		label.Size = new Size (LABEL_SIZE_WIDTH' LABEL_SIZE_HEIGHT);  		label.Text = registers [i].Name;  		panel.Controls.Add (label' column' row);  		label = new Label ();  		label.AutoSize = false;  		label.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  		label.TextAlign = ContentAlignment.MiddleCenter;  		label.TabIndex = tabIndex++;  		label.Margin = new Padding (0);  		label.Size = new Size (0x27' 20);  		label.Text = "0x" + registers [i].Address.ToString ("X02");  		panel.Controls.Add (label' column + 1' row);  		TextBox control = new TextBox ();  		control.AutoSize = false;  		control.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  		control.TextAlign = HorizontalAlignment.Center;  		control.MaxLength = 4;  		control.TabIndex = tabIndex++;  		control.Tag = "0x" + registers [i].Address.ToString ("X02");  		control.Margin = new Padding (0);  		control.Size = new Size (0x2d' 20);  		control.Text = "0x" + registers [i].Value.ToString ("X02");  		control.ReadOnly = registers [i].ReadOnly;  		control.Validated += new EventHandler (tBox_Validated);  		control.Enter += new EventHandler (tBox_Enter);  		control.Validating += new CancelEventHandler (tBox_Validating);  		control.TextChanged += new EventHandler (tBox_TextChanged);  		panel.Controls.Add (control' column + 2' row++);  		if (row > ((registers.Count - invisibleCnt) / split)) {  			row = 1;  			column += 3;  			if (column < (split * 3) || ((registers.Count - invisibleCnt) % split) != 0L) {  				AddHeaderLabel (column' 0);  			}  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: if (registers [i].Visible) {  	label = new Label ();  	label.AutoSize = false;  	Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Bold' GraphicsUnit.Point' 0);  	label.TextAlign = ContentAlignment.MiddleLeft;  	label.TabIndex = tabIndex++;  	label.Margin = new Padding (0);  	label.Size = new Size (LABEL_SIZE_WIDTH' LABEL_SIZE_HEIGHT);  	label.Text = registers [i].Name;  	panel.Controls.Add (label' column' row);  	label = new Label ();  	label.AutoSize = false;  	label.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  	label.TextAlign = ContentAlignment.MiddleCenter;  	label.TabIndex = tabIndex++;  	label.Margin = new Padding (0);  	label.Size = new Size (0x27' 20);  	label.Text = "0x" + registers [i].Address.ToString ("X02");  	panel.Controls.Add (label' column + 1' row);  	TextBox control = new TextBox ();  	control.AutoSize = false;  	control.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  	control.TextAlign = HorizontalAlignment.Center;  	control.MaxLength = 4;  	control.TabIndex = tabIndex++;  	control.Tag = "0x" + registers [i].Address.ToString ("X02");  	control.Margin = new Padding (0);  	control.Size = new Size (0x2d' 20);  	control.Text = "0x" + registers [i].Value.ToString ("X02");  	control.ReadOnly = registers [i].ReadOnly;  	control.Validated += new EventHandler (tBox_Validated);  	control.Enter += new EventHandler (tBox_Enter);  	control.Validating += new CancelEventHandler (tBox_Validating);  	control.TextChanged += new EventHandler (tBox_TextChanged);  	panel.Controls.Add (control' column + 2' row++);  	if (row > ((registers.Count - invisibleCnt) / split)) {  		row = 1;  		column += 3;  		if (column < (split * 3) || ((registers.Count - invisibleCnt) % split) != 0L) {  			AddHeaderLabel (column' 0);  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: if (registers [i].Visible) {  	label = new Label ();  	label.AutoSize = false;  	Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Bold' GraphicsUnit.Point' 0);  	label.TextAlign = ContentAlignment.MiddleLeft;  	label.TabIndex = tabIndex++;  	label.Margin = new Padding (0);  	label.Size = new Size (LABEL_SIZE_WIDTH' LABEL_SIZE_HEIGHT);  	label.Text = registers [i].Name;  	panel.Controls.Add (label' column' row);  	label = new Label ();  	label.AutoSize = false;  	label.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  	label.TextAlign = ContentAlignment.MiddleCenter;  	label.TabIndex = tabIndex++;  	label.Margin = new Padding (0);  	label.Size = new Size (0x27' 20);  	label.Text = "0x" + registers [i].Address.ToString ("X02");  	panel.Controls.Add (label' column + 1' row);  	TextBox control = new TextBox ();  	control.AutoSize = false;  	control.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  	control.TextAlign = HorizontalAlignment.Center;  	control.MaxLength = 4;  	control.TabIndex = tabIndex++;  	control.Tag = "0x" + registers [i].Address.ToString ("X02");  	control.Margin = new Padding (0);  	control.Size = new Size (0x2d' 20);  	control.Text = "0x" + registers [i].Value.ToString ("X02");  	control.ReadOnly = registers [i].ReadOnly;  	control.Validated += new EventHandler (tBox_Validated);  	control.Enter += new EventHandler (tBox_Enter);  	control.Validating += new CancelEventHandler (tBox_Validating);  	control.TextChanged += new EventHandler (tBox_TextChanged);  	panel.Controls.Add (control' column + 2' row++);  	if (row > ((registers.Count - invisibleCnt) / split)) {  		row = 1;  		column += 3;  		if (column < (split * 3) || ((registers.Count - invisibleCnt) % split) != 0L) {  			AddHeaderLabel (column' 0);  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: if (registers [i].Visible) {  	label = new Label ();  	label.AutoSize = false;  	Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Bold' GraphicsUnit.Point' 0);  	label.TextAlign = ContentAlignment.MiddleLeft;  	label.TabIndex = tabIndex++;  	label.Margin = new Padding (0);  	label.Size = new Size (LABEL_SIZE_WIDTH' LABEL_SIZE_HEIGHT);  	label.Text = registers [i].Name;  	panel.Controls.Add (label' column' row);  	label = new Label ();  	label.AutoSize = false;  	label.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  	label.TextAlign = ContentAlignment.MiddleCenter;  	label.TabIndex = tabIndex++;  	label.Margin = new Padding (0);  	label.Size = new Size (0x27' 20);  	label.Text = "0x" + registers [i].Address.ToString ("X02");  	panel.Controls.Add (label' column + 1' row);  	TextBox control = new TextBox ();  	control.AutoSize = false;  	control.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  	control.TextAlign = HorizontalAlignment.Center;  	control.MaxLength = 4;  	control.TabIndex = tabIndex++;  	control.Tag = "0x" + registers [i].Address.ToString ("X02");  	control.Margin = new Padding (0);  	control.Size = new Size (0x2d' 20);  	control.Text = "0x" + registers [i].Value.ToString ("X02");  	control.ReadOnly = registers [i].ReadOnly;  	control.Validated += new EventHandler (tBox_Validated);  	control.Enter += new EventHandler (tBox_Enter);  	control.Validating += new CancelEventHandler (tBox_Validating);  	control.TextChanged += new EventHandler (tBox_TextChanged);  	panel.Controls.Add (control' column + 2' row++);  	if (row > ((registers.Count - invisibleCnt) / split)) {  		row = 1;  		column += 3;  		if (column < (split * 3) || ((registers.Count - invisibleCnt) % split) != 0L) {  			AddHeaderLabel (column' 0);  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: if (registers [i].Visible) {  	label = new Label ();  	label.AutoSize = false;  	Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Bold' GraphicsUnit.Point' 0);  	label.TextAlign = ContentAlignment.MiddleLeft;  	label.TabIndex = tabIndex++;  	label.Margin = new Padding (0);  	label.Size = new Size (LABEL_SIZE_WIDTH' LABEL_SIZE_HEIGHT);  	label.Text = registers [i].Name;  	panel.Controls.Add (label' column' row);  	label = new Label ();  	label.AutoSize = false;  	label.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  	label.TextAlign = ContentAlignment.MiddleCenter;  	label.TabIndex = tabIndex++;  	label.Margin = new Padding (0);  	label.Size = new Size (0x27' 20);  	label.Text = "0x" + registers [i].Address.ToString ("X02");  	panel.Controls.Add (label' column + 1' row);  	TextBox control = new TextBox ();  	control.AutoSize = false;  	control.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  	control.TextAlign = HorizontalAlignment.Center;  	control.MaxLength = 4;  	control.TabIndex = tabIndex++;  	control.Tag = "0x" + registers [i].Address.ToString ("X02");  	control.Margin = new Padding (0);  	control.Size = new Size (0x2d' 20);  	control.Text = "0x" + registers [i].Value.ToString ("X02");  	control.ReadOnly = registers [i].ReadOnly;  	control.Validated += new EventHandler (tBox_Validated);  	control.Enter += new EventHandler (tBox_Enter);  	control.Validating += new CancelEventHandler (tBox_Validating);  	control.TextChanged += new EventHandler (tBox_TextChanged);  	panel.Controls.Add (control' column + 2' row++);  	if (row > ((registers.Count - invisibleCnt) / split)) {  		row = 1;  		column += 3;  		if (column < (split * 3) || ((registers.Count - invisibleCnt) % split) != 0L) {  			AddHeaderLabel (column' 0);  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: if (registers [i].Visible) {  	label = new Label ();  	label.AutoSize = false;  	Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Bold' GraphicsUnit.Point' 0);  	label.TextAlign = ContentAlignment.MiddleLeft;  	label.TabIndex = tabIndex++;  	label.Margin = new Padding (0);  	label.Size = new Size (LABEL_SIZE_WIDTH' LABEL_SIZE_HEIGHT);  	label.Text = registers [i].Name;  	panel.Controls.Add (label' column' row);  	label = new Label ();  	label.AutoSize = false;  	label.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  	label.TextAlign = ContentAlignment.MiddleCenter;  	label.TabIndex = tabIndex++;  	label.Margin = new Padding (0);  	label.Size = new Size (0x27' 20);  	label.Text = "0x" + registers [i].Address.ToString ("X02");  	panel.Controls.Add (label' column + 1' row);  	TextBox control = new TextBox ();  	control.AutoSize = false;  	control.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  	control.TextAlign = HorizontalAlignment.Center;  	control.MaxLength = 4;  	control.TabIndex = tabIndex++;  	control.Tag = "0x" + registers [i].Address.ToString ("X02");  	control.Margin = new Padding (0);  	control.Size = new Size (0x2d' 20);  	control.Text = "0x" + registers [i].Value.ToString ("X02");  	control.ReadOnly = registers [i].ReadOnly;  	control.Validated += new EventHandler (tBox_Validated);  	control.Enter += new EventHandler (tBox_Enter);  	control.Validating += new CancelEventHandler (tBox_Validating);  	control.TextChanged += new EventHandler (tBox_TextChanged);  	panel.Controls.Add (control' column + 2' row++);  	if (row > ((registers.Count - invisibleCnt) / split)) {  		row = 1;  		column += 3;  		if (column < (split * 3) || ((registers.Count - invisibleCnt) % split) != 0L) {  			AddHeaderLabel (column' 0);  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: if (registers [i].Visible) {  	label = new Label ();  	label.AutoSize = false;  	Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Bold' GraphicsUnit.Point' 0);  	label.TextAlign = ContentAlignment.MiddleLeft;  	label.TabIndex = tabIndex++;  	label.Margin = new Padding (0);  	label.Size = new Size (LABEL_SIZE_WIDTH' LABEL_SIZE_HEIGHT);  	label.Text = registers [i].Name;  	panel.Controls.Add (label' column' row);  	label = new Label ();  	label.AutoSize = false;  	label.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  	label.TextAlign = ContentAlignment.MiddleCenter;  	label.TabIndex = tabIndex++;  	label.Margin = new Padding (0);  	label.Size = new Size (0x27' 20);  	label.Text = "0x" + registers [i].Address.ToString ("X02");  	panel.Controls.Add (label' column + 1' row);  	TextBox control = new TextBox ();  	control.AutoSize = false;  	control.Font = new Font ("Microsoft Sans Serif"' 8.25f' FontStyle.Regular' GraphicsUnit.Point' 0);  	control.TextAlign = HorizontalAlignment.Center;  	control.MaxLength = 4;  	control.TabIndex = tabIndex++;  	control.Tag = "0x" + registers [i].Address.ToString ("X02");  	control.Margin = new Padding (0);  	control.Size = new Size (0x2d' 20);  	control.Text = "0x" + registers [i].Value.ToString ("X02");  	control.ReadOnly = registers [i].ReadOnly;  	control.Validated += new EventHandler (tBox_Validated);  	control.Enter += new EventHandler (tBox_Enter);  	control.Validating += new CancelEventHandler (tBox_Validating);  	control.TextChanged += new EventHandler (tBox_TextChanged);  	panel.Controls.Add (control' column + 2' row++);  	if (row > ((registers.Count - invisibleCnt) / split)) {  		row = 1;  		column += 3;  		if (column < (split * 3) || ((registers.Count - invisibleCnt) % split) != 0L) {  			AddHeaderLabel (column' 0);  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: label.Size = new Size (0x27' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: control.MaxLength = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: control.Size = new Size (0x2d' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: panel.Controls.Add (control' column + 2' row++);  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: if (row > ((registers.Count - invisibleCnt) / split)) {  	row = 1;  	column += 3;  	if (column < (split * 3) || ((registers.Count - invisibleCnt) % split) != 0L) {  		AddHeaderLabel (column' 0);  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: if (row > ((registers.Count - invisibleCnt) / split)) {  	row = 1;  	column += 3;  	if (column < (split * 3) || ((registers.Count - invisibleCnt) % split) != 0L) {  		AddHeaderLabel (column' 0);  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: column += 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,RegisterTableControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\RegisterTableControl.cs,BuildTable,The following statement contains a magic number: if (column < (split * 3) || ((registers.Count - invisibleCnt) % split) != 0L) {  	AddHeaderLabel (column' 0);  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label4.Location = new Point (11' 0x56);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label4.Size = new Size (0x56' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label4.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAGC.Location = new Point (11' 30);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAGC.Location = new Point (11' 30);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAGC.Size = new Size (0x59' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaZin200.Location = new Point (3' 0x11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaZin200.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaZin200.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaZin50.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaZin50.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaZin50.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: panel4.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaLowPowerOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaLowPowerOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaLowPowerOn.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaLowPowerOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaLowPowerOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label7.Location = new Point (0xa1' 30);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label7.Size = new Size (0x20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label7.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblSensitivityBoost.Location = new Point (11' 0x3d);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblSensitivityBoost.Size = new Size (0x56' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblSensitivityBoost.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: pnlSensitivityBoost.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnSensitivityBoostOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnSensitivityBoostOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnSensitivityBoostOn.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnSensitivityBoostOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnSensitivityBoostOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxLnaSensitivity.Location = new Point (0x249' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxLnaSensitivity.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxAgc.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: panel2.Location = new Point (110' 0x17);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAgcAutoRefOff.Location = new Point (3' 0x11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAgcAutoRefOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAgcAutoRefOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAgcAutoRefOn.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAgcAutoRefOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAgcAutoRefOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label5.Location = new Point (15' 0x22);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label5.Size = new Size (80' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label5.Size = new Size (80' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label8.Location = new Point (15' 0x41);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label8.Size = new Size (0x59' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label8.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label24.Location = new Point (15' 0x75);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label24.Size = new Size (0x59' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label24.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label25.Location = new Point (15' 0x8f);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label25.Size = new Size (0x59' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label25.TabIndex = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label26.Location = new Point (15' 0xa9);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label26.Size = new Size (0x59' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label26.TabIndex = 14;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label27.Location = new Point (15' 0xc3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label27.Size = new Size (0x59' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label28.Location = new Point (15' 0xdd);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label28.Size = new Size (0x59' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label28.TabIndex = 20;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label1.Size = new Size (0x1c' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label1.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label2.Location = new Point (15' 0x5d);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label2.Size = new Size (0x43' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label2.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label3.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label3.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label3.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label29.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label29.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label29.TabIndex = 10;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label30.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label30.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label30.TabIndex = 13;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label31.Location = new Point (0xa7' 170);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label31.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label31.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label32.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label32.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label33.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label33.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcStep5.Location = new Point (110' 0xdb);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: bits [0] = 15;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcStep5.Size = new Size (0x33' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray2 [0] = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcSnrMargin.Location = new Point (110' 0x59);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray3 [0] = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcSnrMargin.Size = new Size (0x33' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcSnrMargin.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray4 [0] = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcStep4.Location = new Point (110' 0xc1);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray5 [0] = 15;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcStep4.Size = new Size (0x33' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray6 [0] = 9;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcRefLevel.Location = new Point (110' 0x3f);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray7 [0] = 80;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray7 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray7 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray8 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray8 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcRefLevel.Size = new Size (0x33' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcRefLevel.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray9 [0] = 80;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray9 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray9 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcStep3.Location = new Point (110' 0xa7);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray10 [0] = 15;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcStep3.Size = new Size (0x33' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcStep3.TabIndex = 15;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray11 [0] = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcStep1.Location = new Point (110' 0x73);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcStep1.Size = new Size (0x33' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcStep1.TabIndex = 9;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcStep2.Location = new Point (110' 0x8d);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray14 [0] = 15;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcStep2.Size = new Size (0x33' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAgcStep2.TabIndex = 12;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray15 [0] = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxRssi.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: pnlRssiPhase.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: pnlRssiPhase.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: pnlRssiPhase.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: pnlRssiPhase.Margin = new Padding (3' 2' 3' 2);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: pnlRssiPhase.Size = new Size (0x77' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: pnlRssiPhase.TabIndex = 20;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnRssiPhaseManual.Location = new Point (0x38' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnRssiPhaseManual.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnRssiPhaseManual.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnRssiPhaseManual.Size = new Size (60' 0x11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnRssiPhaseAuto.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnRssiPhaseAuto.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnRssiPhaseAuto.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnRssiPhaseAuto.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label23.Location = new Point (6' 0xac);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label23.Size = new Size (40' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label23.Size = new Size (40' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: btnRestartRx.Location = new Point (60' 0xa7);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnFastRxOff.Location = new Point (50' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnFastRxOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnFastRxOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnFastRxOn.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnFastRxOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnFastRxOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label21.Location = new Point (3' 0x15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label21.Size = new Size (0x57' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: btnRssiRead.TabIndex = 14;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label17.Size = new Size (0x1c' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label17.TabIndex = 12;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label54.Size = new Size (0x1c' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label55.Location = new Point (3' 0x79);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label55.Size = new Size (0x39' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label55.TabIndex = 10;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label56.Location = new Point (3' 0x93);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label56.Size = new Size (0x25' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label56.TabIndex = 13;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblRssiValue.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblRssiValue.Size = new Size (0x62' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblRssiValue.TabIndex = 15;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray16 [0] = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray16 [3] = 0x10000;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray18 [3] = -2147418112;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray18 [3] = -2147418112;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudRssiThresh.Size = new Size (0x62' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudRssiThresh.TabIndex = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray19 [0] = 80;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray19 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray19 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: ledRssiDone.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: ledRssiDone.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: ledRssiDone.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: ledRssiDone.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: panel1.TabIndex = 9;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnRssiAutoThreshOff.Location = new Point (50' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnRssiAutoThreshOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnRssiAutoThreshOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnRssiAutoThreshOn.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnRssiAutoThreshOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnRssiAutoThreshOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label6.Location = new Point (3' 0x60);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label6.Size = new Size (0x4e' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label6.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray20 [0] = 850;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudTimeoutRxStart.Size = new Size (0x62' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudTimeoutRxStart.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label9.Location = new Point (3' 0x2e);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label9.Size = new Size (0x57' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label9.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label14.Location = new Point (3' 0x48);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label14.Size = new Size (0x5e' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label14.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label11.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label11.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label11.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label15.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label15.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label15.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray21 [0] = 850;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudTimeoutRssiThresh.Size = new Size (0x62' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudTimeoutRssiThresh.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxAfcFei.Location = new Point (0x126' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxAfcFei.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray24 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray24 [3] = -2147483648;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudLowBetaAfcOffset.Size = new Size (0x62' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudLowBetaAfcOffset.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLowBetaAfcOffset.Location = new Point (3' 0x2c);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLowBetaAfcOffset.Size = new Size (0x66' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLowBetaAfcOffset.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAfcLowBeta.Location = new Point (3' 0x15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAfcLowBeta.Size = new Size (0x49' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label19.Location = new Point (3' 70);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label19.Location = new Point (3' 70);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label19.Size = new Size (80' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label19.Size = new Size (80' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label19.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLowBetaAfcOfssetUnit.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLowBetaAfcOfssetUnit.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLowBetaAfcOfssetUnit.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label20.Location = new Point (3' 0x5d);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label20.Size = new Size (0x36' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label20.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcLowBetaOff.Location = new Point (50' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcLowBetaOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcLowBetaOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcLowBetaOn.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcLowBetaOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcLowBetaOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: panel8.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcAutoClearOff.Location = new Point (50' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcAutoClearOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcAutoClearOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcAutoClearOn.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcAutoClearOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcAutoClearOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: ledFeiDone.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: ledFeiDone.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: ledFeiDone.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: ledFeiDone.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: panel9.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcAutoOff.Location = new Point (50' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcAutoOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcAutoOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcAutoOn.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcAutoOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnAfcAutoOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblFeiValue.Location = new Point (0x85' 140);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblFeiValue.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblFeiValue.Size = new Size (0x62' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label12.Location = new Point (3' 0x90);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label12.Size = new Size (0x1a' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label12.TabIndex = 15;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label18.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label18.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label18.TabIndex = 14;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label10.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label10.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: btnAfcClear.TabIndex = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: btnAfcStart.TabIndex = 10;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: ledAfcDone.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: ledAfcDone.LedSize = new Size (11' 11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: ledAfcDone.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: ledAfcDone.Size = new Size (15' 15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: ledAfcDone.TabIndex = 13;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAfcValue.Margin = new Padding (3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAfcValue.Size = new Size (0x62' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAfcValue.TabIndex = 12;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label22.Location = new Point (3' 0x76);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label22.Size = new Size (30' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label22.Size = new Size (30' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label22.TabIndex = 9;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxOok.Location = new Point (3' 0xc5);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxOok.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: cBoxOokThreshType.Location = new Point (0x7b' 30);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokType.Location = new Point (6' 0x22);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokType.Size = new Size (80' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokType.Size = new Size (80' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokStep.Location = new Point (6' 60);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokStep.Location = new Point (6' 60);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokStep.Size = new Size (0x68' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokStep.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokDec.Location = new Point (6' 0x56);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokDec.Size = new Size (0x66' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokDec.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokCutoff.Location = new Point (6' 0x70);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokCutoff.Size = new Size (0x69' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokCutoff.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokFixed.Location = new Point (6' 0x8a);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokFixed.Size = new Size (0x51' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblOokFixed.TabIndex = 9;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixOOKstep.Location = new Point (0xfd' 60);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixOOKstep.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixOOKstep.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixOOKstep.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixOOKfixed.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixOOKfixed.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixOOKfixed.TabIndex = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray25 [0] = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray25 [3] = 0x10000;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray26 [0] = 60;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray26 [3] = 0x10000;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray27 [0] = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray27 [3] = 0x10000;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudOokPeakThreshStep.Size = new Size (0x7c' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudOokPeakThreshStep.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray28 [0] = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray28 [3] = 0x10000;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudOokFixedThresh.Size = new Size (0x7c' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudOokFixedThresh.TabIndex = 10;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray30 [0] = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: cBoxOokPeakThreshDec.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: cBoxOokAverageThreshFilt.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxAfcBw.Location = new Point (3' 100);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxAfcBw.Location = new Point (3' 100);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray32 [0] = 12;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudAfcDccFreq.Size = new Size (0x7c' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAfcDcc.Location = new Point (6' 30);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAfcDcc.Location = new Point (6' 30);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAfcDcc.Size = new Size (0x52' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAfcRxBw.Location = new Point (6' 0x39);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAfcRxBw.Size = new Size (0x61' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAfcRxBw.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixAFCDCC.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixAFCDCC.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixAFCDCC.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixAFCRxBw.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixAFCRxBw.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixAFCRxBw.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudRxFilterBwAfc.Size = new Size (0x7c' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudRxFilterBwAfc.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxRxBw.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxRxBw.Location = new Point (3' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: numArray38 [0] = 12;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudDccFreq.Size = new Size (0x7c' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblDcc.Location = new Point (6' 0x1f);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblDcc.Size = new Size (0x52' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblRxBw.Location = new Point (6' 0x39);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblRxBw.Size = new Size (0x61' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblRxBw.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixDCC.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixDCC.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixDCC.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixRxBw.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixRxBw.Size = new Size (20' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: suffixRxBw.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudRxFilterBw.Size = new Size (0x7c' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: nudRxFilterBw.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxLna.Location = new Point (3' 0x17a);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxLna.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGainAutoOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGainAutoOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGainAutoOff.Size = new Size (60' 0x11);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGainAutoOn.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGainAutoOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGainAutoOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label13.Location = new Point (0x4f' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label13.Size = new Size (0x2a' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label13.TabIndex = 6;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label16.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label16.TabIndex = 20;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcReference.Location = new Point (110' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcReference.Location = new Point (110' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcReference.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcReference.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcReference.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcReference.TabIndex = 7;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label48.Location = new Point (110' 0x18);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label48.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label48.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label48.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label49.Location = new Point (210' 0x18);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label49.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label49.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label49.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label50.Location = new Point (310' 0x18);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label50.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label50.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label50.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label50.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label51.Location = new Point (410' 0x18);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label51.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label51.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label51.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label51.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label52.Location = new Point (510' 0x18);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label52.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label52.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label52.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label52.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain1.Location = new Point (160' 0x38);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain1.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain1.Size = new Size (100' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain1.Size = new Size (100' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain1.TabIndex = 14;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label53.Location = new Point (610' 0x18);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label53.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label53.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label53.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label53.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: panel6.Size = new Size (0x209' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain1.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain1.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain1.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain1.Size = new Size (14' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain1.Size = new Size (14' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain2.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain2.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain2.Size = new Size (14' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain2.Size = new Size (14' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain3.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain3.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain3.Size = new Size (14' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain3.Size = new Size (14' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain3.TabIndex = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain4.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain4.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain4.Size = new Size (14' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain4.Size = new Size (14' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain4.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain5.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain5.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain5.Size = new Size (14' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain5.Size = new Size (14' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain5.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain6.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain6.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain6.Size = new Size (14' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain6.Size = new Size (14' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnLnaGain6.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain2.Location = new Point (260' 0x38);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain2.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain2.Size = new Size (100' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain2.Size = new Size (100' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain2.TabIndex = 15;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain3.Location = new Point (360' 0x38);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain3.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain3.Size = new Size (100' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain3.Size = new Size (100' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain4.Location = new Point (460' 0x38);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain4.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain4.Size = new Size (100' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain4.Size = new Size (100' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain5.Location = new Point (560' 0x38);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain5.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain5.Size = new Size (100' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain5.Size = new Size (100' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain6.Location = new Point (660' 0x38);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain6.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain6.Size = new Size (100' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblLnaGain6.Size = new Size (100' 20);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh1.Location = new Point (210' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh1.Location = new Point (210' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh1.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh1.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh1.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh1.TabIndex = 8;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh2.Location = new Point (310' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh2.Location = new Point (310' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh2.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh2.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh2.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh2.TabIndex = 9;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh3.Location = new Point (410' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh3.Location = new Point (410' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh3.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh3.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh3.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh3.TabIndex = 10;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh4.Location = new Point (510' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh4.Location = new Point (510' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh4.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh4.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh4.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh4.TabIndex = 11;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh5.Location = new Point (610' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh5.Location = new Point (610' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh5.Margin = new Padding (0' 0' 0' 3);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh5.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh5.Size = new Size (100' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: lblAgcThresh5.TabIndex = 12;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label47.Location = new Point (0x2c5' 40);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label47.Size = new Size (0x40' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label47.TabIndex = 13;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxDagc.Size = new Size (0xd3' 50);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: gBoxDagc.TabIndex = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label34.Location = new Point (11' 0x15);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label34.Size = new Size (40' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label34.Size = new Size (40' 13);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: label34.TabIndex = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: panel11.TabIndex = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnDagcOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnDagcOff.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnDagcOn.Location = new Point (3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnDagcOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,InitializeComponent,The following statement contains a magic number: rBtnDagcOn.Margin = new Padding (3' 0' 3' 0);  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAfcDccFreq_ValueChanged,The following statement contains a magic number: if (((num3 >= -1) && (num3 <= 1)) && (num == num2)) {  	nudAfcDccFreq.ValueChanged -= new EventHandler (nudAfcDccFreq_ValueChanged);  	nudAfcDccFreq.Value = (4.0M * AfcRxBw) / (6.283185307179580M * ((decimal)Math.Pow (2.0' (double)((num2 - num3) + 2))));  	nudAfcDccFreq.ValueChanged += new EventHandler (nudAfcDccFreq_ValueChanged);  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAfcDccFreq_ValueChanged,The following statement contains a magic number: if (((num3 >= -1) && (num3 <= 1)) && (num == num2)) {  	nudAfcDccFreq.ValueChanged -= new EventHandler (nudAfcDccFreq_ValueChanged);  	nudAfcDccFreq.Value = (4.0M * AfcRxBw) / (6.283185307179580M * ((decimal)Math.Pow (2.0' (double)((num2 - num3) + 2))));  	nudAfcDccFreq.ValueChanged += new EventHandler (nudAfcDccFreq_ValueChanged);  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAfcDccFreq_ValueChanged,The following statement contains a magic number: nudAfcDccFreq.Value = (4.0M * AfcRxBw) / (6.283185307179580M * ((decimal)Math.Pow (2.0' (double)((num2 - num3) + 2))));  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAfcDccFreq_ValueChanged,The following statement contains a magic number: nudAfcDccFreq.Value = (4.0M * AfcRxBw) / (6.283185307179580M * ((decimal)Math.Pow (2.0' (double)((num2 - num3) + 2))));  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: if (sender == nudAgcStep1) {  	num = AgcStep1 = (byte)nudAgcStep1.Value;  	id = 1;  }  else if (sender == nudAgcStep2) {  	num = AgcStep2 = (byte)nudAgcStep2.Value;  	id = 2;  }  else if (sender == nudAgcStep3) {  	num = AgcStep3 = (byte)nudAgcStep3.Value;  	id = 3;  }  else if (sender == nudAgcStep4) {  	num = AgcStep4 = (byte)nudAgcStep4.Value;  	id = 4;  }  else if (sender == nudAgcStep5) {  	num = AgcStep5 = (byte)nudAgcStep5.Value;  	id = 5;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: if (sender == nudAgcStep1) {  	num = AgcStep1 = (byte)nudAgcStep1.Value;  	id = 1;  }  else if (sender == nudAgcStep2) {  	num = AgcStep2 = (byte)nudAgcStep2.Value;  	id = 2;  }  else if (sender == nudAgcStep3) {  	num = AgcStep3 = (byte)nudAgcStep3.Value;  	id = 3;  }  else if (sender == nudAgcStep4) {  	num = AgcStep4 = (byte)nudAgcStep4.Value;  	id = 4;  }  else if (sender == nudAgcStep5) {  	num = AgcStep5 = (byte)nudAgcStep5.Value;  	id = 5;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: if (sender == nudAgcStep1) {  	num = AgcStep1 = (byte)nudAgcStep1.Value;  	id = 1;  }  else if (sender == nudAgcStep2) {  	num = AgcStep2 = (byte)nudAgcStep2.Value;  	id = 2;  }  else if (sender == nudAgcStep3) {  	num = AgcStep3 = (byte)nudAgcStep3.Value;  	id = 3;  }  else if (sender == nudAgcStep4) {  	num = AgcStep4 = (byte)nudAgcStep4.Value;  	id = 4;  }  else if (sender == nudAgcStep5) {  	num = AgcStep5 = (byte)nudAgcStep5.Value;  	id = 5;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: if (sender == nudAgcStep1) {  	num = AgcStep1 = (byte)nudAgcStep1.Value;  	id = 1;  }  else if (sender == nudAgcStep2) {  	num = AgcStep2 = (byte)nudAgcStep2.Value;  	id = 2;  }  else if (sender == nudAgcStep3) {  	num = AgcStep3 = (byte)nudAgcStep3.Value;  	id = 3;  }  else if (sender == nudAgcStep4) {  	num = AgcStep4 = (byte)nudAgcStep4.Value;  	id = 4;  }  else if (sender == nudAgcStep5) {  	num = AgcStep5 = (byte)nudAgcStep5.Value;  	id = 5;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: if (sender == nudAgcStep2) {  	num = AgcStep2 = (byte)nudAgcStep2.Value;  	id = 2;  }  else if (sender == nudAgcStep3) {  	num = AgcStep3 = (byte)nudAgcStep3.Value;  	id = 3;  }  else if (sender == nudAgcStep4) {  	num = AgcStep4 = (byte)nudAgcStep4.Value;  	id = 4;  }  else if (sender == nudAgcStep5) {  	num = AgcStep5 = (byte)nudAgcStep5.Value;  	id = 5;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: if (sender == nudAgcStep2) {  	num = AgcStep2 = (byte)nudAgcStep2.Value;  	id = 2;  }  else if (sender == nudAgcStep3) {  	num = AgcStep3 = (byte)nudAgcStep3.Value;  	id = 3;  }  else if (sender == nudAgcStep4) {  	num = AgcStep4 = (byte)nudAgcStep4.Value;  	id = 4;  }  else if (sender == nudAgcStep5) {  	num = AgcStep5 = (byte)nudAgcStep5.Value;  	id = 5;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: if (sender == nudAgcStep2) {  	num = AgcStep2 = (byte)nudAgcStep2.Value;  	id = 2;  }  else if (sender == nudAgcStep3) {  	num = AgcStep3 = (byte)nudAgcStep3.Value;  	id = 3;  }  else if (sender == nudAgcStep4) {  	num = AgcStep4 = (byte)nudAgcStep4.Value;  	id = 4;  }  else if (sender == nudAgcStep5) {  	num = AgcStep5 = (byte)nudAgcStep5.Value;  	id = 5;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: if (sender == nudAgcStep2) {  	num = AgcStep2 = (byte)nudAgcStep2.Value;  	id = 2;  }  else if (sender == nudAgcStep3) {  	num = AgcStep3 = (byte)nudAgcStep3.Value;  	id = 3;  }  else if (sender == nudAgcStep4) {  	num = AgcStep4 = (byte)nudAgcStep4.Value;  	id = 4;  }  else if (sender == nudAgcStep5) {  	num = AgcStep5 = (byte)nudAgcStep5.Value;  	id = 5;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: id = 2;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: if (sender == nudAgcStep3) {  	num = AgcStep3 = (byte)nudAgcStep3.Value;  	id = 3;  }  else if (sender == nudAgcStep4) {  	num = AgcStep4 = (byte)nudAgcStep4.Value;  	id = 4;  }  else if (sender == nudAgcStep5) {  	num = AgcStep5 = (byte)nudAgcStep5.Value;  	id = 5;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: if (sender == nudAgcStep3) {  	num = AgcStep3 = (byte)nudAgcStep3.Value;  	id = 3;  }  else if (sender == nudAgcStep4) {  	num = AgcStep4 = (byte)nudAgcStep4.Value;  	id = 4;  }  else if (sender == nudAgcStep5) {  	num = AgcStep5 = (byte)nudAgcStep5.Value;  	id = 5;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: if (sender == nudAgcStep3) {  	num = AgcStep3 = (byte)nudAgcStep3.Value;  	id = 3;  }  else if (sender == nudAgcStep4) {  	num = AgcStep4 = (byte)nudAgcStep4.Value;  	id = 4;  }  else if (sender == nudAgcStep5) {  	num = AgcStep5 = (byte)nudAgcStep5.Value;  	id = 5;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: id = 3;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: if (sender == nudAgcStep4) {  	num = AgcStep4 = (byte)nudAgcStep4.Value;  	id = 4;  }  else if (sender == nudAgcStep5) {  	num = AgcStep5 = (byte)nudAgcStep5.Value;  	id = 5;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: if (sender == nudAgcStep4) {  	num = AgcStep4 = (byte)nudAgcStep4.Value;  	id = 4;  }  else if (sender == nudAgcStep5) {  	num = AgcStep5 = (byte)nudAgcStep5.Value;  	id = 5;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: id = 4;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: if (sender == nudAgcStep5) {  	num = AgcStep5 = (byte)nudAgcStep5.Value;  	id = 5;  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudAgcStep_ValueChanged,The following statement contains a magic number: id = 5;  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudDccFreq_ValueChanged,The following statement contains a magic number: if (((num3 >= -1) && (num3 <= 1)) && (num == num2)) {  	nudDccFreq.ValueChanged -= new EventHandler (nudDccFreq_ValueChanged);  	nudDccFreq.Value = (4.0M * RxBw) / (6.283185307179580M * ((decimal)Math.Pow (2.0' (double)((num2 - num3) + 2))));  	nudDccFreq.ValueChanged += new EventHandler (nudDccFreq_ValueChanged);  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudDccFreq_ValueChanged,The following statement contains a magic number: if (((num3 >= -1) && (num3 <= 1)) && (num == num2)) {  	nudDccFreq.ValueChanged -= new EventHandler (nudDccFreq_ValueChanged);  	nudDccFreq.Value = (4.0M * RxBw) / (6.283185307179580M * ((decimal)Math.Pow (2.0' (double)((num2 - num3) + 2))));  	nudDccFreq.ValueChanged += new EventHandler (nudDccFreq_ValueChanged);  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudDccFreq_ValueChanged,The following statement contains a magic number: nudDccFreq.Value = (4.0M * RxBw) / (6.283185307179580M * ((decimal)Math.Pow (2.0' (double)((num2 - num3) + 2))));  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudDccFreq_ValueChanged,The following statement contains a magic number: nudDccFreq.Value = (4.0M * RxBw) / (6.283185307179580M * ((decimal)Math.Pow (2.0' (double)((num2 - num3) + 2))));  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudOokPeakThreshStep_ValueChanged,The following statement contains a magic number: try {  	nudOokPeakThreshStep.ValueChanged -= new EventHandler (nudOokPeakThreshStep_ValueChanged);  	decimal[] array = new decimal[] {  		0.5M'  		1.0M'  		1.5M'  		2.0M'  		3.0M'  		4.0M'  		5.0M'  		6.0M  	};  	int index = 0;  	decimal num2 = nudOokPeakThreshStep.Value - OokPeakThreshStep;  	decimal num3 = 10000000M;  	for (int i = 0; i < 8; i++) {  		if (Math.Abs ((decimal)(nudOokPeakThreshStep.Value - array [i])) < num3) {  			num3 = Math.Abs ((decimal)(nudOokPeakThreshStep.Value - array [i]));  			index = i;  		}  	}  	if (((num3 / Math.Abs (num2)) == 1M) && (num2 >= 0.5M)) {  		if (num2 > 0M) {  			nudOokPeakThreshStep.Value += nudOokPeakThreshStep.Increment;  		}  		else {  			nudOokPeakThreshStep.Value -= nudOokPeakThreshStep.Increment;  		}  		index = Array.IndexOf<decimal> (array' nudOokPeakThreshStep.Value);  	}  	nudOokPeakThreshStep.Value = array [index];  	nudOokPeakThreshStep.ValueChanged += new EventHandler (nudOokPeakThreshStep_ValueChanged);  	OokPeakThreshStep = nudOokPeakThreshStep.Value;  	OnOokPeakThreshStepChanged (OokPeakThreshStep);  }  catch {  	nudOokPeakThreshStep.ValueChanged += new EventHandler (nudOokPeakThreshStep_ValueChanged);  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,ReceiverViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\ReceiverViewControl.cs,nudOokPeakThreshStep_ValueChanged,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	if (Math.Abs ((decimal)(nudOokPeakThreshStep.Value - array [i])) < num3) {  		num3 = Math.Abs ((decimal)(nudOokPeakThreshStep.Value - array [i]));  		index = i;  	}  }  
Magic Number,SemtechLib.Devices.SX1231.Controls,PayloadImg,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PayloadImg.cs,PayloadImg,The following statement contains a magic number: base.Size = new Size (0x20e' 20);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeDccFreq,The following statement contains a magic number: return ((4.0M * bw) / (6.283185307179580M * ((decimal)Math.Pow (2.0' (double)((register >> 5) + 2)))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeDccFreq,The following statement contains a magic number: return ((4.0M * bw) / (6.283185307179580M * ((decimal)Math.Pow (2.0' (double)((register >> 5) + 2)))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeDccFreq,The following statement contains a magic number: return ((4.0M * bw) / (6.283185307179580M * ((decimal)Math.Pow (2.0' (double)((register >> 5) + 2)))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBw,The following statement contains a magic number: if (mod == ModulationTypeEnum.FSK)  	return (frequencyXo / (mant * ((decimal)Math.Pow (2.0' (double)(exp + 2)))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBw,The following statement contains a magic number: if (mod == ModulationTypeEnum.FSK)  	return (frequencyXo / (mant * ((decimal)Math.Pow (2.0' (double)(exp + 2)))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBw,The following statement contains a magic number: return (frequencyXo / (mant * ((decimal)Math.Pow (2.0' (double)(exp + 2)))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBw,The following statement contains a magic number: return (frequencyXo / (mant * ((decimal)Math.Pow (2.0' (double)(exp + 2)))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBw,The following statement contains a magic number: return (frequencyXo / (mant * ((decimal)Math.Pow (2.0' (double)(exp + 3)))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBw,The following statement contains a magic number: return (frequencyXo / (mant * ((decimal)Math.Pow (2.0' (double)(exp + 3)))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: for (num = 0; num < 8; num++) {  	for (num2 = 16; num2 <= 24; num2 += 4) {  		if (mod == ModulationTypeEnum.FSK)  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  		else  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: for (num = 0; num < 8; num++) {  	for (num2 = 16; num2 <= 24; num2 += 4) {  		if (mod == ModulationTypeEnum.FSK)  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  		else  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: for (num = 0; num < 8; num++) {  	for (num2 = 16; num2 <= 24; num2 += 4) {  		if (mod == ModulationTypeEnum.FSK)  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  		else  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: for (num = 0; num < 8; num++) {  	for (num2 = 16; num2 <= 24; num2 += 4) {  		if (mod == ModulationTypeEnum.FSK)  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  		else  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: for (num = 0; num < 8; num++) {  	for (num2 = 16; num2 <= 24; num2 += 4) {  		if (mod == ModulationTypeEnum.FSK)  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  		else  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: for (num = 0; num < 8; num++) {  	for (num2 = 16; num2 <= 24; num2 += 4) {  		if (mod == ModulationTypeEnum.FSK)  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  		else  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: for (num = 0; num < 8; num++) {  	for (num2 = 16; num2 <= 24; num2 += 4) {  		if (mod == ModulationTypeEnum.FSK)  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  		else  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: for (num = 0; num < 8; num++) {  	for (num2 = 16; num2 <= 24; num2 += 4) {  		if (mod == ModulationTypeEnum.FSK)  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  		else  			numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: for (num2 = 16; num2 <= 24; num2 += 4) {  	if (mod == ModulationTypeEnum.FSK)  		numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  	else  		numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: for (num2 = 16; num2 <= 24; num2 += 4) {  	if (mod == ModulationTypeEnum.FSK)  		numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  	else  		numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: for (num2 = 16; num2 <= 24; num2 += 4) {  	if (mod == ModulationTypeEnum.FSK)  		numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  	else  		numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: for (num2 = 16; num2 <= 24; num2 += 4) {  	if (mod == ModulationTypeEnum.FSK)  		numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  	else  		numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: for (num2 = 16; num2 <= 24; num2 += 4) {  	if (mod == ModulationTypeEnum.FSK)  		numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  	else  		numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: for (num2 = 16; num2 <= 24; num2 += 4) {  	if (mod == ModulationTypeEnum.FSK)  		numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  	else  		numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: for (num2 = 16; num2 <= 24; num2 += 4) {  	if (mod == ModulationTypeEnum.FSK)  		numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  	else  		numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: num2 = 16
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: num2 += 4
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: if (mod == ModulationTypeEnum.FSK)  	numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  else  	numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: if (mod == ModulationTypeEnum.FSK)  	numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  else  	numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: if (mod == ModulationTypeEnum.FSK)  	numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  else  	numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: if (mod == ModulationTypeEnum.FSK)  	numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  else  	numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwFreqTable,The following statement contains a magic number: numArray [num3++] = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: for (num = 0; num < 8; num++) {  	for (num2 = 0x10; num2 <= 0x18; num2 += 4) {  		if (mod == ModulationTypeEnum.FSK)  			num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  		else  			num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  		if (Math.Abs ((decimal)(num3 - value)) < num4) {  			num4 = Math.Abs ((decimal)(num3 - value));  			mant = num2;  			exp = num;  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: for (num = 0; num < 8; num++) {  	for (num2 = 0x10; num2 <= 0x18; num2 += 4) {  		if (mod == ModulationTypeEnum.FSK)  			num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  		else  			num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  		if (Math.Abs ((decimal)(num3 - value)) < num4) {  			num4 = Math.Abs ((decimal)(num3 - value));  			mant = num2;  			exp = num;  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: for (num = 0; num < 8; num++) {  	for (num2 = 0x10; num2 <= 0x18; num2 += 4) {  		if (mod == ModulationTypeEnum.FSK)  			num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  		else  			num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  		if (Math.Abs ((decimal)(num3 - value)) < num4) {  			num4 = Math.Abs ((decimal)(num3 - value));  			mant = num2;  			exp = num;  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: for (num = 0; num < 8; num++) {  	for (num2 = 0x10; num2 <= 0x18; num2 += 4) {  		if (mod == ModulationTypeEnum.FSK)  			num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  		else  			num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  		if (Math.Abs ((decimal)(num3 - value)) < num4) {  			num4 = Math.Abs ((decimal)(num3 - value));  			mant = num2;  			exp = num;  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: for (num = 0; num < 8; num++) {  	for (num2 = 0x10; num2 <= 0x18; num2 += 4) {  		if (mod == ModulationTypeEnum.FSK)  			num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  		else  			num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  		if (Math.Abs ((decimal)(num3 - value)) < num4) {  			num4 = Math.Abs ((decimal)(num3 - value));  			mant = num2;  			exp = num;  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: for (num = 0; num < 8; num++) {  	for (num2 = 0x10; num2 <= 0x18; num2 += 4) {  		if (mod == ModulationTypeEnum.FSK)  			num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  		else  			num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  		if (Math.Abs ((decimal)(num3 - value)) < num4) {  			num4 = Math.Abs ((decimal)(num3 - value));  			mant = num2;  			exp = num;  		}  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: for (num2 = 0x10; num2 <= 0x18; num2 += 4) {  	if (mod == ModulationTypeEnum.FSK)  		num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  	else  		num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  	if (Math.Abs ((decimal)(num3 - value)) < num4) {  		num4 = Math.Abs ((decimal)(num3 - value));  		mant = num2;  		exp = num;  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: for (num2 = 0x10; num2 <= 0x18; num2 += 4) {  	if (mod == ModulationTypeEnum.FSK)  		num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  	else  		num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  	if (Math.Abs ((decimal)(num3 - value)) < num4) {  		num4 = Math.Abs ((decimal)(num3 - value));  		mant = num2;  		exp = num;  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: for (num2 = 0x10; num2 <= 0x18; num2 += 4) {  	if (mod == ModulationTypeEnum.FSK)  		num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  	else  		num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  	if (Math.Abs ((decimal)(num3 - value)) < num4) {  		num4 = Math.Abs ((decimal)(num3 - value));  		mant = num2;  		exp = num;  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: for (num2 = 0x10; num2 <= 0x18; num2 += 4) {  	if (mod == ModulationTypeEnum.FSK)  		num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  	else  		num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  	if (Math.Abs ((decimal)(num3 - value)) < num4) {  		num4 = Math.Abs ((decimal)(num3 - value));  		mant = num2;  		exp = num;  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: for (num2 = 0x10; num2 <= 0x18; num2 += 4) {  	if (mod == ModulationTypeEnum.FSK)  		num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  	else  		num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  	if (Math.Abs ((decimal)(num3 - value)) < num4) {  		num4 = Math.Abs ((decimal)(num3 - value));  		mant = num2;  		exp = num;  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: num2 += 4
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: if (mod == ModulationTypeEnum.FSK)  	num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  else  	num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: if (mod == ModulationTypeEnum.FSK)  	num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  else  	num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: if (mod == ModulationTypeEnum.FSK)  	num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  else  	num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: if (mod == ModulationTypeEnum.FSK)  	num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  else  	num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 2))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMantExp,The following statement contains a magic number: num3 = frequencyXo / (num2 * ((decimal)Math.Pow (2.0' (double)(num + 3))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMax,The following statement contains a magic number: if (ModulationType == ModulationTypeEnum.FSK)  	return (FrequencyXo / (16M * ((decimal)Math.Pow (2.0' 2.0))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMax,The following statement contains a magic number: if (ModulationType == ModulationTypeEnum.FSK)  	return (FrequencyXo / (16M * ((decimal)Math.Pow (2.0' 2.0))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMax,The following statement contains a magic number: return (FrequencyXo / (16M * ((decimal)Math.Pow (2.0' 2.0))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMax,The following statement contains a magic number: return (FrequencyXo / (16M * ((decimal)Math.Pow (2.0' 2.0))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMax,The following statement contains a magic number: return (FrequencyXo / (16M * ((decimal)Math.Pow (2.0' 3.0))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMax,The following statement contains a magic number: return (FrequencyXo / (16M * ((decimal)Math.Pow (2.0' 3.0))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMin,The following statement contains a magic number: if (ModulationType == ModulationTypeEnum.FSK)  	return (FrequencyXo / (24M * ((decimal)Math.Pow (2.0' 9.0))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMin,The following statement contains a magic number: if (ModulationType == ModulationTypeEnum.FSK)  	return (FrequencyXo / (24M * ((decimal)Math.Pow (2.0' 9.0))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMin,The following statement contains a magic number: return (FrequencyXo / (24M * ((decimal)Math.Pow (2.0' 9.0))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMin,The following statement contains a magic number: return (FrequencyXo / (24M * ((decimal)Math.Pow (2.0' 9.0))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMin,The following statement contains a magic number: return (FrequencyXo / (24M * ((decimal)Math.Pow (2.0' 10.0))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,ComputeRxBwMin,The following statement contains a magic number: return (FrequencyXo / (24M * ((decimal)Math.Pow (2.0' 10.0))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,FrequencyRfCheck,The following statement contains a magic number: if (!frequencyRfCheckDisable) {  	if ((value >= 290000000M && value <= 340000000M) || (value >= 424000000M && value <= 510000000M) || (value >= 862000000M && value <= 1020000000M))  		OnFrequencyRfLimitStatusChanged (LimitCheckStatusEnum.OK' "");  	else {  		string[] strArray2 = new string[] {  			string.Concat (new string[] {  				"["'  				290000000M.ToString ()'  				"' "'  				340000000M.ToString ()'  				"]"  			})'  			string.Concat (new string[] {  				"["'  				424000000M.ToString ()'  				"' "'  				510000000M.ToString ()'  				"]"  			})'  			string.Concat (new string[] {  				"["'  				862000000M.ToString ()'  				"' "'  				1020000000M.ToString ()'  				"]"  			})  		};  		OnFrequencyRfLimitStatusChanged (LimitCheckStatusEnum.OUT_OF_RANGE' "The RF frequency is out of range.\nThe valid ranges are:\n" + strArray2 [0] + "\n" + strArray2 [1] + "\n" + strArray2 [2]);  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,FrequencyRfCheck,The following statement contains a magic number: if ((value >= 290000000M && value <= 340000000M) || (value >= 424000000M && value <= 510000000M) || (value >= 862000000M && value <= 1020000000M))  	OnFrequencyRfLimitStatusChanged (LimitCheckStatusEnum.OK' "");  else {  	string[] strArray2 = new string[] {  		string.Concat (new string[] {  			"["'  			290000000M.ToString ()'  			"' "'  			340000000M.ToString ()'  			"]"  		})'  		string.Concat (new string[] {  			"["'  			424000000M.ToString ()'  			"' "'  			510000000M.ToString ()'  			"]"  		})'  		string.Concat (new string[] {  			"["'  			862000000M.ToString ()'  			"' "'  			1020000000M.ToString ()'  			"]"  		})  	};  	OnFrequencyRfLimitStatusChanged (LimitCheckStatusEnum.OUT_OF_RANGE' "The RF frequency is out of range.\nThe valid ranges are:\n" + strArray2 [0] + "\n" + strArray2 [1] + "\n" + strArray2 [2]);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,FrequencyRfCheck,The following statement contains a magic number: OnFrequencyRfLimitStatusChanged (LimitCheckStatusEnum.OUT_OF_RANGE' "The RF frequency is out of range.\nThe valid ranges are:\n" + strArray2 [0] + "\n" + strArray2 [1] + "\n" + strArray2 [2]);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following statement contains a magic number: try {  	deviceName = name;  	Close ();  	if (ftdi.Open (name) && ftdi.PortA.Init ((uint)spiSpeed) && ftdi.PortB.Init (1000000)) {  		ftdi.PortA.PortDir = 0x0B;  		ftdi.PortA.PortValue = 0x0E;  		ftdi.PortB.PortDir = 0xC0;  		if (test)  			ftdi.PortB.PortValue = 0xC0;  		else  			ftdi.PortB.PortValue = 0;  		ftdi.PortB.SendBytes ();  		isOpen = true;  		PopulateRegisters ();  		regUpdateThreadContinue = true;  		regUpdateThread = new Thread (new ThreadStart (RegUpdateThread));  		regUpdateThread.Start ();  		OnConnected ();  		return true;  	}  }  catch (Exception ex) {  	OnError (1' ex.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following statement contains a magic number: if (ftdi.Open (name) && ftdi.PortA.Init ((uint)spiSpeed) && ftdi.PortB.Init (1000000)) {  	ftdi.PortA.PortDir = 0x0B;  	ftdi.PortA.PortValue = 0x0E;  	ftdi.PortB.PortDir = 0xC0;  	if (test)  		ftdi.PortB.PortValue = 0xC0;  	else  		ftdi.PortB.PortValue = 0;  	ftdi.PortB.SendBytes ();  	isOpen = true;  	PopulateRegisters ();  	regUpdateThreadContinue = true;  	regUpdateThread = new Thread (new ThreadStart (RegUpdateThread));  	regUpdateThread.Start ();  	OnConnected ();  	return true;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following statement contains a magic number: try {  	string line;  	while ((line = reader.ReadLine ()) != null) {  		if (line [0] == '#') {  			lineNumber++;  			continue;  		}  		if (line [0] != 'R' && line [0] != 'P')  			throw new Exception ("At line " + lineNumber.ToString () + ": A configuration line must start either by\n\"#\" for comments\nor a\n\"R\" for the register name.");  		string[] tokens = line.Split (new char[] {  			'\t'  		});  		if (tokens.Length != 4) {  			if (tokens.Length != 2)  				throw new Exception (string.Concat ("At line "' lineNumber.ToString ()' ": The number of columns is "' tokens.Length.ToString ()' " and it should be 4 or 2."));  			if (tokens [0] != "PKT")  				throw new Exception ("At line " + lineNumber.ToString () + ": Invalid Packet.");  			data = tokens [1];  		}  		else {  			bool flag = true;  			for (int i = 0; i < m_registers.Count; i++) {  				if (m_registers [i].Name == tokens [1]) {  					flag = false;  					break;  				}  				switch (tokens [1]) {  				case "RegAgcThres1":  					tokens [1] = "RegAgcThresh1";  					flag = false;  					break;  				case "RegAgcThres2":  					tokens [1] = "RegAgcThresh2";  					flag = false;  					break;  				case "RegAgcThres3":  					tokens [1] = "RegAgcThresh3";  					flag = false;  					break;  				}  				switch (Version) {  				case "2.1":  					switch (tokens [1]) {  					case "RegAfcCtrl":  						tokens [1] = "RegOsc2";  						flag = false;  						break;  					case "Reserved14":  						tokens [1] = "RegAgcRef";  						flag = false;  						break;  					case "Reserved15":  						tokens [1] = "RegAgcThresh1";  						flag = false;  						break;  					case "Reserved16":  						tokens [1] = "RegAgcThresh2";  						flag = false;  						break;  					case "Reserved17":  						tokens [1] = "RegAgcThresh3";  						flag = false;  						break;  					case "RegTestLna":  						flag = false;  						break;  					case "RegTestAfc":  						flag = false;  						break;  					case "RegTestDagc":  						flag = false;  						break;  					}  					break;  				case "2.2":  				case "2.3":  					switch (tokens [1]) {  					case "RegOsc2":  						tokens [1] = "RegAfcCtrl";  						flag = false;  						break;  					case "RegAgcRef":  						tokens [1] = "Reserved14";  						flag = false;  						break;  					case "RegAgcThresh1":  						tokens [1] = "Reserved15";  						flag = false;  						break;  					case "RegAgcThresh2":  						tokens [1] = "Reserved16";  						flag = false;  						break;  					case "RegAgcThresh3":  						tokens [1] = "Reserved17";  						flag = false;  						break;  					}  					break;  				}  				if (!flag)  					break;  			}  			if (flag)  				throw new Exception ("At line " + lineNumber.ToString () + ": Invalid register name.");  			if (tokens [1] != "RegVersion" && (Version != "2.1" || (tokens [1] != "RegTestLna" && tokens [1] != "RegTestAfc" && tokens [1] != "RegTestDagc"))) {  				m_registers [tokens [1]].Value = Convert.ToByte (tokens [3]' 0x10);  				num2++;  			}  		}  		lineNumber++;  	}  	m_packet.SetSaveData (data);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  finally {  	reader.Close ();  	if (!IsOpen)  		ReadRegisters ();  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following statement contains a magic number: try {  	string line;  	while ((line = reader.ReadLine ()) != null) {  		if (line [0] == '#') {  			lineNumber++;  			continue;  		}  		if (line [0] != 'R' && line [0] != 'P')  			throw new Exception ("At line " + lineNumber.ToString () + ": A configuration line must start either by\n\"#\" for comments\nor a\n\"R\" for the register name.");  		string[] tokens = line.Split (new char[] {  			'\t'  		});  		if (tokens.Length != 4) {  			if (tokens.Length != 2)  				throw new Exception (string.Concat ("At line "' lineNumber.ToString ()' ": The number of columns is "' tokens.Length.ToString ()' " and it should be 4 or 2."));  			if (tokens [0] != "PKT")  				throw new Exception ("At line " + lineNumber.ToString () + ": Invalid Packet.");  			data = tokens [1];  		}  		else {  			bool flag = true;  			for (int i = 0; i < m_registers.Count; i++) {  				if (m_registers [i].Name == tokens [1]) {  					flag = false;  					break;  				}  				switch (tokens [1]) {  				case "RegAgcThres1":  					tokens [1] = "RegAgcThresh1";  					flag = false;  					break;  				case "RegAgcThres2":  					tokens [1] = "RegAgcThresh2";  					flag = false;  					break;  				case "RegAgcThres3":  					tokens [1] = "RegAgcThresh3";  					flag = false;  					break;  				}  				switch (Version) {  				case "2.1":  					switch (tokens [1]) {  					case "RegAfcCtrl":  						tokens [1] = "RegOsc2";  						flag = false;  						break;  					case "Reserved14":  						tokens [1] = "RegAgcRef";  						flag = false;  						break;  					case "Reserved15":  						tokens [1] = "RegAgcThresh1";  						flag = false;  						break;  					case "Reserved16":  						tokens [1] = "RegAgcThresh2";  						flag = false;  						break;  					case "Reserved17":  						tokens [1] = "RegAgcThresh3";  						flag = false;  						break;  					case "RegTestLna":  						flag = false;  						break;  					case "RegTestAfc":  						flag = false;  						break;  					case "RegTestDagc":  						flag = false;  						break;  					}  					break;  				case "2.2":  				case "2.3":  					switch (tokens [1]) {  					case "RegOsc2":  						tokens [1] = "RegAfcCtrl";  						flag = false;  						break;  					case "RegAgcRef":  						tokens [1] = "Reserved14";  						flag = false;  						break;  					case "RegAgcThresh1":  						tokens [1] = "Reserved15";  						flag = false;  						break;  					case "RegAgcThresh2":  						tokens [1] = "Reserved16";  						flag = false;  						break;  					case "RegAgcThresh3":  						tokens [1] = "Reserved17";  						flag = false;  						break;  					}  					break;  				}  				if (!flag)  					break;  			}  			if (flag)  				throw new Exception ("At line " + lineNumber.ToString () + ": Invalid register name.");  			if (tokens [1] != "RegVersion" && (Version != "2.1" || (tokens [1] != "RegTestLna" && tokens [1] != "RegTestAfc" && tokens [1] != "RegTestDagc"))) {  				m_registers [tokens [1]].Value = Convert.ToByte (tokens [3]' 0x10);  				num2++;  			}  		}  		lineNumber++;  	}  	m_packet.SetSaveData (data);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  finally {  	reader.Close ();  	if (!IsOpen)  		ReadRegisters ();  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following statement contains a magic number: try {  	string line;  	while ((line = reader.ReadLine ()) != null) {  		if (line [0] == '#') {  			lineNumber++;  			continue;  		}  		if (line [0] != 'R' && line [0] != 'P')  			throw new Exception ("At line " + lineNumber.ToString () + ": A configuration line must start either by\n\"#\" for comments\nor a\n\"R\" for the register name.");  		string[] tokens = line.Split (new char[] {  			'\t'  		});  		if (tokens.Length != 4) {  			if (tokens.Length != 2)  				throw new Exception (string.Concat ("At line "' lineNumber.ToString ()' ": The number of columns is "' tokens.Length.ToString ()' " and it should be 4 or 2."));  			if (tokens [0] != "PKT")  				throw new Exception ("At line " + lineNumber.ToString () + ": Invalid Packet.");  			data = tokens [1];  		}  		else {  			bool flag = true;  			for (int i = 0; i < m_registers.Count; i++) {  				if (m_registers [i].Name == tokens [1]) {  					flag = false;  					break;  				}  				switch (tokens [1]) {  				case "RegAgcThres1":  					tokens [1] = "RegAgcThresh1";  					flag = false;  					break;  				case "RegAgcThres2":  					tokens [1] = "RegAgcThresh2";  					flag = false;  					break;  				case "RegAgcThres3":  					tokens [1] = "RegAgcThresh3";  					flag = false;  					break;  				}  				switch (Version) {  				case "2.1":  					switch (tokens [1]) {  					case "RegAfcCtrl":  						tokens [1] = "RegOsc2";  						flag = false;  						break;  					case "Reserved14":  						tokens [1] = "RegAgcRef";  						flag = false;  						break;  					case "Reserved15":  						tokens [1] = "RegAgcThresh1";  						flag = false;  						break;  					case "Reserved16":  						tokens [1] = "RegAgcThresh2";  						flag = false;  						break;  					case "Reserved17":  						tokens [1] = "RegAgcThresh3";  						flag = false;  						break;  					case "RegTestLna":  						flag = false;  						break;  					case "RegTestAfc":  						flag = false;  						break;  					case "RegTestDagc":  						flag = false;  						break;  					}  					break;  				case "2.2":  				case "2.3":  					switch (tokens [1]) {  					case "RegOsc2":  						tokens [1] = "RegAfcCtrl";  						flag = false;  						break;  					case "RegAgcRef":  						tokens [1] = "Reserved14";  						flag = false;  						break;  					case "RegAgcThresh1":  						tokens [1] = "Reserved15";  						flag = false;  						break;  					case "RegAgcThresh2":  						tokens [1] = "Reserved16";  						flag = false;  						break;  					case "RegAgcThresh3":  						tokens [1] = "Reserved17";  						flag = false;  						break;  					}  					break;  				}  				if (!flag)  					break;  			}  			if (flag)  				throw new Exception ("At line " + lineNumber.ToString () + ": Invalid register name.");  			if (tokens [1] != "RegVersion" && (Version != "2.1" || (tokens [1] != "RegTestLna" && tokens [1] != "RegTestAfc" && tokens [1] != "RegTestDagc"))) {  				m_registers [tokens [1]].Value = Convert.ToByte (tokens [3]' 0x10);  				num2++;  			}  		}  		lineNumber++;  	}  	m_packet.SetSaveData (data);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  finally {  	reader.Close ();  	if (!IsOpen)  		ReadRegisters ();  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	if (line [0] == '#') {  		lineNumber++;  		continue;  	}  	if (line [0] != 'R' && line [0] != 'P')  		throw new Exception ("At line " + lineNumber.ToString () + ": A configuration line must start either by\n\"#\" for comments\nor a\n\"R\" for the register name.");  	string[] tokens = line.Split (new char[] {  		'\t'  	});  	if (tokens.Length != 4) {  		if (tokens.Length != 2)  			throw new Exception (string.Concat ("At line "' lineNumber.ToString ()' ": The number of columns is "' tokens.Length.ToString ()' " and it should be 4 or 2."));  		if (tokens [0] != "PKT")  			throw new Exception ("At line " + lineNumber.ToString () + ": Invalid Packet.");  		data = tokens [1];  	}  	else {  		bool flag = true;  		for (int i = 0; i < m_registers.Count; i++) {  			if (m_registers [i].Name == tokens [1]) {  				flag = false;  				break;  			}  			switch (tokens [1]) {  			case "RegAgcThres1":  				tokens [1] = "RegAgcThresh1";  				flag = false;  				break;  			case "RegAgcThres2":  				tokens [1] = "RegAgcThresh2";  				flag = false;  				break;  			case "RegAgcThres3":  				tokens [1] = "RegAgcThresh3";  				flag = false;  				break;  			}  			switch (Version) {  			case "2.1":  				switch (tokens [1]) {  				case "RegAfcCtrl":  					tokens [1] = "RegOsc2";  					flag = false;  					break;  				case "Reserved14":  					tokens [1] = "RegAgcRef";  					flag = false;  					break;  				case "Reserved15":  					tokens [1] = "RegAgcThresh1";  					flag = false;  					break;  				case "Reserved16":  					tokens [1] = "RegAgcThresh2";  					flag = false;  					break;  				case "Reserved17":  					tokens [1] = "RegAgcThresh3";  					flag = false;  					break;  				case "RegTestLna":  					flag = false;  					break;  				case "RegTestAfc":  					flag = false;  					break;  				case "RegTestDagc":  					flag = false;  					break;  				}  				break;  			case "2.2":  			case "2.3":  				switch (tokens [1]) {  				case "RegOsc2":  					tokens [1] = "RegAfcCtrl";  					flag = false;  					break;  				case "RegAgcRef":  					tokens [1] = "Reserved14";  					flag = false;  					break;  				case "RegAgcThresh1":  					tokens [1] = "Reserved15";  					flag = false;  					break;  				case "RegAgcThresh2":  					tokens [1] = "Reserved16";  					flag = false;  					break;  				case "RegAgcThresh3":  					tokens [1] = "Reserved17";  					flag = false;  					break;  				}  				break;  			}  			if (!flag)  				break;  		}  		if (flag)  			throw new Exception ("At line " + lineNumber.ToString () + ": Invalid register name.");  		if (tokens [1] != "RegVersion" && (Version != "2.1" || (tokens [1] != "RegTestLna" && tokens [1] != "RegTestAfc" && tokens [1] != "RegTestDagc"))) {  			m_registers [tokens [1]].Value = Convert.ToByte (tokens [3]' 0x10);  			num2++;  		}  	}  	lineNumber++;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	if (line [0] == '#') {  		lineNumber++;  		continue;  	}  	if (line [0] != 'R' && line [0] != 'P')  		throw new Exception ("At line " + lineNumber.ToString () + ": A configuration line must start either by\n\"#\" for comments\nor a\n\"R\" for the register name.");  	string[] tokens = line.Split (new char[] {  		'\t'  	});  	if (tokens.Length != 4) {  		if (tokens.Length != 2)  			throw new Exception (string.Concat ("At line "' lineNumber.ToString ()' ": The number of columns is "' tokens.Length.ToString ()' " and it should be 4 or 2."));  		if (tokens [0] != "PKT")  			throw new Exception ("At line " + lineNumber.ToString () + ": Invalid Packet.");  		data = tokens [1];  	}  	else {  		bool flag = true;  		for (int i = 0; i < m_registers.Count; i++) {  			if (m_registers [i].Name == tokens [1]) {  				flag = false;  				break;  			}  			switch (tokens [1]) {  			case "RegAgcThres1":  				tokens [1] = "RegAgcThresh1";  				flag = false;  				break;  			case "RegAgcThres2":  				tokens [1] = "RegAgcThresh2";  				flag = false;  				break;  			case "RegAgcThres3":  				tokens [1] = "RegAgcThresh3";  				flag = false;  				break;  			}  			switch (Version) {  			case "2.1":  				switch (tokens [1]) {  				case "RegAfcCtrl":  					tokens [1] = "RegOsc2";  					flag = false;  					break;  				case "Reserved14":  					tokens [1] = "RegAgcRef";  					flag = false;  					break;  				case "Reserved15":  					tokens [1] = "RegAgcThresh1";  					flag = false;  					break;  				case "Reserved16":  					tokens [1] = "RegAgcThresh2";  					flag = false;  					break;  				case "Reserved17":  					tokens [1] = "RegAgcThresh3";  					flag = false;  					break;  				case "RegTestLna":  					flag = false;  					break;  				case "RegTestAfc":  					flag = false;  					break;  				case "RegTestDagc":  					flag = false;  					break;  				}  				break;  			case "2.2":  			case "2.3":  				switch (tokens [1]) {  				case "RegOsc2":  					tokens [1] = "RegAfcCtrl";  					flag = false;  					break;  				case "RegAgcRef":  					tokens [1] = "Reserved14";  					flag = false;  					break;  				case "RegAgcThresh1":  					tokens [1] = "Reserved15";  					flag = false;  					break;  				case "RegAgcThresh2":  					tokens [1] = "Reserved16";  					flag = false;  					break;  				case "RegAgcThresh3":  					tokens [1] = "Reserved17";  					flag = false;  					break;  				}  				break;  			}  			if (!flag)  				break;  		}  		if (flag)  			throw new Exception ("At line " + lineNumber.ToString () + ": Invalid register name.");  		if (tokens [1] != "RegVersion" && (Version != "2.1" || (tokens [1] != "RegTestLna" && tokens [1] != "RegTestAfc" && tokens [1] != "RegTestDagc"))) {  			m_registers [tokens [1]].Value = Convert.ToByte (tokens [3]' 0x10);  			num2++;  		}  	}  	lineNumber++;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	if (line [0] == '#') {  		lineNumber++;  		continue;  	}  	if (line [0] != 'R' && line [0] != 'P')  		throw new Exception ("At line " + lineNumber.ToString () + ": A configuration line must start either by\n\"#\" for comments\nor a\n\"R\" for the register name.");  	string[] tokens = line.Split (new char[] {  		'\t'  	});  	if (tokens.Length != 4) {  		if (tokens.Length != 2)  			throw new Exception (string.Concat ("At line "' lineNumber.ToString ()' ": The number of columns is "' tokens.Length.ToString ()' " and it should be 4 or 2."));  		if (tokens [0] != "PKT")  			throw new Exception ("At line " + lineNumber.ToString () + ": Invalid Packet.");  		data = tokens [1];  	}  	else {  		bool flag = true;  		for (int i = 0; i < m_registers.Count; i++) {  			if (m_registers [i].Name == tokens [1]) {  				flag = false;  				break;  			}  			switch (tokens [1]) {  			case "RegAgcThres1":  				tokens [1] = "RegAgcThresh1";  				flag = false;  				break;  			case "RegAgcThres2":  				tokens [1] = "RegAgcThresh2";  				flag = false;  				break;  			case "RegAgcThres3":  				tokens [1] = "RegAgcThresh3";  				flag = false;  				break;  			}  			switch (Version) {  			case "2.1":  				switch (tokens [1]) {  				case "RegAfcCtrl":  					tokens [1] = "RegOsc2";  					flag = false;  					break;  				case "Reserved14":  					tokens [1] = "RegAgcRef";  					flag = false;  					break;  				case "Reserved15":  					tokens [1] = "RegAgcThresh1";  					flag = false;  					break;  				case "Reserved16":  					tokens [1] = "RegAgcThresh2";  					flag = false;  					break;  				case "Reserved17":  					tokens [1] = "RegAgcThresh3";  					flag = false;  					break;  				case "RegTestLna":  					flag = false;  					break;  				case "RegTestAfc":  					flag = false;  					break;  				case "RegTestDagc":  					flag = false;  					break;  				}  				break;  			case "2.2":  			case "2.3":  				switch (tokens [1]) {  				case "RegOsc2":  					tokens [1] = "RegAfcCtrl";  					flag = false;  					break;  				case "RegAgcRef":  					tokens [1] = "Reserved14";  					flag = false;  					break;  				case "RegAgcThresh1":  					tokens [1] = "Reserved15";  					flag = false;  					break;  				case "RegAgcThresh2":  					tokens [1] = "Reserved16";  					flag = false;  					break;  				case "RegAgcThresh3":  					tokens [1] = "Reserved17";  					flag = false;  					break;  				}  				break;  			}  			if (!flag)  				break;  		}  		if (flag)  			throw new Exception ("At line " + lineNumber.ToString () + ": Invalid register name.");  		if (tokens [1] != "RegVersion" && (Version != "2.1" || (tokens [1] != "RegTestLna" && tokens [1] != "RegTestAfc" && tokens [1] != "RegTestDagc"))) {  			m_registers [tokens [1]].Value = Convert.ToByte (tokens [3]' 0x10);  			num2++;  		}  	}  	lineNumber++;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following statement contains a magic number: if (tokens.Length != 4) {  	if (tokens.Length != 2)  		throw new Exception (string.Concat ("At line "' lineNumber.ToString ()' ": The number of columns is "' tokens.Length.ToString ()' " and it should be 4 or 2."));  	if (tokens [0] != "PKT")  		throw new Exception ("At line " + lineNumber.ToString () + ": Invalid Packet.");  	data = tokens [1];  }  else {  	bool flag = true;  	for (int i = 0; i < m_registers.Count; i++) {  		if (m_registers [i].Name == tokens [1]) {  			flag = false;  			break;  		}  		switch (tokens [1]) {  		case "RegAgcThres1":  			tokens [1] = "RegAgcThresh1";  			flag = false;  			break;  		case "RegAgcThres2":  			tokens [1] = "RegAgcThresh2";  			flag = false;  			break;  		case "RegAgcThres3":  			tokens [1] = "RegAgcThresh3";  			flag = false;  			break;  		}  		switch (Version) {  		case "2.1":  			switch (tokens [1]) {  			case "RegAfcCtrl":  				tokens [1] = "RegOsc2";  				flag = false;  				break;  			case "Reserved14":  				tokens [1] = "RegAgcRef";  				flag = false;  				break;  			case "Reserved15":  				tokens [1] = "RegAgcThresh1";  				flag = false;  				break;  			case "Reserved16":  				tokens [1] = "RegAgcThresh2";  				flag = false;  				break;  			case "Reserved17":  				tokens [1] = "RegAgcThresh3";  				flag = false;  				break;  			case "RegTestLna":  				flag = false;  				break;  			case "RegTestAfc":  				flag = false;  				break;  			case "RegTestDagc":  				flag = false;  				break;  			}  			break;  		case "2.2":  		case "2.3":  			switch (tokens [1]) {  			case "RegOsc2":  				tokens [1] = "RegAfcCtrl";  				flag = false;  				break;  			case "RegAgcRef":  				tokens [1] = "Reserved14";  				flag = false;  				break;  			case "RegAgcThresh1":  				tokens [1] = "Reserved15";  				flag = false;  				break;  			case "RegAgcThresh2":  				tokens [1] = "Reserved16";  				flag = false;  				break;  			case "RegAgcThresh3":  				tokens [1] = "Reserved17";  				flag = false;  				break;  			}  			break;  		}  		if (!flag)  			break;  	}  	if (flag)  		throw new Exception ("At line " + lineNumber.ToString () + ": Invalid register name.");  	if (tokens [1] != "RegVersion" && (Version != "2.1" || (tokens [1] != "RegTestLna" && tokens [1] != "RegTestAfc" && tokens [1] != "RegTestDagc"))) {  		m_registers [tokens [1]].Value = Convert.ToByte (tokens [3]' 0x10);  		num2++;  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following statement contains a magic number: if (tokens.Length != 4) {  	if (tokens.Length != 2)  		throw new Exception (string.Concat ("At line "' lineNumber.ToString ()' ": The number of columns is "' tokens.Length.ToString ()' " and it should be 4 or 2."));  	if (tokens [0] != "PKT")  		throw new Exception ("At line " + lineNumber.ToString () + ": Invalid Packet.");  	data = tokens [1];  }  else {  	bool flag = true;  	for (int i = 0; i < m_registers.Count; i++) {  		if (m_registers [i].Name == tokens [1]) {  			flag = false;  			break;  		}  		switch (tokens [1]) {  		case "RegAgcThres1":  			tokens [1] = "RegAgcThresh1";  			flag = false;  			break;  		case "RegAgcThres2":  			tokens [1] = "RegAgcThresh2";  			flag = false;  			break;  		case "RegAgcThres3":  			tokens [1] = "RegAgcThresh3";  			flag = false;  			break;  		}  		switch (Version) {  		case "2.1":  			switch (tokens [1]) {  			case "RegAfcCtrl":  				tokens [1] = "RegOsc2";  				flag = false;  				break;  			case "Reserved14":  				tokens [1] = "RegAgcRef";  				flag = false;  				break;  			case "Reserved15":  				tokens [1] = "RegAgcThresh1";  				flag = false;  				break;  			case "Reserved16":  				tokens [1] = "RegAgcThresh2";  				flag = false;  				break;  			case "Reserved17":  				tokens [1] = "RegAgcThresh3";  				flag = false;  				break;  			case "RegTestLna":  				flag = false;  				break;  			case "RegTestAfc":  				flag = false;  				break;  			case "RegTestDagc":  				flag = false;  				break;  			}  			break;  		case "2.2":  		case "2.3":  			switch (tokens [1]) {  			case "RegOsc2":  				tokens [1] = "RegAfcCtrl";  				flag = false;  				break;  			case "RegAgcRef":  				tokens [1] = "Reserved14";  				flag = false;  				break;  			case "RegAgcThresh1":  				tokens [1] = "Reserved15";  				flag = false;  				break;  			case "RegAgcThresh2":  				tokens [1] = "Reserved16";  				flag = false;  				break;  			case "RegAgcThresh3":  				tokens [1] = "Reserved17";  				flag = false;  				break;  			}  			break;  		}  		if (!flag)  			break;  	}  	if (flag)  		throw new Exception ("At line " + lineNumber.ToString () + ": Invalid register name.");  	if (tokens [1] != "RegVersion" && (Version != "2.1" || (tokens [1] != "RegTestLna" && tokens [1] != "RegTestAfc" && tokens [1] != "RegTestDagc"))) {  		m_registers [tokens [1]].Value = Convert.ToByte (tokens [3]' 0x10);  		num2++;  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following statement contains a magic number: if (tokens.Length != 4) {  	if (tokens.Length != 2)  		throw new Exception (string.Concat ("At line "' lineNumber.ToString ()' ": The number of columns is "' tokens.Length.ToString ()' " and it should be 4 or 2."));  	if (tokens [0] != "PKT")  		throw new Exception ("At line " + lineNumber.ToString () + ": Invalid Packet.");  	data = tokens [1];  }  else {  	bool flag = true;  	for (int i = 0; i < m_registers.Count; i++) {  		if (m_registers [i].Name == tokens [1]) {  			flag = false;  			break;  		}  		switch (tokens [1]) {  		case "RegAgcThres1":  			tokens [1] = "RegAgcThresh1";  			flag = false;  			break;  		case "RegAgcThres2":  			tokens [1] = "RegAgcThresh2";  			flag = false;  			break;  		case "RegAgcThres3":  			tokens [1] = "RegAgcThresh3";  			flag = false;  			break;  		}  		switch (Version) {  		case "2.1":  			switch (tokens [1]) {  			case "RegAfcCtrl":  				tokens [1] = "RegOsc2";  				flag = false;  				break;  			case "Reserved14":  				tokens [1] = "RegAgcRef";  				flag = false;  				break;  			case "Reserved15":  				tokens [1] = "RegAgcThresh1";  				flag = false;  				break;  			case "Reserved16":  				tokens [1] = "RegAgcThresh2";  				flag = false;  				break;  			case "Reserved17":  				tokens [1] = "RegAgcThresh3";  				flag = false;  				break;  			case "RegTestLna":  				flag = false;  				break;  			case "RegTestAfc":  				flag = false;  				break;  			case "RegTestDagc":  				flag = false;  				break;  			}  			break;  		case "2.2":  		case "2.3":  			switch (tokens [1]) {  			case "RegOsc2":  				tokens [1] = "RegAfcCtrl";  				flag = false;  				break;  			case "RegAgcRef":  				tokens [1] = "Reserved14";  				flag = false;  				break;  			case "RegAgcThresh1":  				tokens [1] = "Reserved15";  				flag = false;  				break;  			case "RegAgcThresh2":  				tokens [1] = "Reserved16";  				flag = false;  				break;  			case "RegAgcThresh3":  				tokens [1] = "Reserved17";  				flag = false;  				break;  			}  			break;  		}  		if (!flag)  			break;  	}  	if (flag)  		throw new Exception ("At line " + lineNumber.ToString () + ": Invalid register name.");  	if (tokens [1] != "RegVersion" && (Version != "2.1" || (tokens [1] != "RegTestLna" && tokens [1] != "RegTestAfc" && tokens [1] != "RegTestDagc"))) {  		m_registers [tokens [1]].Value = Convert.ToByte (tokens [3]' 0x10);  		num2++;  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following statement contains a magic number: if (tokens.Length != 2)  	throw new Exception (string.Concat ("At line "' lineNumber.ToString ()' ": The number of columns is "' tokens.Length.ToString ()' " and it should be 4 or 2."));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following statement contains a magic number: if (tokens [1] != "RegVersion" && (Version != "2.1" || (tokens [1] != "RegTestLna" && tokens [1] != "RegTestAfc" && tokens [1] != "RegTestDagc"))) {  	m_registers [tokens [1]].Value = Convert.ToByte (tokens [3]' 0x10);  	num2++;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following statement contains a magic number: m_registers [tokens [1]].Value = Convert.ToByte (tokens [3]' 0x10);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,PopulateRegisters,The following statement contains a magic number: if (IsOpen) {  	byte data = 0;  	if (!Read (0x10' ref data))  		throw new Exception ("Unable to read register RegVersion");  	if (!Read (0x10' ref data))  		throw new Exception ("Unable to read register RegVersion");  	Version = (((data & 0xF0) >> 4)).ToString () + "." + ((data & 0x0F)).ToString ();  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,PopulateRegisters,The following statement contains a magic number: Version = (((data & 0xF0) >> 4)).ToString () + "." + ((data & 0x0F)).ToString ();  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,PopulateRegisters,The following statement contains a magic number: m_registers.Add (new Register ("RegLowBat"' 0x0C' 2' false' true));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,PopulateRegisters,The following statement contains a magic number: m_registers.Add (new Register ("RegOokFix"' 0x1D' 6' false' true));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,PopulateRegisters,The following statement contains a magic number: m_registers.Add (new Register ("RegRssiConfig"' 0x23' 2' true' true));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,PopulateRegisters,The following statement contains a magic number: m_registers.Add (new Register ("RegDioMapping2"' 0x26' 7' false' true));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,PopulateRegisters,The following statement contains a magic number: m_registers.Add (new Register ("RegPreambleLsb"' 0x2D' 3' false' true));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,PopulateRegisters,The following statement contains a magic number: m_registers.Add (new Register ("RegPacketConfig2"' 0x3D' 2' false' true));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RcCalStart,The following statement contains a magic number: lock (syncThread) {  	byte data = 0;  	if (Mode == OperatingModeEnum.Stdby) {  		if (!Write (0x57' 0x80))  			throw new Exception ("Unable to write register at address 0x57.");  		for (int i = 0; i < 2; i++) {  			ReadRegister (m_registers ["RegOsc1"]' ref data);  			WriteRegister (m_registers ["RegOsc1"]' (byte)(data | 0x80));  			DateTime now = DateTime.Now;  			bool flag = false;  			do {  				data = 0;  				ReadRegister (m_registers ["RegOsc1"]' ref data);  				TimeSpan span = (TimeSpan)(DateTime.Now - now);  				flag = span.TotalMilliseconds >= 1000.0;  			}  			while ((((byte)(data & 0x40)) == 0) && !flag);  			if (flag)  				throw new Exception ("RC oscillator calibration timeout.");  		}  		if (!Write (0x57' 0))  			throw new Exception ("Unable to write register at address 0x57.");  	}  	else {  		MessageBox.Show ("The chip must be in Standby mode in order to calibrate the RC oscillator!"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Hand);  		throw new Exception ("The chip must be in Standby mode in order to calibrate the RC oscillator!");  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RcCalStart,The following statement contains a magic number: lock (syncThread) {  	byte data = 0;  	if (Mode == OperatingModeEnum.Stdby) {  		if (!Write (0x57' 0x80))  			throw new Exception ("Unable to write register at address 0x57.");  		for (int i = 0; i < 2; i++) {  			ReadRegister (m_registers ["RegOsc1"]' ref data);  			WriteRegister (m_registers ["RegOsc1"]' (byte)(data | 0x80));  			DateTime now = DateTime.Now;  			bool flag = false;  			do {  				data = 0;  				ReadRegister (m_registers ["RegOsc1"]' ref data);  				TimeSpan span = (TimeSpan)(DateTime.Now - now);  				flag = span.TotalMilliseconds >= 1000.0;  			}  			while ((((byte)(data & 0x40)) == 0) && !flag);  			if (flag)  				throw new Exception ("RC oscillator calibration timeout.");  		}  		if (!Write (0x57' 0))  			throw new Exception ("Unable to write register at address 0x57.");  	}  	else {  		MessageBox.Show ("The chip must be in Standby mode in order to calibrate the RC oscillator!"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Hand);  		throw new Exception ("The chip must be in Standby mode in order to calibrate the RC oscillator!");  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RcCalStart,The following statement contains a magic number: if (Mode == OperatingModeEnum.Stdby) {  	if (!Write (0x57' 0x80))  		throw new Exception ("Unable to write register at address 0x57.");  	for (int i = 0; i < 2; i++) {  		ReadRegister (m_registers ["RegOsc1"]' ref data);  		WriteRegister (m_registers ["RegOsc1"]' (byte)(data | 0x80));  		DateTime now = DateTime.Now;  		bool flag = false;  		do {  			data = 0;  			ReadRegister (m_registers ["RegOsc1"]' ref data);  			TimeSpan span = (TimeSpan)(DateTime.Now - now);  			flag = span.TotalMilliseconds >= 1000.0;  		}  		while ((((byte)(data & 0x40)) == 0) && !flag);  		if (flag)  			throw new Exception ("RC oscillator calibration timeout.");  	}  	if (!Write (0x57' 0))  		throw new Exception ("Unable to write register at address 0x57.");  }  else {  	MessageBox.Show ("The chip must be in Standby mode in order to calibrate the RC oscillator!"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Hand);  	throw new Exception ("The chip must be in Standby mode in order to calibrate the RC oscillator!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RcCalStart,The following statement contains a magic number: if (Mode == OperatingModeEnum.Stdby) {  	if (!Write (0x57' 0x80))  		throw new Exception ("Unable to write register at address 0x57.");  	for (int i = 0; i < 2; i++) {  		ReadRegister (m_registers ["RegOsc1"]' ref data);  		WriteRegister (m_registers ["RegOsc1"]' (byte)(data | 0x80));  		DateTime now = DateTime.Now;  		bool flag = false;  		do {  			data = 0;  			ReadRegister (m_registers ["RegOsc1"]' ref data);  			TimeSpan span = (TimeSpan)(DateTime.Now - now);  			flag = span.TotalMilliseconds >= 1000.0;  		}  		while ((((byte)(data & 0x40)) == 0) && !flag);  		if (flag)  			throw new Exception ("RC oscillator calibration timeout.");  	}  	if (!Write (0x57' 0))  		throw new Exception ("Unable to write register at address 0x57.");  }  else {  	MessageBox.Show ("The chip must be in Standby mode in order to calibrate the RC oscillator!"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Hand);  	throw new Exception ("The chip must be in Standby mode in order to calibrate the RC oscillator!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RcCalStart,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	ReadRegister (m_registers ["RegOsc1"]' ref data);  	WriteRegister (m_registers ["RegOsc1"]' (byte)(data | 0x80));  	DateTime now = DateTime.Now;  	bool flag = false;  	do {  		data = 0;  		ReadRegister (m_registers ["RegOsc1"]' ref data);  		TimeSpan span = (TimeSpan)(DateTime.Now - now);  		flag = span.TotalMilliseconds >= 1000.0;  	}  	while ((((byte)(data & 0x40)) == 0) && !flag);  	if (flag)  		throw new Exception ("RC oscillator calibration timeout.");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RcCalStart,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	ReadRegister (m_registers ["RegOsc1"]' ref data);  	WriteRegister (m_registers ["RegOsc1"]' (byte)(data | 0x80));  	DateTime now = DateTime.Now;  	bool flag = false;  	do {  		data = 0;  		ReadRegister (m_registers ["RegOsc1"]' ref data);  		TimeSpan span = (TimeSpan)(DateTime.Now - now);  		flag = span.TotalMilliseconds >= 1000.0;  	}  	while ((((byte)(data & 0x40)) == 0) && !flag);  	if (flag)  		throw new Exception ("RC oscillator calibration timeout.");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RcCalStart,The following statement contains a magic number: do {  	data = 0;  	ReadRegister (m_registers ["RegOsc1"]' ref data);  	TimeSpan span = (TimeSpan)(DateTime.Now - now);  	flag = span.TotalMilliseconds >= 1000.0;  }  while ((((byte)(data & 0x40)) == 0) && !flag);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RcCalStart,The following statement contains a magic number: flag = span.TotalMilliseconds >= 1000.0;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Read,The following statement contains a magic number: portA.ScanOut (8' new byte[] {  	(byte)(address & 0x7F)  }' true);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Read,The following statement contains a magic number: portA.ScanIn (8' true);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Read,The following statement contains a magic number: if (flag && portA.ReadBytes (out rxBuffer' 8)) {  	data = rxBuffer [rxBuffer.Length - 1];  	return true;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Read,The following statement contains a magic number: portA.ScanOut (8' new byte[] {  	(byte)(address & 0x7F)  }' true);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Read,The following statement contains a magic number: for (int i = 0; i < data.Length; i++)  	portA.ScanIn (8' true);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Read,The following statement contains a magic number: portA.ScanIn (8' true);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Read,The following statement contains a magic number: if (flag && portA.ReadBytes (out rxBuffer' (uint)(data.Length * 8))) {  	Array.Copy (rxBuffer' rxBuffer.Length - data.Length' data' 0' data.Length);  	return true;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: while (regUpdateThreadContinue) {  	if (!ftdi.IsOpen) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		try {  			lock (syncThread) {  				if (!monitor) {  					Thread.Sleep (10);  					continue;  				}  				if ((retries % 10) == 0) {  					ReadIrqFlags ();  					if (!SpectrumOn) {  						if (RfPaSwitchEnabled == 2) {  							RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  							SetRssiStart ();  							RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  							SetRssiStart ();  						}  						else  							SetRssiStart ();  					}  					else  						SpectrumProcess ();  					if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  						tempMeasRunning = false;  						OnPropertyChanged ("TempMeasRunning");  					}  				}  				if (retries >= 200) {  					if (restartRx) {  						restartRx = false;  						ReadRegister (m_registers ["RegLna"]);  						ReadRegister (m_registers ["RegFeiMsb"]);  						ReadRegister (m_registers ["RegFeiLsb"]);  						ReadRegister (m_registers ["RegAfcMsb"]);  						ReadRegister (m_registers ["RegAfcLsb"]);  					}  					if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  						tempMeasRunning = true;  						OnPropertyChanged ("TempMeasRunning");  					}  					SetTempMeasStart (false);  					retries = 0;  				}  			}  		}  		catch {  		}  		retries++;  		Thread.Sleep (1);  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: while (regUpdateThreadContinue) {  	if (!ftdi.IsOpen) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		try {  			lock (syncThread) {  				if (!monitor) {  					Thread.Sleep (10);  					continue;  				}  				if ((retries % 10) == 0) {  					ReadIrqFlags ();  					if (!SpectrumOn) {  						if (RfPaSwitchEnabled == 2) {  							RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  							SetRssiStart ();  							RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  							SetRssiStart ();  						}  						else  							SetRssiStart ();  					}  					else  						SpectrumProcess ();  					if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  						tempMeasRunning = false;  						OnPropertyChanged ("TempMeasRunning");  					}  				}  				if (retries >= 200) {  					if (restartRx) {  						restartRx = false;  						ReadRegister (m_registers ["RegLna"]);  						ReadRegister (m_registers ["RegFeiMsb"]);  						ReadRegister (m_registers ["RegFeiLsb"]);  						ReadRegister (m_registers ["RegAfcMsb"]);  						ReadRegister (m_registers ["RegAfcLsb"]);  					}  					if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  						tempMeasRunning = true;  						OnPropertyChanged ("TempMeasRunning");  					}  					SetTempMeasStart (false);  					retries = 0;  				}  			}  		}  		catch {  		}  		retries++;  		Thread.Sleep (1);  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: while (regUpdateThreadContinue) {  	if (!ftdi.IsOpen) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		try {  			lock (syncThread) {  				if (!monitor) {  					Thread.Sleep (10);  					continue;  				}  				if ((retries % 10) == 0) {  					ReadIrqFlags ();  					if (!SpectrumOn) {  						if (RfPaSwitchEnabled == 2) {  							RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  							SetRssiStart ();  							RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  							SetRssiStart ();  						}  						else  							SetRssiStart ();  					}  					else  						SpectrumProcess ();  					if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  						tempMeasRunning = false;  						OnPropertyChanged ("TempMeasRunning");  					}  				}  				if (retries >= 200) {  					if (restartRx) {  						restartRx = false;  						ReadRegister (m_registers ["RegLna"]);  						ReadRegister (m_registers ["RegFeiMsb"]);  						ReadRegister (m_registers ["RegFeiLsb"]);  						ReadRegister (m_registers ["RegAfcMsb"]);  						ReadRegister (m_registers ["RegAfcLsb"]);  					}  					if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  						tempMeasRunning = true;  						OnPropertyChanged ("TempMeasRunning");  					}  					SetTempMeasStart (false);  					retries = 0;  				}  			}  		}  		catch {  		}  		retries++;  		Thread.Sleep (1);  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: while (regUpdateThreadContinue) {  	if (!ftdi.IsOpen) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		try {  			lock (syncThread) {  				if (!monitor) {  					Thread.Sleep (10);  					continue;  				}  				if ((retries % 10) == 0) {  					ReadIrqFlags ();  					if (!SpectrumOn) {  						if (RfPaSwitchEnabled == 2) {  							RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  							SetRssiStart ();  							RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  							SetRssiStart ();  						}  						else  							SetRssiStart ();  					}  					else  						SpectrumProcess ();  					if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  						tempMeasRunning = false;  						OnPropertyChanged ("TempMeasRunning");  					}  				}  				if (retries >= 200) {  					if (restartRx) {  						restartRx = false;  						ReadRegister (m_registers ["RegLna"]);  						ReadRegister (m_registers ["RegFeiMsb"]);  						ReadRegister (m_registers ["RegFeiLsb"]);  						ReadRegister (m_registers ["RegAfcMsb"]);  						ReadRegister (m_registers ["RegAfcLsb"]);  					}  					if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  						tempMeasRunning = true;  						OnPropertyChanged ("TempMeasRunning");  					}  					SetTempMeasStart (false);  					retries = 0;  				}  			}  		}  		catch {  		}  		retries++;  		Thread.Sleep (1);  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: while (regUpdateThreadContinue) {  	if (!ftdi.IsOpen) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		try {  			lock (syncThread) {  				if (!monitor) {  					Thread.Sleep (10);  					continue;  				}  				if ((retries % 10) == 0) {  					ReadIrqFlags ();  					if (!SpectrumOn) {  						if (RfPaSwitchEnabled == 2) {  							RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  							SetRssiStart ();  							RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  							SetRssiStart ();  						}  						else  							SetRssiStart ();  					}  					else  						SpectrumProcess ();  					if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  						tempMeasRunning = false;  						OnPropertyChanged ("TempMeasRunning");  					}  				}  				if (retries >= 200) {  					if (restartRx) {  						restartRx = false;  						ReadRegister (m_registers ["RegLna"]);  						ReadRegister (m_registers ["RegFeiMsb"]);  						ReadRegister (m_registers ["RegFeiLsb"]);  						ReadRegister (m_registers ["RegAfcMsb"]);  						ReadRegister (m_registers ["RegAfcLsb"]);  					}  					if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  						tempMeasRunning = true;  						OnPropertyChanged ("TempMeasRunning");  					}  					SetTempMeasStart (false);  					retries = 0;  				}  			}  		}  		catch {  		}  		retries++;  		Thread.Sleep (1);  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: if (!ftdi.IsOpen) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	try {  		lock (syncThread) {  			if (!monitor) {  				Thread.Sleep (10);  				continue;  			}  			if ((retries % 10) == 0) {  				ReadIrqFlags ();  				if (!SpectrumOn) {  					if (RfPaSwitchEnabled == 2) {  						RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  						SetRssiStart ();  						RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  						SetRssiStart ();  					}  					else  						SetRssiStart ();  				}  				else  					SpectrumProcess ();  				if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  					tempMeasRunning = false;  					OnPropertyChanged ("TempMeasRunning");  				}  			}  			if (retries >= 200) {  				if (restartRx) {  					restartRx = false;  					ReadRegister (m_registers ["RegLna"]);  					ReadRegister (m_registers ["RegFeiMsb"]);  					ReadRegister (m_registers ["RegFeiLsb"]);  					ReadRegister (m_registers ["RegAfcMsb"]);  					ReadRegister (m_registers ["RegAfcLsb"]);  				}  				if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  					tempMeasRunning = true;  					OnPropertyChanged ("TempMeasRunning");  				}  				SetTempMeasStart (false);  				retries = 0;  			}  		}  	}  	catch {  	}  	retries++;  	Thread.Sleep (1);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: if (!ftdi.IsOpen) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	try {  		lock (syncThread) {  			if (!monitor) {  				Thread.Sleep (10);  				continue;  			}  			if ((retries % 10) == 0) {  				ReadIrqFlags ();  				if (!SpectrumOn) {  					if (RfPaSwitchEnabled == 2) {  						RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  						SetRssiStart ();  						RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  						SetRssiStart ();  					}  					else  						SetRssiStart ();  				}  				else  					SpectrumProcess ();  				if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  					tempMeasRunning = false;  					OnPropertyChanged ("TempMeasRunning");  				}  			}  			if (retries >= 200) {  				if (restartRx) {  					restartRx = false;  					ReadRegister (m_registers ["RegLna"]);  					ReadRegister (m_registers ["RegFeiMsb"]);  					ReadRegister (m_registers ["RegFeiLsb"]);  					ReadRegister (m_registers ["RegAfcMsb"]);  					ReadRegister (m_registers ["RegAfcLsb"]);  				}  				if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  					tempMeasRunning = true;  					OnPropertyChanged ("TempMeasRunning");  				}  				SetTempMeasStart (false);  				retries = 0;  			}  		}  	}  	catch {  	}  	retries++;  	Thread.Sleep (1);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: if (!ftdi.IsOpen) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	try {  		lock (syncThread) {  			if (!monitor) {  				Thread.Sleep (10);  				continue;  			}  			if ((retries % 10) == 0) {  				ReadIrqFlags ();  				if (!SpectrumOn) {  					if (RfPaSwitchEnabled == 2) {  						RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  						SetRssiStart ();  						RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  						SetRssiStart ();  					}  					else  						SetRssiStart ();  				}  				else  					SpectrumProcess ();  				if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  					tempMeasRunning = false;  					OnPropertyChanged ("TempMeasRunning");  				}  			}  			if (retries >= 200) {  				if (restartRx) {  					restartRx = false;  					ReadRegister (m_registers ["RegLna"]);  					ReadRegister (m_registers ["RegFeiMsb"]);  					ReadRegister (m_registers ["RegFeiLsb"]);  					ReadRegister (m_registers ["RegAfcMsb"]);  					ReadRegister (m_registers ["RegAfcLsb"]);  				}  				if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  					tempMeasRunning = true;  					OnPropertyChanged ("TempMeasRunning");  				}  				SetTempMeasStart (false);  				retries = 0;  			}  		}  	}  	catch {  	}  	retries++;  	Thread.Sleep (1);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: if (!ftdi.IsOpen) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	try {  		lock (syncThread) {  			if (!monitor) {  				Thread.Sleep (10);  				continue;  			}  			if ((retries % 10) == 0) {  				ReadIrqFlags ();  				if (!SpectrumOn) {  					if (RfPaSwitchEnabled == 2) {  						RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  						SetRssiStart ();  						RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  						SetRssiStart ();  					}  					else  						SetRssiStart ();  				}  				else  					SpectrumProcess ();  				if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  					tempMeasRunning = false;  					OnPropertyChanged ("TempMeasRunning");  				}  			}  			if (retries >= 200) {  				if (restartRx) {  					restartRx = false;  					ReadRegister (m_registers ["RegLna"]);  					ReadRegister (m_registers ["RegFeiMsb"]);  					ReadRegister (m_registers ["RegFeiLsb"]);  					ReadRegister (m_registers ["RegAfcMsb"]);  					ReadRegister (m_registers ["RegAfcLsb"]);  				}  				if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  					tempMeasRunning = true;  					OnPropertyChanged ("TempMeasRunning");  				}  				SetTempMeasStart (false);  				retries = 0;  			}  		}  	}  	catch {  	}  	retries++;  	Thread.Sleep (1);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: if (!ftdi.IsOpen) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	try {  		lock (syncThread) {  			if (!monitor) {  				Thread.Sleep (10);  				continue;  			}  			if ((retries % 10) == 0) {  				ReadIrqFlags ();  				if (!SpectrumOn) {  					if (RfPaSwitchEnabled == 2) {  						RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  						SetRssiStart ();  						RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  						SetRssiStart ();  					}  					else  						SetRssiStart ();  				}  				else  					SpectrumProcess ();  				if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  					tempMeasRunning = false;  					OnPropertyChanged ("TempMeasRunning");  				}  			}  			if (retries >= 200) {  				if (restartRx) {  					restartRx = false;  					ReadRegister (m_registers ["RegLna"]);  					ReadRegister (m_registers ["RegFeiMsb"]);  					ReadRegister (m_registers ["RegFeiLsb"]);  					ReadRegister (m_registers ["RegAfcMsb"]);  					ReadRegister (m_registers ["RegAfcLsb"]);  				}  				if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  					tempMeasRunning = true;  					OnPropertyChanged ("TempMeasRunning");  				}  				SetTempMeasStart (false);  				retries = 0;  			}  		}  	}  	catch {  	}  	retries++;  	Thread.Sleep (1);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: try {  	lock (syncThread) {  		if (!monitor) {  			Thread.Sleep (10);  			continue;  		}  		if ((retries % 10) == 0) {  			ReadIrqFlags ();  			if (!SpectrumOn) {  				if (RfPaSwitchEnabled == 2) {  					RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  					SetRssiStart ();  					RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  					SetRssiStart ();  				}  				else  					SetRssiStart ();  			}  			else  				SpectrumProcess ();  			if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  				tempMeasRunning = false;  				OnPropertyChanged ("TempMeasRunning");  			}  		}  		if (retries >= 200) {  			if (restartRx) {  				restartRx = false;  				ReadRegister (m_registers ["RegLna"]);  				ReadRegister (m_registers ["RegFeiMsb"]);  				ReadRegister (m_registers ["RegFeiLsb"]);  				ReadRegister (m_registers ["RegAfcMsb"]);  				ReadRegister (m_registers ["RegAfcLsb"]);  			}  			if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  				tempMeasRunning = true;  				OnPropertyChanged ("TempMeasRunning");  			}  			SetTempMeasStart (false);  			retries = 0;  		}  	}  }  catch {  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: try {  	lock (syncThread) {  		if (!monitor) {  			Thread.Sleep (10);  			continue;  		}  		if ((retries % 10) == 0) {  			ReadIrqFlags ();  			if (!SpectrumOn) {  				if (RfPaSwitchEnabled == 2) {  					RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  					SetRssiStart ();  					RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  					SetRssiStart ();  				}  				else  					SetRssiStart ();  			}  			else  				SpectrumProcess ();  			if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  				tempMeasRunning = false;  				OnPropertyChanged ("TempMeasRunning");  			}  		}  		if (retries >= 200) {  			if (restartRx) {  				restartRx = false;  				ReadRegister (m_registers ["RegLna"]);  				ReadRegister (m_registers ["RegFeiMsb"]);  				ReadRegister (m_registers ["RegFeiLsb"]);  				ReadRegister (m_registers ["RegAfcMsb"]);  				ReadRegister (m_registers ["RegAfcLsb"]);  			}  			if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  				tempMeasRunning = true;  				OnPropertyChanged ("TempMeasRunning");  			}  			SetTempMeasStart (false);  			retries = 0;  		}  	}  }  catch {  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: try {  	lock (syncThread) {  		if (!monitor) {  			Thread.Sleep (10);  			continue;  		}  		if ((retries % 10) == 0) {  			ReadIrqFlags ();  			if (!SpectrumOn) {  				if (RfPaSwitchEnabled == 2) {  					RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  					SetRssiStart ();  					RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  					SetRssiStart ();  				}  				else  					SetRssiStart ();  			}  			else  				SpectrumProcess ();  			if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  				tempMeasRunning = false;  				OnPropertyChanged ("TempMeasRunning");  			}  		}  		if (retries >= 200) {  			if (restartRx) {  				restartRx = false;  				ReadRegister (m_registers ["RegLna"]);  				ReadRegister (m_registers ["RegFeiMsb"]);  				ReadRegister (m_registers ["RegFeiLsb"]);  				ReadRegister (m_registers ["RegAfcMsb"]);  				ReadRegister (m_registers ["RegAfcLsb"]);  			}  			if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  				tempMeasRunning = true;  				OnPropertyChanged ("TempMeasRunning");  			}  			SetTempMeasStart (false);  			retries = 0;  		}  	}  }  catch {  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: try {  	lock (syncThread) {  		if (!monitor) {  			Thread.Sleep (10);  			continue;  		}  		if ((retries % 10) == 0) {  			ReadIrqFlags ();  			if (!SpectrumOn) {  				if (RfPaSwitchEnabled == 2) {  					RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  					SetRssiStart ();  					RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  					SetRssiStart ();  				}  				else  					SetRssiStart ();  			}  			else  				SpectrumProcess ();  			if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  				tempMeasRunning = false;  				OnPropertyChanged ("TempMeasRunning");  			}  		}  		if (retries >= 200) {  			if (restartRx) {  				restartRx = false;  				ReadRegister (m_registers ["RegLna"]);  				ReadRegister (m_registers ["RegFeiMsb"]);  				ReadRegister (m_registers ["RegFeiLsb"]);  				ReadRegister (m_registers ["RegAfcMsb"]);  				ReadRegister (m_registers ["RegAfcLsb"]);  			}  			if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  				tempMeasRunning = true;  				OnPropertyChanged ("TempMeasRunning");  			}  			SetTempMeasStart (false);  			retries = 0;  		}  	}  }  catch {  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: lock (syncThread) {  	if (!monitor) {  		Thread.Sleep (10);  		continue;  	}  	if ((retries % 10) == 0) {  		ReadIrqFlags ();  		if (!SpectrumOn) {  			if (RfPaSwitchEnabled == 2) {  				RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  				SetRssiStart ();  				RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  				SetRssiStart ();  			}  			else  				SetRssiStart ();  		}  		else  			SpectrumProcess ();  		if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  			tempMeasRunning = false;  			OnPropertyChanged ("TempMeasRunning");  		}  	}  	if (retries >= 200) {  		if (restartRx) {  			restartRx = false;  			ReadRegister (m_registers ["RegLna"]);  			ReadRegister (m_registers ["RegFeiMsb"]);  			ReadRegister (m_registers ["RegFeiLsb"]);  			ReadRegister (m_registers ["RegAfcMsb"]);  			ReadRegister (m_registers ["RegAfcLsb"]);  		}  		if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  			tempMeasRunning = true;  			OnPropertyChanged ("TempMeasRunning");  		}  		SetTempMeasStart (false);  		retries = 0;  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: lock (syncThread) {  	if (!monitor) {  		Thread.Sleep (10);  		continue;  	}  	if ((retries % 10) == 0) {  		ReadIrqFlags ();  		if (!SpectrumOn) {  			if (RfPaSwitchEnabled == 2) {  				RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  				SetRssiStart ();  				RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  				SetRssiStart ();  			}  			else  				SetRssiStart ();  		}  		else  			SpectrumProcess ();  		if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  			tempMeasRunning = false;  			OnPropertyChanged ("TempMeasRunning");  		}  	}  	if (retries >= 200) {  		if (restartRx) {  			restartRx = false;  			ReadRegister (m_registers ["RegLna"]);  			ReadRegister (m_registers ["RegFeiMsb"]);  			ReadRegister (m_registers ["RegFeiLsb"]);  			ReadRegister (m_registers ["RegAfcMsb"]);  			ReadRegister (m_registers ["RegAfcLsb"]);  		}  		if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  			tempMeasRunning = true;  			OnPropertyChanged ("TempMeasRunning");  		}  		SetTempMeasStart (false);  		retries = 0;  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: lock (syncThread) {  	if (!monitor) {  		Thread.Sleep (10);  		continue;  	}  	if ((retries % 10) == 0) {  		ReadIrqFlags ();  		if (!SpectrumOn) {  			if (RfPaSwitchEnabled == 2) {  				RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  				SetRssiStart ();  				RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  				SetRssiStart ();  			}  			else  				SetRssiStart ();  		}  		else  			SpectrumProcess ();  		if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  			tempMeasRunning = false;  			OnPropertyChanged ("TempMeasRunning");  		}  	}  	if (retries >= 200) {  		if (restartRx) {  			restartRx = false;  			ReadRegister (m_registers ["RegLna"]);  			ReadRegister (m_registers ["RegFeiMsb"]);  			ReadRegister (m_registers ["RegFeiLsb"]);  			ReadRegister (m_registers ["RegAfcMsb"]);  			ReadRegister (m_registers ["RegAfcLsb"]);  		}  		if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  			tempMeasRunning = true;  			OnPropertyChanged ("TempMeasRunning");  		}  		SetTempMeasStart (false);  		retries = 0;  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: lock (syncThread) {  	if (!monitor) {  		Thread.Sleep (10);  		continue;  	}  	if ((retries % 10) == 0) {  		ReadIrqFlags ();  		if (!SpectrumOn) {  			if (RfPaSwitchEnabled == 2) {  				RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  				SetRssiStart ();  				RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  				SetRssiStart ();  			}  			else  				SetRssiStart ();  		}  		else  			SpectrumProcess ();  		if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  			tempMeasRunning = false;  			OnPropertyChanged ("TempMeasRunning");  		}  	}  	if (retries >= 200) {  		if (restartRx) {  			restartRx = false;  			ReadRegister (m_registers ["RegLna"]);  			ReadRegister (m_registers ["RegFeiMsb"]);  			ReadRegister (m_registers ["RegFeiLsb"]);  			ReadRegister (m_registers ["RegAfcMsb"]);  			ReadRegister (m_registers ["RegAfcLsb"]);  		}  		if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  			tempMeasRunning = true;  			OnPropertyChanged ("TempMeasRunning");  		}  		SetTempMeasStart (false);  		retries = 0;  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: if (!monitor) {  	Thread.Sleep (10);  	continue;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: if ((retries % 10) == 0) {  	ReadIrqFlags ();  	if (!SpectrumOn) {  		if (RfPaSwitchEnabled == 2) {  			RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  			SetRssiStart ();  			RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  			SetRssiStart ();  		}  		else  			SetRssiStart ();  	}  	else  		SpectrumProcess ();  	if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  		tempMeasRunning = false;  		OnPropertyChanged ("TempMeasRunning");  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: if ((retries % 10) == 0) {  	ReadIrqFlags ();  	if (!SpectrumOn) {  		if (RfPaSwitchEnabled == 2) {  			RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  			SetRssiStart ();  			RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  			SetRssiStart ();  		}  		else  			SetRssiStart ();  	}  	else  		SpectrumProcess ();  	if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  		tempMeasRunning = false;  		OnPropertyChanged ("TempMeasRunning");  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: if (!SpectrumOn) {  	if (RfPaSwitchEnabled == 2) {  		RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  		SetRssiStart ();  		RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  		SetRssiStart ();  	}  	else  		SetRssiStart ();  }  else  	SpectrumProcess ();  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: if (RfPaSwitchEnabled == 2) {  	RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  	SetRssiStart ();  	RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_PA_BOOST;  	SetRssiStart ();  }  else  	SetRssiStart ();  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,RegUpdateThread,The following statement contains a magic number: if (retries >= 200) {  	if (restartRx) {  		restartRx = false;  		ReadRegister (m_registers ["RegLna"]);  		ReadRegister (m_registers ["RegFeiMsb"]);  		ReadRegister (m_registers ["RegFeiLsb"]);  		ReadRegister (m_registers ["RegAfcMsb"]);  		ReadRegister (m_registers ["RegAfcLsb"]);  	}  	if (TempCalDone && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  		tempMeasRunning = true;  		OnPropertyChanged ("TempMeasRunning");  	}  	SetTempMeasStart (false);  	retries = 0;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Reset,The following statement contains a magic number: try {  	bool spectrumOn = SpectrumOn;  	if (SpectrumOn)  		SpectrumOn = false;  	tempCalDone = false;  	PacketHandlerStop ();  	Mpsse portA = ftdi.PortA;  	portA.PortDir = (byte)(portA.PortDir | PA5_RESET);  	portA.PortValue = (byte)(portA.PortValue | PA5_RESET);  	if (!portA.SendBytes ())  		throw new Exception ("Unable to send bytes over USB device");  	Thread.Sleep (1);  	portA.PortDir = (byte)(portA.PortDir & ~PA5_RESET);  	portA.PortValue = (byte)(portA.PortValue & ~PA5_RESET);  	if (!portA.SendBytes ())  		throw new Exception ("Unable to send bytes over USB device");  	Thread.Sleep (5);  	ReadRegisters ();  	if (Version == "2.1")  		RcCalStart ();  	SetDefaultValues ();  	ReadRegisters ();  	RfPaSwitchEnabled = 0;  	RfPaSwitchSel = RfPaSwitchSelEnum.RF_IO_RFIO;  	if (spectrumOn)  		SpectrumOn = true;  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  finally {  	System.Threading.Monitor.Exit (sync);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Reset,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcAutoClearOn,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegAfcFei"].Value = (m_registers ["RegAfcFei"].Value & 0xF7) | (uint)(value ? 8 : 0);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcAutoClearOn,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegAfcFei"].Value = (m_registers ["RegAfcFei"].Value & 0xF7) | (uint)(value ? 8 : 0);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcAutoClearOn,The following statement contains a magic number: m_registers ["RegAfcFei"].Value = (m_registers ["RegAfcFei"].Value & 0xF7) | (uint)(value ? 8 : 0);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcAutoOn,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegAfcFei"].Value;  		num = (byte)(num & 0xfb);  		num = (byte)(num | (value ? ((byte)4) : ((byte)0)));  		m_registers ["RegAfcFei"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcAutoOn,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegAfcFei"].Value;  	num = (byte)(num & 0xfb);  	num = (byte)(num | (value ? ((byte)4) : ((byte)0)));  	m_registers ["RegAfcFei"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcAutoOn,The following statement contains a magic number: num = (byte)(num | (value ? ((byte)4) : ((byte)0)));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcClear,The following statement contains a magic number: try {  	lock (syncThread) {  		m_registers ["RegAfcFei"].Value = m_registers ["RegAfcFei"].Value | 2;  		ReadRegister (m_registers ["RegAfcMsb"]);  		ReadRegister (m_registers ["RegAfcLsb"]);  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcClear,The following statement contains a magic number: lock (syncThread) {  	m_registers ["RegAfcFei"].Value = m_registers ["RegAfcFei"].Value | 2;  	ReadRegister (m_registers ["RegAfcMsb"]);  	ReadRegister (m_registers ["RegAfcLsb"]);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcClear,The following statement contains a magic number: m_registers ["RegAfcFei"].Value = m_registers ["RegAfcFei"].Value | 2;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcDccFreq,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegAfcBw"].Value = (m_registers ["RegAfcBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((4.0M * AfcRxBw) / (6.283185307179580M * value))) / Math.Log10 (2.0)) - 2.0) << 5);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcDccFreq,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegAfcBw"].Value = (m_registers ["RegAfcBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((4.0M * AfcRxBw) / (6.283185307179580M * value))) / Math.Log10 (2.0)) - 2.0) << 5);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcDccFreq,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegAfcBw"].Value = (m_registers ["RegAfcBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((4.0M * AfcRxBw) / (6.283185307179580M * value))) / Math.Log10 (2.0)) - 2.0) << 5);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcDccFreq,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegAfcBw"].Value = (m_registers ["RegAfcBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((4.0M * AfcRxBw) / (6.283185307179580M * value))) / Math.Log10 (2.0)) - 2.0) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcDccFreq,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegAfcBw"].Value = (m_registers ["RegAfcBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((4.0M * AfcRxBw) / (6.283185307179580M * value))) / Math.Log10 (2.0)) - 2.0) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcDccFreq,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegAfcBw"].Value = (m_registers ["RegAfcBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((4.0M * AfcRxBw) / (6.283185307179580M * value))) / Math.Log10 (2.0)) - 2.0) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcDccFreq,The following statement contains a magic number: m_registers ["RegAfcBw"].Value = (m_registers ["RegAfcBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((4.0M * AfcRxBw) / (6.283185307179580M * value))) / Math.Log10 (2.0)) - 2.0) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcDccFreq,The following statement contains a magic number: m_registers ["RegAfcBw"].Value = (m_registers ["RegAfcBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((4.0M * AfcRxBw) / (6.283185307179580M * value))) / Math.Log10 (2.0)) - 2.0) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcDccFreq,The following statement contains a magic number: m_registers ["RegAfcBw"].Value = (m_registers ["RegAfcBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((4.0M * AfcRxBw) / (6.283185307179580M * value))) / Math.Log10 (2.0)) - 2.0) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcRxBw,The following statement contains a magic number: try {  	lock (syncThread) {  		uint num = m_registers ["RegAfcBw"].Value & 0xE0;  		int exp = 0;  		int mant = 0;  		ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  		switch (mant) {  		case 0x10:  			num |= (uint)(0x00 | exp & 7);  			break;  		case 20:  			num |= (uint)(0x08 | (exp & 7));  			break;  		case 0x18:  			num |= (uint)(0x10 | (exp & 7));  			break;  		default:  			throw new Exception ("Invalid RxBwMant parameter");  		}  		m_registers ["RegAfcBw"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcRxBw,The following statement contains a magic number: try {  	lock (syncThread) {  		uint num = m_registers ["RegAfcBw"].Value & 0xE0;  		int exp = 0;  		int mant = 0;  		ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  		switch (mant) {  		case 0x10:  			num |= (uint)(0x00 | exp & 7);  			break;  		case 20:  			num |= (uint)(0x08 | (exp & 7));  			break;  		case 0x18:  			num |= (uint)(0x10 | (exp & 7));  			break;  		default:  			throw new Exception ("Invalid RxBwMant parameter");  		}  		m_registers ["RegAfcBw"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcRxBw,The following statement contains a magic number: try {  	lock (syncThread) {  		uint num = m_registers ["RegAfcBw"].Value & 0xE0;  		int exp = 0;  		int mant = 0;  		ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  		switch (mant) {  		case 0x10:  			num |= (uint)(0x00 | exp & 7);  			break;  		case 20:  			num |= (uint)(0x08 | (exp & 7));  			break;  		case 0x18:  			num |= (uint)(0x10 | (exp & 7));  			break;  		default:  			throw new Exception ("Invalid RxBwMant parameter");  		}  		m_registers ["RegAfcBw"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcRxBw,The following statement contains a magic number: try {  	lock (syncThread) {  		uint num = m_registers ["RegAfcBw"].Value & 0xE0;  		int exp = 0;  		int mant = 0;  		ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  		switch (mant) {  		case 0x10:  			num |= (uint)(0x00 | exp & 7);  			break;  		case 20:  			num |= (uint)(0x08 | (exp & 7));  			break;  		case 0x18:  			num |= (uint)(0x10 | (exp & 7));  			break;  		default:  			throw new Exception ("Invalid RxBwMant parameter");  		}  		m_registers ["RegAfcBw"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcRxBw,The following statement contains a magic number: lock (syncThread) {  	uint num = m_registers ["RegAfcBw"].Value & 0xE0;  	int exp = 0;  	int mant = 0;  	ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  	switch (mant) {  	case 0x10:  		num |= (uint)(0x00 | exp & 7);  		break;  	case 20:  		num |= (uint)(0x08 | (exp & 7));  		break;  	case 0x18:  		num |= (uint)(0x10 | (exp & 7));  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	m_registers ["RegAfcBw"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcRxBw,The following statement contains a magic number: lock (syncThread) {  	uint num = m_registers ["RegAfcBw"].Value & 0xE0;  	int exp = 0;  	int mant = 0;  	ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  	switch (mant) {  	case 0x10:  		num |= (uint)(0x00 | exp & 7);  		break;  	case 20:  		num |= (uint)(0x08 | (exp & 7));  		break;  	case 0x18:  		num |= (uint)(0x10 | (exp & 7));  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	m_registers ["RegAfcBw"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcRxBw,The following statement contains a magic number: lock (syncThread) {  	uint num = m_registers ["RegAfcBw"].Value & 0xE0;  	int exp = 0;  	int mant = 0;  	ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  	switch (mant) {  	case 0x10:  		num |= (uint)(0x00 | exp & 7);  		break;  	case 20:  		num |= (uint)(0x08 | (exp & 7));  		break;  	case 0x18:  		num |= (uint)(0x10 | (exp & 7));  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	m_registers ["RegAfcBw"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcRxBw,The following statement contains a magic number: lock (syncThread) {  	uint num = m_registers ["RegAfcBw"].Value & 0xE0;  	int exp = 0;  	int mant = 0;  	ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  	switch (mant) {  	case 0x10:  		num |= (uint)(0x00 | exp & 7);  		break;  	case 20:  		num |= (uint)(0x08 | (exp & 7));  		break;  	case 0x18:  		num |= (uint)(0x10 | (exp & 7));  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	m_registers ["RegAfcBw"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcRxBw,The following statement contains a magic number: switch (mant) {  case 0x10:  	num |= (uint)(0x00 | exp & 7);  	break;  case 20:  	num |= (uint)(0x08 | (exp & 7));  	break;  case 0x18:  	num |= (uint)(0x10 | (exp & 7));  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcRxBw,The following statement contains a magic number: switch (mant) {  case 0x10:  	num |= (uint)(0x00 | exp & 7);  	break;  case 20:  	num |= (uint)(0x08 | (exp & 7));  	break;  case 0x18:  	num |= (uint)(0x10 | (exp & 7));  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcRxBw,The following statement contains a magic number: switch (mant) {  case 0x10:  	num |= (uint)(0x00 | exp & 7);  	break;  case 20:  	num |= (uint)(0x08 | (exp & 7));  	break;  case 0x18:  	num |= (uint)(0x10 | (exp & 7));  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcRxBw,The following statement contains a magic number: switch (mant) {  case 0x10:  	num |= (uint)(0x00 | exp & 7);  	break;  case 20:  	num |= (uint)(0x08 | (exp & 7));  	break;  case 0x18:  	num |= (uint)(0x10 | (exp & 7));  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcRxBw,The following statement contains a magic number: num |= (uint)(0x00 | exp & 7);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcRxBw,The following statement contains a magic number: num |= (uint)(0x08 | (exp & 7));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcRxBw,The following statement contains a magic number: num |= (uint)(0x10 | (exp & 7));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcStart,The following statement contains a magic number: lock (syncThread) {  	byte data = 0;  	ReadRegister (m_registers ["RegAfcFei"]' ref data);  	WriteRegister (m_registers ["RegAfcFei"]' (byte)(data | 1));  	DateTime now = DateTime.Now;  	bool flag = false;  	do {  		data = 0;  		ReadRegister (m_registers ["RegAfcFei"]' ref data);  		TimeSpan span = (TimeSpan)(DateTime.Now - now);  		flag = span.TotalMilliseconds >= 1000.0;  	}  	while (((data & 0x10) == 0) && !flag);  	if (flag)  		OnError (1' "AFC read timeout.");  	else {  		ReadRegister (m_registers ["RegAfcMsb"]);  		ReadRegister (m_registers ["RegAfcLsb"]);  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcStart,The following statement contains a magic number: do {  	data = 0;  	ReadRegister (m_registers ["RegAfcFei"]' ref data);  	TimeSpan span = (TimeSpan)(DateTime.Now - now);  	flag = span.TotalMilliseconds >= 1000.0;  }  while (((data & 0x10) == 0) && !flag);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAfcStart,The following statement contains a magic number: flag = span.TotalMilliseconds >= 1000.0;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcRefLevel,The following statement contains a magic number: try {  	lock (syncThread) {  		uint num;  		if (Version == "2.1")  			num = m_registers ["RegAgcRef"].Value;  		else  			num = m_registers ["Reserved14"].Value;  		num &= 0xC0;  		num |= (uint)((-value - 80) & 0x3F);  		if (Version == "2.1")  			m_registers ["RegAgcRef"].Value = num;  		else  			m_registers ["Reserved14"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcRefLevel,The following statement contains a magic number: lock (syncThread) {  	uint num;  	if (Version == "2.1")  		num = m_registers ["RegAgcRef"].Value;  	else  		num = m_registers ["Reserved14"].Value;  	num &= 0xC0;  	num |= (uint)((-value - 80) & 0x3F);  	if (Version == "2.1")  		m_registers ["RegAgcRef"].Value = num;  	else  		m_registers ["Reserved14"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcRefLevel,The following statement contains a magic number: num |= (uint)((-value - 80) & 0x3F);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcSnrMargin,The following statement contains a magic number: try {  	lock (syncThread) {  		uint num;  		if (Version == "2.1")  			num = (byte)m_registers ["RegAgcThresh1"].Value;  		else  			num = (byte)m_registers ["Reserved15"].Value;  		num &= 0x1F;  		num |= (uint)((value & 7) << 5);  		if (Version == "2.1")  			m_registers ["RegAgcThresh1"].Value = num;  		else  			m_registers ["Reserved15"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcSnrMargin,The following statement contains a magic number: try {  	lock (syncThread) {  		uint num;  		if (Version == "2.1")  			num = (byte)m_registers ["RegAgcThresh1"].Value;  		else  			num = (byte)m_registers ["Reserved15"].Value;  		num &= 0x1F;  		num |= (uint)((value & 7) << 5);  		if (Version == "2.1")  			m_registers ["RegAgcThresh1"].Value = num;  		else  			m_registers ["Reserved15"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcSnrMargin,The following statement contains a magic number: lock (syncThread) {  	uint num;  	if (Version == "2.1")  		num = (byte)m_registers ["RegAgcThresh1"].Value;  	else  		num = (byte)m_registers ["Reserved15"].Value;  	num &= 0x1F;  	num |= (uint)((value & 7) << 5);  	if (Version == "2.1")  		m_registers ["RegAgcThresh1"].Value = num;  	else  		m_registers ["Reserved15"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcSnrMargin,The following statement contains a magic number: lock (syncThread) {  	uint num;  	if (Version == "2.1")  		num = (byte)m_registers ["RegAgcThresh1"].Value;  	else  		num = (byte)m_registers ["Reserved15"].Value;  	num &= 0x1F;  	num |= (uint)((value & 7) << 5);  	if (Version == "2.1")  		m_registers ["RegAgcThresh1"].Value = num;  	else  		m_registers ["Reserved15"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcSnrMargin,The following statement contains a magic number: num |= (uint)((value & 7) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcSnrMargin,The following statement contains a magic number: num |= (uint)((value & 7) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 1:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh1"];  			else  				register = m_registers ["Reserved15"];  			break;  		case 2:  		case 3:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh2"];  			else  				register = m_registers ["Reserved16"];  			break;  		case 4:  		case 5:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh3"];  			else  				register = m_registers ["Reserved17"];  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		uint num = register.Value;  		switch (id) {  		case 1:  			num &= 0xE0;  			num |= (uint)value;  			break;  		case 2:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 3:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		case 4:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 5:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 1:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh1"];  			else  				register = m_registers ["Reserved15"];  			break;  		case 2:  		case 3:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh2"];  			else  				register = m_registers ["Reserved16"];  			break;  		case 4:  		case 5:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh3"];  			else  				register = m_registers ["Reserved17"];  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		uint num = register.Value;  		switch (id) {  		case 1:  			num &= 0xE0;  			num |= (uint)value;  			break;  		case 2:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 3:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		case 4:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 5:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 1:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh1"];  			else  				register = m_registers ["Reserved15"];  			break;  		case 2:  		case 3:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh2"];  			else  				register = m_registers ["Reserved16"];  			break;  		case 4:  		case 5:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh3"];  			else  				register = m_registers ["Reserved17"];  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		uint num = register.Value;  		switch (id) {  		case 1:  			num &= 0xE0;  			num |= (uint)value;  			break;  		case 2:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 3:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		case 4:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 5:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 1:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh1"];  			else  				register = m_registers ["Reserved15"];  			break;  		case 2:  		case 3:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh2"];  			else  				register = m_registers ["Reserved16"];  			break;  		case 4:  		case 5:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh3"];  			else  				register = m_registers ["Reserved17"];  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		uint num = register.Value;  		switch (id) {  		case 1:  			num &= 0xE0;  			num |= (uint)value;  			break;  		case 2:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 3:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		case 4:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 5:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 1:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh1"];  			else  				register = m_registers ["Reserved15"];  			break;  		case 2:  		case 3:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh2"];  			else  				register = m_registers ["Reserved16"];  			break;  		case 4:  		case 5:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh3"];  			else  				register = m_registers ["Reserved17"];  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		uint num = register.Value;  		switch (id) {  		case 1:  			num &= 0xE0;  			num |= (uint)value;  			break;  		case 2:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 3:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		case 4:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 5:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 1:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh1"];  			else  				register = m_registers ["Reserved15"];  			break;  		case 2:  		case 3:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh2"];  			else  				register = m_registers ["Reserved16"];  			break;  		case 4:  		case 5:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh3"];  			else  				register = m_registers ["Reserved17"];  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		uint num = register.Value;  		switch (id) {  		case 1:  			num &= 0xE0;  			num |= (uint)value;  			break;  		case 2:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 3:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		case 4:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 5:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 1:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh1"];  			else  				register = m_registers ["Reserved15"];  			break;  		case 2:  		case 3:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh2"];  			else  				register = m_registers ["Reserved16"];  			break;  		case 4:  		case 5:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh3"];  			else  				register = m_registers ["Reserved17"];  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		uint num = register.Value;  		switch (id) {  		case 1:  			num &= 0xE0;  			num |= (uint)value;  			break;  		case 2:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 3:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		case 4:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 5:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 1:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh1"];  			else  				register = m_registers ["Reserved15"];  			break;  		case 2:  		case 3:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh2"];  			else  				register = m_registers ["Reserved16"];  			break;  		case 4:  		case 5:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh3"];  			else  				register = m_registers ["Reserved17"];  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		uint num = register.Value;  		switch (id) {  		case 1:  			num &= 0xE0;  			num |= (uint)value;  			break;  		case 2:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 3:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		case 4:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 5:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 1:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh1"];  			else  				register = m_registers ["Reserved15"];  			break;  		case 2:  		case 3:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh2"];  			else  				register = m_registers ["Reserved16"];  			break;  		case 4:  		case 5:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh3"];  			else  				register = m_registers ["Reserved17"];  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		uint num = register.Value;  		switch (id) {  		case 1:  			num &= 0xE0;  			num |= (uint)value;  			break;  		case 2:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 3:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		case 4:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 5:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 1:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh1"];  			else  				register = m_registers ["Reserved15"];  			break;  		case 2:  		case 3:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh2"];  			else  				register = m_registers ["Reserved16"];  			break;  		case 4:  		case 5:  			if (Version == "2.1")  				register = m_registers ["RegAgcThresh3"];  			else  				register = m_registers ["Reserved17"];  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		uint num = register.Value;  		switch (id) {  		case 1:  			num &= 0xE0;  			num |= (uint)value;  			break;  		case 2:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 3:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		case 4:  			num &= 0x0F;  			num |= (uint)(value << 4);  			break;  		case 5:  			num &= 0xF0;  			num |= (uint)(value & 0x0F);  			break;  		default:  			throw new Exception ("Invalid AGC step ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 1:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh1"];  		else  			register = m_registers ["Reserved15"];  		break;  	case 2:  	case 3:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh2"];  		else  			register = m_registers ["Reserved16"];  		break;  	case 4:  	case 5:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh3"];  		else  			register = m_registers ["Reserved17"];  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	uint num = register.Value;  	switch (id) {  	case 1:  		num &= 0xE0;  		num |= (uint)value;  		break;  	case 2:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 3:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	case 4:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 5:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 1:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh1"];  		else  			register = m_registers ["Reserved15"];  		break;  	case 2:  	case 3:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh2"];  		else  			register = m_registers ["Reserved16"];  		break;  	case 4:  	case 5:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh3"];  		else  			register = m_registers ["Reserved17"];  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	uint num = register.Value;  	switch (id) {  	case 1:  		num &= 0xE0;  		num |= (uint)value;  		break;  	case 2:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 3:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	case 4:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 5:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 1:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh1"];  		else  			register = m_registers ["Reserved15"];  		break;  	case 2:  	case 3:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh2"];  		else  			register = m_registers ["Reserved16"];  		break;  	case 4:  	case 5:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh3"];  		else  			register = m_registers ["Reserved17"];  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	uint num = register.Value;  	switch (id) {  	case 1:  		num &= 0xE0;  		num |= (uint)value;  		break;  	case 2:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 3:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	case 4:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 5:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 1:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh1"];  		else  			register = m_registers ["Reserved15"];  		break;  	case 2:  	case 3:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh2"];  		else  			register = m_registers ["Reserved16"];  		break;  	case 4:  	case 5:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh3"];  		else  			register = m_registers ["Reserved17"];  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	uint num = register.Value;  	switch (id) {  	case 1:  		num &= 0xE0;  		num |= (uint)value;  		break;  	case 2:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 3:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	case 4:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 5:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 1:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh1"];  		else  			register = m_registers ["Reserved15"];  		break;  	case 2:  	case 3:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh2"];  		else  			register = m_registers ["Reserved16"];  		break;  	case 4:  	case 5:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh3"];  		else  			register = m_registers ["Reserved17"];  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	uint num = register.Value;  	switch (id) {  	case 1:  		num &= 0xE0;  		num |= (uint)value;  		break;  	case 2:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 3:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	case 4:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 5:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 1:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh1"];  		else  			register = m_registers ["Reserved15"];  		break;  	case 2:  	case 3:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh2"];  		else  			register = m_registers ["Reserved16"];  		break;  	case 4:  	case 5:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh3"];  		else  			register = m_registers ["Reserved17"];  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	uint num = register.Value;  	switch (id) {  	case 1:  		num &= 0xE0;  		num |= (uint)value;  		break;  	case 2:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 3:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	case 4:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 5:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 1:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh1"];  		else  			register = m_registers ["Reserved15"];  		break;  	case 2:  	case 3:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh2"];  		else  			register = m_registers ["Reserved16"];  		break;  	case 4:  	case 5:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh3"];  		else  			register = m_registers ["Reserved17"];  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	uint num = register.Value;  	switch (id) {  	case 1:  		num &= 0xE0;  		num |= (uint)value;  		break;  	case 2:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 3:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	case 4:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 5:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 1:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh1"];  		else  			register = m_registers ["Reserved15"];  		break;  	case 2:  	case 3:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh2"];  		else  			register = m_registers ["Reserved16"];  		break;  	case 4:  	case 5:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh3"];  		else  			register = m_registers ["Reserved17"];  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	uint num = register.Value;  	switch (id) {  	case 1:  		num &= 0xE0;  		num |= (uint)value;  		break;  	case 2:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 3:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	case 4:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 5:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 1:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh1"];  		else  			register = m_registers ["Reserved15"];  		break;  	case 2:  	case 3:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh2"];  		else  			register = m_registers ["Reserved16"];  		break;  	case 4:  	case 5:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh3"];  		else  			register = m_registers ["Reserved17"];  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	uint num = register.Value;  	switch (id) {  	case 1:  		num &= 0xE0;  		num |= (uint)value;  		break;  	case 2:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 3:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	case 4:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 5:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 1:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh1"];  		else  			register = m_registers ["Reserved15"];  		break;  	case 2:  	case 3:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh2"];  		else  			register = m_registers ["Reserved16"];  		break;  	case 4:  	case 5:  		if (Version == "2.1")  			register = m_registers ["RegAgcThresh3"];  		else  			register = m_registers ["Reserved17"];  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	uint num = register.Value;  	switch (id) {  	case 1:  		num &= 0xE0;  		num |= (uint)value;  		break;  	case 2:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 3:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	case 4:  		num &= 0x0F;  		num |= (uint)(value << 4);  		break;  	case 5:  		num &= 0xF0;  		num |= (uint)(value & 0x0F);  		break;  	default:  		throw new Exception ("Invalid AGC step ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: switch (id) {  case 1:  	if (Version == "2.1")  		register = m_registers ["RegAgcThresh1"];  	else  		register = m_registers ["Reserved15"];  	break;  case 2:  case 3:  	if (Version == "2.1")  		register = m_registers ["RegAgcThresh2"];  	else  		register = m_registers ["Reserved16"];  	break;  case 4:  case 5:  	if (Version == "2.1")  		register = m_registers ["RegAgcThresh3"];  	else  		register = m_registers ["Reserved17"];  	break;  default:  	throw new Exception ("Invalid AGC step ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: switch (id) {  case 1:  	if (Version == "2.1")  		register = m_registers ["RegAgcThresh1"];  	else  		register = m_registers ["Reserved15"];  	break;  case 2:  case 3:  	if (Version == "2.1")  		register = m_registers ["RegAgcThresh2"];  	else  		register = m_registers ["Reserved16"];  	break;  case 4:  case 5:  	if (Version == "2.1")  		register = m_registers ["RegAgcThresh3"];  	else  		register = m_registers ["Reserved17"];  	break;  default:  	throw new Exception ("Invalid AGC step ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: switch (id) {  case 1:  	if (Version == "2.1")  		register = m_registers ["RegAgcThresh1"];  	else  		register = m_registers ["Reserved15"];  	break;  case 2:  case 3:  	if (Version == "2.1")  		register = m_registers ["RegAgcThresh2"];  	else  		register = m_registers ["Reserved16"];  	break;  case 4:  case 5:  	if (Version == "2.1")  		register = m_registers ["RegAgcThresh3"];  	else  		register = m_registers ["Reserved17"];  	break;  default:  	throw new Exception ("Invalid AGC step ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: switch (id) {  case 1:  	if (Version == "2.1")  		register = m_registers ["RegAgcThresh1"];  	else  		register = m_registers ["Reserved15"];  	break;  case 2:  case 3:  	if (Version == "2.1")  		register = m_registers ["RegAgcThresh2"];  	else  		register = m_registers ["Reserved16"];  	break;  case 4:  case 5:  	if (Version == "2.1")  		register = m_registers ["RegAgcThresh3"];  	else  		register = m_registers ["Reserved17"];  	break;  default:  	throw new Exception ("Invalid AGC step ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: switch (id) {  case 1:  	num &= 0xE0;  	num |= (uint)value;  	break;  case 2:  	num &= 0x0F;  	num |= (uint)(value << 4);  	break;  case 3:  	num &= 0xF0;  	num |= (uint)(value & 0x0F);  	break;  case 4:  	num &= 0x0F;  	num |= (uint)(value << 4);  	break;  case 5:  	num &= 0xF0;  	num |= (uint)(value & 0x0F);  	break;  default:  	throw new Exception ("Invalid AGC step ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: switch (id) {  case 1:  	num &= 0xE0;  	num |= (uint)value;  	break;  case 2:  	num &= 0x0F;  	num |= (uint)(value << 4);  	break;  case 3:  	num &= 0xF0;  	num |= (uint)(value & 0x0F);  	break;  case 4:  	num &= 0x0F;  	num |= (uint)(value << 4);  	break;  case 5:  	num &= 0xF0;  	num |= (uint)(value & 0x0F);  	break;  default:  	throw new Exception ("Invalid AGC step ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: switch (id) {  case 1:  	num &= 0xE0;  	num |= (uint)value;  	break;  case 2:  	num &= 0x0F;  	num |= (uint)(value << 4);  	break;  case 3:  	num &= 0xF0;  	num |= (uint)(value & 0x0F);  	break;  case 4:  	num &= 0x0F;  	num |= (uint)(value << 4);  	break;  case 5:  	num &= 0xF0;  	num |= (uint)(value & 0x0F);  	break;  default:  	throw new Exception ("Invalid AGC step ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: switch (id) {  case 1:  	num &= 0xE0;  	num |= (uint)value;  	break;  case 2:  	num &= 0x0F;  	num |= (uint)(value << 4);  	break;  case 3:  	num &= 0xF0;  	num |= (uint)(value & 0x0F);  	break;  case 4:  	num &= 0x0F;  	num |= (uint)(value << 4);  	break;  case 5:  	num &= 0xF0;  	num |= (uint)(value & 0x0F);  	break;  default:  	throw new Exception ("Invalid AGC step ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: switch (id) {  case 1:  	num &= 0xE0;  	num |= (uint)value;  	break;  case 2:  	num &= 0x0F;  	num |= (uint)(value << 4);  	break;  case 3:  	num &= 0xF0;  	num |= (uint)(value & 0x0F);  	break;  case 4:  	num &= 0x0F;  	num |= (uint)(value << 4);  	break;  case 5:  	num &= 0xF0;  	num |= (uint)(value & 0x0F);  	break;  default:  	throw new Exception ("Invalid AGC step ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: switch (id) {  case 1:  	num &= 0xE0;  	num |= (uint)value;  	break;  case 2:  	num &= 0x0F;  	num |= (uint)(value << 4);  	break;  case 3:  	num &= 0xF0;  	num |= (uint)(value & 0x0F);  	break;  case 4:  	num &= 0x0F;  	num |= (uint)(value << 4);  	break;  case 5:  	num &= 0xF0;  	num |= (uint)(value & 0x0F);  	break;  default:  	throw new Exception ("Invalid AGC step ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: num |= (uint)(value << 4);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAgcStep,The following statement contains a magic number: num |= (uint)(value << 4);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAutoRxRestartOn,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegPacketConfig2"].Value = (m_registers ["RegPacketConfig2"].Value & 0xFD) | (uint)(value ? 2 : 0);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAutoRxRestartOn,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegPacketConfig2"].Value = (m_registers ["RegPacketConfig2"].Value & 0xFD) | (uint)(value ? 2 : 0);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetAutoRxRestartOn,The following statement contains a magic number: m_registers ["RegPacketConfig2"].Value = (m_registers ["RegPacketConfig2"].Value & 0xFD) | (uint)(value ? 2 : 0);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetBitRate,The following statement contains a magic number: try {  	lock (syncThread) {  		uint msb = (uint)(((long)Math.Round (frequencyXo / value' 1)) >> 8);  		uint lsb = (uint)((long)Math.Round (frequencyXo / value' MidpointRounding.AwayFromZero));  		bitRateFdevCheckDisbale = true;  		m_registers ["RegBitrateMsb"].Value = msb;  		bitRateFdevCheckDisbale = false;  		m_registers ["RegBitrateLsb"].Value = lsb;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetBitRate,The following statement contains a magic number: lock (syncThread) {  	uint msb = (uint)(((long)Math.Round (frequencyXo / value' 1)) >> 8);  	uint lsb = (uint)((long)Math.Round (frequencyXo / value' MidpointRounding.AwayFromZero));  	bitRateFdevCheckDisbale = true;  	m_registers ["RegBitrateMsb"].Value = msb;  	bitRateFdevCheckDisbale = false;  	m_registers ["RegBitrateLsb"].Value = lsb;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetCrcAutoClearOff,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegPacketConfig1"].Value = (m_registers ["RegPacketConfig1"].Value & 0xF7) | (uint)(value ? 8 : 0);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetCrcAutoClearOff,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegPacketConfig1"].Value = (m_registers ["RegPacketConfig1"].Value & 0xF7) | (uint)(value ? 8 : 0);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetCrcAutoClearOff,The following statement contains a magic number: m_registers ["RegPacketConfig1"].Value = (m_registers ["RegPacketConfig1"].Value & 0xF7) | (uint)(value ? 8 : 0);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDataMode,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegDataModul"].Value = (m_registers ["RegDataModul"].Value & 0x9F) | ((uint)value << 5);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDataMode,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegDataModul"].Value = (m_registers ["RegDataModul"].Value & 0x9F) | ((uint)value << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDataMode,The following statement contains a magic number: m_registers ["RegDataModul"].Value = (m_registers ["RegDataModul"].Value & 0x9F) | ((uint)value << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDccFreq,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegRxBw"].Value = (m_registers ["RegRxBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((double)((4.0M * RxBw) / (6.283185307179580M * value)))) / Math.Log10 (2.0)) - 2.0) << 5);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDccFreq,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegRxBw"].Value = (m_registers ["RegRxBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((double)((4.0M * RxBw) / (6.283185307179580M * value)))) / Math.Log10 (2.0)) - 2.0) << 5);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDccFreq,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegRxBw"].Value = (m_registers ["RegRxBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((double)((4.0M * RxBw) / (6.283185307179580M * value)))) / Math.Log10 (2.0)) - 2.0) << 5);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDccFreq,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegRxBw"].Value = (m_registers ["RegRxBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((double)((4.0M * RxBw) / (6.283185307179580M * value)))) / Math.Log10 (2.0)) - 2.0) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDccFreq,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegRxBw"].Value = (m_registers ["RegRxBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((double)((4.0M * RxBw) / (6.283185307179580M * value)))) / Math.Log10 (2.0)) - 2.0) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDccFreq,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegRxBw"].Value = (m_registers ["RegRxBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((double)((4.0M * RxBw) / (6.283185307179580M * value)))) / Math.Log10 (2.0)) - 2.0) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDccFreq,The following statement contains a magic number: m_registers ["RegRxBw"].Value = (m_registers ["RegRxBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((double)((4.0M * RxBw) / (6.283185307179580M * value)))) / Math.Log10 (2.0)) - 2.0) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDccFreq,The following statement contains a magic number: m_registers ["RegRxBw"].Value = (m_registers ["RegRxBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((double)((4.0M * RxBw) / (6.283185307179580M * value)))) / Math.Log10 (2.0)) - 2.0) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDccFreq,The following statement contains a magic number: m_registers ["RegRxBw"].Value = (m_registers ["RegRxBw"].Value & 0x1F) | ((uint)((Math.Log10 ((double)((double)((4.0M * RxBw) / (6.283185307179580M * value)))) / Math.Log10 (2.0)) - 2.0) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDcFree,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegPacketConfig1"].Value = (m_registers ["RegPacketConfig1"].Value & 0x9F) | (((uint)value & 3) << 5);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDcFree,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegPacketConfig1"].Value = (m_registers ["RegPacketConfig1"].Value & 0x9F) | (((uint)value & 3) << 5);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDcFree,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegPacketConfig1"].Value = (m_registers ["RegPacketConfig1"].Value & 0x9F) | (((uint)value & 3) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDcFree,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegPacketConfig1"].Value = (m_registers ["RegPacketConfig1"].Value & 0x9F) | (((uint)value & 3) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDcFree,The following statement contains a magic number: m_registers ["RegPacketConfig1"].Value = (m_registers ["RegPacketConfig1"].Value & 0x9F) | (((uint)value & 3) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDcFree,The following statement contains a magic number: m_registers ["RegPacketConfig1"].Value = (m_registers ["RegPacketConfig1"].Value & 0x9F) | (((uint)value & 3) << 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDefaultValues,The following statement contains a magic number: if (IsOpen) {  	if (Version == "2.1") {  		if (!Write ((byte)m_registers ["RegListen1"].Address' (byte)0xa2))  			throw new Exception ("Unable to write register: " + m_registers ["RegListen1"].Name);  		if (!Write ((byte)m_registers ["RegOcp"].Address' (byte)0x1b))  			throw new Exception ("Unable to write register: " + m_registers ["RegOcp"].Name);  	}  	if (!Write ((byte)m_registers ["RegLna"].Address' new byte[] {  		0x88'  		0x55'  		0x8b  	}))  		throw new Exception ("Unable to write register: " + m_registers ["RegLna"].Name);  	if (!Write ((byte)m_registers ["RegDioMapping2"].Address' (byte)7))  		throw new Exception ("Unable to write register: " + m_registers ["RegDioMapping2"].Name);  	if (!Write ((byte)m_registers ["RegRssiThresh"].Address' (byte)0xe4))  		throw new Exception ("Unable to write register: " + m_registers ["RegRssiThresh"].Name);  	if (!Write ((byte)m_registers ["RegSyncValue1"].Address' new byte[] {  		1'  		1'  		1'  		1'  		1'  		1'  		1'  		1  	}))  		throw new Exception ("Unable to write register: " + m_registers ["RegSyncValue1"].Name);  	if (!Write ((byte)m_registers ["RegFifoThresh"].Address' (byte)0x8f))  		throw new Exception ("Unable to write register: " + m_registers ["RegFifoThresh"].Name);  	if ((Version == "2.3") && !Write ((byte)m_registers ["RegTestDagc"].Address' (byte)0x30))  		throw new Exception ("Unable to write register: " + m_registers ["RegTestDagc"].Name);  	if ((Version == "2.1") && !Write (110' (byte)12))  		throw new Exception ("Unable to write register at address 0x6E ");  }  else {  	m_registers ["RegLna"].Value = 0x88;  	m_registers ["RegRxBw"].Value = 0x55;  	m_registers ["RegAfcBw"].Value = 0x8b;  	m_registers ["RegDioMapping2"].Value = 7;  	m_registers ["RegRssiThresh"].Value = 0xe4;  	m_registers ["RegSyncValue1"].Value = 1;  	m_registers ["RegSyncValue2"].Value = 1;  	m_registers ["RegSyncValue3"].Value = 1;  	m_registers ["RegSyncValue4"].Value = 1;  	m_registers ["RegSyncValue5"].Value = 1;  	m_registers ["RegSyncValue6"].Value = 1;  	m_registers ["RegSyncValue7"].Value = 1;  	m_registers ["RegSyncValue8"].Value = 1;  	m_registers ["RegFifoThresh"].Value = 0x8f;  	if (Version == "2.3")  		m_registers ["RegTestDagc"].Value = 0x30;  	ReadRegisters ();  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDefaultValues,The following statement contains a magic number: if (IsOpen) {  	if (Version == "2.1") {  		if (!Write ((byte)m_registers ["RegListen1"].Address' (byte)0xa2))  			throw new Exception ("Unable to write register: " + m_registers ["RegListen1"].Name);  		if (!Write ((byte)m_registers ["RegOcp"].Address' (byte)0x1b))  			throw new Exception ("Unable to write register: " + m_registers ["RegOcp"].Name);  	}  	if (!Write ((byte)m_registers ["RegLna"].Address' new byte[] {  		0x88'  		0x55'  		0x8b  	}))  		throw new Exception ("Unable to write register: " + m_registers ["RegLna"].Name);  	if (!Write ((byte)m_registers ["RegDioMapping2"].Address' (byte)7))  		throw new Exception ("Unable to write register: " + m_registers ["RegDioMapping2"].Name);  	if (!Write ((byte)m_registers ["RegRssiThresh"].Address' (byte)0xe4))  		throw new Exception ("Unable to write register: " + m_registers ["RegRssiThresh"].Name);  	if (!Write ((byte)m_registers ["RegSyncValue1"].Address' new byte[] {  		1'  		1'  		1'  		1'  		1'  		1'  		1'  		1  	}))  		throw new Exception ("Unable to write register: " + m_registers ["RegSyncValue1"].Name);  	if (!Write ((byte)m_registers ["RegFifoThresh"].Address' (byte)0x8f))  		throw new Exception ("Unable to write register: " + m_registers ["RegFifoThresh"].Name);  	if ((Version == "2.3") && !Write ((byte)m_registers ["RegTestDagc"].Address' (byte)0x30))  		throw new Exception ("Unable to write register: " + m_registers ["RegTestDagc"].Name);  	if ((Version == "2.1") && !Write (110' (byte)12))  		throw new Exception ("Unable to write register at address 0x6E ");  }  else {  	m_registers ["RegLna"].Value = 0x88;  	m_registers ["RegRxBw"].Value = 0x55;  	m_registers ["RegAfcBw"].Value = 0x8b;  	m_registers ["RegDioMapping2"].Value = 7;  	m_registers ["RegRssiThresh"].Value = 0xe4;  	m_registers ["RegSyncValue1"].Value = 1;  	m_registers ["RegSyncValue2"].Value = 1;  	m_registers ["RegSyncValue3"].Value = 1;  	m_registers ["RegSyncValue4"].Value = 1;  	m_registers ["RegSyncValue5"].Value = 1;  	m_registers ["RegSyncValue6"].Value = 1;  	m_registers ["RegSyncValue7"].Value = 1;  	m_registers ["RegSyncValue8"].Value = 1;  	m_registers ["RegFifoThresh"].Value = 0x8f;  	if (Version == "2.3")  		m_registers ["RegTestDagc"].Value = 0x30;  	ReadRegisters ();  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDefaultValues,The following statement contains a magic number: if (IsOpen) {  	if (Version == "2.1") {  		if (!Write ((byte)m_registers ["RegListen1"].Address' (byte)0xa2))  			throw new Exception ("Unable to write register: " + m_registers ["RegListen1"].Name);  		if (!Write ((byte)m_registers ["RegOcp"].Address' (byte)0x1b))  			throw new Exception ("Unable to write register: " + m_registers ["RegOcp"].Name);  	}  	if (!Write ((byte)m_registers ["RegLna"].Address' new byte[] {  		0x88'  		0x55'  		0x8b  	}))  		throw new Exception ("Unable to write register: " + m_registers ["RegLna"].Name);  	if (!Write ((byte)m_registers ["RegDioMapping2"].Address' (byte)7))  		throw new Exception ("Unable to write register: " + m_registers ["RegDioMapping2"].Name);  	if (!Write ((byte)m_registers ["RegRssiThresh"].Address' (byte)0xe4))  		throw new Exception ("Unable to write register: " + m_registers ["RegRssiThresh"].Name);  	if (!Write ((byte)m_registers ["RegSyncValue1"].Address' new byte[] {  		1'  		1'  		1'  		1'  		1'  		1'  		1'  		1  	}))  		throw new Exception ("Unable to write register: " + m_registers ["RegSyncValue1"].Name);  	if (!Write ((byte)m_registers ["RegFifoThresh"].Address' (byte)0x8f))  		throw new Exception ("Unable to write register: " + m_registers ["RegFifoThresh"].Name);  	if ((Version == "2.3") && !Write ((byte)m_registers ["RegTestDagc"].Address' (byte)0x30))  		throw new Exception ("Unable to write register: " + m_registers ["RegTestDagc"].Name);  	if ((Version == "2.1") && !Write (110' (byte)12))  		throw new Exception ("Unable to write register at address 0x6E ");  }  else {  	m_registers ["RegLna"].Value = 0x88;  	m_registers ["RegRxBw"].Value = 0x55;  	m_registers ["RegAfcBw"].Value = 0x8b;  	m_registers ["RegDioMapping2"].Value = 7;  	m_registers ["RegRssiThresh"].Value = 0xe4;  	m_registers ["RegSyncValue1"].Value = 1;  	m_registers ["RegSyncValue2"].Value = 1;  	m_registers ["RegSyncValue3"].Value = 1;  	m_registers ["RegSyncValue4"].Value = 1;  	m_registers ["RegSyncValue5"].Value = 1;  	m_registers ["RegSyncValue6"].Value = 1;  	m_registers ["RegSyncValue7"].Value = 1;  	m_registers ["RegSyncValue8"].Value = 1;  	m_registers ["RegFifoThresh"].Value = 0x8f;  	if (Version == "2.3")  		m_registers ["RegTestDagc"].Value = 0x30;  	ReadRegisters ();  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDefaultValues,The following statement contains a magic number: if (IsOpen) {  	if (Version == "2.1") {  		if (!Write ((byte)m_registers ["RegListen1"].Address' (byte)0xa2))  			throw new Exception ("Unable to write register: " + m_registers ["RegListen1"].Name);  		if (!Write ((byte)m_registers ["RegOcp"].Address' (byte)0x1b))  			throw new Exception ("Unable to write register: " + m_registers ["RegOcp"].Name);  	}  	if (!Write ((byte)m_registers ["RegLna"].Address' new byte[] {  		0x88'  		0x55'  		0x8b  	}))  		throw new Exception ("Unable to write register: " + m_registers ["RegLna"].Name);  	if (!Write ((byte)m_registers ["RegDioMapping2"].Address' (byte)7))  		throw new Exception ("Unable to write register: " + m_registers ["RegDioMapping2"].Name);  	if (!Write ((byte)m_registers ["RegRssiThresh"].Address' (byte)0xe4))  		throw new Exception ("Unable to write register: " + m_registers ["RegRssiThresh"].Name);  	if (!Write ((byte)m_registers ["RegSyncValue1"].Address' new byte[] {  		1'  		1'  		1'  		1'  		1'  		1'  		1'  		1  	}))  		throw new Exception ("Unable to write register: " + m_registers ["RegSyncValue1"].Name);  	if (!Write ((byte)m_registers ["RegFifoThresh"].Address' (byte)0x8f))  		throw new Exception ("Unable to write register: " + m_registers ["RegFifoThresh"].Name);  	if ((Version == "2.3") && !Write ((byte)m_registers ["RegTestDagc"].Address' (byte)0x30))  		throw new Exception ("Unable to write register: " + m_registers ["RegTestDagc"].Name);  	if ((Version == "2.1") && !Write (110' (byte)12))  		throw new Exception ("Unable to write register at address 0x6E ");  }  else {  	m_registers ["RegLna"].Value = 0x88;  	m_registers ["RegRxBw"].Value = 0x55;  	m_registers ["RegAfcBw"].Value = 0x8b;  	m_registers ["RegDioMapping2"].Value = 7;  	m_registers ["RegRssiThresh"].Value = 0xe4;  	m_registers ["RegSyncValue1"].Value = 1;  	m_registers ["RegSyncValue2"].Value = 1;  	m_registers ["RegSyncValue3"].Value = 1;  	m_registers ["RegSyncValue4"].Value = 1;  	m_registers ["RegSyncValue5"].Value = 1;  	m_registers ["RegSyncValue6"].Value = 1;  	m_registers ["RegSyncValue7"].Value = 1;  	m_registers ["RegSyncValue8"].Value = 1;  	m_registers ["RegFifoThresh"].Value = 0x8f;  	if (Version == "2.3")  		m_registers ["RegTestDagc"].Value = 0x30;  	ReadRegisters ();  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDefaultValues,The following statement contains a magic number: if (!Write ((byte)m_registers ["RegDioMapping2"].Address' (byte)7))  	throw new Exception ("Unable to write register: " + m_registers ["RegDioMapping2"].Name);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDefaultValues,The following statement contains a magic number: if ((Version == "2.1") && !Write (110' (byte)12))  	throw new Exception ("Unable to write register at address 0x6E ");  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDefaultValues,The following statement contains a magic number: if ((Version == "2.1") && !Write (110' (byte)12))  	throw new Exception ("Unable to write register at address 0x6E ");  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDefaultValues,The following statement contains a magic number: m_registers ["RegDioMapping2"].Value = 7;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 0:  		case 1:  		case 2:  		case 3:  			register = m_registers ["RegDioMapping1"];  			break;  		case 4:  		case 5:  			register = m_registers ["RegDioMapping2"];  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		uint num = (byte)register.Value;  		switch (id) {  		case 0:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 1:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		case 2:  			num &= 0xf3;  			num |= ((uint)value) << 2;  			break;  		case 3:  			num &= 0xfc;  			num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  			break;  		case 4:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 5:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 0:  		case 1:  		case 2:  		case 3:  			register = m_registers ["RegDioMapping1"];  			break;  		case 4:  		case 5:  			register = m_registers ["RegDioMapping2"];  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		uint num = (byte)register.Value;  		switch (id) {  		case 0:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 1:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		case 2:  			num &= 0xf3;  			num |= ((uint)value) << 2;  			break;  		case 3:  			num &= 0xfc;  			num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  			break;  		case 4:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 5:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 0:  		case 1:  		case 2:  		case 3:  			register = m_registers ["RegDioMapping1"];  			break;  		case 4:  		case 5:  			register = m_registers ["RegDioMapping2"];  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		uint num = (byte)register.Value;  		switch (id) {  		case 0:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 1:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		case 2:  			num &= 0xf3;  			num |= ((uint)value) << 2;  			break;  		case 3:  			num &= 0xfc;  			num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  			break;  		case 4:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 5:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 0:  		case 1:  		case 2:  		case 3:  			register = m_registers ["RegDioMapping1"];  			break;  		case 4:  		case 5:  			register = m_registers ["RegDioMapping2"];  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		uint num = (byte)register.Value;  		switch (id) {  		case 0:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 1:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		case 2:  			num &= 0xf3;  			num |= ((uint)value) << 2;  			break;  		case 3:  			num &= 0xfc;  			num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  			break;  		case 4:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 5:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 0:  		case 1:  		case 2:  		case 3:  			register = m_registers ["RegDioMapping1"];  			break;  		case 4:  		case 5:  			register = m_registers ["RegDioMapping2"];  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		uint num = (byte)register.Value;  		switch (id) {  		case 0:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 1:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		case 2:  			num &= 0xf3;  			num |= ((uint)value) << 2;  			break;  		case 3:  			num &= 0xfc;  			num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  			break;  		case 4:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 5:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 0:  		case 1:  		case 2:  		case 3:  			register = m_registers ["RegDioMapping1"];  			break;  		case 4:  		case 5:  			register = m_registers ["RegDioMapping2"];  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		uint num = (byte)register.Value;  		switch (id) {  		case 0:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 1:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		case 2:  			num &= 0xf3;  			num |= ((uint)value) << 2;  			break;  		case 3:  			num &= 0xfc;  			num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  			break;  		case 4:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 5:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 0:  		case 1:  		case 2:  		case 3:  			register = m_registers ["RegDioMapping1"];  			break;  		case 4:  		case 5:  			register = m_registers ["RegDioMapping2"];  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		uint num = (byte)register.Value;  		switch (id) {  		case 0:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 1:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		case 2:  			num &= 0xf3;  			num |= ((uint)value) << 2;  			break;  		case 3:  			num &= 0xfc;  			num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  			break;  		case 4:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 5:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 0:  		case 1:  		case 2:  		case 3:  			register = m_registers ["RegDioMapping1"];  			break;  		case 4:  		case 5:  			register = m_registers ["RegDioMapping2"];  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		uint num = (byte)register.Value;  		switch (id) {  		case 0:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 1:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		case 2:  			num &= 0xf3;  			num |= ((uint)value) << 2;  			break;  		case 3:  			num &= 0xfc;  			num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  			break;  		case 4:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 5:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 0:  		case 1:  		case 2:  		case 3:  			register = m_registers ["RegDioMapping1"];  			break;  		case 4:  		case 5:  			register = m_registers ["RegDioMapping2"];  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		uint num = (byte)register.Value;  		switch (id) {  		case 0:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 1:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		case 2:  			num &= 0xf3;  			num |= ((uint)value) << 2;  			break;  		case 3:  			num &= 0xfc;  			num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  			break;  		case 4:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 5:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 0:  		case 1:  		case 2:  		case 3:  			register = m_registers ["RegDioMapping1"];  			break;  		case 4:  		case 5:  			register = m_registers ["RegDioMapping2"];  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		uint num = (byte)register.Value;  		switch (id) {  		case 0:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 1:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		case 2:  			num &= 0xf3;  			num |= ((uint)value) << 2;  			break;  		case 3:  			num &= 0xfc;  			num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  			break;  		case 4:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 5:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 0:  		case 1:  		case 2:  		case 3:  			register = m_registers ["RegDioMapping1"];  			break;  		case 4:  		case 5:  			register = m_registers ["RegDioMapping2"];  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		uint num = (byte)register.Value;  		switch (id) {  		case 0:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 1:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		case 2:  			num &= 0xf3;  			num |= ((uint)value) << 2;  			break;  		case 3:  			num &= 0xfc;  			num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  			break;  		case 4:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 5:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 0:  		case 1:  		case 2:  		case 3:  			register = m_registers ["RegDioMapping1"];  			break;  		case 4:  		case 5:  			register = m_registers ["RegDioMapping2"];  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		uint num = (byte)register.Value;  		switch (id) {  		case 0:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 1:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		case 2:  			num &= 0xf3;  			num |= ((uint)value) << 2;  			break;  		case 3:  			num &= 0xfc;  			num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  			break;  		case 4:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 5:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: try {  	lock (syncThread) {  		Register register;  		switch (id) {  		case 0:  		case 1:  		case 2:  		case 3:  			register = m_registers ["RegDioMapping1"];  			break;  		case 4:  		case 5:  			register = m_registers ["RegDioMapping2"];  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		uint num = (byte)register.Value;  		switch (id) {  		case 0:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 1:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		case 2:  			num &= 0xf3;  			num |= ((uint)value) << 2;  			break;  		case 3:  			num &= 0xfc;  			num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  			break;  		case 4:  			num &= 0x3f;  			num |= ((uint)value) << 6;  			break;  		case 5:  			num &= 0xcf;  			num |= ((uint)value) << 4;  			break;  		default:  			throw new Exception ("Invalid DIO ID!");  		}  		register.Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 0:  	case 1:  	case 2:  	case 3:  		register = m_registers ["RegDioMapping1"];  		break;  	case 4:  	case 5:  		register = m_registers ["RegDioMapping2"];  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	uint num = (byte)register.Value;  	switch (id) {  	case 0:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 1:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	case 2:  		num &= 0xf3;  		num |= ((uint)value) << 2;  		break;  	case 3:  		num &= 0xfc;  		num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  		break;  	case 4:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 5:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 0:  	case 1:  	case 2:  	case 3:  		register = m_registers ["RegDioMapping1"];  		break;  	case 4:  	case 5:  		register = m_registers ["RegDioMapping2"];  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	uint num = (byte)register.Value;  	switch (id) {  	case 0:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 1:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	case 2:  		num &= 0xf3;  		num |= ((uint)value) << 2;  		break;  	case 3:  		num &= 0xfc;  		num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  		break;  	case 4:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 5:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 0:  	case 1:  	case 2:  	case 3:  		register = m_registers ["RegDioMapping1"];  		break;  	case 4:  	case 5:  		register = m_registers ["RegDioMapping2"];  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	uint num = (byte)register.Value;  	switch (id) {  	case 0:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 1:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	case 2:  		num &= 0xf3;  		num |= ((uint)value) << 2;  		break;  	case 3:  		num &= 0xfc;  		num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  		break;  	case 4:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 5:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 0:  	case 1:  	case 2:  	case 3:  		register = m_registers ["RegDioMapping1"];  		break;  	case 4:  	case 5:  		register = m_registers ["RegDioMapping2"];  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	uint num = (byte)register.Value;  	switch (id) {  	case 0:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 1:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	case 2:  		num &= 0xf3;  		num |= ((uint)value) << 2;  		break;  	case 3:  		num &= 0xfc;  		num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  		break;  	case 4:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 5:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 0:  	case 1:  	case 2:  	case 3:  		register = m_registers ["RegDioMapping1"];  		break;  	case 4:  	case 5:  		register = m_registers ["RegDioMapping2"];  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	uint num = (byte)register.Value;  	switch (id) {  	case 0:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 1:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	case 2:  		num &= 0xf3;  		num |= ((uint)value) << 2;  		break;  	case 3:  		num &= 0xfc;  		num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  		break;  	case 4:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 5:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 0:  	case 1:  	case 2:  	case 3:  		register = m_registers ["RegDioMapping1"];  		break;  	case 4:  	case 5:  		register = m_registers ["RegDioMapping2"];  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	uint num = (byte)register.Value;  	switch (id) {  	case 0:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 1:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	case 2:  		num &= 0xf3;  		num |= ((uint)value) << 2;  		break;  	case 3:  		num &= 0xfc;  		num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  		break;  	case 4:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 5:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 0:  	case 1:  	case 2:  	case 3:  		register = m_registers ["RegDioMapping1"];  		break;  	case 4:  	case 5:  		register = m_registers ["RegDioMapping2"];  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	uint num = (byte)register.Value;  	switch (id) {  	case 0:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 1:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	case 2:  		num &= 0xf3;  		num |= ((uint)value) << 2;  		break;  	case 3:  		num &= 0xfc;  		num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  		break;  	case 4:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 5:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 0:  	case 1:  	case 2:  	case 3:  		register = m_registers ["RegDioMapping1"];  		break;  	case 4:  	case 5:  		register = m_registers ["RegDioMapping2"];  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	uint num = (byte)register.Value;  	switch (id) {  	case 0:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 1:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	case 2:  		num &= 0xf3;  		num |= ((uint)value) << 2;  		break;  	case 3:  		num &= 0xfc;  		num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  		break;  	case 4:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 5:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 0:  	case 1:  	case 2:  	case 3:  		register = m_registers ["RegDioMapping1"];  		break;  	case 4:  	case 5:  		register = m_registers ["RegDioMapping2"];  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	uint num = (byte)register.Value;  	switch (id) {  	case 0:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 1:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	case 2:  		num &= 0xf3;  		num |= ((uint)value) << 2;  		break;  	case 3:  		num &= 0xfc;  		num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  		break;  	case 4:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 5:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 0:  	case 1:  	case 2:  	case 3:  		register = m_registers ["RegDioMapping1"];  		break;  	case 4:  	case 5:  		register = m_registers ["RegDioMapping2"];  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	uint num = (byte)register.Value;  	switch (id) {  	case 0:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 1:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	case 2:  		num &= 0xf3;  		num |= ((uint)value) << 2;  		break;  	case 3:  		num &= 0xfc;  		num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  		break;  	case 4:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 5:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 0:  	case 1:  	case 2:  	case 3:  		register = m_registers ["RegDioMapping1"];  		break;  	case 4:  	case 5:  		register = m_registers ["RegDioMapping2"];  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	uint num = (byte)register.Value;  	switch (id) {  	case 0:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 1:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	case 2:  		num &= 0xf3;  		num |= ((uint)value) << 2;  		break;  	case 3:  		num &= 0xfc;  		num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  		break;  	case 4:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 5:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 0:  	case 1:  	case 2:  	case 3:  		register = m_registers ["RegDioMapping1"];  		break;  	case 4:  	case 5:  		register = m_registers ["RegDioMapping2"];  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	uint num = (byte)register.Value;  	switch (id) {  	case 0:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 1:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	case 2:  		num &= 0xf3;  		num |= ((uint)value) << 2;  		break;  	case 3:  		num &= 0xfc;  		num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  		break;  	case 4:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 5:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: lock (syncThread) {  	Register register;  	switch (id) {  	case 0:  	case 1:  	case 2:  	case 3:  		register = m_registers ["RegDioMapping1"];  		break;  	case 4:  	case 5:  		register = m_registers ["RegDioMapping2"];  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	uint num = (byte)register.Value;  	switch (id) {  	case 0:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 1:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	case 2:  		num &= 0xf3;  		num |= ((uint)value) << 2;  		break;  	case 3:  		num &= 0xfc;  		num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  		break;  	case 4:  		num &= 0x3f;  		num |= ((uint)value) << 6;  		break;  	case 5:  		num &= 0xcf;  		num |= ((uint)value) << 4;  		break;  	default:  		throw new Exception ("Invalid DIO ID!");  	}  	register.Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: switch (id) {  case 0:  case 1:  case 2:  case 3:  	register = m_registers ["RegDioMapping1"];  	break;  case 4:  case 5:  	register = m_registers ["RegDioMapping2"];  	break;  default:  	throw new Exception ("Invalid DIO ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: switch (id) {  case 0:  case 1:  case 2:  case 3:  	register = m_registers ["RegDioMapping1"];  	break;  case 4:  case 5:  	register = m_registers ["RegDioMapping2"];  	break;  default:  	throw new Exception ("Invalid DIO ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: switch (id) {  case 0:  case 1:  case 2:  case 3:  	register = m_registers ["RegDioMapping1"];  	break;  case 4:  case 5:  	register = m_registers ["RegDioMapping2"];  	break;  default:  	throw new Exception ("Invalid DIO ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: switch (id) {  case 0:  case 1:  case 2:  case 3:  	register = m_registers ["RegDioMapping1"];  	break;  case 4:  case 5:  	register = m_registers ["RegDioMapping2"];  	break;  default:  	throw new Exception ("Invalid DIO ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: switch (id) {  case 0:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 1:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  case 2:  	num &= 0xf3;  	num |= ((uint)value) << 2;  	break;  case 3:  	num &= 0xfc;  	num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  	break;  case 4:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 5:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  default:  	throw new Exception ("Invalid DIO ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: switch (id) {  case 0:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 1:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  case 2:  	num &= 0xf3;  	num |= ((uint)value) << 2;  	break;  case 3:  	num &= 0xfc;  	num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  	break;  case 4:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 5:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  default:  	throw new Exception ("Invalid DIO ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: switch (id) {  case 0:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 1:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  case 2:  	num &= 0xf3;  	num |= ((uint)value) << 2;  	break;  case 3:  	num &= 0xfc;  	num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  	break;  case 4:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 5:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  default:  	throw new Exception ("Invalid DIO ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: switch (id) {  case 0:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 1:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  case 2:  	num &= 0xf3;  	num |= ((uint)value) << 2;  	break;  case 3:  	num &= 0xfc;  	num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  	break;  case 4:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 5:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  default:  	throw new Exception ("Invalid DIO ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: switch (id) {  case 0:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 1:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  case 2:  	num &= 0xf3;  	num |= ((uint)value) << 2;  	break;  case 3:  	num &= 0xfc;  	num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  	break;  case 4:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 5:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  default:  	throw new Exception ("Invalid DIO ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: switch (id) {  case 0:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 1:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  case 2:  	num &= 0xf3;  	num |= ((uint)value) << 2;  	break;  case 3:  	num &= 0xfc;  	num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  	break;  case 4:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 5:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  default:  	throw new Exception ("Invalid DIO ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: switch (id) {  case 0:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 1:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  case 2:  	num &= 0xf3;  	num |= ((uint)value) << 2;  	break;  case 3:  	num &= 0xfc;  	num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  	break;  case 4:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 5:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  default:  	throw new Exception ("Invalid DIO ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: switch (id) {  case 0:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 1:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  case 2:  	num &= 0xf3;  	num |= ((uint)value) << 2;  	break;  case 3:  	num &= 0xfc;  	num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  	break;  case 4:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 5:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  default:  	throw new Exception ("Invalid DIO ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: switch (id) {  case 0:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 1:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  case 2:  	num &= 0xf3;  	num |= ((uint)value) << 2;  	break;  case 3:  	num &= 0xfc;  	num = (uint)(((DioMappingEnum)num) | (value & DioMappingEnum.DIO_MAP_11));  	break;  case 4:  	num &= 0x3f;  	num |= ((uint)value) << 6;  	break;  case 5:  	num &= 0xcf;  	num |= ((uint)value) << 4;  	break;  default:  	throw new Exception ("Invalid DIO ID!");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: num |= ((uint)value) << 6;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: num |= ((uint)value) << 4;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: num |= ((uint)value) << 2;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: num |= ((uint)value) << 6;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetDioMapping,The following statement contains a magic number: num |= ((uint)value) << 4;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetEnterCondition,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegAutoModes"].Value;  		num = (byte)(num & 0x1f);  		num = (byte)(num | ((byte)((((byte)value) & 7) << 5)));  		m_registers ["RegAutoModes"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetEnterCondition,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegAutoModes"].Value;  		num = (byte)(num & 0x1f);  		num = (byte)(num | ((byte)((((byte)value) & 7) << 5)));  		m_registers ["RegAutoModes"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetEnterCondition,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegAutoModes"].Value;  	num = (byte)(num & 0x1f);  	num = (byte)(num | ((byte)((((byte)value) & 7) << 5)));  	m_registers ["RegAutoModes"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetEnterCondition,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegAutoModes"].Value;  	num = (byte)(num & 0x1f);  	num = (byte)(num | ((byte)((((byte)value) & 7) << 5)));  	m_registers ["RegAutoModes"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetEnterCondition,The following statement contains a magic number: num = (byte)(num | ((byte)((((byte)value) & 7) << 5)));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetEnterCondition,The following statement contains a magic number: num = (byte)(num | ((byte)((((byte)value) & 7) << 5)));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetExitCondition,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegAutoModes"].Value;  		num = (byte)(num & 0xe3);  		num = (byte)(num | ((byte)((((byte)value) & 7) << 2)));  		m_registers ["RegAutoModes"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetExitCondition,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegAutoModes"].Value;  		num = (byte)(num & 0xe3);  		num = (byte)(num | ((byte)((((byte)value) & 7) << 2)));  		m_registers ["RegAutoModes"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetExitCondition,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegAutoModes"].Value;  	num = (byte)(num & 0xe3);  	num = (byte)(num | ((byte)((((byte)value) & 7) << 2)));  	m_registers ["RegAutoModes"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetExitCondition,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegAutoModes"].Value;  	num = (byte)(num & 0xe3);  	num = (byte)(num | ((byte)((((byte)value) & 7) << 2)));  	m_registers ["RegAutoModes"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetExitCondition,The following statement contains a magic number: num = (byte)(num | ((byte)((((byte)value) & 7) << 2)));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetExitCondition,The following statement contains a magic number: num = (byte)(num | ((byte)((((byte)value) & 7) << 2)));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetFastRx,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegAfcFei"].Value;  		num = (byte)(num & 0xf7);  		num = (byte)(num | (value ? ((byte)8) : ((byte)0)));  		m_registers ["RegAfcFei"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetFastRx,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegAfcFei"].Value;  	num = (byte)(num & 0xf7);  	num = (byte)(num | (value ? ((byte)8) : ((byte)0)));  	m_registers ["RegAfcFei"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetFastRx,The following statement contains a magic number: num = (byte)(num | (value ? ((byte)8) : ((byte)0)));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetFdev,The following statement contains a magic number: try {  	lock (syncThread) {  		byte msb = (byte)m_registers ["RegFdevMsb"].Value;  		byte lsb = (byte)m_registers ["RegFdevLsb"].Value;  		msb = (byte)(((long)(value / frequencyStep)) >> 8);  		lsb = (byte)((long)(value / frequencyStep));  		bitRateFdevCheckDisbale = true;  		m_registers ["RegFdevMsb"].Value = msb;  		bitRateFdevCheckDisbale = false;  		m_registers ["RegFdevLsb"].Value = lsb;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetFdev,The following statement contains a magic number: lock (syncThread) {  	byte msb = (byte)m_registers ["RegFdevMsb"].Value;  	byte lsb = (byte)m_registers ["RegFdevLsb"].Value;  	msb = (byte)(((long)(value / frequencyStep)) >> 8);  	lsb = (byte)((long)(value / frequencyStep));  	bitRateFdevCheckDisbale = true;  	m_registers ["RegFdevMsb"].Value = msb;  	bitRateFdevCheckDisbale = false;  	m_registers ["RegFdevLsb"].Value = lsb;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetFdev,The following statement contains a magic number: msb = (byte)(((long)(value / frequencyStep)) >> 8);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetFeiStart,The following statement contains a magic number: lock (syncThread) {  	byte data = 0;  	ReadRegister (m_registers ["RegAfcFei"]' ref data);  	WriteRegister (m_registers ["RegAfcFei"]' (byte)(data | 0x20));  	DateTime now = DateTime.Now;  	bool flag = false;  	do {  		data = 0;  		ReadRegister (m_registers ["RegAfcFei"]' ref data);  		TimeSpan span = (TimeSpan)(DateTime.Now - now);  		flag = span.TotalMilliseconds >= 1000.0;  	}  	while ((((byte)(data & 0x40)) == 0) && !flag);  	if (flag) {  		OnError (1' "FEI read timeout.");  	}  	else {  		ReadRegister (m_registers ["RegFeiMsb"]);  		ReadRegister (m_registers ["RegFeiLsb"]);  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetFeiStart,The following statement contains a magic number: do {  	data = 0;  	ReadRegister (m_registers ["RegAfcFei"]' ref data);  	TimeSpan span = (TimeSpan)(DateTime.Now - now);  	flag = span.TotalMilliseconds >= 1000.0;  }  while ((((byte)(data & 0x40)) == 0) && !flag);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetFeiStart,The following statement contains a magic number: flag = span.TotalMilliseconds >= 1000.0;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetFrequencyRf,The following statement contains a magic number: try {  	lock (syncThread) {  		byte msb = (byte)m_registers ["RegFrfMsb"].Value;  		byte mid = (byte)m_registers ["RegFrfMid"].Value;  		byte lsb = (byte)m_registers ["RegFrfLsb"].Value;  		msb = (byte)(((long)(value / frequencyStep)) >> 0x10);  		mid = (byte)(((long)(value / frequencyStep)) >> 8);  		lsb = (byte)((long)(value / frequencyStep));  		frequencyRfCheckDisable = true;  		m_registers ["RegFrfMsb"].Value = msb;  		m_registers ["RegFrfMid"].Value = mid;  		frequencyRfCheckDisable = false;  		m_registers ["RegFrfLsb"].Value = lsb;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetFrequencyRf,The following statement contains a magic number: lock (syncThread) {  	byte msb = (byte)m_registers ["RegFrfMsb"].Value;  	byte mid = (byte)m_registers ["RegFrfMid"].Value;  	byte lsb = (byte)m_registers ["RegFrfLsb"].Value;  	msb = (byte)(((long)(value / frequencyStep)) >> 0x10);  	mid = (byte)(((long)(value / frequencyStep)) >> 8);  	lsb = (byte)((long)(value / frequencyStep));  	frequencyRfCheckDisable = true;  	m_registers ["RegFrfMsb"].Value = msb;  	m_registers ["RegFrfMid"].Value = mid;  	frequencyRfCheckDisable = false;  	m_registers ["RegFrfLsb"].Value = lsb;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetFrequencyRf,The following statement contains a magic number: mid = (byte)(((long)(value / frequencyStep)) >> 8);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetIntermediateMode,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegAutoModes"].Value = (m_registers ["RegAutoModes"].Value & 0xFC) | ((uint)value & 3);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetIntermediateMode,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegAutoModes"].Value = (m_registers ["RegAutoModes"].Value & 0xFC) | ((uint)value & 3);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetIntermediateMode,The following statement contains a magic number: m_registers ["RegAutoModes"].Value = (m_registers ["RegAutoModes"].Value & 0xFC) | ((uint)value & 3);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetInterPacketRxDelay,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegPacketConfig2"].Value = (m_registers ["RegPacketConfig2"].Value & 0x0F) | ((uint)value << 4);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetInterPacketRxDelay,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegPacketConfig2"].Value = (m_registers ["RegPacketConfig2"].Value & 0x0F) | ((uint)value << 4);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetInterPacketRxDelay,The following statement contains a magic number: m_registers ["RegPacketConfig2"].Value = (m_registers ["RegPacketConfig2"].Value & 0x0F) | ((uint)value << 4);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenCriteria,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegListen1"].Value = (m_registers ["RegListen1"].Value & 0xF7) | (uint)(value == ListenCriteriaEnum.RssiThresh ? 0 : 8);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenCriteria,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegListen1"].Value = (m_registers ["RegListen1"].Value & 0xF7) | (uint)(value == ListenCriteriaEnum.RssiThresh ? 0 : 8);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenCriteria,The following statement contains a magic number: m_registers ["RegListen1"].Value = (m_registers ["RegListen1"].Value & 0xF7) | (uint)(value == ListenCriteriaEnum.RssiThresh ? 0 : 8);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenResolIdle,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegListen1"].Value;  		num = (byte)(num & 0x3f);  		num = (byte)(num | ((byte)(((int)(value + 1)) << 6)));  		if (Version == "2.1") {  			num = (byte)(num & 0xcf);  			num = (byte)(num | ((byte)(((int)(value + 1)) << 4)));  		}  		m_registers ["RegListen1"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenResolIdle,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegListen1"].Value;  		num = (byte)(num & 0x3f);  		num = (byte)(num | ((byte)(((int)(value + 1)) << 6)));  		if (Version == "2.1") {  			num = (byte)(num & 0xcf);  			num = (byte)(num | ((byte)(((int)(value + 1)) << 4)));  		}  		m_registers ["RegListen1"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenResolIdle,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegListen1"].Value;  	num = (byte)(num & 0x3f);  	num = (byte)(num | ((byte)(((int)(value + 1)) << 6)));  	if (Version == "2.1") {  		num = (byte)(num & 0xcf);  		num = (byte)(num | ((byte)(((int)(value + 1)) << 4)));  	}  	m_registers ["RegListen1"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenResolIdle,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegListen1"].Value;  	num = (byte)(num & 0x3f);  	num = (byte)(num | ((byte)(((int)(value + 1)) << 6)));  	if (Version == "2.1") {  		num = (byte)(num & 0xcf);  		num = (byte)(num | ((byte)(((int)(value + 1)) << 4)));  	}  	m_registers ["RegListen1"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenResolIdle,The following statement contains a magic number: num = (byte)(num | ((byte)(((int)(value + 1)) << 6)));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenResolIdle,The following statement contains a magic number: if (Version == "2.1") {  	num = (byte)(num & 0xcf);  	num = (byte)(num | ((byte)(((int)(value + 1)) << 4)));  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenResolIdle,The following statement contains a magic number: num = (byte)(num | ((byte)(((int)(value + 1)) << 4)));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenResolRx,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegListen1"].Value = (m_registers ["RegListen1"].Value & 0xCF) | ((uint)(value + 1) << 4);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenResolRx,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegListen1"].Value = (m_registers ["RegListen1"].Value & 0xCF) | ((uint)(value + 1) << 4);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenResolRx,The following statement contains a magic number: m_registers ["RegListen1"].Value = (m_registers ["RegListen1"].Value & 0xCF) | ((uint)(value + 1) << 4);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetLowBatOn,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegLowBat"].Value = (m_registers ["RegLowBat"].Value & 0xF7) | (uint)(value ? 8 : 0);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetLowBatOn,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegLowBat"].Value = (m_registers ["RegLowBat"].Value & 0xF7) | (uint)(value ? 8 : 0);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetLowBatOn,The following statement contains a magic number: m_registers ["RegLowBat"].Value = (m_registers ["RegLowBat"].Value & 0xF7) | (uint)(value ? 8 : 0);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetModulationType,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegDataModul"].Value = (m_registers ["RegDataModul"].Value & 0xE7) | ((uint)value << 3);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetModulationType,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegDataModul"].Value = (m_registers ["RegDataModul"].Value & 0xE7) | ((uint)value << 3);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetModulationType,The following statement contains a magic number: m_registers ["RegDataModul"].Value = (m_registers ["RegDataModul"].Value & 0xE7) | ((uint)value << 3);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokAverageThreshFilt,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegOokAvg"].Value = (m_registers ["RegOokAvg"].Value & 0x3F) | (((uint)value & 3) << 6);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokAverageThreshFilt,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegOokAvg"].Value = (m_registers ["RegOokAvg"].Value & 0x3F) | (((uint)value & 3) << 6);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokAverageThreshFilt,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegOokAvg"].Value = (m_registers ["RegOokAvg"].Value & 0x3F) | (((uint)value & 3) << 6);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokAverageThreshFilt,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegOokAvg"].Value = (m_registers ["RegOokAvg"].Value & 0x3F) | (((uint)value & 3) << 6);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokAverageThreshFilt,The following statement contains a magic number: m_registers ["RegOokAvg"].Value = (m_registers ["RegOokAvg"].Value & 0x3F) | (((uint)value & 3) << 6);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokAverageThreshFilt,The following statement contains a magic number: m_registers ["RegOokAvg"].Value = (m_registers ["RegOokAvg"].Value & 0x3F) | (((uint)value & 3) << 6);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokPeakThreshDec,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0xF8) | ((uint)value & 7);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokPeakThreshDec,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0xF8) | ((uint)value & 7);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokPeakThreshDec,The following statement contains a magic number: m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0xF8) | ((uint)value & 7);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokPeakThreshStep,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0xC7) | (((uint)Array.IndexOf<decimal> (OoPeakThreshStepTable' value) & 7) << 3);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokPeakThreshStep,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0xC7) | (((uint)Array.IndexOf<decimal> (OoPeakThreshStepTable' value) & 7) << 3);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokPeakThreshStep,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0xC7) | (((uint)Array.IndexOf<decimal> (OoPeakThreshStepTable' value) & 7) << 3);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokPeakThreshStep,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0xC7) | (((uint)Array.IndexOf<decimal> (OoPeakThreshStepTable' value) & 7) << 3);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokPeakThreshStep,The following statement contains a magic number: m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0xC7) | (((uint)Array.IndexOf<decimal> (OoPeakThreshStepTable' value) & 7) << 3);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokPeakThreshStep,The following statement contains a magic number: m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0xC7) | (((uint)Array.IndexOf<decimal> (OoPeakThreshStepTable' value) & 7) << 3);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokThreshType,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0x3f) | (((uint)value & 3) << 6);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokThreshType,The following statement contains a magic number: try {  	lock (syncThread)  		m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0x3f) | (((uint)value & 3) << 6);  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokThreshType,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0x3f) | (((uint)value & 3) << 6);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokThreshType,The following statement contains a magic number: lock (syncThread)  	m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0x3f) | (((uint)value & 3) << 6);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokThreshType,The following statement contains a magic number: m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0x3f) | (((uint)value & 3) << 6);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOokThreshType,The following statement contains a magic number: m_registers ["RegOokPeak"].Value = (m_registers ["RegOokPeak"].Value & 0x3f) | (((uint)value & 3) << 6);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOperatingMode,The following statement contains a magic number: try {  	byte data = (byte)m_registers ["RegOpMode"].Value;  	data = (byte)(data & 0xe3);  	data = (byte)(data | ((byte)(((byte)value) << 2)));  	if (!isQuiet) {  		m_registers ["RegOpMode"].Value = data;  	}  	else {  		lock (syncThread) {  			if (!Write ((byte)m_registers ["RegOpMode"].Address' data)) {  				throw new Exception ("Unable to write register " + m_registers ["RegOpMode"].Name);  			}  			if (Mode == OperatingModeEnum.Rx) {  				ReadRegister (m_registers ["RegLna"]);  				ReadRegister (m_registers ["RegFeiMsb"]);  				ReadRegister (m_registers ["RegFeiLsb"]);  				ReadRegister (m_registers ["RegAfcMsb"]);  				ReadRegister (m_registers ["RegAfcLsb"]);  			}  		}  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetOperatingMode,The following statement contains a magic number: data = (byte)(data | ((byte)(((byte)value) << 2)));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetPaRamp,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegPaRamp"].Value;  		num = (byte)(num & 240);  		num = (byte)(num | ((byte)(((byte)value) & 15)));  		m_registers ["RegPaRamp"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetPaRamp,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegPaRamp"].Value;  		num = (byte)(num & 240);  		num = (byte)(num | ((byte)(((byte)value) & 15)));  		m_registers ["RegPaRamp"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetPaRamp,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegPaRamp"].Value;  	num = (byte)(num & 240);  	num = (byte)(num | ((byte)(((byte)value) & 15)));  	m_registers ["RegPaRamp"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetPaRamp,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegPaRamp"].Value;  	num = (byte)(num & 240);  	num = (byte)(num | ((byte)(((byte)value) & 15)));  	m_registers ["RegPaRamp"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetPaRamp,The following statement contains a magic number: num = (byte)(num & 240);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetPaRamp,The following statement contains a magic number: num = (byte)(num | ((byte)(((byte)value) & 15)));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetPreambleSize,The following statement contains a magic number: try {  	lock (syncThread) {  		m_registers ["RegPreambleMsb"].Value = (byte)(value >> 8);  		m_registers ["RegPreambleLsb"].Value = (byte)value;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetPreambleSize,The following statement contains a magic number: lock (syncThread) {  	m_registers ["RegPreambleMsb"].Value = (byte)(value >> 8);  	m_registers ["RegPreambleLsb"].Value = (byte)value;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetPreambleSize,The following statement contains a magic number: m_registers ["RegPreambleMsb"].Value = (byte)(value >> 8);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRestartRx,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegPacketConfig2"].Value;  		num = (byte)(num & 0xfb);  		num = (byte)(num | 4);  		m_registers ["RegPacketConfig2"].Value = num;  		restartRx = true;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRestartRx,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegPacketConfig2"].Value;  	num = (byte)(num & 0xfb);  	num = (byte)(num | 4);  	m_registers ["RegPacketConfig2"].Value = num;  	restartRx = true;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRestartRx,The following statement contains a magic number: num = (byte)(num | 4);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegRxBw"].Value;  		num = (byte)(num & 0xe0);  		int exp = 0;  		int mant = 0;  		ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  		switch (mant) {  		case 0x10:  			num = (byte)(num | ((byte)(exp & 7)));  			break;  		case 20:  			num = (byte)(num | ((byte)(8 | (exp & 7))));  			break;  		case 0x18:  			num = (byte)(num | ((byte)(0x10 | (exp & 7))));  			break;  		default:  			throw new Exception ("Invalid RxBwMant parameter");  		}  		m_registers ["RegRxBw"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegRxBw"].Value;  		num = (byte)(num & 0xe0);  		int exp = 0;  		int mant = 0;  		ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  		switch (mant) {  		case 0x10:  			num = (byte)(num | ((byte)(exp & 7)));  			break;  		case 20:  			num = (byte)(num | ((byte)(8 | (exp & 7))));  			break;  		case 0x18:  			num = (byte)(num | ((byte)(0x10 | (exp & 7))));  			break;  		default:  			throw new Exception ("Invalid RxBwMant parameter");  		}  		m_registers ["RegRxBw"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegRxBw"].Value;  		num = (byte)(num & 0xe0);  		int exp = 0;  		int mant = 0;  		ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  		switch (mant) {  		case 0x10:  			num = (byte)(num | ((byte)(exp & 7)));  			break;  		case 20:  			num = (byte)(num | ((byte)(8 | (exp & 7))));  			break;  		case 0x18:  			num = (byte)(num | ((byte)(0x10 | (exp & 7))));  			break;  		default:  			throw new Exception ("Invalid RxBwMant parameter");  		}  		m_registers ["RegRxBw"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegRxBw"].Value;  		num = (byte)(num & 0xe0);  		int exp = 0;  		int mant = 0;  		ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  		switch (mant) {  		case 0x10:  			num = (byte)(num | ((byte)(exp & 7)));  			break;  		case 20:  			num = (byte)(num | ((byte)(8 | (exp & 7))));  			break;  		case 0x18:  			num = (byte)(num | ((byte)(0x10 | (exp & 7))));  			break;  		default:  			throw new Exception ("Invalid RxBwMant parameter");  		}  		m_registers ["RegRxBw"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegRxBw"].Value;  		num = (byte)(num & 0xe0);  		int exp = 0;  		int mant = 0;  		ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  		switch (mant) {  		case 0x10:  			num = (byte)(num | ((byte)(exp & 7)));  			break;  		case 20:  			num = (byte)(num | ((byte)(8 | (exp & 7))));  			break;  		case 0x18:  			num = (byte)(num | ((byte)(0x10 | (exp & 7))));  			break;  		default:  			throw new Exception ("Invalid RxBwMant parameter");  		}  		m_registers ["RegRxBw"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegRxBw"].Value;  	num = (byte)(num & 0xe0);  	int exp = 0;  	int mant = 0;  	ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  	switch (mant) {  	case 0x10:  		num = (byte)(num | ((byte)(exp & 7)));  		break;  	case 20:  		num = (byte)(num | ((byte)(8 | (exp & 7))));  		break;  	case 0x18:  		num = (byte)(num | ((byte)(0x10 | (exp & 7))));  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	m_registers ["RegRxBw"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegRxBw"].Value;  	num = (byte)(num & 0xe0);  	int exp = 0;  	int mant = 0;  	ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  	switch (mant) {  	case 0x10:  		num = (byte)(num | ((byte)(exp & 7)));  		break;  	case 20:  		num = (byte)(num | ((byte)(8 | (exp & 7))));  		break;  	case 0x18:  		num = (byte)(num | ((byte)(0x10 | (exp & 7))));  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	m_registers ["RegRxBw"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegRxBw"].Value;  	num = (byte)(num & 0xe0);  	int exp = 0;  	int mant = 0;  	ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  	switch (mant) {  	case 0x10:  		num = (byte)(num | ((byte)(exp & 7)));  		break;  	case 20:  		num = (byte)(num | ((byte)(8 | (exp & 7))));  		break;  	case 0x18:  		num = (byte)(num | ((byte)(0x10 | (exp & 7))));  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	m_registers ["RegRxBw"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegRxBw"].Value;  	num = (byte)(num & 0xe0);  	int exp = 0;  	int mant = 0;  	ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  	switch (mant) {  	case 0x10:  		num = (byte)(num | ((byte)(exp & 7)));  		break;  	case 20:  		num = (byte)(num | ((byte)(8 | (exp & 7))));  		break;  	case 0x18:  		num = (byte)(num | ((byte)(0x10 | (exp & 7))));  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	m_registers ["RegRxBw"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegRxBw"].Value;  	num = (byte)(num & 0xe0);  	int exp = 0;  	int mant = 0;  	ComputeRxBwMantExp (frequencyXo' ModulationType' value' ref mant' ref exp);  	switch (mant) {  	case 0x10:  		num = (byte)(num | ((byte)(exp & 7)));  		break;  	case 20:  		num = (byte)(num | ((byte)(8 | (exp & 7))));  		break;  	case 0x18:  		num = (byte)(num | ((byte)(0x10 | (exp & 7))));  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	m_registers ["RegRxBw"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: switch (mant) {  case 0x10:  	num = (byte)(num | ((byte)(exp & 7)));  	break;  case 20:  	num = (byte)(num | ((byte)(8 | (exp & 7))));  	break;  case 0x18:  	num = (byte)(num | ((byte)(0x10 | (exp & 7))));  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: switch (mant) {  case 0x10:  	num = (byte)(num | ((byte)(exp & 7)));  	break;  case 20:  	num = (byte)(num | ((byte)(8 | (exp & 7))));  	break;  case 0x18:  	num = (byte)(num | ((byte)(0x10 | (exp & 7))));  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: switch (mant) {  case 0x10:  	num = (byte)(num | ((byte)(exp & 7)));  	break;  case 20:  	num = (byte)(num | ((byte)(8 | (exp & 7))));  	break;  case 0x18:  	num = (byte)(num | ((byte)(0x10 | (exp & 7))));  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: switch (mant) {  case 0x10:  	num = (byte)(num | ((byte)(exp & 7)));  	break;  case 20:  	num = (byte)(num | ((byte)(8 | (exp & 7))));  	break;  case 0x18:  	num = (byte)(num | ((byte)(0x10 | (exp & 7))));  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: switch (mant) {  case 0x10:  	num = (byte)(num | ((byte)(exp & 7)));  	break;  case 20:  	num = (byte)(num | ((byte)(8 | (exp & 7))));  	break;  case 0x18:  	num = (byte)(num | ((byte)(0x10 | (exp & 7))));  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: num = (byte)(num | ((byte)(exp & 7)));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: num = (byte)(num | ((byte)(8 | (exp & 7))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: num = (byte)(num | ((byte)(8 | (exp & 7))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetRxBw,The following statement contains a magic number: num = (byte)(num | ((byte)(0x10 | (exp & 7))));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetSyncSize,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegSyncConfig"].Value;  		num = (byte)(num & 0xc7);  		num = (byte)(num | ((byte)(((value - 1) & 7) << 3)));  		m_registers ["RegSyncConfig"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetSyncSize,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegSyncConfig"].Value;  		num = (byte)(num & 0xc7);  		num = (byte)(num | ((byte)(((value - 1) & 7) << 3)));  		m_registers ["RegSyncConfig"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetSyncSize,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegSyncConfig"].Value;  	num = (byte)(num & 0xc7);  	num = (byte)(num | ((byte)(((value - 1) & 7) << 3)));  	m_registers ["RegSyncConfig"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetSyncSize,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegSyncConfig"].Value;  	num = (byte)(num & 0xc7);  	num = (byte)(num | ((byte)(((value - 1) & 7) << 3)));  	m_registers ["RegSyncConfig"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetSyncSize,The following statement contains a magic number: num = (byte)(num | ((byte)(((value - 1) & 7) << 3)));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetSyncSize,The following statement contains a magic number: num = (byte)(num | ((byte)(((value - 1) & 7) << 3)));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetSyncTol,The following statement contains a magic number: try {  	lock (syncThread) {  		byte num = (byte)m_registers ["RegSyncConfig"].Value;  		num = (byte)(num & 0xf8);  		num = (byte)(num | ((byte)(value & 7)));  		m_registers ["RegSyncConfig"].Value = num;  	}  }  catch (Exception exception) {  	OnError (1' exception.Message);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetSyncTol,The following statement contains a magic number: lock (syncThread) {  	byte num = (byte)m_registers ["RegSyncConfig"].Value;  	num = (byte)(num & 0xf8);  	num = (byte)(num | ((byte)(value & 7)));  	m_registers ["RegSyncConfig"].Value = num;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetSyncTol,The following statement contains a magic number: num = (byte)(num | ((byte)(value & 7)));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetTempMeasStart,The following statement contains a magic number: lock (syncThread) {  	if ((calibrating || TempCalDone) && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  		byte data = 0;  		ReadRegister (m_registers ["RegTemp1"]' ref data);  		WriteRegister (m_registers ["RegTemp1"]' (byte)(data | 8));  		int num2 = 50;  		do {  			data = 0;  			ReadRegister (m_registers ["RegTemp1"]' ref data);  		}  		while (((data & 4) == 4) && num2-- >= 0);  		ReadRegister (m_registers ["RegTemp2"]);  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetTempMeasStart,The following statement contains a magic number: lock (syncThread) {  	if ((calibrating || TempCalDone) && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  		byte data = 0;  		ReadRegister (m_registers ["RegTemp1"]' ref data);  		WriteRegister (m_registers ["RegTemp1"]' (byte)(data | 8));  		int num2 = 50;  		do {  			data = 0;  			ReadRegister (m_registers ["RegTemp1"]' ref data);  		}  		while (((data & 4) == 4) && num2-- >= 0);  		ReadRegister (m_registers ["RegTemp2"]);  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetTempMeasStart,The following statement contains a magic number: lock (syncThread) {  	if ((calibrating || TempCalDone) && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  		byte data = 0;  		ReadRegister (m_registers ["RegTemp1"]' ref data);  		WriteRegister (m_registers ["RegTemp1"]' (byte)(data | 8));  		int num2 = 50;  		do {  			data = 0;  			ReadRegister (m_registers ["RegTemp1"]' ref data);  		}  		while (((data & 4) == 4) && num2-- >= 0);  		ReadRegister (m_registers ["RegTemp2"]);  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetTempMeasStart,The following statement contains a magic number: lock (syncThread) {  	if ((calibrating || TempCalDone) && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  		byte data = 0;  		ReadRegister (m_registers ["RegTemp1"]' ref data);  		WriteRegister (m_registers ["RegTemp1"]' (byte)(data | 8));  		int num2 = 50;  		do {  			data = 0;  			ReadRegister (m_registers ["RegTemp1"]' ref data);  		}  		while (((data & 4) == 4) && num2-- >= 0);  		ReadRegister (m_registers ["RegTemp2"]);  	}  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetTempMeasStart,The following statement contains a magic number: if ((calibrating || TempCalDone) && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  	byte data = 0;  	ReadRegister (m_registers ["RegTemp1"]' ref data);  	WriteRegister (m_registers ["RegTemp1"]' (byte)(data | 8));  	int num2 = 50;  	do {  		data = 0;  		ReadRegister (m_registers ["RegTemp1"]' ref data);  	}  	while (((data & 4) == 4) && num2-- >= 0);  	ReadRegister (m_registers ["RegTemp2"]);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetTempMeasStart,The following statement contains a magic number: if ((calibrating || TempCalDone) && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  	byte data = 0;  	ReadRegister (m_registers ["RegTemp1"]' ref data);  	WriteRegister (m_registers ["RegTemp1"]' (byte)(data | 8));  	int num2 = 50;  	do {  		data = 0;  		ReadRegister (m_registers ["RegTemp1"]' ref data);  	}  	while (((data & 4) == 4) && num2-- >= 0);  	ReadRegister (m_registers ["RegTemp2"]);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetTempMeasStart,The following statement contains a magic number: if ((calibrating || TempCalDone) && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  	byte data = 0;  	ReadRegister (m_registers ["RegTemp1"]' ref data);  	WriteRegister (m_registers ["RegTemp1"]' (byte)(data | 8));  	int num2 = 50;  	do {  		data = 0;  		ReadRegister (m_registers ["RegTemp1"]' ref data);  	}  	while (((data & 4) == 4) && num2-- >= 0);  	ReadRegister (m_registers ["RegTemp2"]);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetTempMeasStart,The following statement contains a magic number: if ((calibrating || TempCalDone) && ((Mode == OperatingModeEnum.Stdby) || (Mode == OperatingModeEnum.Fs))) {  	byte data = 0;  	ReadRegister (m_registers ["RegTemp1"]' ref data);  	WriteRegister (m_registers ["RegTemp1"]' (byte)(data | 8));  	int num2 = 50;  	do {  		data = 0;  		ReadRegister (m_registers ["RegTemp1"]' ref data);  	}  	while (((data & 4) == 4) && num2-- >= 0);  	ReadRegister (m_registers ["RegTemp2"]);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetTempMeasStart,The following statement contains a magic number: WriteRegister (m_registers ["RegTemp1"]' (byte)(data | 8));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetTempMeasStart,The following statement contains a magic number: do {  	data = 0;  	ReadRegister (m_registers ["RegTemp1"]' ref data);  }  while (((data & 4) == 4) && num2-- >= 0);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetTempMeasStart,The following statement contains a magic number: do {  	data = 0;  	ReadRegister (m_registers ["RegTemp1"]' ref data);  }  while (((data & 4) == 4) && num2-- >= 0);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,TransmitRfData,The following statement contains a magic number: try {  	SetOperatingMode (OperatingModeEnum.Sleep' true);  	Thread.Sleep (60);  	flag = WriteFifo (buffer);  	SetOperatingMode (OperatingModeEnum.Tx' true);  }  catch (Exception exception) {  	throw exception;  }  finally {  	System.Threading.Monitor.Exit (syncThread);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,TransmitRfData,The following statement contains a magic number: Thread.Sleep (60);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: switch (((uint)((m_registers ["RegRxBw"].Value & 0x18) >> 3))) {  case 0:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 0x10' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  case 1:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  case 2:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 0x18' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: switch (((uint)((m_registers ["RegRxBw"].Value & 0x18) >> 3))) {  case 0:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 0x10' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  case 1:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  case 2:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 0x18' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: switch (((uint)((m_registers ["RegRxBw"].Value & 0x18) >> 3))) {  case 0:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 0x10' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  case 1:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  case 2:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 0x18' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: switch (((uint)((m_registers ["RegRxBw"].Value & 0x18) >> 3))) {  case 0:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 0x10' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  case 1:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  case 2:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 0x18' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: switch (((uint)((m_registers ["RegRxBw"].Value & 0x18) >> 3))) {  case 0:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 0x10' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  case 1:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  case 2:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 0x18' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: switch (((uint)((m_registers ["RegRxBw"].Value & 0x18) >> 3))) {  case 0:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 0x10' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  case 1:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  case 2:  	rxBw = ComputeRxBw (frequencyXo' modulationType' 0x18' ((int)m_registers ["RegRxBw"].Value) & 7);  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: rxBw = ComputeRxBw (frequencyXo' modulationType' 0x10' ((int)m_registers ["RegRxBw"].Value) & 7);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: rxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegRxBw"].Value) & 7);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: rxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegRxBw"].Value) & 7);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: rxBw = ComputeRxBw (frequencyXo' modulationType' 0x18' ((int)m_registers ["RegRxBw"].Value) & 7);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: switch (((uint)((m_registers ["RegAfcBw"].Value & 0x18) >> 3))) {  case 0:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 0x10' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  case 1:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  case 2:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 0x18' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: switch (((uint)((m_registers ["RegAfcBw"].Value & 0x18) >> 3))) {  case 0:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 0x10' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  case 1:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  case 2:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 0x18' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: switch (((uint)((m_registers ["RegAfcBw"].Value & 0x18) >> 3))) {  case 0:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 0x10' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  case 1:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  case 2:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 0x18' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: switch (((uint)((m_registers ["RegAfcBw"].Value & 0x18) >> 3))) {  case 0:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 0x10' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  case 1:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  case 2:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 0x18' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: switch (((uint)((m_registers ["RegAfcBw"].Value & 0x18) >> 3))) {  case 0:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 0x10' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  case 1:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  case 2:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 0x18' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: switch (((uint)((m_registers ["RegAfcBw"].Value & 0x18) >> 3))) {  case 0:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 0x10' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  case 1:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  case 2:  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' 0x18' ((int)m_registers ["RegAfcBw"].Value) & 7);  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: afcRxBw = ComputeRxBw (frequencyXo' modulationType' 0x10' ((int)m_registers ["RegAfcBw"].Value) & 7);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: afcRxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegAfcBw"].Value) & 7);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: afcRxBw = ComputeRxBw (frequencyXo' modulationType' 20' ((int)m_registers ["RegAfcBw"].Value) & 7);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateReceiverData,The following statement contains a magic number: afcRxBw = ComputeRxBw (frequencyXo' modulationType' 0x18' ((int)m_registers ["RegAfcBw"].Value) & 7);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (reg.Name) {  case "RegOpMode": {  	Sequencer = (reg.Value & 0x80) != 0x80;  	ListenMode = (reg.Value & 0x40) == 0x40;  	byte num = (byte)((reg.Value >> 2) & 7);  	if (num > 4)  		num = 0;  	Mode = (OperatingModeEnum)num;  	if (m_packet.Mode != Mode)  		m_packet.Mode = Mode;  	if (m_registers ["RegPayloadLength"].Value != m_packet.PayloadLength)  		m_registers ["RegPayloadLength"].Value = m_packet.PayloadLength;  	lock (syncThread) {  		SetModeLeds (Mode);  		return;  	}  }  case "RegDataModul":  	break;  case "RegBitrateMsb":  case "RegBitrateLsb":  	if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  		m_registers ["RegBitrateLsb"].Value = 1;  	BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  	return;  case "RegFdevMsb":  case "RegFdevLsb":  	Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  	return;  case "RegFrfMsb":  case "RegFrfMid":  case "RegFrfLsb":  	FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  	return;  case "RegOsc1":  	m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("RcCalDone");  	return;  case "RegOsc2":  case "RegAfcCtrl":  	if (Version != "2.1") {  		AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  		if (Version != "2.3")  			return;  		SetDagcOn (DagcOn);  	}  	return;  case "RegLowBat":  	lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("LowBatMonitor");  	LowBatOn = ((reg.Value >> 3) & 1) == 1;  	LowBatTrim = ((LowBatTrimEnum)reg.Value) & LowBatTrimEnum.Trim2_185;  	return;  case "RegListen1":  	if ((reg.Value & 0xc0) == 0)  		reg.Value = (byte)((reg.Value & 0x3f) | 0x40);  	if ((reg.Value & 0x30) == 0)  		reg.Value = (byte)((reg.Value & 0xcf) | 0x10);  	if ((reg.Value & 6) == 6)  		reg.Value = (byte)((reg.Value & 0xf9) | 2);  	ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  	ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  	ListenEnd = ((ListenEndEnum)(reg.Value >> 1)) & ListenEndEnum.Reserved;  	return;  case "RegListen2":  	switch (ListenResolIdle) {  	case ListenResolEnum.Res000064:  		ListenCoefIdle = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefIdle = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefIdle = reg.Value * 262M;  		return;  	}  	return;  case "RegListen3":  	switch (ListenResolRx) {  	case ListenResolEnum.Res000064:  		ListenCoefRx = reg.Value * 0.064M;  		return;  	case ListenResolEnum.Res004100:  		ListenCoefRx = reg.Value * 4.1M;  		return;  	case ListenResolEnum.Res262000:  		ListenCoefRx = reg.Value * 262M;  		return;  	}  	return;  case "RegVersion":  	Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  	return;  case "RegPaLevel":  	if ((reg.Value & 0xE0) != 0x80 && (reg.Value & 0xe0) != 0x40 && (reg.Value & 0xe0) != 0x60)  		reg.Value = (reg.Value & 0x1F) | 0x80;  	switch ((reg.Value >> 5) & 0x07) {  	case 2:  		PaMode = PaModeEnum.PA1;  		break;  	case 3:  		PaMode = PaModeEnum.PA1_PA2;  		break;  	case 4:  		PaMode = PaModeEnum.PA0;  		break;  	}  	if (PaMode != PaModeEnum.PA1_PA2) {  		OutputPower = -18.0M + (reg.Value & 0x1f);  		return;  	}  	OutputPower = -14.0M + (reg.Value & 0x1f);  	return;  case "RegPaRamp":  	PaRamp = ((PaRampEnum)reg.Value) & PaRampEnum.PaRamp_10;  	return;  case "RegOcp":  	OcpOn = ((reg.Value >> 4) & 1) == 1;  	OcpTrim = 0x2d + (5 * (reg.Value & 15));  	return;  case "RegAgcRef":  case "Reserved14":  	AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  	AgcRefLevel = (int)(18446744073709551536L - (reg.Value & 0x3f));  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh1":  case "Reserved15":  	AgcSnrMargin = (byte)(reg.Value >> 5);  	AgcStep1 = (byte)(reg.Value & 0x1f);  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh2":  case "Reserved16":  	AgcStep2 = (byte)(reg.Value >> 4);  	AgcStep3 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegAgcThresh3":  case "Reserved17":  	AgcStep4 = (byte)(reg.Value >> 4);  	AgcStep5 = (byte)(reg.Value & 15);  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	return;  case "RegLna":  	LnaZin = ((reg.Value & 0x80) == 0x80) ? LnaZinEnum.ZIN_200 : LnaZinEnum.ZIN_50;  	LnaLowPowerOn = (reg.Value & 0x40) == 0x40;  	LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  	LnaGainSelect = ((LnaGainEnum)reg.Value) & LnaGainEnum.Reserved;  	return;  case "RegRxBw":  	mant = 0;  	switch (((uint)((reg.Value & 0x18) >> 3))) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 20;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("DccFreqMin");  	OnPropertyChanged ("DccFreqMax");  	OnPropertyChanged ("RxBwMin");  	OnPropertyChanged ("RxBwMax");  	OnPropertyChanged ("RxBw");  	OnPropertyChanged ("AgcReference");  	OnPropertyChanged ("AgcThresh1");  	OnPropertyChanged ("AgcThresh2");  	OnPropertyChanged ("AgcThresh3");  	OnPropertyChanged ("AgcThresh4");  	OnPropertyChanged ("AgcThresh5");  	DccFreq = ComputeDccFreq (rxBw' reg.Value);  	return;  case "RegAfcBw":  	mant = 0;  	switch ((reg.Value & 0x18) >> 3) {  	case 0:  		mant = 0x10;  		break;  	case 1:  		mant = 0x14;  		break;  	case 2:  		mant = 0x18;  		break;  	default:  		throw new Exception ("Invalid RxBwMant parameter");  	}  	afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  	OnPropertyChanged ("AfcDccFreqMin");  	OnPropertyChanged ("AfcDccFreqMax");  	OnPropertyChanged ("AfcRxBwMin");  	OnPropertyChanged ("AfcRxBwMax");  	OnPropertyChanged ("AfcRxBw");  	AfcDccFreq = ComputeDccFreq (afcRxBw' reg.Value);  	return;  case "RegOokPeak":  	OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  	OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  	OokPeakThreshDec = ((OokPeakThreshDecEnum)reg.Value) & OokPeakThreshDecEnum.EVERY_1_CHIPS_16_TIMES;  	return;  case "RegOokAvg":  	OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  	return;  case "RegOokFix":  	OokFixedThresh = (byte)reg.Value;  	return;  case "RegAfcFei":  	feiDone = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FeiDone");  	afcDone = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("AfcDone");  	AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  	AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  	return;  case "RegAfcMsb":  case "RegAfcLsb":  	AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  	return;  case "RegFeiMsb":  case "RegFeiLsb":  	FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  	return;  case "RegRssiConfig":  	FastRx = ((reg.Value >> 3) & 1) == 1;  	rssiDone = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("RssiDone");  	return;  case "RegRssiValue":  	prevRssiValue = rssiValue;  	rssiValue = -reg.Value / 2.0M;  	if (RfPaSwitchEnabled != 0) {  		if (RfPaSwitchSel != RfPaSwitchSelEnum.RF_IO_RFIO) {  			if (RfPaSwitchSel == RfPaSwitchSelEnum.RF_IO_PA_BOOST) {  				if (RfPaSwitchEnabled == 1)  					rfIoRssiValue = -127.7M;  				rfPaRssiValue = rssiValue;  				OnPropertyChanged ("RfPaRssiValue");  			}  		}  		else {  			if (RfPaSwitchEnabled == 1)  				rfPaRssiValue = -127.7M;  			rfIoRssiValue = rssiValue;  			OnPropertyChanged ("RfIoRssiValue");  		}  	}  	spectrumRssiValue = rssiValue;  	OnPropertyChanged ("RssiValue");  	OnPropertyChanged ("SpectrumData");  	return;  case "RegDioMapping1":  	Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  	Dio3Mapping = ((DioMappingEnum)reg.Value) & DioMappingEnum.DIO_MAP_11;  	return;  case "RegDioMapping2":  	Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  	Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  	ClockOut = ((ClockOutEnum)reg.Value) & ClockOutEnum.CLOCK_OUT_111;  	return;  case "RegIrqFlags1": {  	modeReady = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("ModeReady");  	bool flag = ((reg.Value >> 6) & 1) == 1;  	if (!rxReady && flag)  		restartRx = true;  	rxReady = flag;  	OnPropertyChanged ("RxReady");  	txReady = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("TxReady");  	m_pllLock = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("PllLock");  	rssi = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("Rssi");  	timeout = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("Timeout");  	autoMode = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("AutoMode");  	syncAddressMatch = (reg.Value & 1) == 1;  	OnPropertyChanged ("SyncAddressMatch");  	return;  }  case "RegIrqFlags2":  	fifoFull = ((reg.Value >> 7) & 1) == 1;  	OnPropertyChanged ("FifoFull");  	fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  	OnPropertyChanged ("FifoNotEmpty");  	fifoLevel = ((reg.Value >> 5) & 1) == 1;  	OnPropertyChanged ("FifoLevel");  	fifoOverrun = ((reg.Value >> 4) & 1) == 1;  	OnPropertyChanged ("FifoOverrun");  	packetSent = ((reg.Value >> 3) & 1) == 1;  	OnPropertyChanged ("PacketSent");  	m_payloadReady = ((reg.Value >> 2) & 1) == 1;  	OnPropertyChanged ("PayloadReady");  	crcOk = ((reg.Value >> 1) & 1) == 1;  	OnPropertyChanged ("CrcOk");  	lowBat = (reg.Value & 1) == 1;  	OnPropertyChanged ("LowBat");  	return;  case "RegRssiThresh":  	RssiThresh = -reg.Value / 2.0M;  	return;  case "RegRxTimeout1":  	TimeoutRxStart = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegRxTimeout2":  	TimeoutRssiThresh = (reg.Value * (16M / BitRate)) * 1000M;  	return;  case "RegPreambleMsb":  case "RegPreambleLsb":  	m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  	return;  case "RegSyncConfig":  	m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  	m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  	UpdateSyncValue ();  	m_packet.SyncTol = (byte)(reg.Value & 7);  	return;  case "RegSyncValue1":  case "RegSyncValue2":  case "RegSyncValue3":  case "RegSyncValue4":  case "RegSyncValue5":  case "RegSyncValue6":  case "RegSyncValue7":  case "RegSyncValue8":  	UpdateSyncValue ();  	return;  case "RegPacketConfig1":  	m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  	m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  	m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  	m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  	m_packet.AddressFiltering = ((AddressFilteringEnum)(reg.Value >> 1)) & AddressFilteringEnum.Reserved;  	return;  case "RegPayloadLength":  	m_packet.PayloadLength = (byte)reg.Value;  	return;  case "RegNodeAdrs":  	m_packet.NodeAddress = (byte)reg.Value;  	return;  case "RegBroadcastAdrs":  	m_packet.BroadcastAddress = (byte)reg.Value;  	return;  case "RegAutoModes":  	m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  	m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  	m_packet.IntermediateMode = ((IntermediateModeEnum)reg.Value) & IntermediateModeEnum.Tx;  	return;  case "RegFifoThresh":  	m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  	m_packet.FifoThreshold = (byte)(reg.Value & 0x7f);  	return;  case "RegPacketConfig2":  	m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  	m_packet.AutoRxRestartOn = ((reg.Value >> 1) & 1) == 1;  	m_packet.AesOn = (reg.Value & 1) == 1;  	return;  case "RegAesKey1":  case "RegAesKey2":  case "RegAesKey3":  case "RegAesKey4":  case "RegAesKey5":  case "RegAesKey6":  case "RegAesKey7":  case "RegAesKey8":  case "RegAesKey9":  case "RegAesKey10":  case "RegAesKey11":  case "RegAesKey12":  case "RegAesKey13":  case "RegAesKey14":  case "RegAesKey15":  case "RegAesKey16":  	UpdateAesKey ();  	return;  case "RegTemp1":  	AdcLowPowerOn = (reg.Value & 1) == 1;  	return;  case "RegTemp2":  	tempValue = (-((byte)reg.Value) + tempValueRoom) + tempValueCal;  	OnPropertyChanged ("TempValue");  	return;  case "RegTestLna":  	SensitivityBoostOn = reg.Value == 0x2d;  	return;  case "RegTestDagc":  	DagcOn = ((reg.Value & 0x30) == 0x30) || ((reg.Value & 0x10) == 0x10);  	return;  case "RegTestAfc":  	LowBetaAfcOffset = ((sbyte)reg.Value) * 488.0M;  	return;  default:  	return;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: if (num > 4)  	num = 0;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: if (((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value) == 0)  	m_registers ["RegBitrateLsb"].Value = 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: BitRate = frequencyXo / ((m_registers ["RegBitrateMsb"].Value << 8) | m_registers ["RegBitrateLsb"].Value);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: Fdev = ((m_registers ["RegFdevMsb"].Value << 8) | m_registers ["RegFdevLsb"].Value) * FrequencyStep;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: FrequencyRf = ((m_registers ["RegFrfMsb"].Value << 0x10) | (m_registers ["RegFrfMid"].Value << 8) | m_registers ["RegFrfLsb"].Value) * FrequencyStep;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_rcCalDone = ((reg.Value >> 6) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: if (Version != "2.1") {  	AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  	if (Version != "2.3")  		return;  	SetDagcOn (DagcOn);  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: AfcLowBetaOn = ((reg.Value >> 5) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: lowBatMonitor = ((reg.Value >> 4) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: LowBatOn = ((reg.Value >> 3) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: if ((reg.Value & 6) == 6)  	reg.Value = (byte)((reg.Value & 0xf9) | 2);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: if ((reg.Value & 6) == 6)  	reg.Value = (byte)((reg.Value & 0xf9) | 2);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: if ((reg.Value & 6) == 6)  	reg.Value = (byte)((reg.Value & 0xf9) | 2);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: reg.Value = (byte)((reg.Value & 0xf9) | 2);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: ListenResolIdle = ((ListenResolEnum)((reg.Value >> 6) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: ListenResolRx = ((ListenResolEnum)((reg.Value >> 4) - 1)) & (ListenResolEnum.Res262000 | ListenResolEnum.Res004100);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: ListenCriteria = ((ListenCriteriaEnum)(reg.Value >> 3)) & ListenCriteriaEnum.RssiThreshSyncAddress;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: Version = ((reg.Value & 0xF0) >> 4).ToString () + "." + (reg.Value & 0x0F).ToString ();  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch ((reg.Value >> 5) & 0x07) {  case 2:  	PaMode = PaModeEnum.PA1;  	break;  case 3:  	PaMode = PaModeEnum.PA1_PA2;  	break;  case 4:  	PaMode = PaModeEnum.PA0;  	break;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch ((reg.Value >> 5) & 0x07) {  case 2:  	PaMode = PaModeEnum.PA1;  	break;  case 3:  	PaMode = PaModeEnum.PA1_PA2;  	break;  case 4:  	PaMode = PaModeEnum.PA0;  	break;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch ((reg.Value >> 5) & 0x07) {  case 2:  	PaMode = PaModeEnum.PA1;  	break;  case 3:  	PaMode = PaModeEnum.PA1_PA2;  	break;  case 4:  	PaMode = PaModeEnum.PA0;  	break;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch ((reg.Value >> 5) & 0x07) {  case 2:  	PaMode = PaModeEnum.PA1;  	break;  case 3:  	PaMode = PaModeEnum.PA1_PA2;  	break;  case 4:  	PaMode = PaModeEnum.PA0;  	break;  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: OcpOn = ((reg.Value >> 4) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: OcpTrim = 0x2d + (5 * (reg.Value & 15));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: OcpTrim = 0x2d + (5 * (reg.Value & 15));  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: AgcAutoRefOn = ((reg.Value >> 6) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: AgcSnrMargin = (byte)(reg.Value >> 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: AgcStep2 = (byte)(reg.Value >> 4);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: AgcStep3 = (byte)(reg.Value & 15);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: AgcStep4 = (byte)(reg.Value >> 4);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: AgcStep5 = (byte)(reg.Value & 15);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: LnaCurrentGain = (LnaGainEnum)((reg.Value & 0x38) >> 3);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (((uint)((reg.Value & 0x18) >> 3))) {  case 0:  	mant = 0x10;  	break;  case 1:  	mant = 20;  	break;  case 2:  	mant = 0x18;  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (((uint)((reg.Value & 0x18) >> 3))) {  case 0:  	mant = 0x10;  	break;  case 1:  	mant = 20;  	break;  case 2:  	mant = 0x18;  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch (((uint)((reg.Value & 0x18) >> 3))) {  case 0:  	mant = 0x10;  	break;  case 1:  	mant = 20;  	break;  case 2:  	mant = 0x18;  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: mant = 20;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: rxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch ((reg.Value & 0x18) >> 3) {  case 0:  	mant = 0x10;  	break;  case 1:  	mant = 0x14;  	break;  case 2:  	mant = 0x18;  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: switch ((reg.Value & 0x18) >> 3) {  case 0:  	mant = 0x10;  	break;  case 1:  	mant = 0x14;  	break;  case 2:  	mant = 0x18;  	break;  default:  	throw new Exception ("Invalid RxBwMant parameter");  }  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: afcRxBw = ComputeRxBw (frequencyXo' modulationType' mant' ((int)reg.Value) & 7);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: OokThreshType = (OokThreshTypeEnum)(reg.Value >> 6);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: OokPeakThreshStep = OoPeakThreshStepTable [(int)((IntPtr)((reg.Value & 0x38) >> 3))];  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: OokAverageThreshFilt = (OokAverageThreshFiltEnum)(reg.Value >> 6);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: feiDone = ((reg.Value >> 6) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: afcDone = ((reg.Value >> 4) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: AfcAutoClearOn = ((reg.Value >> 3) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: AfcAutoOn = ((reg.Value >> 2) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: AfcValue = ((short)((m_registers ["RegAfcMsb"].Value << 8) | m_registers ["RegAfcLsb"].Value)) * FrequencyStep;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: FeiValue = ((short)((m_registers ["RegFeiMsb"].Value << 8) | m_registers ["RegFeiLsb"].Value)) * FrequencyStep;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: FastRx = ((reg.Value >> 3) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: Dio0Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: Dio1Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: Dio2Mapping = ((DioMappingEnum)(reg.Value >> 2)) & DioMappingEnum.DIO_MAP_11;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: Dio4Mapping = ((DioMappingEnum)(reg.Value >> 6)) & DioMappingEnum.DIO_MAP_11;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: Dio5Mapping = ((DioMappingEnum)(reg.Value >> 4)) & DioMappingEnum.DIO_MAP_11;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: modeReady = ((reg.Value >> 7) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: txReady = ((reg.Value >> 5) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_pllLock = ((reg.Value >> 4) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: rssi = ((reg.Value >> 3) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: timeout = ((reg.Value >> 2) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: fifoFull = ((reg.Value >> 7) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: fifoNotEmpty = ((reg.Value >> 6) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: fifoLevel = ((reg.Value >> 5) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: fifoOverrun = ((reg.Value >> 4) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: packetSent = ((reg.Value >> 3) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_payloadReady = ((reg.Value >> 2) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_packet.PreambleSize = (int)((m_registers ["RegPreambleMsb"].Value << 8) | m_registers ["RegPreambleLsb"].Value);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_packet.SyncOn = ((reg.Value >> 7) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_packet.FifoFillCondition = (((reg.Value >> 6) & 1) == 1) ? FifoFillConditionEnum.Allways : FifoFillConditionEnum.OnSyncAddressIrq;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_packet.SyncSize = (byte)(((reg.Value & 0x38) >> 3) + 1);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_packet.SyncTol = (byte)(reg.Value & 7);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_packet.PacketFormat = (((reg.Value >> 7) & 1) == 1) ? PacketFormatEnum.Variable : PacketFormatEnum.Fixed;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_packet.DcFree = ((DcFreeEnum)(reg.Value >> 5)) & DcFreeEnum.Reserved;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_packet.CrcOn = ((reg.Value >> 4) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_packet.CrcAutoClearOff = ((reg.Value >> 3) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_packet.EnterCondition = (EnterConditionEnum)((reg.Value & 0xe0) >> 5);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_packet.ExitCondition = (ExitConditionEnum)((reg.Value & 0x1c) >> 2);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_packet.TxStartCondition = ((reg.Value >> 7) & 1) == 1;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: m_packet.InterPacketRxDelay = (int)(reg.Value >> 4);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: DataMode = ((DataModeEnum)(reg.Value >> 5)) & DataModeEnum.Continuous;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following statement contains a magic number: ModulationType = ((ModulationTypeEnum)(reg.Value >> 3)) & ModulationTypeEnum.Reserved;  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Write,The following statement contains a magic number: portA.ScanOut (8' new byte[] {  	(byte)(address | 0x80)  }' true);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Write,The following statement contains a magic number: portA.ScanOut (8' new byte[] {  	data  }' true);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Write,The following statement contains a magic number: portA.ScanOut (8' new byte[] {  	(byte)(address | 0x80)  }' true);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Write,The following statement contains a magic number: for (int i = 0; i < data.Length; i++)  	portA.ScanOut (8' new byte[] {  		data [i]  	}' true);  
Magic Number,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Write,The following statement contains a magic number: portA.ScanOut (8' new byte[] {  	data [i]  }' true);  
Magic Number,SemtechLib.Devices.SX1231.General,PacketLog,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\PacketLog.cs,Update,The following statement contains a magic number: if ((this.sx1231 != null) && this.state) {  	if ((this.samples < this.maxSamples) || (this.maxSamples == 0L)) {  		str = ((((str + DateTime.Now.ToString ("HH:mm:ss.fff"' this.ci) + "\t") + ((this.sx1231.Mode == OperatingModeEnum.Tx) ? "Tx\t" : ((this.sx1231.Mode == OperatingModeEnum.Rx) ? "Rx\t" : "\t")) + ((this.sx1231.Mode == OperatingModeEnum.Rx) ? (this.sx1231.Packet.Rssi.ToString ("F1") + "\t") : "\t")) + this.maxPacketNumber.ToString () + "\t") + this.packetNumber.ToString () + "\t") + this.sx1231.Packet.PreambleSize.ToString () + "\t";  		MaskValidationType type = new MaskValidationType (this.sx1231.Packet.SyncValue);  		str = (str + type.StringValue + "\t") + this.sx1231.Packet.MessageLength.ToString ("X02") + "\t";  		if (this.sx1231.Mode == OperatingModeEnum.Rx) {  			str = str + ((this.sx1231.Packet.AddressFiltering != AddressFilteringEnum.OFF) ? this.sx1231.Packet.NodeAddressRx.ToString ("X02") : "");  		}  		else {  			str = str + ((this.sx1231.Packet.AddressFiltering != AddressFilteringEnum.OFF) ? this.sx1231.Packet.NodeAddress.ToString ("X02") : "");  		}  		str = str + "\t";  		if ((this.sx1231.Packet.Message != null) && (this.sx1231.Packet.Message.Length != 0)) {  			int index = 0;  			while (index < (this.sx1231.Packet.Message.Length - 1)) {  				str = str + this.sx1231.Packet.Message [index].ToString ("X02") + "-";  				index++;  			}  			str = str + this.sx1231.Packet.Message [index].ToString ("X02") + "\t";  		}  		str = str + (this.sx1231.Packet.CrcOn ? (((this.sx1231.Packet.Crc >> 8)).ToString ("X02") + "-" + ((this.sx1231.Packet.Crc & 0xff)).ToString ("X02") + "\t") : "\t");  		this.streamWriter.WriteLine (str);  		if (this.maxSamples != 0L) {  			this.samples += (ulong)1L;  			this.OnProgressChanged ((ulong)((this.samples * 100M) / this.maxSamples));  		}  		else {  			this.OnProgressChanged (0L);  		}  	}  	else {  		this.OnStop ();  	}  }  
Magic Number,SemtechLib.Devices.SX1231.General,PacketLog,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\PacketLog.cs,Update,The following statement contains a magic number: if ((this.samples < this.maxSamples) || (this.maxSamples == 0L)) {  	str = ((((str + DateTime.Now.ToString ("HH:mm:ss.fff"' this.ci) + "\t") + ((this.sx1231.Mode == OperatingModeEnum.Tx) ? "Tx\t" : ((this.sx1231.Mode == OperatingModeEnum.Rx) ? "Rx\t" : "\t")) + ((this.sx1231.Mode == OperatingModeEnum.Rx) ? (this.sx1231.Packet.Rssi.ToString ("F1") + "\t") : "\t")) + this.maxPacketNumber.ToString () + "\t") + this.packetNumber.ToString () + "\t") + this.sx1231.Packet.PreambleSize.ToString () + "\t";  	MaskValidationType type = new MaskValidationType (this.sx1231.Packet.SyncValue);  	str = (str + type.StringValue + "\t") + this.sx1231.Packet.MessageLength.ToString ("X02") + "\t";  	if (this.sx1231.Mode == OperatingModeEnum.Rx) {  		str = str + ((this.sx1231.Packet.AddressFiltering != AddressFilteringEnum.OFF) ? this.sx1231.Packet.NodeAddressRx.ToString ("X02") : "");  	}  	else {  		str = str + ((this.sx1231.Packet.AddressFiltering != AddressFilteringEnum.OFF) ? this.sx1231.Packet.NodeAddress.ToString ("X02") : "");  	}  	str = str + "\t";  	if ((this.sx1231.Packet.Message != null) && (this.sx1231.Packet.Message.Length != 0)) {  		int index = 0;  		while (index < (this.sx1231.Packet.Message.Length - 1)) {  			str = str + this.sx1231.Packet.Message [index].ToString ("X02") + "-";  			index++;  		}  		str = str + this.sx1231.Packet.Message [index].ToString ("X02") + "\t";  	}  	str = str + (this.sx1231.Packet.CrcOn ? (((this.sx1231.Packet.Crc >> 8)).ToString ("X02") + "-" + ((this.sx1231.Packet.Crc & 0xff)).ToString ("X02") + "\t") : "\t");  	this.streamWriter.WriteLine (str);  	if (this.maxSamples != 0L) {  		this.samples += (ulong)1L;  		this.OnProgressChanged ((ulong)((this.samples * 100M) / this.maxSamples));  	}  	else {  		this.OnProgressChanged (0L);  	}  }  else {  	this.OnStop ();  }  
Magic Number,SemtechLib.Devices.SX1231.General,PacketLog,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\PacketLog.cs,Update,The following statement contains a magic number: str = str + (this.sx1231.Packet.CrcOn ? (((this.sx1231.Packet.Crc >> 8)).ToString ("X02") + "-" + ((this.sx1231.Packet.Crc & 0xff)).ToString ("X02") + "\t") : "\t");  
Magic Number,SemtechLib.Devices.SX1231.General,Packet,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\Packet.cs,ComputeCrc,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	if ((((crc & 0x8000) >> 8) ^ (data & 0x80)) != 0) {  		crc = (ushort)(crc << 1);  		crc = (ushort)(crc ^ 0x1021);  	}  	else {  		crc = (ushort)(crc << 1);  	}  	data = (byte)(data << 1);  }  
Magic Number,SemtechLib.Devices.SX1231.General,Packet,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\Packet.cs,ComputeCrc,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	if ((((crc & 0x8000) >> 8) ^ (data & 0x80)) != 0) {  		crc = (ushort)(crc << 1);  		crc = (ushort)(crc ^ 0x1021);  	}  	else {  		crc = (ushort)(crc << 1);  	}  	data = (byte)(data << 1);  }  
Magic Number,SemtechLib.Devices.SX1231.General,Packet,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\Packet.cs,ComputeCrc,The following statement contains a magic number: if ((((crc & 0x8000) >> 8) ^ (data & 0x80)) != 0) {  	crc = (ushort)(crc << 1);  	crc = (ushort)(crc ^ 0x1021);  }  else {  	crc = (ushort)(crc << 1);  }  
Magic Number,SemtechLib.Devices.SX1231.General,Packet,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\Packet.cs,SetSaveData,The following statement contains a magic number: if (strArray.Length == 5) {  	strArray = strArray [4].Split (new char[] {  		'''  	});  	if (this.message != null) {  		Array.Resize<byte> (ref this.message' strArray.Length);  	}  	else {  		this.message = new byte[strArray.Length];  	}  	for (int i = 0; i < strArray.Length; i++) {  		if (strArray [i].Length != 0) {  			this.message [i] = Convert.ToByte (strArray [i]' 0x10);  		}  	}  	this.OnPropertyChanged ("Message");  	this.OnPropertyChanged ("MessageLength");  	this.OnPropertyChanged ("PayloadLength");  	this.OnPropertyChanged ("Crc");  	this.UpdatePayloadLengthMaxMin ();  }  
Magic Number,SemtechLib.Devices.SX1231.General,Packet,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\Packet.cs,SetSaveData,The following statement contains a magic number: if (strArray.Length == 5) {  	strArray = strArray [4].Split (new char[] {  		'''  	});  	if (this.message != null) {  		Array.Resize<byte> (ref this.message' strArray.Length);  	}  	else {  		this.message = new byte[strArray.Length];  	}  	for (int i = 0; i < strArray.Length; i++) {  		if (strArray [i].Length != 0) {  			this.message [i] = Convert.ToByte (strArray [i]' 0x10);  		}  	}  	this.OnPropertyChanged ("Message");  	this.OnPropertyChanged ("MessageLength");  	this.OnPropertyChanged ("PayloadLength");  	this.OnPropertyChanged ("Crc");  	this.UpdatePayloadLengthMaxMin ();  }  
Magic Number,SemtechLib.Devices.SX1231.General,Packet,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\Packet.cs,SetSaveData,The following statement contains a magic number: strArray = strArray [4].Split (new char[] {  	'''  });  
Magic Number,SemtechLib.Devices.SX1231.General,Packet,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\Packet.cs,UpdatePayloadLengthMaxMin,The following statement contains a magic number: this.maxLengthIndex = this.AesOn ? ((byte)4) : ((byte)0);  
Magic Number,SemtechLib.Devices.SX1231.General,Packet,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\General\Packet.cs,UpdatePayloadLengthMaxMin,The following statement contains a magic number: this.maxLengthIndex = (byte)(this.maxLengthIndex | ((this.PacketFormat == PacketFormatEnum.Variable) ? ((byte)2) : ((byte)0)));  
Duplicate Code,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,PopulateDioCbox,The method contains a code clone-set at the following line numbers (starting from the method definition): ((21' 51)' (59' 89))
Duplicate Code,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,PopulateDioCbox,The method contains a code clone-set at the following line numbers (starting from the method definition): ((43' 62)' (238' 257))
Duplicate Code,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,PopulateDioCbox,The method contains a code clone-set at the following line numbers (starting from the method definition): ((216' 246)' (254' 284))
Missing Default,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,OnSX1231PropertyChanged,The following switch statement is missing a default case: switch (this.sx1231.RfPaSwitchEnabled) {  case 0:  	this.rBtnRfPaSwitchAuto.Checked = false;  	this.rBtnRfPaSwitchManual.Checked = false;  	this.rBtnRfPaSwitchOff.Checked = true;  	break;  case 1:  	this.rBtnRfPaSwitchAuto.Checked = false;  	this.rBtnRfPaSwitchManual.Checked = true;  	this.rBtnRfPaSwitchOff.Checked = false;  	break;  case 2:  	this.rBtnRfPaSwitchAuto.Checked = true;  	this.rBtnRfPaSwitchManual.Checked = false;  	this.rBtnRfPaSwitchOff.Checked = false;  	break;  }  
Missing Default,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,OnSX1231PropertyChanged,The following switch statement is missing a default case: switch (this.sx1231.RfPaSwitchSel) {  case RfPaSwitchSelEnum.RF_IO_RFIO:  	this.rBtnRfPaSwitchPaIo.Checked = true;  	this.rBtnRfPaSwitchIoPa.Checked = false;  	break;  case RfPaSwitchSelEnum.RF_IO_PA_BOOST:  	this.rBtnRfPaSwitchPaIo.Checked = false;  	this.rBtnRfPaSwitchIoPa.Checked = true;  	break;  }  
Missing Default,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,UpdatePaSwitchSelCheck,The following switch statement is missing a default case: switch (this.sx1231.RfPaSwitchSel) {  case RfPaSwitchSelEnum.RF_IO_RFIO:  	this.pBoxRfOut2.Visible = true;  	return;  case RfPaSwitchSelEnum.RF_IO_PA_BOOST:  	this.pBoxRfOut4.Visible = true;  	return;  }  
Missing Default,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,UpdatePaSwitchSelCheck,The following switch statement is missing a default case: switch (this.sx1231.PaMode) {  case PaModeEnum.PA0:  	switch (this.sx1231.RfPaSwitchSel) {  	case RfPaSwitchSelEnum.RF_IO_RFIO:  		this.pBoxRfOut2.Visible = true;  		return;  	case RfPaSwitchSelEnum.RF_IO_PA_BOOST:  		this.pBoxRfOut4.Visible = true;  		return;  	}  	return;  case PaModeEnum.PA1:  case PaModeEnum.PA1_PA2:  	switch (this.sx1231.RfPaSwitchSel) {  	case RfPaSwitchSelEnum.RF_IO_RFIO:  		this.pBoxRfOut1.Visible = true;  		return;  	case RfPaSwitchSelEnum.RF_IO_PA_BOOST:  		this.pBoxRfOut3.Visible = true;  		return;  	}  	return;  }  
Missing Default,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,UpdatePaSwitchSelCheck,The following switch statement is missing a default case: switch (this.sx1231.RfPaSwitchSel) {  case RfPaSwitchSelEnum.RF_IO_RFIO:  	this.pBoxRfOut2.Visible = true;  	return;  case RfPaSwitchSelEnum.RF_IO_PA_BOOST:  	this.pBoxRfOut4.Visible = true;  	return;  }  
Missing Default,SemtechLib.Devices.SX1231.Forms,TestForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\TestForm.cs,UpdatePaSwitchSelCheck,The following switch statement is missing a default case: switch (this.sx1231.RfPaSwitchSel) {  case RfPaSwitchSelEnum.RF_IO_RFIO:  	this.pBoxRfOut1.Visible = true;  	return;  case RfPaSwitchSelEnum.RF_IO_PA_BOOST:  	this.pBoxRfOut3.Visible = true;  	return;  }  
Missing Default,SemtechLib.Devices.SX1231.Forms,SpectrumAnalyserForm,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Forms\SpectrumAnalyserForm.cs,OnSX1231PropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName) {  case "FrequencyRf":  	this.FrequencyRf = this.sx1231.FrequencyRf;  	this.UpdatePointsList ();  	return;  case "RxBw":  	this.RxBw = this.sx1231.RxBw;  	this.UpdatePointsList ();  	return;  case "RxBwMin":  	this.nudChanBw.Minimum = this.sx1231.RxBwMin;  	return;  case "RxBwMax":  	this.nudChanBw.Maximum = this.sx1231.RxBwMax;  	return;  case "SpectrumFreqSpan":  	this.FrequencySpan = this.sx1231.SpectrumFrequencySpan;  	this.UpdatePointsList ();  	return;  case "LnaGainSelect":  	this.LnaGainSelect = this.sx1231.LnaGainSelect;  	return;  case "SpectrumData": {  	bool flag1 = this.sx1231.SpectrumRssiValue < -40M;  	this.graph.UpdateLineGraph (this.sx1231.SpectrumFrequencyId' (double)this.sx1231.SpectrumRssiValue);  	return;  }  }  
Missing Default,SemtechLib.Devices.SX1231.Controls,PacketHandlerView,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\PacketHandlerView.cs,UpdateSyncValueLimits,The following switch statement is missing a default case: switch (status) {  case LimitCheckStatusEnum.OK:  	tBoxSyncValue.BackColor = SystemColors.Window;  	break;  case LimitCheckStatusEnum.OUT_OF_RANGE:  	tBoxSyncValue.BackColor = ControlPaint.LightLight (Color.Orange);  	break;  case LimitCheckStatusEnum.ERROR:  	tBoxSyncValue.BackColor = ControlPaint.LightLight (Color.Red);  	break;  }  
Missing Default,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,UpdateBitRateLimits,The following switch statement is missing a default case: switch (status) {  case LimitCheckStatusEnum.OK:  	nudBitRate.BackColor = SystemColors.Window;  	break;  case LimitCheckStatusEnum.OUT_OF_RANGE:  	nudBitRate.BackColor = ControlPaint.LightLight (Color.Orange);  	break;  case LimitCheckStatusEnum.ERROR:  	nudBitRate.BackColor = ControlPaint.LightLight (Color.Red);  	break;  }  
Missing Default,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,UpdateFdevLimits,The following switch statement is missing a default case: switch (status) {  case LimitCheckStatusEnum.OK:  	nudFdev.BackColor = SystemColors.Window;  	break;  case LimitCheckStatusEnum.OUT_OF_RANGE:  	nudFdev.BackColor = ControlPaint.LightLight (Color.Orange);  	break;  case LimitCheckStatusEnum.ERROR:  	nudFdev.BackColor = ControlPaint.LightLight (Color.Red);  	break;  }  
Missing Default,SemtechLib.Devices.SX1231.Controls,CommonViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\CommonViewControl.cs,UpdateFrequencyRfLimits,The following switch statement is missing a default case: switch (status) {  case LimitCheckStatusEnum.OK:  	nudFrequencyRf.BackColor = SystemColors.Window;  	break;  case LimitCheckStatusEnum.OUT_OF_RANGE:  	nudFrequencyRf.BackColor = ControlPaint.LightLight (Color.Orange);  	break;  case LimitCheckStatusEnum.ERROR:  	nudFrequencyRf.BackColor = ControlPaint.LightLight (Color.Red);  	break;  }  
Missing Default,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,PopulateDioCbox,The following switch statement is missing a default case: switch (this.dataMode) {  case DataModeEnum.Packet:  case DataModeEnum.Reserved:  	switch (this.mode) {  	case OperatingModeEnum.Sleep:  		this.cBoxDio0Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"-"  		});  		this.cBoxDio1Mapping.Items.AddRange (new object[] {  			"FifoLevel"'  			"FifoFull"'  			"FifoNotEmpty"'  			"-"  		});  		this.cBoxDio2Mapping.Items.AddRange (new object[] {  			"FifoNotEmpty"'  			"-"'  			"LowBat"'  			"AutoMode"  		});  		this.cBoxDio3Mapping.Items.AddRange (new object[] {  			"FifoFull"'  			"-"'  			"LowBat"'  			"-"  		});  		this.cBoxDio4Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"-"  		});  		this.cBoxDio5Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"ModeReady"  		});  		goto Label_0FC4;  	case OperatingModeEnum.Stdby:  		this.cBoxDio0Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"-"  		});  		this.cBoxDio1Mapping.Items.AddRange (new object[] {  			"FifoLevel"'  			"FifoFull"'  			"FifoNotEmpty"'  			"-"  		});  		this.cBoxDio2Mapping.Items.AddRange (new object[] {  			"FifoNotEmpty"'  			"-"'  			"LowBat"'  			"AutoMode"  		});  		this.cBoxDio3Mapping.Items.AddRange (new object[] {  			"FifoFull"'  			"-"'  			"LowBat"'  			"-"  		});  		this.cBoxDio4Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"-"  		});  		this.cBoxDio5Mapping.Items.AddRange (new object[] {  			"ClkOut"'  			"-"'  			"LowBat"'  			"ModeReady"  		});  		goto Label_0FC4;  	case OperatingModeEnum.Fs:  		this.cBoxDio0Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"PllLock"  		});  		this.cBoxDio1Mapping.Items.AddRange (new object[] {  			"FifoLevel"'  			"FifoFull"'  			"FifoNotEmpty"'  			"PllLock"  		});  		this.cBoxDio2Mapping.Items.AddRange (new object[] {  			"FifoNotEmpty"'  			"-"'  			"LowBat"'  			"AutoMode"  		});  		this.cBoxDio3Mapping.Items.AddRange (new object[] {  			"FifoFull"'  			"-"'  			"LowBat"'  			"PllLock"  		});  		this.cBoxDio4Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"PllLock"  		});  		this.cBoxDio5Mapping.Items.AddRange (new object[] {  			"ClkOut"'  			"-"'  			"LowBat"'  			"ModeReady"  		});  		goto Label_0FC4;  	case OperatingModeEnum.Tx:  		this.cBoxDio0Mapping.Items.AddRange (new object[] {  			"PacketSent"'  			"TxReady"'  			"LowBat"'  			"PllLock"  		});  		this.cBoxDio1Mapping.Items.AddRange (new object[] {  			"FifoLevel"'  			"FifoFull"'  			"FifoNotEmpty"'  			"PllLock"  		});  		this.cBoxDio2Mapping.Items.AddRange (new object[] {  			"FifoNotEmpty"'  			"Data"'  			"LowBat"'  			"AutoMode"  		});  		this.cBoxDio3Mapping.Items.AddRange (new object[] {  			"FifoFull"'  			"TxReady"'  			"LowBat"'  			"PllLock"  		});  		this.cBoxDio4Mapping.Items.AddRange (new object[] {  			"ModeReady"'  			"TxReady"'  			"LowBat"'  			"PllLock"  		});  		this.cBoxDio5Mapping.Items.AddRange (new object[] {  			"ClkOut"'  			"Data"'  			"LowBat"'  			"ModeReady"  		});  		goto Label_0FC4;  	case OperatingModeEnum.Rx:  		this.cBoxDio0Mapping.Items.AddRange (new object[] {  			"CrcOk"'  			"PayloadReady"'  			"SyncAddress"'  			"Rssi"  		});  		this.cBoxDio1Mapping.Items.AddRange (new object[] {  			"FifoLevel"'  			"FifoFull"'  			"FifoNotEmpty"'  			"Timeout"  		});  		this.cBoxDio2Mapping.Items.AddRange (new object[] {  			"FifoNotEmpty"'  			"Data"'  			"LowBat"'  			"AutoMode"  		});  		this.cBoxDio3Mapping.Items.AddRange (new object[] {  			"FifoFull"'  			"Rssi"'  			"SyncAddress"'  			"PllLock"  		});  		this.cBoxDio4Mapping.Items.AddRange (new object[] {  			"Timeout"'  			"Rssi"'  			"RxReady"'  			"PllLock"  		});  		this.cBoxDio5Mapping.Items.AddRange (new object[] {  			"ClkOut"'  			"Data"'  			"LowBat"'  			"ModeReady"  		});  		goto Label_0FC4;  	}  	break;  case DataModeEnum.ContinuousBitSync:  case DataModeEnum.Continuous:  	switch (this.mode) {  	case OperatingModeEnum.Sleep:  		this.cBoxDio0Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"ModeReady"  		});  		this.cBoxDio1Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"-"  		});  		this.cBoxDio2Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"-"'  			"-"  		});  		this.cBoxDio3Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"AutoMode"'  			"-"  		});  		this.cBoxDio4Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"-"  		});  		this.cBoxDio5Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"ModeReady"  		});  		goto Label_0FC4;  	case OperatingModeEnum.Stdby:  		this.cBoxDio0Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"ModeReady"  		});  		this.cBoxDio1Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"-"  		});  		this.cBoxDio2Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"-"'  			"-"  		});  		this.cBoxDio3Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"AutoMode"'  			"-"  		});  		this.cBoxDio4Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"-"  		});  		this.cBoxDio5Mapping.Items.AddRange (new object[] {  			"ClkOut"'  			"-"'  			"LowBat"'  			"ModeReady"  		});  		goto Label_0FC4;  	case OperatingModeEnum.Fs:  		this.cBoxDio0Mapping.Items.AddRange (new object[] {  			"PllLock"'  			"-"'  			"LowBat"'  			"Modeready"  		});  		this.cBoxDio1Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"PllLock"  		});  		this.cBoxDio2Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"-"'  			"-"  		});  		this.cBoxDio3Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"AutoMode"'  			"-"  		});  		this.cBoxDio4Mapping.Items.AddRange (new object[] {  			"-"'  			"-"'  			"LowBat"'  			"PllLock"  		});  		this.cBoxDio5Mapping.Items.AddRange (new object[] {  			"ClkOut"'  			"-"'  			"LowBat"'  			"ModeReady"  		});  		goto Label_0FC4;  	case OperatingModeEnum.Tx:  		this.cBoxDio0Mapping.Items.AddRange (new object[] {  			"PllLock"'  			"TxReady"'  			"LowBat"'  			"ModeReady"  		});  		this.cBoxDio1Mapping.Items.AddRange (new object[] {  			"Dclk"'  			"TxReady"'  			"LowBat"'  			"PllLock"  		});  		this.cBoxDio2Mapping.Items.AddRange (new object[] {  			"Data"'  			"Data"'  			"Data"'  			"Data"  		});  		this.cBoxDio3Mapping.Items.AddRange (new object[] {  			"TxReady"'  			"TxReady"'  			"AutoMode"'  			"TxReady"  		});  		this.cBoxDio4Mapping.Items.AddRange (new object[] {  			"TxReady"'  			"TxReady"'  			"LowBat"'  			"PllLock"  		});  		this.cBoxDio5Mapping.Items.AddRange (new object[] {  			"ClkOut"'  			"ClkOut"'  			"LowBat"'  			"ModeReady"  		});  		goto Label_0FC4;  	case OperatingModeEnum.Rx:  		this.cBoxDio0Mapping.Items.AddRange (new object[] {  			"SyncAddress"'  			"Timeout"'  			"Rssi"'  			"ModeReady"  		});  		this.cBoxDio1Mapping.Items.AddRange (new object[] {  			"Dclk"'  			"RxReady"'  			"LowBat"'  			"SyncAddress"  		});  		this.cBoxDio2Mapping.Items.AddRange (new object[] {  			"Data"'  			"Data"'  			"Data"'  			"Data"  		});  		this.cBoxDio3Mapping.Items.AddRange (new object[] {  			"Rssi"'  			"RxReady"'  			"AutoMode"'  			"Timeout"  		});  		this.cBoxDio4Mapping.Items.AddRange (new object[] {  			"Timeout"'  			"RxReady"'  			"SyncAddress"'  			"PllLock"  		});  		this.cBoxDio5Mapping.Items.AddRange (new object[] {  			"ClkOut"'  			"Rssi"'  			"LowBat"'  			"ModeReady"  		});  		goto Label_0FC4;  	}  	break;  }  
Missing Default,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,PopulateDioCbox,The following switch statement is missing a default case: switch (this.mode) {  case OperatingModeEnum.Sleep:  	this.cBoxDio0Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"-"  	});  	this.cBoxDio1Mapping.Items.AddRange (new object[] {  		"FifoLevel"'  		"FifoFull"'  		"FifoNotEmpty"'  		"-"  	});  	this.cBoxDio2Mapping.Items.AddRange (new object[] {  		"FifoNotEmpty"'  		"-"'  		"LowBat"'  		"AutoMode"  	});  	this.cBoxDio3Mapping.Items.AddRange (new object[] {  		"FifoFull"'  		"-"'  		"LowBat"'  		"-"  	});  	this.cBoxDio4Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"-"  	});  	this.cBoxDio5Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"ModeReady"  	});  	goto Label_0FC4;  case OperatingModeEnum.Stdby:  	this.cBoxDio0Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"-"  	});  	this.cBoxDio1Mapping.Items.AddRange (new object[] {  		"FifoLevel"'  		"FifoFull"'  		"FifoNotEmpty"'  		"-"  	});  	this.cBoxDio2Mapping.Items.AddRange (new object[] {  		"FifoNotEmpty"'  		"-"'  		"LowBat"'  		"AutoMode"  	});  	this.cBoxDio3Mapping.Items.AddRange (new object[] {  		"FifoFull"'  		"-"'  		"LowBat"'  		"-"  	});  	this.cBoxDio4Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"-"  	});  	this.cBoxDio5Mapping.Items.AddRange (new object[] {  		"ClkOut"'  		"-"'  		"LowBat"'  		"ModeReady"  	});  	goto Label_0FC4;  case OperatingModeEnum.Fs:  	this.cBoxDio0Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"PllLock"  	});  	this.cBoxDio1Mapping.Items.AddRange (new object[] {  		"FifoLevel"'  		"FifoFull"'  		"FifoNotEmpty"'  		"PllLock"  	});  	this.cBoxDio2Mapping.Items.AddRange (new object[] {  		"FifoNotEmpty"'  		"-"'  		"LowBat"'  		"AutoMode"  	});  	this.cBoxDio3Mapping.Items.AddRange (new object[] {  		"FifoFull"'  		"-"'  		"LowBat"'  		"PllLock"  	});  	this.cBoxDio4Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"PllLock"  	});  	this.cBoxDio5Mapping.Items.AddRange (new object[] {  		"ClkOut"'  		"-"'  		"LowBat"'  		"ModeReady"  	});  	goto Label_0FC4;  case OperatingModeEnum.Tx:  	this.cBoxDio0Mapping.Items.AddRange (new object[] {  		"PacketSent"'  		"TxReady"'  		"LowBat"'  		"PllLock"  	});  	this.cBoxDio1Mapping.Items.AddRange (new object[] {  		"FifoLevel"'  		"FifoFull"'  		"FifoNotEmpty"'  		"PllLock"  	});  	this.cBoxDio2Mapping.Items.AddRange (new object[] {  		"FifoNotEmpty"'  		"Data"'  		"LowBat"'  		"AutoMode"  	});  	this.cBoxDio3Mapping.Items.AddRange (new object[] {  		"FifoFull"'  		"TxReady"'  		"LowBat"'  		"PllLock"  	});  	this.cBoxDio4Mapping.Items.AddRange (new object[] {  		"ModeReady"'  		"TxReady"'  		"LowBat"'  		"PllLock"  	});  	this.cBoxDio5Mapping.Items.AddRange (new object[] {  		"ClkOut"'  		"Data"'  		"LowBat"'  		"ModeReady"  	});  	goto Label_0FC4;  case OperatingModeEnum.Rx:  	this.cBoxDio0Mapping.Items.AddRange (new object[] {  		"CrcOk"'  		"PayloadReady"'  		"SyncAddress"'  		"Rssi"  	});  	this.cBoxDio1Mapping.Items.AddRange (new object[] {  		"FifoLevel"'  		"FifoFull"'  		"FifoNotEmpty"'  		"Timeout"  	});  	this.cBoxDio2Mapping.Items.AddRange (new object[] {  		"FifoNotEmpty"'  		"Data"'  		"LowBat"'  		"AutoMode"  	});  	this.cBoxDio3Mapping.Items.AddRange (new object[] {  		"FifoFull"'  		"Rssi"'  		"SyncAddress"'  		"PllLock"  	});  	this.cBoxDio4Mapping.Items.AddRange (new object[] {  		"Timeout"'  		"Rssi"'  		"RxReady"'  		"PllLock"  	});  	this.cBoxDio5Mapping.Items.AddRange (new object[] {  		"ClkOut"'  		"Data"'  		"LowBat"'  		"ModeReady"  	});  	goto Label_0FC4;  }  
Missing Default,SemtechLib.Devices.SX1231.Controls,IrqMapViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\IrqMapViewControl.cs,PopulateDioCbox,The following switch statement is missing a default case: switch (this.mode) {  case OperatingModeEnum.Sleep:  	this.cBoxDio0Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"ModeReady"  	});  	this.cBoxDio1Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"-"  	});  	this.cBoxDio2Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"-"'  		"-"  	});  	this.cBoxDio3Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"AutoMode"'  		"-"  	});  	this.cBoxDio4Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"-"  	});  	this.cBoxDio5Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"ModeReady"  	});  	goto Label_0FC4;  case OperatingModeEnum.Stdby:  	this.cBoxDio0Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"ModeReady"  	});  	this.cBoxDio1Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"-"  	});  	this.cBoxDio2Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"-"'  		"-"  	});  	this.cBoxDio3Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"AutoMode"'  		"-"  	});  	this.cBoxDio4Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"-"  	});  	this.cBoxDio5Mapping.Items.AddRange (new object[] {  		"ClkOut"'  		"-"'  		"LowBat"'  		"ModeReady"  	});  	goto Label_0FC4;  case OperatingModeEnum.Fs:  	this.cBoxDio0Mapping.Items.AddRange (new object[] {  		"PllLock"'  		"-"'  		"LowBat"'  		"Modeready"  	});  	this.cBoxDio1Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"PllLock"  	});  	this.cBoxDio2Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"-"'  		"-"  	});  	this.cBoxDio3Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"AutoMode"'  		"-"  	});  	this.cBoxDio4Mapping.Items.AddRange (new object[] {  		"-"'  		"-"'  		"LowBat"'  		"PllLock"  	});  	this.cBoxDio5Mapping.Items.AddRange (new object[] {  		"ClkOut"'  		"-"'  		"LowBat"'  		"ModeReady"  	});  	goto Label_0FC4;  case OperatingModeEnum.Tx:  	this.cBoxDio0Mapping.Items.AddRange (new object[] {  		"PllLock"'  		"TxReady"'  		"LowBat"'  		"ModeReady"  	});  	this.cBoxDio1Mapping.Items.AddRange (new object[] {  		"Dclk"'  		"TxReady"'  		"LowBat"'  		"PllLock"  	});  	this.cBoxDio2Mapping.Items.AddRange (new object[] {  		"Data"'  		"Data"'  		"Data"'  		"Data"  	});  	this.cBoxDio3Mapping.Items.AddRange (new object[] {  		"TxReady"'  		"TxReady"'  		"AutoMode"'  		"TxReady"  	});  	this.cBoxDio4Mapping.Items.AddRange (new object[] {  		"TxReady"'  		"TxReady"'  		"LowBat"'  		"PllLock"  	});  	this.cBoxDio5Mapping.Items.AddRange (new object[] {  		"ClkOut"'  		"ClkOut"'  		"LowBat"'  		"ModeReady"  	});  	goto Label_0FC4;  case OperatingModeEnum.Rx:  	this.cBoxDio0Mapping.Items.AddRange (new object[] {  		"SyncAddress"'  		"Timeout"'  		"Rssi"'  		"ModeReady"  	});  	this.cBoxDio1Mapping.Items.AddRange (new object[] {  		"Dclk"'  		"RxReady"'  		"LowBat"'  		"SyncAddress"  	});  	this.cBoxDio2Mapping.Items.AddRange (new object[] {  		"Data"'  		"Data"'  		"Data"'  		"Data"  	});  	this.cBoxDio3Mapping.Items.AddRange (new object[] {  		"Rssi"'  		"RxReady"'  		"AutoMode"'  		"Timeout"  	});  	this.cBoxDio4Mapping.Items.AddRange (new object[] {  		"Timeout"'  		"RxReady"'  		"SyncAddress"'  		"PllLock"  	});  	this.cBoxDio5Mapping.Items.AddRange (new object[] {  		"ClkOut"'  		"Rssi"'  		"LowBat"'  		"ModeReady"  	});  	goto Label_0FC4;  }  
Missing Default,SemtechLib.Devices.SX1231.Controls,DeviceViewControl,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\Controls\DeviceViewControl.cs,OnSX1231PropertyChanged,The following switch statement is missing a default case: switch (sx1231.Mode) {  case OperatingModeEnum.Sleep:  	rBtnSleep.Checked = true;  	goto Label_0A80;  case OperatingModeEnum.Stdby:  	rBtnStandby.Checked = true;  	goto Label_0A80;  case OperatingModeEnum.Fs:  	rBtnSynthesizer.Checked = true;  	goto Label_0A80;  case OperatingModeEnum.Tx:  	rBtnTransmitter.Checked = true;  	goto Label_0A80;  case OperatingModeEnum.Rx:  	rBtnReceiver.Checked = true;  	goto Label_0A80;  }  
Missing Default,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following switch statement is missing a default case: switch (tokens [1]) {  case "RegAgcThres1":  	tokens [1] = "RegAgcThresh1";  	flag = false;  	break;  case "RegAgcThres2":  	tokens [1] = "RegAgcThresh2";  	flag = false;  	break;  case "RegAgcThres3":  	tokens [1] = "RegAgcThresh3";  	flag = false;  	break;  }  
Missing Default,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following switch statement is missing a default case: switch (Version) {  case "2.1":  	switch (tokens [1]) {  	case "RegAfcCtrl":  		tokens [1] = "RegOsc2";  		flag = false;  		break;  	case "Reserved14":  		tokens [1] = "RegAgcRef";  		flag = false;  		break;  	case "Reserved15":  		tokens [1] = "RegAgcThresh1";  		flag = false;  		break;  	case "Reserved16":  		tokens [1] = "RegAgcThresh2";  		flag = false;  		break;  	case "Reserved17":  		tokens [1] = "RegAgcThresh3";  		flag = false;  		break;  	case "RegTestLna":  		flag = false;  		break;  	case "RegTestAfc":  		flag = false;  		break;  	case "RegTestDagc":  		flag = false;  		break;  	}  	break;  case "2.2":  case "2.3":  	switch (tokens [1]) {  	case "RegOsc2":  		tokens [1] = "RegAfcCtrl";  		flag = false;  		break;  	case "RegAgcRef":  		tokens [1] = "Reserved14";  		flag = false;  		break;  	case "RegAgcThresh1":  		tokens [1] = "Reserved15";  		flag = false;  		break;  	case "RegAgcThresh2":  		tokens [1] = "Reserved16";  		flag = false;  		break;  	case "RegAgcThresh3":  		tokens [1] = "Reserved17";  		flag = false;  		break;  	}  	break;  }  
Missing Default,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following switch statement is missing a default case: switch (tokens [1]) {  case "RegAfcCtrl":  	tokens [1] = "RegOsc2";  	flag = false;  	break;  case "Reserved14":  	tokens [1] = "RegAgcRef";  	flag = false;  	break;  case "Reserved15":  	tokens [1] = "RegAgcThresh1";  	flag = false;  	break;  case "Reserved16":  	tokens [1] = "RegAgcThresh2";  	flag = false;  	break;  case "Reserved17":  	tokens [1] = "RegAgcThresh3";  	flag = false;  	break;  case "RegTestLna":  	flag = false;  	break;  case "RegTestAfc":  	flag = false;  	break;  case "RegTestDagc":  	flag = false;  	break;  }  
Missing Default,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,Open,The following switch statement is missing a default case: switch (tokens [1]) {  case "RegOsc2":  	tokens [1] = "RegAfcCtrl";  	flag = false;  	break;  case "RegAgcRef":  	tokens [1] = "Reserved14";  	flag = false;  	break;  case "RegAgcThresh1":  	tokens [1] = "Reserved15";  	flag = false;  	break;  case "RegAgcThresh2":  	tokens [1] = "Reserved16";  	flag = false;  	break;  case "RegAgcThresh3":  	tokens [1] = "Reserved17";  	flag = false;  	break;  }  
Missing Default,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenCoefIdle,The following switch statement is missing a default case: switch (ListenResolIdle) {  case ListenResolEnum.Res000064:  	num = (byte)(value / 0.064M);  	break;  case ListenResolEnum.Res004100:  	num = (byte)(value / 4.1M);  	break;  case ListenResolEnum.Res262000:  	num = (byte)(value / 262M);  	break;  }  
Missing Default,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,SetListenCoefRx,The following switch statement is missing a default case: switch (ListenResolRx) {  case ListenResolEnum.Res000064:  	num = (byte)(value / 0.064M);  	break;  case ListenResolEnum.Res004100:  	num = (byte)(value / 4.1M);  	break;  case ListenResolEnum.Res262000:  	num = (byte)(value / 262M);  	break;  }  
Missing Default,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following switch statement is missing a default case: switch (ListenResolIdle) {  case ListenResolEnum.Res000064:  	ListenCoefIdle = reg.Value * 0.064M;  	return;  case ListenResolEnum.Res004100:  	ListenCoefIdle = reg.Value * 4.1M;  	return;  case ListenResolEnum.Res262000:  	ListenCoefIdle = reg.Value * 262M;  	return;  }  
Missing Default,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following switch statement is missing a default case: switch (ListenResolRx) {  case ListenResolEnum.Res000064:  	ListenCoefRx = reg.Value * 0.064M;  	return;  case ListenResolEnum.Res004100:  	ListenCoefRx = reg.Value * 4.1M;  	return;  case ListenResolEnum.Res262000:  	ListenCoefRx = reg.Value * 262M;  	return;  }  
Missing Default,SemtechLib.Devices.SX1231,SX1231,C:\repos\x893_SX1231\SemtechLib.Devices.SX1231\SX1231.cs,UpdateRegisterValue,The following switch statement is missing a default case: switch ((reg.Value >> 5) & 0x07) {  case 2:  	PaMode = PaModeEnum.PA1;  	break;  case 3:  	PaMode = PaModeEnum.PA1_PA2;  	break;  case 4:  	PaMode = PaModeEnum.PA0;  	break;  }  
