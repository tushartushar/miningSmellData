Implementation smell,Namespace,Class,File,Method,Description
Long Method,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The method has 168 lines of code.
Long Method,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The method has 122 lines of code.
Complex Method,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,Cyclomatic complexity of the method is 12
Complex Method,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,Cyclomatic complexity of the method is 29
Complex Method,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,Cyclomatic complexity of the method is 12
Complex Method,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,_vScrollBar_Scroll,Cyclomatic complexity of the method is 18
Complex Method,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,OnPaintBackground,Cyclomatic complexity of the method is 16
Complex Method,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,Cyclomatic complexity of the method is 18
Complex Method,SemtechLib.Controls.HexBoxCtrl,DynamicFileByteProvider,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\DynamicFileByteProvider.cs,ApplyChanges,Cyclomatic complexity of the method is 8
Complex Method,SemtechLib.Controls.HexBoxCtrl,DynamicFileByteProvider,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\DynamicFileByteProvider.cs,InsertBytes,Cyclomatic complexity of the method is 8
Complex Method,SemtechLib.Controls.HexBoxCtrl,DynamicFileByteProvider,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\DynamicFileByteProvider.cs,WriteByte,Cyclomatic complexity of the method is 12
Complex Method,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,Cyclomatic complexity of the method is 9
Complex Method,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,checkBoxZoom_CheckedChanged,Cyclomatic complexity of the method is 9
Complex Method,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_MouseDown,Cyclomatic complexity of the method is 16
Complex Method,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_MouseMove,Cyclomatic complexity of the method is 16
Complex Method,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_MouseUp,Cyclomatic complexity of the method is 10
Complex Method,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,Cyclomatic complexity of the method is 47
Long Parameter List,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintHexStringSelected,The method has 5 parameters.
Long Parameter List,SemtechLib.General,Register,C:\repos\x893_SX1231\SemtechLib\General\Register.cs,Register,The method has 5 parameters.
Long Parameter List,Fusionbird.FusionToolkit,NativeMethods,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\NativeMethods.cs,DrawThemeBackground,The method has 6 parameters.
Long Parameter List,Fusionbird.FusionToolkit,NativeMethods,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\NativeMethods.cs,GetThemeColor,The method has 5 parameters.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,TrackDrawModeEditor,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\TrackDrawModeEditor.cs,EditValue,The length of the statement  "	IWindowsFormsEditorService service = (IWindowsFormsEditorService)provider.GetService (typeof(IWindowsFormsEditorService)); " is 122.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,TrackDrawModeEditor,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\TrackDrawModeEditor.cs,EditValue,The length of the statement  "	control.Items.Add ("Ticks"' (((Fusionbird.FusionToolkit.FusionTrackBar.FusionTrackBar)context.Instance).OwnerDrawParts & TrackBarOwnerDrawParts.Ticks) == TrackBarOwnerDrawParts.Ticks); " is 184.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,TrackDrawModeEditor,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\TrackDrawModeEditor.cs,EditValue,The length of the statement  "	control.Items.Add ("Thumb"' (((Fusionbird.FusionToolkit.FusionTrackBar.FusionTrackBar)context.Instance).OwnerDrawParts & TrackBarOwnerDrawParts.Thumb) == TrackBarOwnerDrawParts.Thumb); " is 184.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,TrackDrawModeEditor,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\TrackDrawModeEditor.cs,EditValue,The length of the statement  "	control.Items.Add ("Channel"' (((Fusionbird.FusionToolkit.FusionTrackBar.FusionTrackBar)context.Instance).OwnerDrawParts & TrackBarOwnerDrawParts.Channel) == TrackBarOwnerDrawParts.Channel); " is 190.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawHorizontalTicks,The length of the statement  "	RectangleF ef2 = new RectangleF ((float)(ChannelBounds.Left + (ThumbBounds.Width / 2))' (float)(ThumbBounds.Top - 5)' 0f' 3f); " is 126.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawHorizontalTicks,The length of the statement  "	RectangleF ef3 = new RectangleF ((float)((ChannelBounds.Right - (ThumbBounds.Width / 2)) - 1)' (float)(ThumbBounds.Top - 5)' 0f' 3f); " is 133.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawVerticalTicks,The length of the statement  "	RectangleF ef2 = new RectangleF ((float)(ThumbBounds.Left - 5)' (float)((ChannelBounds.Bottom - (ThumbBounds.Height / 2)) - 1)' 3f' 0f); " is 136.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawVerticalTicks,The length of the statement  "	RectangleF ef3 = new RectangleF ((float)(ThumbBounds.Left - 5)' (float)(ChannelBounds.Top + (ThumbBounds.Height / 2))' 3f' 0f); " is 127.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The length of the statement  "		Fusionbird.FusionToolkit.NativeMethods.TrackBarParts parts = Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMB; " is 124.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The length of the statement  "			parts = (base.Orientation != Orientation.Horizontal) ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBRIGHT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBBOTTOM; " is 194.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The length of the statement  "			parts = (base.Orientation != Orientation.Horizontal) ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBLEFT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBTOP; " is 190.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The length of the statement  "			parts = (base.Orientation != Orientation.Horizontal) ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBVERT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMB; " is 187.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawTicks,The length of the statement  "		TrackBarDrawItemEventArgs e = new TrackBarDrawItemEventArgs (graphics' base.ClientRectangle' (TrackBarItemState)ThumbState); " is 124.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The length of the statement  "			Fusionbird.FusionToolkit.NativeMethods.NMHDR structure = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR)); " is 191.
Long Statement,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The length of the statement  "				Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)); " is 215.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,GetHexBytePositionInfo,The length of the statement  "	long index = Math.Min (this._byteProvider.Length' ((this._startByte + ((this._iHexMaxHBytes * (num6 + 1)) - this._iHexMaxHBytes)) + num7) - 1L); " is 144.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,GetStringBytePositionInfo,The length of the statement  "	long index = Math.Min (this._byteProvider.Length' ((this._startByte + ((this._iHexMaxHBytes * (num6 + 1)) - this._iHexMaxHBytes)) + num7) - 1L); " is 144.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					Rectangle rec = new Rectangle ((int)byteStringPointF.X' (int)byteStringPointF.Y' (int)(((this._recStringView.X + num) - byteStringPointF.X) + this._charSize.Width)' (int)this._charSize.Height); " is 193.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "						Rectangle rectangle4 = new Rectangle (this._recStringView.X' (int)(byteStringPointF.Y + this._charSize.Height)' this._recStringView.Width' (int)(this._charSize.Height * (num2 - 1))); " is 182.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					Rectangle rectangle5 = new Rectangle (this._recStringView.X' (int)tf3.Y' (int)((tf3.X - this._recStringView.X) + this._charSize.Width)' (int)this._charSize.Height); " is 164.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					Rectangle rectangle2 = new Rectangle ((int)byteStringPointF.X' (int)byteStringPointF.Y' (int)((tf3.X - byteStringPointF.X) + this._charSize.Width)' (int)this._charSize.Height); " is 176.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "				Rectangle rectangle7 = new Rectangle ((int)tf5.X' (int)tf5.Y' (int)((tf6.X - tf5.X) + (this._charSize.Width * 2f))' (int)this._charSize.Height); " is 144.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "				Rectangle rectangle8 = new Rectangle ((int)tf5.X' (int)tf5.Y' (int)(((this._recHex.X + num3) - tf5.X) + (this._charSize.Width * 2f))' (int)this._charSize.Height); " is 162.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					Rectangle rectangle9 = new Rectangle (this._recHex.X' (int)(tf5.Y + this._charSize.Height)' num3 + ((int)(this._charSize.Width * 2f))' (int)(this._charSize.Height * (num4 - 1))); " is 178.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "				Rectangle rectangle10 = new Rectangle (this._recHex.X' (int)tf6.Y' (int)((tf6.X - this._recHex.X) + (this._charSize.Width * 2f))' (int)this._charSize.Height); " is 158.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintHex,The length of the statement  "		if ((((i >= this._bytePos) && (i <= ((this._bytePos + this._selectionLength) - 1L))) && (this._selectionLength != 0L)) && flag) { " is 129.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintHexAndStringView,The length of the statement  "		bool flag3 = ((i >= this._bytePos) && (i <= ((this._bytePos + this._selectionLength) - 1L))) && (this._selectionLength != 0L); " is 126.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The length of the statement  "		this._recLineInfo = new Rectangle (this._recContent.X + num' this._recContent.Y' (int)(this._charSize.Width * (this.lineInfoDigits + 2))' this._recContent.Height); " is 163.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The length of the statement  "	this._recHex = new Rectangle (this._recLineInfo.X + this._recLineInfo.Width' this._recLineInfo.Y' this._recContent.Width - this._recLineInfo.Width' this._recContent.Height); " is 173.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The length of the statement  "		this._recHex.Width = (int)Math.Floor ((double)(((this._iHexMaxHBytes * this._charSize.Width) * 3.0) + (2f * this._charSize.Width))); " is 132.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The length of the statement  "		this._recStringView = new Rectangle (this._recHex.X + this._recHex.Width' this._recHex.Y' (int)(this._charSize.Width * this._iHexMaxHBytes)' this._recHex.Height); " is 162.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateScrollSize,The length of the statement  "	if ((this.VScrollBarVisible && (this._byteProvider != null)) && ((this._byteProvider.Length > 0L) && (this._iHexMaxHBytes != 0))) { " is 131.
Long Statement,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateScrollSize,The length of the statement  "		long num = (long)Math.Ceiling ((double)((((double)(this._byteProvider.Length + 1L)) / ((double)this._iHexMaxHBytes)) - this._iHexMaxVBytes)); " is 141.
Long Statement,SemtechLib.Controls.HexBoxCtrl,DynamicFileByteProvider,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\DynamicFileByteProvider.cs,DeleteBytes,The length of the statement  "		for (DataBlock block = this.GetDataBlock (index' out num2); (num > 0L) && (block != null); block = (num > 0L) ? nextBlock : null) { " is 131.
Long Statement,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawValue,The length of the statement  "			RectangleF ctrl = new RectangleF (this.rectCylinder.Left' this.rectCylinder.Bottom - height' this.rectCylinder.Width' height); " is 126.
Long Statement,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawValue,The length of the statement  "		g.DrawString (this.Celsius2Fahrenheit (this.value).ToString ("0 [\x00b0F]")' this.fntText' this.blackBrush' layoutRectangle' this.strfmtText); " is 142.
Long Statement,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The length of the statement  "	e.Graphics.FillRectangle (new SolidBrush (Color.Transparent)' new RectangleF (0f' 0f' (float)base.Width' (float)base.Height)); " is 126.
Long Statement,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The length of the statement  "		this.pointCenter = new PointF (this.rectBackgroundImg.Left + (this.rectBackgroundImg.Width / 2f)' this.rectBackgroundImg.Top + (this.rectBackgroundImg.Height / 2f)); " is 165.
Long Statement,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The length of the statement  "		this.rectBulb = new RectangleF (this.pointCenter.X - this.fTmpWidth' this.rectBackgroundImg.Bottom - ((this.fTmpWidth * 2f) + 25f)' this.fTmpWidth * 2f' this.fTmpWidth * 2f); " is 174.
Long Statement,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The length of the statement  "		this.rectCylinder = new RectangleF (this.pointCenter.X - (this.fTmpWidth / 2f)' this.rectBackgroundImg.Top + (this.drawTics ? ((float)0x19) : ((float)10))' this.fTmpWidth' (this.rectBulb.Top - this.rectBackgroundImg.Top) - (this.drawTics ? ((float)20) : ((float)5))); " is 267.
Long Statement,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The length of the statement  "		this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' 0x37)' this.OffsetColor (this.colorFore' -55)' LinearGradientMode.Horizontal); " is 169.
Long Statement,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,DrawButton,The length of the statement  "		brush.CenterPoint = new PointF ((float)((buttonRect.X + (buttonRect.Width / 8)) + this.buttonPressOffset)' (float)((buttonRect.Y + (buttonRect.Height / 8)) + this.buttonPressOffset)); " is 183.
Long Statement,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,DrawButton,The length of the statement  "		brush.CenterPoint = new PointF ((float)((buttonRect.X + (buttonRect.Width / 8)) + this.buttonPressOffset)' (float)((buttonRect.Y + (buttonRect.Height / 8)) + this.buttonPressOffset)); " is 183.
Long Statement,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,DrawEdges,The length of the statement  "	this.edgeBrush = new LinearGradientBrush (rect' this.edgeColor1' this.edgeColor2' this.GetLightAngle (this.lightAngle)); " is 120.
Long Statement,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,DrawRecess,The length of the statement  "	LinearGradientBrush brush = new LinearGradientBrush (recessRect' ControlPaint.Dark (this.backgroudColor)' ControlPaint.LightLight (this.backgroudColor)' this.GetLightAngle (50f)); " is 179.
Long Statement,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The length of the statement  "		Rectangle rect = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4); " is 141.
Long Statement,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The length of the statement  "		Rectangle rectangle2 = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' (this.itemSize.Width + (num * 2)) - 1' (this.itemSize.Height + (num * 2)) - 1); " is 179.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height); " is 165.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10)); " is 213.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10)); " is 209.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10)); " is 210.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height); " is 168.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10)); " is 213.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10)); " is 215.
Long Statement,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10)); " is 216.
Long Statement,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The length of the statement  "		Rectangle rect = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height); " is 125.
Long Statement,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The length of the statement  "		LinearGradientBrush brush = new LinearGradientBrush (rect' ControlPaint.Dark (base.Parent.BackColor)' ControlPaint.LightLight (base.Parent.BackColor)' angle); " is 158.
Long Statement,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The length of the statement  "				e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height); " is 170.
Long Statement,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The length of the statement  "				e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height); " is 169.
Long Statement,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The length of the statement  "		LinearGradientBrush brush2 = new LinearGradientBrush (rect' Color.FromArgb (150' 0xff' 0xff' 0xff)' Color.Transparent' angle); " is 126.
Long Statement,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The length of the statement  "		LinearGradientBrush brush3 = new LinearGradientBrush (rect' Color.FromArgb (100' 0xff' 0xff' 0xff)' Color.FromArgb (100' 0xff' 0xff' 0xff)' angle); " is 147.
Long Statement,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The length of the statement  "		e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100)); " is 254.
Long Statement,SemtechLib.Controls,NumericUpDownEx,C:\repos\x893_SX1231\SemtechLib\Controls\NumericUpDownEx.cs,GetPrivateField,The length of the statement  "	return (Control)base.GetType ().GetField (name' BindingFlags.FlattenHierarchy | BindingFlags.NonPublic | BindingFlags.Instance).GetValue (this); " is 144.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height); " is 148.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height); " is 224.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height); " is 224.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height); " is 230.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5)); " is 137.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5)); " is 167.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height); " is 146.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height); " is 231.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height); " is 231.
Long Statement,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height); " is 237.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The length of the statement  "			leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2)); " is 121.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The length of the statement  "				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point9.Y' workingArea.Width / num4' num7 - point10.Y)); " is 170.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The length of the statement  "			e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' num7' workingArea.Width / num4' point13.Y - num7)); " is 166.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The length of the statement  "			e.Graphics.DrawRectangle (penLine' (float)(workingArea.Location.X + (num5 * (workingArea.Width / num4)))' (float)num7' (float)(workingArea.Width / num4)' 0.1f); " is 160.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The length of the statement  "	if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) { " is 163.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The length of the statement  "		Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50)); " is 129.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The length of the statement  "					e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height)); " is 198.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The length of the statement  "	grphToolTip.SetToolTip (checkBoxHand' "Move:\r\n\r\n-Left Mouse Button Click on the zone you want to move and move the mouse."); " is 128.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The length of the statement  "	grphToolTip.SetToolTip (checkBoxZoomOut' "ZoomOut:\r\n\r\nSelect the button and then each time the graphic is clicked it will zoom out."); " is 138.
Long Statement,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The length of the statement  "	grphToolTip.SetToolTip (checkBoxZoomIn' "ZoomIn:\r\n\r\nDraw a rectangle with the Left Mouse button on the graphic zone to zoom"); " is 130.
Long Statement,SemtechLib.Controls.HexBoxCtrl.Design,HexFontEditor,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\Design\HexFontEditor.cs,EditValue,The length of the statement  "	if ((provider != null) && (((IWindowsFormsEditorService)provider.GetService (typeof(IWindowsFormsEditorService))) != null)) { " is 125.
Complex Conditional,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,CreateCaret,The conditional expression  "((this._byteProvider != null) && (this._keyInterpreter != null)) && (!this._caretVisible && this.Focused)"  is complex.
Complex Conditional,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentByteSign,The conditional expression  "((rec.Top >= 0) && (rec.Left >= 0)) && ((rec.Width > 0) && (rec.Height > 0))"  is complex.
Complex Conditional,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The conditional expression  "((this._keyInterpreter != null) && this.Focused) && ((this._bytePos != -1L) && base.Enabled)"  is complex.
Complex Conditional,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintHex,The conditional expression  "(((i >= this._bytePos) && (i <= ((this._bytePos + this._selectionLength) - 1L))) && (this._selectionLength != 0L)) && flag"  is complex.
Complex Conditional,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateScrollSize,The conditional expression  "(this.VScrollBarVisible && (this._byteProvider != null)) && ((this._byteProvider.Length > 0L) && (this._iHexMaxHBytes != 0))"  is complex.
Complex Conditional,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The conditional expression  "((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))"  is complex.
Empty Catch Block,SemtechLib.General.TypeConverters,UInt16HexConverter,C:\repos\x893_SX1231\SemtechLib\General\TypeConverters\UInt16HexConverter.cs,ConvertFrom,The method has an empty catch block.
Empty Catch Block,SemtechLib.General.TypeConverters,UInt32HexConverter,C:\repos\x893_SX1231\SemtechLib\General\TypeConverters\UInt32HexConverter.cs,ConvertFrom,The method has an empty catch block.
Empty Catch Block,SemtechLib.General.TypeConverters,ByteHexConverter,C:\repos\x893_SX1231\SemtechLib\General\TypeConverters\ByteHexConverter.cs,ConvertFrom,The method has an empty catch block.
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: lock (syncThread) {  	if (frequency < 92 || frequency > 6000000)  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (12000000 / (2 * frequency)) - 1;  	ftStatus = SetBitMode (0' 0);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	ftStatus = SetBitMode (0' 2);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	if (Sync2Mpsse ()) {  		txBuffer.Add (0x80);  		txBuffer.Add (PortValue);  		txBuffer.Add (PortDir);  		txBuffer.Add (0x82);  		txBuffer.Add (0);  		txBuffer.Add (0);  		txBuffer.Add (0x86);  		txBuffer.Add ((byte)((clockDivisor >> 0) & 0xFF));  		txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  		txBuffer.Add (0x85);  		isInitialized = SendBytes ();  		readThreadContinue = true;  		readThread = new Thread (new ThreadStart (ReadThread));  		readThread.Start ();  		return isInitialized;  	}  	isInitialized = false;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: lock (syncThread) {  	if (frequency < 92 || frequency > 6000000)  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (12000000 / (2 * frequency)) - 1;  	ftStatus = SetBitMode (0' 0);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	ftStatus = SetBitMode (0' 2);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	if (Sync2Mpsse ()) {  		txBuffer.Add (0x80);  		txBuffer.Add (PortValue);  		txBuffer.Add (PortDir);  		txBuffer.Add (0x82);  		txBuffer.Add (0);  		txBuffer.Add (0);  		txBuffer.Add (0x86);  		txBuffer.Add ((byte)((clockDivisor >> 0) & 0xFF));  		txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  		txBuffer.Add (0x85);  		isInitialized = SendBytes ();  		readThreadContinue = true;  		readThread = new Thread (new ThreadStart (ReadThread));  		readThread.Start ();  		return isInitialized;  	}  	isInitialized = false;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: lock (syncThread) {  	if (frequency < 92 || frequency > 6000000)  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (12000000 / (2 * frequency)) - 1;  	ftStatus = SetBitMode (0' 0);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	ftStatus = SetBitMode (0' 2);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	if (Sync2Mpsse ()) {  		txBuffer.Add (0x80);  		txBuffer.Add (PortValue);  		txBuffer.Add (PortDir);  		txBuffer.Add (0x82);  		txBuffer.Add (0);  		txBuffer.Add (0);  		txBuffer.Add (0x86);  		txBuffer.Add ((byte)((clockDivisor >> 0) & 0xFF));  		txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  		txBuffer.Add (0x85);  		isInitialized = SendBytes ();  		readThreadContinue = true;  		readThread = new Thread (new ThreadStart (ReadThread));  		readThread.Start ();  		return isInitialized;  	}  	isInitialized = false;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: lock (syncThread) {  	if (frequency < 92 || frequency > 6000000)  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (12000000 / (2 * frequency)) - 1;  	ftStatus = SetBitMode (0' 0);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	ftStatus = SetBitMode (0' 2);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	if (Sync2Mpsse ()) {  		txBuffer.Add (0x80);  		txBuffer.Add (PortValue);  		txBuffer.Add (PortDir);  		txBuffer.Add (0x82);  		txBuffer.Add (0);  		txBuffer.Add (0);  		txBuffer.Add (0x86);  		txBuffer.Add ((byte)((clockDivisor >> 0) & 0xFF));  		txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  		txBuffer.Add (0x85);  		isInitialized = SendBytes ();  		readThreadContinue = true;  		readThread = new Thread (new ThreadStart (ReadThread));  		readThread.Start ();  		return isInitialized;  	}  	isInitialized = false;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: lock (syncThread) {  	if (frequency < 92 || frequency > 6000000)  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (12000000 / (2 * frequency)) - 1;  	ftStatus = SetBitMode (0' 0);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	ftStatus = SetBitMode (0' 2);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	if (Sync2Mpsse ()) {  		txBuffer.Add (0x80);  		txBuffer.Add (PortValue);  		txBuffer.Add (PortDir);  		txBuffer.Add (0x82);  		txBuffer.Add (0);  		txBuffer.Add (0);  		txBuffer.Add (0x86);  		txBuffer.Add ((byte)((clockDivisor >> 0) & 0xFF));  		txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  		txBuffer.Add (0x85);  		isInitialized = SendBytes ();  		readThreadContinue = true;  		readThread = new Thread (new ThreadStart (ReadThread));  		readThread.Start ();  		return isInitialized;  	}  	isInitialized = false;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: lock (syncThread) {  	if (frequency < 92 || frequency > 6000000)  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (12000000 / (2 * frequency)) - 1;  	ftStatus = SetBitMode (0' 0);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	ftStatus = SetBitMode (0' 2);  	if (ftStatus != FTDI.FT_STATUS.FT_OK) {  		isInitialized = false;  		return false;  	}  	if (Sync2Mpsse ()) {  		txBuffer.Add (0x80);  		txBuffer.Add (PortValue);  		txBuffer.Add (PortDir);  		txBuffer.Add (0x82);  		txBuffer.Add (0);  		txBuffer.Add (0);  		txBuffer.Add (0x86);  		txBuffer.Add ((byte)((clockDivisor >> 0) & 0xFF));  		txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  		txBuffer.Add (0x85);  		isInitialized = SendBytes ();  		readThreadContinue = true;  		readThread = new Thread (new ThreadStart (ReadThread));  		readThread.Start ();  		return isInitialized;  	}  	isInitialized = false;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: if (frequency < 92 || frequency > 6000000)  	throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: if (frequency < 92 || frequency > 6000000)  	throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: clockDivisor = (12000000 / (2 * frequency)) - 1;  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: clockDivisor = (12000000 / (2 * frequency)) - 1;  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: ftStatus = SetBitMode (0' 2);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: if (Sync2Mpsse ()) {  	txBuffer.Add (0x80);  	txBuffer.Add (PortValue);  	txBuffer.Add (PortDir);  	txBuffer.Add (0x82);  	txBuffer.Add (0);  	txBuffer.Add (0);  	txBuffer.Add (0x86);  	txBuffer.Add ((byte)((clockDivisor >> 0) & 0xFF));  	txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  	txBuffer.Add (0x85);  	isInitialized = SendBytes ();  	readThreadContinue = true;  	readThread = new Thread (new ThreadStart (ReadThread));  	readThread.Start ();  	return isInitialized;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Init,The following statement contains a magic number: txBuffer.Add ((byte)((clockDivisor >> 8) & 0xFF));  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,ReadBytes,The following statement contains a magic number: lock (syncThread) {  	bool flag = false;  	uint rxQueue = 0;  	uint num2 = (bitCount / 8) + (bitCount % 8);  	List<byte> list = new List<byte> ();  	uint numBytesRead = 0;  	uint num4 = 0;  	rxQueue = 0;  	do {  		DateTime now = DateTime.Now;  		do {  			ftStatus = GetRxBytesAvailable (ref rxQueue);  			if (rxQueue == 0)  				Thread.Sleep (0);  			TimeSpan span = (TimeSpan)(DateTime.Now - now);  			flag = span.TotalMilliseconds >= 1000.0;  		}  		while (rxQueue == 0 && ftStatus == FTDI.FT_STATUS.FT_OK && !flag);  		if (rxQueue > 0) {  			byte[] dataBuffer = new byte[rxQueue];  			Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead);  			list.AddRange (dataBuffer);  			num4 += numBytesRead;  		}  	}  	while (((num4 < num2) && (ftStatus == FTDI.FT_STATUS.FT_OK)) && !flag);  	if (!flag && ftStatus == FTDI.FT_STATUS.FT_OK) {  		rxBuffer = list.ToArray ();  		return true;  	}  	rxBuffer = null;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,ReadBytes,The following statement contains a magic number: lock (syncThread) {  	bool flag = false;  	uint rxQueue = 0;  	uint num2 = (bitCount / 8) + (bitCount % 8);  	List<byte> list = new List<byte> ();  	uint numBytesRead = 0;  	uint num4 = 0;  	rxQueue = 0;  	do {  		DateTime now = DateTime.Now;  		do {  			ftStatus = GetRxBytesAvailable (ref rxQueue);  			if (rxQueue == 0)  				Thread.Sleep (0);  			TimeSpan span = (TimeSpan)(DateTime.Now - now);  			flag = span.TotalMilliseconds >= 1000.0;  		}  		while (rxQueue == 0 && ftStatus == FTDI.FT_STATUS.FT_OK && !flag);  		if (rxQueue > 0) {  			byte[] dataBuffer = new byte[rxQueue];  			Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead);  			list.AddRange (dataBuffer);  			num4 += numBytesRead;  		}  	}  	while (((num4 < num2) && (ftStatus == FTDI.FT_STATUS.FT_OK)) && !flag);  	if (!flag && ftStatus == FTDI.FT_STATUS.FT_OK) {  		rxBuffer = list.ToArray ();  		return true;  	}  	rxBuffer = null;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,ReadBytes,The following statement contains a magic number: lock (syncThread) {  	bool flag = false;  	uint rxQueue = 0;  	uint num2 = (bitCount / 8) + (bitCount % 8);  	List<byte> list = new List<byte> ();  	uint numBytesRead = 0;  	uint num4 = 0;  	rxQueue = 0;  	do {  		DateTime now = DateTime.Now;  		do {  			ftStatus = GetRxBytesAvailable (ref rxQueue);  			if (rxQueue == 0)  				Thread.Sleep (0);  			TimeSpan span = (TimeSpan)(DateTime.Now - now);  			flag = span.TotalMilliseconds >= 1000.0;  		}  		while (rxQueue == 0 && ftStatus == FTDI.FT_STATUS.FT_OK && !flag);  		if (rxQueue > 0) {  			byte[] dataBuffer = new byte[rxQueue];  			Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead);  			list.AddRange (dataBuffer);  			num4 += numBytesRead;  		}  	}  	while (((num4 < num2) && (ftStatus == FTDI.FT_STATUS.FT_OK)) && !flag);  	if (!flag && ftStatus == FTDI.FT_STATUS.FT_OK) {  		rxBuffer = list.ToArray ();  		return true;  	}  	rxBuffer = null;  	return false;  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,ReadBytes,The following statement contains a magic number: do {  	DateTime now = DateTime.Now;  	do {  		ftStatus = GetRxBytesAvailable (ref rxQueue);  		if (rxQueue == 0)  			Thread.Sleep (0);  		TimeSpan span = (TimeSpan)(DateTime.Now - now);  		flag = span.TotalMilliseconds >= 1000.0;  	}  	while (rxQueue == 0 && ftStatus == FTDI.FT_STATUS.FT_OK && !flag);  	if (rxQueue > 0) {  		byte[] dataBuffer = new byte[rxQueue];  		Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead);  		list.AddRange (dataBuffer);  		num4 += numBytesRead;  	}  }  while (((num4 < num2) && (ftStatus == FTDI.FT_STATUS.FT_OK)) && !flag);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,ReadBytes,The following statement contains a magic number: do {  	ftStatus = GetRxBytesAvailable (ref rxQueue);  	if (rxQueue == 0)  		Thread.Sleep (0);  	TimeSpan span = (TimeSpan)(DateTime.Now - now);  	flag = span.TotalMilliseconds >= 1000.0;  }  while (rxQueue == 0 && ftStatus == FTDI.FT_STATUS.FT_OK && !flag);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,ReadBytes,The following statement contains a magic number: flag = span.TotalMilliseconds >= 1000.0;  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref bitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			OnIo7Changed (((bitMode & 0x80) == 0x80));  			OnIo6Changed (((bitMode & 0x40) == 0x40));  			OnIo5Changed (((bitMode & 0x20) == 0x20));  			OnIo4Changed (((bitMode & 0x10) == 0x10));  			OnIo3Changed (((bitMode & 0x08) == 0x08));  			OnIo2Changed (((bitMode & 0x04) == 0x04));  			OnIo1Changed (((bitMode & 0x02) == 0x02));  			OnIo0Changed (((bitMode & 0x01) == 0x01));  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (10);  	}  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,ReadThread,The following statement contains a magic number: while (readThreadContinue) {  	if (!isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (syncThread)  			ftStatus = GetPinStates (ref bitMode);  		if (ftStatus == FTDI.FT_STATUS.FT_OK) {  			OnIo7Changed (((bitMode & 0x80) == 0x80));  			OnIo6Changed (((bitMode & 0x40) == 0x40));  			OnIo5Changed (((bitMode & 0x20) == 0x20));  			OnIo4Changed (((bitMode & 0x10) == 0x10));  			OnIo3Changed (((bitMode & 0x08) == 0x08));  			OnIo2Changed (((bitMode & 0x04) == 0x04));  			OnIo1Changed (((bitMode & 0x02) == 0x02));  			OnIo0Changed (((bitMode & 0x01) == 0x01));  		}  		else {  			lock (syncThread)  				Close ();  		}  		Thread.Sleep (10);  	}  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref bitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		OnIo7Changed (((bitMode & 0x80) == 0x80));  		OnIo6Changed (((bitMode & 0x40) == 0x40));  		OnIo5Changed (((bitMode & 0x20) == 0x20));  		OnIo4Changed (((bitMode & 0x10) == 0x10));  		OnIo3Changed (((bitMode & 0x08) == 0x08));  		OnIo2Changed (((bitMode & 0x04) == 0x04));  		OnIo1Changed (((bitMode & 0x02) == 0x02));  		OnIo0Changed (((bitMode & 0x01) == 0x01));  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (10);  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,ReadThread,The following statement contains a magic number: if (!isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (syncThread)  		ftStatus = GetPinStates (ref bitMode);  	if (ftStatus == FTDI.FT_STATUS.FT_OK) {  		OnIo7Changed (((bitMode & 0x80) == 0x80));  		OnIo6Changed (((bitMode & 0x40) == 0x40));  		OnIo5Changed (((bitMode & 0x20) == 0x20));  		OnIo4Changed (((bitMode & 0x10) == 0x10));  		OnIo3Changed (((bitMode & 0x08) == 0x08));  		OnIo2Changed (((bitMode & 0x04) == 0x04));  		OnIo1Changed (((bitMode & 0x02) == 0x02));  		OnIo0Changed (((bitMode & 0x01) == 0x01));  	}  	else {  		lock (syncThread)  			Close ();  	}  	Thread.Sleep (10);  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,ReadThread,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,ReadThread,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,SetFrequency,The following statement contains a magic number: lock (syncThread) {  	if ((frequency < 0x5c) || (frequency > 0x5b8d80))  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (0xb71b00 / (2 * frequency)) - 1;  	txBuffer.Add (0x86);  	txBuffer.Add ((byte)(clockDivisor & 0xff));  	txBuffer.Add ((byte)((clockDivisor >> 8) & 0xff));  	return SendBytes ();  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,SetFrequency,The following statement contains a magic number: lock (syncThread) {  	if ((frequency < 0x5c) || (frequency > 0x5b8d80))  		throw new Exception ("The frequency value must be in 92 up to 6000000 range.");  	clockDivisor = (0xb71b00 / (2 * frequency)) - 1;  	txBuffer.Add (0x86);  	txBuffer.Add ((byte)(clockDivisor & 0xff));  	txBuffer.Add ((byte)((clockDivisor >> 8) & 0xff));  	return SendBytes ();  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,SetFrequency,The following statement contains a magic number: clockDivisor = (0xb71b00 / (2 * frequency)) - 1;  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,SetFrequency,The following statement contains a magic number: txBuffer.Add ((byte)((clockDivisor >> 8) & 0xff));  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: if (rxQueue > 0) {  	retries = 1000;  	do {  		dataBuffer = new byte[4];  		if ((Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  			return false;  		rxQueue -= numBytesRead;  	}  	while (rxQueue > 4);  	if (rxQueue > 0) {  		dataBuffer = new byte[rxQueue];  		if (Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK)  			return false;  	}  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: if (rxQueue > 0) {  	retries = 1000;  	do {  		dataBuffer = new byte[4];  		if ((Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  			return false;  		rxQueue -= numBytesRead;  	}  	while (rxQueue > 4);  	if (rxQueue > 0) {  		dataBuffer = new byte[rxQueue];  		if (Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK)  			return false;  	}  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: if (rxQueue > 0) {  	retries = 1000;  	do {  		dataBuffer = new byte[4];  		if ((Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  			return false;  		rxQueue -= numBytesRead;  	}  	while (rxQueue > 4);  	if (rxQueue > 0) {  		dataBuffer = new byte[rxQueue];  		if (Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK)  			return false;  	}  }  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: retries = 1000;  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: do {  	dataBuffer = new byte[4];  	if ((Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  		return false;  	rxQueue -= numBytesRead;  }  while (rxQueue > 4);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: do {  	dataBuffer = new byte[4];  	if ((Read (dataBuffer' (uint)dataBuffer.Length' ref numBytesRead) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  		return false;  	rxQueue -= numBytesRead;  }  while (rxQueue > 4);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: dataBuffer = new byte[4];  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: retries = 1000;  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: do {  	txBuffer.Add (250);  	txBuffer.Add (170);  	if (!SendBytes ())  		return false;  	Thread.Sleep (100);  	if ((GetRxBytesAvailable (ref rxQueue) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  		return false;  }  while (rxQueue == 0);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: do {  	txBuffer.Add (250);  	txBuffer.Add (170);  	if (!SendBytes ())  		return false;  	Thread.Sleep (100);  	if ((GetRxBytesAvailable (ref rxQueue) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  		return false;  }  while (rxQueue == 0);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: do {  	txBuffer.Add (250);  	txBuffer.Add (170);  	if (!SendBytes ())  		return false;  	Thread.Sleep (100);  	if ((GetRxBytesAvailable (ref rxQueue) != FTDI.FT_STATUS.FT_OK) || (retries-- == 0))  		return false;  }  while (rxQueue == 0);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: txBuffer.Add (250);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: txBuffer.Add (170);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,SemtechLib.Ftdi,Mpsse,C:\repos\x893_SX1231\SemtechLib\Ftdi\Mpsse.cs,Sync2Mpsse,The following statement contains a magic number: return (numBytesRead > 1 && dataBuffer [numBytesRead - 2] == 0xFA && dataBuffer [numBytesRead - 1] == 0xAA);  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseSPI.cs,MpsseSPI,The following statement contains a magic number: portValue = 30;  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseSPI.cs,ScanIn,The following statement contains a magic number: if (count > 0) {  	// Bytes count  	if (clockOutDataBitsMSBFirst)  		txBuffer.Add (0x24);  	else  		txBuffer.Add (0x2C);  	txBuffer.Add ((byte)(((count - 1) >> 0) & 0xFF));  	txBuffer.Add ((byte)(((count - 1) >> 8) & 0xFF));  }  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseSPI.cs,ScanIn,The following statement contains a magic number: txBuffer.Add ((byte)(((count - 1) >> 8) & 0xFF));  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseSPI.cs,ScanIn,The following statement contains a magic number: count = bitCount % 8;  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseSPI.cs,ScanInOut,The following statement contains a magic number: if (count > 0) {  	if (clockOutDataBitsMSBFirst)  		txBuffer.Add (0x35);  	else  		txBuffer.Add (0x3D);  	txBuffer.Add ((byte)(((count - 1) >> 0) & 0xFF));  	txBuffer.Add ((byte)(((count - 1) >> 8) & 0xFF));  	for (int i = 0; i < count; i++)  		txBuffer.Add (data [i]);  }  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseSPI.cs,ScanInOut,The following statement contains a magic number: txBuffer.Add ((byte)(((count - 1) >> 8) & 0xFF));  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseSPI.cs,ScanInOut,The following statement contains a magic number: count = bitCount % 8;  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseSPI.cs,ScanOut,The following statement contains a magic number: if (count > 0) {  	if (clockOutDataBitsMSBFirst)  		txBuffer.Add (0x11);  	else  		txBuffer.Add (0x19);  	txBuffer.Add ((byte)(((count - 1) >> 0) & 0xFF));  	txBuffer.Add ((byte)(((count - 1) >> 8) & 0xFF));  	for (int i = 0; i < count; i++)  		txBuffer.Add (data [i]);  }  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseSPI.cs,ScanOut,The following statement contains a magic number: txBuffer.Add ((byte)(((count - 1) >> 8) & 0xFF));  
Magic Number,SemtechLib.Ftdi,MpsseSPI,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseSPI.cs,ScanOut,The following statement contains a magic number: count = bitCount % 8;  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (base.readThreadContinue) {  	if (!base.isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (base.syncThread)  			base.ftStatus = base.GetPinStates (ref bitMode);  		if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  			if ((bitMode & 0x80) == 0x80)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if ((bitMode & 0x40) == 0x40)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if ((bitMode & 0x20) == 0x20)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if ((bitMode & 0x10) == 0x10)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if ((bitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if ((bitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if ((bitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if ((bitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (base.syncThread)  				base.Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (base.readThreadContinue) {  	if (!base.isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (base.syncThread)  			base.ftStatus = base.GetPinStates (ref bitMode);  		if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  			if ((bitMode & 0x80) == 0x80)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if ((bitMode & 0x40) == 0x40)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if ((bitMode & 0x20) == 0x20)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if ((bitMode & 0x10) == 0x10)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if ((bitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if ((bitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if ((bitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if ((bitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (base.syncThread)  				base.Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (base.readThreadContinue) {  	if (!base.isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (base.syncThread)  			base.ftStatus = base.GetPinStates (ref bitMode);  		if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  			if ((bitMode & 0x80) == 0x80)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if ((bitMode & 0x40) == 0x40)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if ((bitMode & 0x20) == 0x20)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if ((bitMode & 0x10) == 0x10)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if ((bitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if ((bitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if ((bitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if ((bitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (base.syncThread)  				base.Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (base.readThreadContinue) {  	if (!base.isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (base.syncThread)  			base.ftStatus = base.GetPinStates (ref bitMode);  		if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  			if ((bitMode & 0x80) == 0x80)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if ((bitMode & 0x40) == 0x40)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if ((bitMode & 0x20) == 0x20)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if ((bitMode & 0x10) == 0x10)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if ((bitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if ((bitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if ((bitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if ((bitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (base.syncThread)  				base.Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (base.readThreadContinue) {  	if (!base.isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (base.syncThread)  			base.ftStatus = base.GetPinStates (ref bitMode);  		if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  			if ((bitMode & 0x80) == 0x80)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if ((bitMode & 0x40) == 0x40)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if ((bitMode & 0x20) == 0x20)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if ((bitMode & 0x10) == 0x10)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if ((bitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if ((bitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if ((bitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if ((bitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (base.syncThread)  				base.Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (base.readThreadContinue) {  	if (!base.isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (base.syncThread)  			base.ftStatus = base.GetPinStates (ref bitMode);  		if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  			if ((bitMode & 0x80) == 0x80)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if ((bitMode & 0x40) == 0x40)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if ((bitMode & 0x20) == 0x20)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if ((bitMode & 0x10) == 0x10)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if ((bitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if ((bitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if ((bitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if ((bitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (base.syncThread)  				base.Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: while (base.readThreadContinue) {  	if (!base.isInitialized) {  		Application.DoEvents ();  		Thread.Sleep (10);  	}  	else {  		lock (base.syncThread)  			base.ftStatus = base.GetPinStates (ref bitMode);  		if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  			if ((bitMode & 0x80) == 0x80)  				OnIo7Changed (true);  			else  				OnIo7Changed (false);  			if ((bitMode & 0x40) == 0x40)  				OnIo6Changed (true);  			else  				OnIo6Changed (false);  			if ((bitMode & 0x20) == 0x20)  				OnIo5Changed (true);  			else  				OnIo5Changed (false);  			if ((bitMode & 0x10) == 0x10)  				OnIo4Changed (true);  			else  				OnIo4Changed (false);  			if ((bitMode & 8) == 8)  				OnIo3Changed (true);  			else  				OnIo3Changed (false);  			if ((bitMode & 4) == 4)  				OnIo2Changed (true);  			else  				OnIo2Changed (false);  			if ((bitMode & 2) == 2)  				OnIo1Changed (true);  			else  				OnIo1Changed (false);  			if ((bitMode & 1) == 1)  				OnIo0Changed (true);  			else  				OnIo0Changed (false);  		}  		else {  			lock (base.syncThread)  				base.Close ();  		}  		Thread.Sleep (0);  	}  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!base.isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (base.syncThread)  		base.ftStatus = base.GetPinStates (ref bitMode);  	if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  		if ((bitMode & 0x80) == 0x80)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if ((bitMode & 0x40) == 0x40)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if ((bitMode & 0x20) == 0x20)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if ((bitMode & 0x10) == 0x10)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if ((bitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if ((bitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if ((bitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if ((bitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (base.syncThread)  			base.Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!base.isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (base.syncThread)  		base.ftStatus = base.GetPinStates (ref bitMode);  	if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  		if ((bitMode & 0x80) == 0x80)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if ((bitMode & 0x40) == 0x40)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if ((bitMode & 0x20) == 0x20)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if ((bitMode & 0x10) == 0x10)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if ((bitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if ((bitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if ((bitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if ((bitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (base.syncThread)  			base.Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!base.isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (base.syncThread)  		base.ftStatus = base.GetPinStates (ref bitMode);  	if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  		if ((bitMode & 0x80) == 0x80)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if ((bitMode & 0x40) == 0x40)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if ((bitMode & 0x20) == 0x20)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if ((bitMode & 0x10) == 0x10)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if ((bitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if ((bitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if ((bitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if ((bitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (base.syncThread)  			base.Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!base.isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (base.syncThread)  		base.ftStatus = base.GetPinStates (ref bitMode);  	if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  		if ((bitMode & 0x80) == 0x80)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if ((bitMode & 0x40) == 0x40)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if ((bitMode & 0x20) == 0x20)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if ((bitMode & 0x10) == 0x10)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if ((bitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if ((bitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if ((bitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if ((bitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (base.syncThread)  			base.Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!base.isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (base.syncThread)  		base.ftStatus = base.GetPinStates (ref bitMode);  	if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  		if ((bitMode & 0x80) == 0x80)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if ((bitMode & 0x40) == 0x40)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if ((bitMode & 0x20) == 0x20)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if ((bitMode & 0x10) == 0x10)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if ((bitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if ((bitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if ((bitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if ((bitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (base.syncThread)  			base.Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!base.isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (base.syncThread)  		base.ftStatus = base.GetPinStates (ref bitMode);  	if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  		if ((bitMode & 0x80) == 0x80)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if ((bitMode & 0x40) == 0x40)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if ((bitMode & 0x20) == 0x20)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if ((bitMode & 0x10) == 0x10)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if ((bitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if ((bitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if ((bitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if ((bitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (base.syncThread)  			base.Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (!base.isInitialized) {  	Application.DoEvents ();  	Thread.Sleep (10);  }  else {  	lock (base.syncThread)  		base.ftStatus = base.GetPinStates (ref bitMode);  	if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  		if ((bitMode & 0x80) == 0x80)  			OnIo7Changed (true);  		else  			OnIo7Changed (false);  		if ((bitMode & 0x40) == 0x40)  			OnIo6Changed (true);  		else  			OnIo6Changed (false);  		if ((bitMode & 0x20) == 0x20)  			OnIo5Changed (true);  		else  			OnIo5Changed (false);  		if ((bitMode & 0x10) == 0x10)  			OnIo4Changed (true);  		else  			OnIo4Changed (false);  		if ((bitMode & 8) == 8)  			OnIo3Changed (true);  		else  			OnIo3Changed (false);  		if ((bitMode & 4) == 4)  			OnIo2Changed (true);  		else  			OnIo2Changed (false);  		if ((bitMode & 2) == 2)  			OnIo1Changed (true);  		else  			OnIo1Changed (false);  		if ((bitMode & 1) == 1)  			OnIo0Changed (true);  		else  			OnIo0Changed (false);  	}  	else {  		lock (base.syncThread)  			base.Close ();  	}  	Thread.Sleep (0);  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  	if ((bitMode & 0x80) == 0x80)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if ((bitMode & 0x40) == 0x40)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if ((bitMode & 0x20) == 0x20)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if ((bitMode & 0x10) == 0x10)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if ((bitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if ((bitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if ((bitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if ((bitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (base.syncThread)  		base.Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  	if ((bitMode & 0x80) == 0x80)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if ((bitMode & 0x40) == 0x40)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if ((bitMode & 0x20) == 0x20)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if ((bitMode & 0x10) == 0x10)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if ((bitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if ((bitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if ((bitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if ((bitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (base.syncThread)  		base.Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  	if ((bitMode & 0x80) == 0x80)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if ((bitMode & 0x40) == 0x40)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if ((bitMode & 0x20) == 0x20)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if ((bitMode & 0x10) == 0x10)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if ((bitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if ((bitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if ((bitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if ((bitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (base.syncThread)  		base.Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  	if ((bitMode & 0x80) == 0x80)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if ((bitMode & 0x40) == 0x40)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if ((bitMode & 0x20) == 0x20)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if ((bitMode & 0x10) == 0x10)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if ((bitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if ((bitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if ((bitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if ((bitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (base.syncThread)  		base.Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  	if ((bitMode & 0x80) == 0x80)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if ((bitMode & 0x40) == 0x40)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if ((bitMode & 0x20) == 0x20)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if ((bitMode & 0x10) == 0x10)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if ((bitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if ((bitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if ((bitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if ((bitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (base.syncThread)  		base.Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if (base.ftStatus == FTDI.FT_STATUS.FT_OK) {  	if ((bitMode & 0x80) == 0x80)  		OnIo7Changed (true);  	else  		OnIo7Changed (false);  	if ((bitMode & 0x40) == 0x40)  		OnIo6Changed (true);  	else  		OnIo6Changed (false);  	if ((bitMode & 0x20) == 0x20)  		OnIo5Changed (true);  	else  		OnIo5Changed (false);  	if ((bitMode & 0x10) == 0x10)  		OnIo4Changed (true);  	else  		OnIo4Changed (false);  	if ((bitMode & 8) == 8)  		OnIo3Changed (true);  	else  		OnIo3Changed (false);  	if ((bitMode & 4) == 4)  		OnIo2Changed (true);  	else  		OnIo2Changed (false);  	if ((bitMode & 2) == 2)  		OnIo1Changed (true);  	else  		OnIo1Changed (false);  	if ((bitMode & 1) == 1)  		OnIo0Changed (true);  	else  		OnIo0Changed (false);  }  else {  	lock (base.syncThread)  		base.Close ();  }  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if ((bitMode & 8) == 8)  	OnIo3Changed (true);  else  	OnIo3Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if ((bitMode & 8) == 8)  	OnIo3Changed (true);  else  	OnIo3Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if ((bitMode & 4) == 4)  	OnIo2Changed (true);  else  	OnIo2Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if ((bitMode & 4) == 4)  	OnIo2Changed (true);  else  	OnIo2Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if ((bitMode & 2) == 2)  	OnIo1Changed (true);  else  	OnIo1Changed (false);  
Magic Number,SemtechLib.Ftdi,IoPort,C:\repos\x893_SX1231\SemtechLib\Ftdi\IoPort.cs,ReadThread,The following statement contains a magic number: if ((bitMode & 2) == 2)  	OnIo1Changed (true);  else  	OnIo1Changed (false);  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: if ((bitCount - 1) == 0) {  	base.txBuffer.Add (0x27);  	base.txBuffer.Add (0);  }  else {  	int num = bitCount / 8;  	if (num > 0) {  		base.txBuffer.Add (0x25);  		base.txBuffer.Add ((byte)((num - 1) & 0xff));  		base.txBuffer.Add ((byte)(((num - 1) >> 8) & 0xff));  	}  	num = bitCount % 8;  	if (num > 0) {  		base.txBuffer.Add (0x27);  		base.txBuffer.Add ((byte)((num - 1) & 0xff));  	}  }  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: if ((bitCount - 1) == 0) {  	base.txBuffer.Add (0x27);  	base.txBuffer.Add (0);  }  else {  	int num = bitCount / 8;  	if (num > 0) {  		base.txBuffer.Add (0x25);  		base.txBuffer.Add ((byte)((num - 1) & 0xff));  		base.txBuffer.Add ((byte)(((num - 1) >> 8) & 0xff));  	}  	num = bitCount % 8;  	if (num > 0) {  		base.txBuffer.Add (0x27);  		base.txBuffer.Add ((byte)((num - 1) & 0xff));  	}  }  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: if ((bitCount - 1) == 0) {  	base.txBuffer.Add (0x27);  	base.txBuffer.Add (0);  }  else {  	int num = bitCount / 8;  	if (num > 0) {  		base.txBuffer.Add (0x25);  		base.txBuffer.Add ((byte)((num - 1) & 0xff));  		base.txBuffer.Add ((byte)(((num - 1) >> 8) & 0xff));  	}  	num = bitCount % 8;  	if (num > 0) {  		base.txBuffer.Add (0x27);  		base.txBuffer.Add ((byte)((num - 1) & 0xff));  	}  }  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: if (num > 0) {  	base.txBuffer.Add (0x25);  	base.txBuffer.Add ((byte)((num - 1) & 0xff));  	base.txBuffer.Add ((byte)(((num - 1) >> 8) & 0xff));  }  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: base.txBuffer.Add ((byte)(((num - 1) >> 8) & 0xff));  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseI2C.cs,ScanIn,The following statement contains a magic number: num = bitCount % 8;  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseI2C.cs,ScanOut,The following statement contains a magic number: if (num > 0) {  	base.txBuffer.Add (0x11);  	base.txBuffer.Add ((byte)((num - 1) & 0xff));  	base.txBuffer.Add ((byte)(((num - 1) >> 8) & 0xff));  	for (int i = 0; i < num; i++) {  		base.txBuffer.Add (data [i]);  	}  }  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseI2C.cs,ScanOut,The following statement contains a magic number: base.txBuffer.Add ((byte)(((num - 1) >> 8) & 0xff));  
Magic Number,SemtechLib.Ftdi,MpsseI2C,C:\repos\x893_SX1231\SemtechLib\Ftdi\MpsseI2C.cs,ScanOut,The following statement contains a magic number: num = bitCount % 8;  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawHorizontalTicks,The following statement contains a magic number: ef2.Offset (0f' (float)(ThumbBounds.Height + 6));  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawHorizontalTicks,The following statement contains a magic number: ef3.Offset (0f' (float)(ThumbBounds.Height + 6));  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: if (ThumbState == 3 || !base.Enabled)  	ControlPaint.DrawButton (g' ThumbBounds' ButtonState.All);  else  	g.Clear (SystemColors.Control);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: pointArray2 = new Point[] {  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: pointArray2 = new Point[] {  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: pointArray2 = new Point[] {  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: points [2].Offset (1' 1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: points [3].Offset (-1' 1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: points [4].Offset (-1' 0);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: points [5] = points [0];  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: pointArray2 = new Point[] {  	points [0]'  	points [1]'  	points [2]'  	points [3]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: pointArray2 = new Point[] {  	points [0]'  	points [1]'  	points [2]'  	points [3]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: pointArray2 = new Point[] {  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: pointArray2 = new Point[] {  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerDown,The following statement contains a magic number: pointArray2 = new Point[] {  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: if ((ThumbState == 3) || !base.Enabled)  	ControlPaint.DrawButton (g' ThumbBounds' ButtonState.All);  else  	g.Clear (SystemColors.Control);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: points [2].Offset (-1' 1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: points [3].Offset (-1' -1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: points [4].Offset (0' -1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: points [5] = points [0];  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: pointArray2 = new Point[] {  	points [0]'  	points [1]'  	points [2]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerLeft,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: if ((ThumbState == 3) || !base.Enabled)  	ControlPaint.DrawButton (g' ThumbBounds' ButtonState.All);  else  	g.Clear (SystemColors.Control);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: pointArray2 = new Point[] {  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: pointArray2 = new Point[] {  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: pointArray2 = new Point[] {  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: points [2].Offset (0' 1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: points [3].Offset (-1' 0);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: points [4].Offset (0' -1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: points [5] = points [0];  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: pointArray2 = new Point[] {  	points [0]'  	points [1]'  	points [2]'  	points [3]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: pointArray2 = new Point[] {  	points [0]'  	points [1]'  	points [2]'  	points [3]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: pointArray2 = new Point[] {  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: pointArray2 = new Point[] {  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerRight,The following statement contains a magic number: pointArray2 = new Point[] {  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: if ((ThumbState == 3) || !base.Enabled)  	ControlPaint.DrawButton (g' ThumbBounds' ButtonState.All);  else  	g.Clear (SystemColors.Control);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: points [2].Offset (0' 1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: points [3].Offset (-1' 0);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: points [4].Offset (-1' -1);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: points [5] = points [0];  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: pointArray2 = new Point[] {  	points [0]'  	points [1]'  	points [2]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawPointerUp,The following statement contains a magic number: pointArray2 = new Point[] {  	points [2]'  	points [3]'  	points [4]'  	points [5]  };  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawVerticalTicks,The following statement contains a magic number: ef2.Offset ((float)(ThumbBounds.Width + 6)' 0f);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,DrawVerticalTicks,The following statement contains a magic number: ef3.Offset ((float)(ThumbBounds.Width + 6)' 0f);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The following statement contains a magic number: if (((OwnerDrawParts & TrackBarOwnerDrawParts.Thumb) == TrackBarOwnerDrawParts.Thumb) && !base.DesignMode) {  	TrackBarDrawItemEventArgs e = new TrackBarDrawItemEventArgs (graphics' ThumbBounds' (TrackBarItemState)ThumbState);  	if (DrawThumb != null)  		DrawThumb (this' e);  }  else {  	Fusionbird.FusionToolkit.NativeMethods.TrackBarParts parts = Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMB;  	if (ThumbBounds.Equals (Rectangle.Empty))  		return;  	switch (base.TickStyle) {  	case TickStyle.None:  	case TickStyle.BottomRight:  		parts = (base.Orientation != Orientation.Horizontal) ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBRIGHT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBBOTTOM;  		break;  	case TickStyle.TopLeft:  		parts = (base.Orientation != Orientation.Horizontal) ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBLEFT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBTOP;  		break;  	case TickStyle.Both:  		parts = (base.Orientation != Orientation.Horizontal) ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBVERT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMB;  		break;  	}  	if (VisualStyleRenderer.IsSupported) {  		new VisualStyleRenderer ("TRACKBAR"' (int)parts' ThumbState).DrawBackground (graphics' ThumbBounds);  		graphics.ResetClip ();  		graphics.Dispose ();  		return;  	}  	switch (parts) {  	case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBBOTTOM:  		DrawPointerDown (graphics);  		break;  	case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBTOP:  		DrawPointerUp (graphics);  		break;  	case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBLEFT:  		DrawPointerLeft (graphics);  		break;  	case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBRIGHT:  		DrawPointerRight (graphics);  		break;  	default:  		if (ThumbState == 3 || !base.Enabled)  			ControlPaint.DrawButton (graphics' ThumbBounds' ButtonState.All);  		else  			graphics.FillRectangle (SystemBrushes.Control' ThumbBounds);  		ControlPaint.DrawBorder3D (graphics' ThumbBounds' Border3DStyle.Raised);  		break;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The following statement contains a magic number: switch (parts) {  case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBBOTTOM:  	DrawPointerDown (graphics);  	break;  case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBTOP:  	DrawPointerUp (graphics);  	break;  case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBLEFT:  	DrawPointerLeft (graphics);  	break;  case Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBRIGHT:  	DrawPointerRight (graphics);  	break;  default:  	if (ThumbState == 3 || !base.Enabled)  		ControlPaint.DrawButton (graphics' ThumbBounds' ButtonState.All);  	else  		graphics.FillRectangle (SystemBrushes.Control' ThumbBounds);  	ControlPaint.DrawBorder3D (graphics' ThumbBounds' Border3DStyle.Raised);  	break;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The following statement contains a magic number: if (ThumbState == 3 || !base.Enabled)  	ControlPaint.DrawButton (graphics' ThumbBounds' ButtonState.All);  else  	graphics.FillRectangle (SystemBrushes.Control' ThumbBounds);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawTicks,The following statement contains a magic number: if (((OwnerDrawParts & TrackBarOwnerDrawParts.Ticks) == TrackBarOwnerDrawParts.Ticks) && !base.DesignMode) {  	TrackBarDrawItemEventArgs e = new TrackBarDrawItemEventArgs (graphics' base.ClientRectangle' (TrackBarItemState)ThumbState);  	if (DrawTicks != null)  		DrawTicks (this' e);  }  else {  	if (base.TickStyle == TickStyle.None)  		return;  	if (ThumbBounds.Equals (Rectangle.Empty))  		return;  	Color black = Color.Black;  	if (VisualStyleRenderer.IsSupported)  		black = new VisualStyleRenderer ("TRACKBAR"' 9' ThumbState).GetColor (ColorProperty.TextColor);  	if (base.Orientation == Orientation.Horizontal)  		DrawHorizontalTicks (graphics' black);  	else  		DrawVerticalTicks (graphics' black);  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawTicks,The following statement contains a magic number: if (VisualStyleRenderer.IsSupported)  	black = new VisualStyleRenderer ("TRACKBAR"' 9' ThumbState).GetColor (ColorProperty.TextColor);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawTicks,The following statement contains a magic number: black = new VisualStyleRenderer ("TRACKBAR"' 9' ThumbState).GetColor (ColorProperty.TextColor);  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20)  	m.Result = IntPtr.Zero;  else {  	base.WndProc (ref m);  	if (m.Msg == 0x204e) {  		Fusionbird.FusionToolkit.NativeMethods.NMHDR structure = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  		if (structure.code == -12) {  			IntPtr ptr;  			Marshal.StructureToPtr (structure' m.LParam' false);  			Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  			if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  				Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  				PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  				e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  				base.InvokePaintBackground (base.Parent' e);  				base.InvokePaint (base.Parent' e);  				SolidBrush brush = new SolidBrush (BackColor);  				e.Graphics.FillRectangle (brush' base.Bounds);  				brush.Dispose ();  				e.Graphics.ResetTransform ();  				e.Dispose ();  				graphics.Dispose ();  				ptr = new IntPtr (0x30);  				m.Result = ptr;  			}  			else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  				OnDrawTicks (nmcustomdraw.hdc);  				OnDrawChannel (nmcustomdraw.hdc);  				OnDrawThumb (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  				if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  					ThumbBounds = nmcustomdraw.rc.ToRectangle ();  					if (base.Enabled) {  						if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  							ThumbState = 3;  						else  							ThumbState = 1;  					}  					else {  						ThumbState = 5;  					}  					OnDrawThumb (nmcustomdraw.hdc);  				}  				else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  					ChannelBounds = nmcustomdraw.rc.ToRectangle ();  					OnDrawChannel (nmcustomdraw.hdc);  				}  				else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  					OnDrawTicks (nmcustomdraw.hdc);  				}  				ptr = new IntPtr (4);  				m.Result = ptr;  			}  		}  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20)  	m.Result = IntPtr.Zero;  else {  	base.WndProc (ref m);  	if (m.Msg == 0x204e) {  		Fusionbird.FusionToolkit.NativeMethods.NMHDR structure = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  		if (structure.code == -12) {  			IntPtr ptr;  			Marshal.StructureToPtr (structure' m.LParam' false);  			Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  			if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  				Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  				PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  				e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  				base.InvokePaintBackground (base.Parent' e);  				base.InvokePaint (base.Parent' e);  				SolidBrush brush = new SolidBrush (BackColor);  				e.Graphics.FillRectangle (brush' base.Bounds);  				brush.Dispose ();  				e.Graphics.ResetTransform ();  				e.Dispose ();  				graphics.Dispose ();  				ptr = new IntPtr (0x30);  				m.Result = ptr;  			}  			else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  				OnDrawTicks (nmcustomdraw.hdc);  				OnDrawChannel (nmcustomdraw.hdc);  				OnDrawThumb (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  				if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  					ThumbBounds = nmcustomdraw.rc.ToRectangle ();  					if (base.Enabled) {  						if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  							ThumbState = 3;  						else  							ThumbState = 1;  					}  					else {  						ThumbState = 5;  					}  					OnDrawThumb (nmcustomdraw.hdc);  				}  				else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  					ChannelBounds = nmcustomdraw.rc.ToRectangle ();  					OnDrawChannel (nmcustomdraw.hdc);  				}  				else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  					OnDrawTicks (nmcustomdraw.hdc);  				}  				ptr = new IntPtr (4);  				m.Result = ptr;  			}  		}  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20)  	m.Result = IntPtr.Zero;  else {  	base.WndProc (ref m);  	if (m.Msg == 0x204e) {  		Fusionbird.FusionToolkit.NativeMethods.NMHDR structure = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  		if (structure.code == -12) {  			IntPtr ptr;  			Marshal.StructureToPtr (structure' m.LParam' false);  			Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  			if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  				Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  				PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  				e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  				base.InvokePaintBackground (base.Parent' e);  				base.InvokePaint (base.Parent' e);  				SolidBrush brush = new SolidBrush (BackColor);  				e.Graphics.FillRectangle (brush' base.Bounds);  				brush.Dispose ();  				e.Graphics.ResetTransform ();  				e.Dispose ();  				graphics.Dispose ();  				ptr = new IntPtr (0x30);  				m.Result = ptr;  			}  			else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  				OnDrawTicks (nmcustomdraw.hdc);  				OnDrawChannel (nmcustomdraw.hdc);  				OnDrawThumb (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  				if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  					ThumbBounds = nmcustomdraw.rc.ToRectangle ();  					if (base.Enabled) {  						if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  							ThumbState = 3;  						else  							ThumbState = 1;  					}  					else {  						ThumbState = 5;  					}  					OnDrawThumb (nmcustomdraw.hdc);  				}  				else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  					ChannelBounds = nmcustomdraw.rc.ToRectangle ();  					OnDrawChannel (nmcustomdraw.hdc);  				}  				else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  					OnDrawTicks (nmcustomdraw.hdc);  				}  				ptr = new IntPtr (4);  				m.Result = ptr;  			}  		}  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20)  	m.Result = IntPtr.Zero;  else {  	base.WndProc (ref m);  	if (m.Msg == 0x204e) {  		Fusionbird.FusionToolkit.NativeMethods.NMHDR structure = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  		if (structure.code == -12) {  			IntPtr ptr;  			Marshal.StructureToPtr (structure' m.LParam' false);  			Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  			if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  				Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  				PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  				e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  				base.InvokePaintBackground (base.Parent' e);  				base.InvokePaint (base.Parent' e);  				SolidBrush brush = new SolidBrush (BackColor);  				e.Graphics.FillRectangle (brush' base.Bounds);  				brush.Dispose ();  				e.Graphics.ResetTransform ();  				e.Dispose ();  				graphics.Dispose ();  				ptr = new IntPtr (0x30);  				m.Result = ptr;  			}  			else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  				OnDrawTicks (nmcustomdraw.hdc);  				OnDrawChannel (nmcustomdraw.hdc);  				OnDrawThumb (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  				if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  					ThumbBounds = nmcustomdraw.rc.ToRectangle ();  					if (base.Enabled) {  						if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  							ThumbState = 3;  						else  							ThumbState = 1;  					}  					else {  						ThumbState = 5;  					}  					OnDrawThumb (nmcustomdraw.hdc);  				}  				else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  					ChannelBounds = nmcustomdraw.rc.ToRectangle ();  					OnDrawChannel (nmcustomdraw.hdc);  				}  				else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  					OnDrawTicks (nmcustomdraw.hdc);  				}  				ptr = new IntPtr (4);  				m.Result = ptr;  			}  		}  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20)  	m.Result = IntPtr.Zero;  else {  	base.WndProc (ref m);  	if (m.Msg == 0x204e) {  		Fusionbird.FusionToolkit.NativeMethods.NMHDR structure = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  		if (structure.code == -12) {  			IntPtr ptr;  			Marshal.StructureToPtr (structure' m.LParam' false);  			Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  			if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  				Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  				PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  				e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  				base.InvokePaintBackground (base.Parent' e);  				base.InvokePaint (base.Parent' e);  				SolidBrush brush = new SolidBrush (BackColor);  				e.Graphics.FillRectangle (brush' base.Bounds);  				brush.Dispose ();  				e.Graphics.ResetTransform ();  				e.Dispose ();  				graphics.Dispose ();  				ptr = new IntPtr (0x30);  				m.Result = ptr;  			}  			else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  				OnDrawTicks (nmcustomdraw.hdc);  				OnDrawChannel (nmcustomdraw.hdc);  				OnDrawThumb (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  				if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  					ThumbBounds = nmcustomdraw.rc.ToRectangle ();  					if (base.Enabled) {  						if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  							ThumbState = 3;  						else  							ThumbState = 1;  					}  					else {  						ThumbState = 5;  					}  					OnDrawThumb (nmcustomdraw.hdc);  				}  				else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  					ChannelBounds = nmcustomdraw.rc.ToRectangle ();  					OnDrawChannel (nmcustomdraw.hdc);  				}  				else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  					OnDrawTicks (nmcustomdraw.hdc);  				}  				ptr = new IntPtr (4);  				m.Result = ptr;  			}  		}  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20)  	m.Result = IntPtr.Zero;  else {  	base.WndProc (ref m);  	if (m.Msg == 0x204e) {  		Fusionbird.FusionToolkit.NativeMethods.NMHDR structure = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  		if (structure.code == -12) {  			IntPtr ptr;  			Marshal.StructureToPtr (structure' m.LParam' false);  			Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  			if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  				Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  				PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  				e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  				base.InvokePaintBackground (base.Parent' e);  				base.InvokePaint (base.Parent' e);  				SolidBrush brush = new SolidBrush (BackColor);  				e.Graphics.FillRectangle (brush' base.Bounds);  				brush.Dispose ();  				e.Graphics.ResetTransform ();  				e.Dispose ();  				graphics.Dispose ();  				ptr = new IntPtr (0x30);  				m.Result = ptr;  			}  			else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  				OnDrawTicks (nmcustomdraw.hdc);  				OnDrawChannel (nmcustomdraw.hdc);  				OnDrawThumb (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  				if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  					ThumbBounds = nmcustomdraw.rc.ToRectangle ();  					if (base.Enabled) {  						if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  							ThumbState = 3;  						else  							ThumbState = 1;  					}  					else {  						ThumbState = 5;  					}  					OnDrawThumb (nmcustomdraw.hdc);  				}  				else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  					ChannelBounds = nmcustomdraw.rc.ToRectangle ();  					OnDrawChannel (nmcustomdraw.hdc);  				}  				else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  					OnDrawTicks (nmcustomdraw.hdc);  				}  				ptr = new IntPtr (4);  				m.Result = ptr;  			}  		}  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 20)  	m.Result = IntPtr.Zero;  else {  	base.WndProc (ref m);  	if (m.Msg == 0x204e) {  		Fusionbird.FusionToolkit.NativeMethods.NMHDR structure = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  		if (structure.code == -12) {  			IntPtr ptr;  			Marshal.StructureToPtr (structure' m.LParam' false);  			Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  			if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  				Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  				PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  				e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  				base.InvokePaintBackground (base.Parent' e);  				base.InvokePaint (base.Parent' e);  				SolidBrush brush = new SolidBrush (BackColor);  				e.Graphics.FillRectangle (brush' base.Bounds);  				brush.Dispose ();  				e.Graphics.ResetTransform ();  				e.Dispose ();  				graphics.Dispose ();  				ptr = new IntPtr (0x30);  				m.Result = ptr;  			}  			else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  				OnDrawTicks (nmcustomdraw.hdc);  				OnDrawChannel (nmcustomdraw.hdc);  				OnDrawThumb (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  				if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  					ThumbBounds = nmcustomdraw.rc.ToRectangle ();  					if (base.Enabled) {  						if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  							ThumbState = 3;  						else  							ThumbState = 1;  					}  					else {  						ThumbState = 5;  					}  					OnDrawThumb (nmcustomdraw.hdc);  				}  				else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  					ChannelBounds = nmcustomdraw.rc.ToRectangle ();  					OnDrawChannel (nmcustomdraw.hdc);  				}  				else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  					OnDrawTicks (nmcustomdraw.hdc);  				}  				ptr = new IntPtr (4);  				m.Result = ptr;  			}  		}  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 0x204e) {  	Fusionbird.FusionToolkit.NativeMethods.NMHDR structure = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  	if (structure.code == -12) {  		IntPtr ptr;  		Marshal.StructureToPtr (structure' m.LParam' false);  		Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  		if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  			Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  			PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  			e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  			base.InvokePaintBackground (base.Parent' e);  			base.InvokePaint (base.Parent' e);  			SolidBrush brush = new SolidBrush (BackColor);  			e.Graphics.FillRectangle (brush' base.Bounds);  			brush.Dispose ();  			e.Graphics.ResetTransform ();  			e.Dispose ();  			graphics.Dispose ();  			ptr = new IntPtr (0x30);  			m.Result = ptr;  		}  		else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  			OnDrawTicks (nmcustomdraw.hdc);  			OnDrawChannel (nmcustomdraw.hdc);  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  			if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  				ThumbBounds = nmcustomdraw.rc.ToRectangle ();  				if (base.Enabled) {  					if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  						ThumbState = 3;  					else  						ThumbState = 1;  				}  				else {  					ThumbState = 5;  				}  				OnDrawThumb (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  				ChannelBounds = nmcustomdraw.rc.ToRectangle ();  				OnDrawChannel (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  				OnDrawTicks (nmcustomdraw.hdc);  			}  			ptr = new IntPtr (4);  			m.Result = ptr;  		}  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 0x204e) {  	Fusionbird.FusionToolkit.NativeMethods.NMHDR structure = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  	if (structure.code == -12) {  		IntPtr ptr;  		Marshal.StructureToPtr (structure' m.LParam' false);  		Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  		if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  			Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  			PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  			e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  			base.InvokePaintBackground (base.Parent' e);  			base.InvokePaint (base.Parent' e);  			SolidBrush brush = new SolidBrush (BackColor);  			e.Graphics.FillRectangle (brush' base.Bounds);  			brush.Dispose ();  			e.Graphics.ResetTransform ();  			e.Dispose ();  			graphics.Dispose ();  			ptr = new IntPtr (0x30);  			m.Result = ptr;  		}  		else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  			OnDrawTicks (nmcustomdraw.hdc);  			OnDrawChannel (nmcustomdraw.hdc);  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  			if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  				ThumbBounds = nmcustomdraw.rc.ToRectangle ();  				if (base.Enabled) {  					if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  						ThumbState = 3;  					else  						ThumbState = 1;  				}  				else {  					ThumbState = 5;  				}  				OnDrawThumb (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  				ChannelBounds = nmcustomdraw.rc.ToRectangle ();  				OnDrawChannel (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  				OnDrawTicks (nmcustomdraw.hdc);  			}  			ptr = new IntPtr (4);  			m.Result = ptr;  		}  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 0x204e) {  	Fusionbird.FusionToolkit.NativeMethods.NMHDR structure = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  	if (structure.code == -12) {  		IntPtr ptr;  		Marshal.StructureToPtr (structure' m.LParam' false);  		Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  		if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  			Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  			PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  			e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  			base.InvokePaintBackground (base.Parent' e);  			base.InvokePaint (base.Parent' e);  			SolidBrush brush = new SolidBrush (BackColor);  			e.Graphics.FillRectangle (brush' base.Bounds);  			brush.Dispose ();  			e.Graphics.ResetTransform ();  			e.Dispose ();  			graphics.Dispose ();  			ptr = new IntPtr (0x30);  			m.Result = ptr;  		}  		else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  			OnDrawTicks (nmcustomdraw.hdc);  			OnDrawChannel (nmcustomdraw.hdc);  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  			if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  				ThumbBounds = nmcustomdraw.rc.ToRectangle ();  				if (base.Enabled) {  					if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  						ThumbState = 3;  					else  						ThumbState = 1;  				}  				else {  					ThumbState = 5;  				}  				OnDrawThumb (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  				ChannelBounds = nmcustomdraw.rc.ToRectangle ();  				OnDrawChannel (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  				OnDrawTicks (nmcustomdraw.hdc);  			}  			ptr = new IntPtr (4);  			m.Result = ptr;  		}  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 0x204e) {  	Fusionbird.FusionToolkit.NativeMethods.NMHDR structure = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  	if (structure.code == -12) {  		IntPtr ptr;  		Marshal.StructureToPtr (structure' m.LParam' false);  		Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  		if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  			Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  			PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  			e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  			base.InvokePaintBackground (base.Parent' e);  			base.InvokePaint (base.Parent' e);  			SolidBrush brush = new SolidBrush (BackColor);  			e.Graphics.FillRectangle (brush' base.Bounds);  			brush.Dispose ();  			e.Graphics.ResetTransform ();  			e.Dispose ();  			graphics.Dispose ();  			ptr = new IntPtr (0x30);  			m.Result = ptr;  		}  		else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  			OnDrawTicks (nmcustomdraw.hdc);  			OnDrawChannel (nmcustomdraw.hdc);  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  			if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  				ThumbBounds = nmcustomdraw.rc.ToRectangle ();  				if (base.Enabled) {  					if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  						ThumbState = 3;  					else  						ThumbState = 1;  				}  				else {  					ThumbState = 5;  				}  				OnDrawThumb (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  				ChannelBounds = nmcustomdraw.rc.ToRectangle ();  				OnDrawChannel (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  				OnDrawTicks (nmcustomdraw.hdc);  			}  			ptr = new IntPtr (4);  			m.Result = ptr;  		}  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 0x204e) {  	Fusionbird.FusionToolkit.NativeMethods.NMHDR structure = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  	if (structure.code == -12) {  		IntPtr ptr;  		Marshal.StructureToPtr (structure' m.LParam' false);  		Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  		if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  			Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  			PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  			e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  			base.InvokePaintBackground (base.Parent' e);  			base.InvokePaint (base.Parent' e);  			SolidBrush brush = new SolidBrush (BackColor);  			e.Graphics.FillRectangle (brush' base.Bounds);  			brush.Dispose ();  			e.Graphics.ResetTransform ();  			e.Dispose ();  			graphics.Dispose ();  			ptr = new IntPtr (0x30);  			m.Result = ptr;  		}  		else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  			OnDrawTicks (nmcustomdraw.hdc);  			OnDrawChannel (nmcustomdraw.hdc);  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  			if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  				ThumbBounds = nmcustomdraw.rc.ToRectangle ();  				if (base.Enabled) {  					if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  						ThumbState = 3;  					else  						ThumbState = 1;  				}  				else {  					ThumbState = 5;  				}  				OnDrawThumb (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  				ChannelBounds = nmcustomdraw.rc.ToRectangle ();  				OnDrawChannel (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  				OnDrawTicks (nmcustomdraw.hdc);  			}  			ptr = new IntPtr (4);  			m.Result = ptr;  		}  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (m.Msg == 0x204e) {  	Fusionbird.FusionToolkit.NativeMethods.NMHDR structure = (Fusionbird.FusionToolkit.NativeMethods.NMHDR)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMHDR));  	if (structure.code == -12) {  		IntPtr ptr;  		Marshal.StructureToPtr (structure' m.LParam' false);  		Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  		if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  			Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  			PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  			e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  			base.InvokePaintBackground (base.Parent' e);  			base.InvokePaint (base.Parent' e);  			SolidBrush brush = new SolidBrush (BackColor);  			e.Graphics.FillRectangle (brush' base.Bounds);  			brush.Dispose ();  			e.Graphics.ResetTransform ();  			e.Dispose ();  			graphics.Dispose ();  			ptr = new IntPtr (0x30);  			m.Result = ptr;  		}  		else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  			OnDrawTicks (nmcustomdraw.hdc);  			OnDrawChannel (nmcustomdraw.hdc);  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  			if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  				ThumbBounds = nmcustomdraw.rc.ToRectangle ();  				if (base.Enabled) {  					if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  						ThumbState = 3;  					else  						ThumbState = 1;  				}  				else {  					ThumbState = 5;  				}  				OnDrawThumb (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  				ChannelBounds = nmcustomdraw.rc.ToRectangle ();  				OnDrawChannel (nmcustomdraw.hdc);  			}  			else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  				OnDrawTicks (nmcustomdraw.hdc);  			}  			ptr = new IntPtr (4);  			m.Result = ptr;  		}  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (structure.code == -12) {  	IntPtr ptr;  	Marshal.StructureToPtr (structure' m.LParam' false);  	Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  	if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  		Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  		PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  		e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  		base.InvokePaintBackground (base.Parent' e);  		base.InvokePaint (base.Parent' e);  		SolidBrush brush = new SolidBrush (BackColor);  		e.Graphics.FillRectangle (brush' base.Bounds);  		brush.Dispose ();  		e.Graphics.ResetTransform ();  		e.Dispose ();  		graphics.Dispose ();  		ptr = new IntPtr (0x30);  		m.Result = ptr;  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  		OnDrawTicks (nmcustomdraw.hdc);  		OnDrawChannel (nmcustomdraw.hdc);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  		if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  			ThumbBounds = nmcustomdraw.rc.ToRectangle ();  			if (base.Enabled) {  				if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  					ThumbState = 3;  				else  					ThumbState = 1;  			}  			else {  				ThumbState = 5;  			}  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  			ChannelBounds = nmcustomdraw.rc.ToRectangle ();  			OnDrawChannel (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  			OnDrawTicks (nmcustomdraw.hdc);  		}  		ptr = new IntPtr (4);  		m.Result = ptr;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (structure.code == -12) {  	IntPtr ptr;  	Marshal.StructureToPtr (structure' m.LParam' false);  	Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  	if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  		Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  		PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  		e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  		base.InvokePaintBackground (base.Parent' e);  		base.InvokePaint (base.Parent' e);  		SolidBrush brush = new SolidBrush (BackColor);  		e.Graphics.FillRectangle (brush' base.Bounds);  		brush.Dispose ();  		e.Graphics.ResetTransform ();  		e.Dispose ();  		graphics.Dispose ();  		ptr = new IntPtr (0x30);  		m.Result = ptr;  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  		OnDrawTicks (nmcustomdraw.hdc);  		OnDrawChannel (nmcustomdraw.hdc);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  		if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  			ThumbBounds = nmcustomdraw.rc.ToRectangle ();  			if (base.Enabled) {  				if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  					ThumbState = 3;  				else  					ThumbState = 1;  			}  			else {  				ThumbState = 5;  			}  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  			ChannelBounds = nmcustomdraw.rc.ToRectangle ();  			OnDrawChannel (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  			OnDrawTicks (nmcustomdraw.hdc);  		}  		ptr = new IntPtr (4);  		m.Result = ptr;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (structure.code == -12) {  	IntPtr ptr;  	Marshal.StructureToPtr (structure' m.LParam' false);  	Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  	if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  		Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  		PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  		e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  		base.InvokePaintBackground (base.Parent' e);  		base.InvokePaint (base.Parent' e);  		SolidBrush brush = new SolidBrush (BackColor);  		e.Graphics.FillRectangle (brush' base.Bounds);  		brush.Dispose ();  		e.Graphics.ResetTransform ();  		e.Dispose ();  		graphics.Dispose ();  		ptr = new IntPtr (0x30);  		m.Result = ptr;  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  		OnDrawTicks (nmcustomdraw.hdc);  		OnDrawChannel (nmcustomdraw.hdc);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  		if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  			ThumbBounds = nmcustomdraw.rc.ToRectangle ();  			if (base.Enabled) {  				if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  					ThumbState = 3;  				else  					ThumbState = 1;  			}  			else {  				ThumbState = 5;  			}  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  			ChannelBounds = nmcustomdraw.rc.ToRectangle ();  			OnDrawChannel (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  			OnDrawTicks (nmcustomdraw.hdc);  		}  		ptr = new IntPtr (4);  		m.Result = ptr;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (structure.code == -12) {  	IntPtr ptr;  	Marshal.StructureToPtr (structure' m.LParam' false);  	Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  	if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  		Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  		PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  		e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  		base.InvokePaintBackground (base.Parent' e);  		base.InvokePaint (base.Parent' e);  		SolidBrush brush = new SolidBrush (BackColor);  		e.Graphics.FillRectangle (brush' base.Bounds);  		brush.Dispose ();  		e.Graphics.ResetTransform ();  		e.Dispose ();  		graphics.Dispose ();  		ptr = new IntPtr (0x30);  		m.Result = ptr;  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  		OnDrawTicks (nmcustomdraw.hdc);  		OnDrawChannel (nmcustomdraw.hdc);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  		if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  			ThumbBounds = nmcustomdraw.rc.ToRectangle ();  			if (base.Enabled) {  				if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  					ThumbState = 3;  				else  					ThumbState = 1;  			}  			else {  				ThumbState = 5;  			}  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  			ChannelBounds = nmcustomdraw.rc.ToRectangle ();  			OnDrawChannel (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  			OnDrawTicks (nmcustomdraw.hdc);  		}  		ptr = new IntPtr (4);  		m.Result = ptr;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (structure.code == -12) {  	IntPtr ptr;  	Marshal.StructureToPtr (structure' m.LParam' false);  	Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  	if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  		Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  		PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  		e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  		base.InvokePaintBackground (base.Parent' e);  		base.InvokePaint (base.Parent' e);  		SolidBrush brush = new SolidBrush (BackColor);  		e.Graphics.FillRectangle (brush' base.Bounds);  		brush.Dispose ();  		e.Graphics.ResetTransform ();  		e.Dispose ();  		graphics.Dispose ();  		ptr = new IntPtr (0x30);  		m.Result = ptr;  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  		OnDrawTicks (nmcustomdraw.hdc);  		OnDrawChannel (nmcustomdraw.hdc);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  		if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  			ThumbBounds = nmcustomdraw.rc.ToRectangle ();  			if (base.Enabled) {  				if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  					ThumbState = 3;  				else  					ThumbState = 1;  			}  			else {  				ThumbState = 5;  			}  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  			ChannelBounds = nmcustomdraw.rc.ToRectangle ();  			OnDrawChannel (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  			OnDrawTicks (nmcustomdraw.hdc);  		}  		ptr = new IntPtr (4);  		m.Result = ptr;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (structure.code == -12) {  	IntPtr ptr;  	Marshal.StructureToPtr (structure' m.LParam' false);  	Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW nmcustomdraw = (Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW)Marshal.PtrToStructure (m.LParam' typeof(Fusionbird.FusionToolkit.NativeMethods.NMCUSTOMDRAW));  	if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  		Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  		PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  		e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  		base.InvokePaintBackground (base.Parent' e);  		base.InvokePaint (base.Parent' e);  		SolidBrush brush = new SolidBrush (BackColor);  		e.Graphics.FillRectangle (brush' base.Bounds);  		brush.Dispose ();  		e.Graphics.ResetTransform ();  		e.Dispose ();  		graphics.Dispose ();  		ptr = new IntPtr (0x30);  		m.Result = ptr;  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  		OnDrawTicks (nmcustomdraw.hdc);  		OnDrawChannel (nmcustomdraw.hdc);  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  		if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  			ThumbBounds = nmcustomdraw.rc.ToRectangle ();  			if (base.Enabled) {  				if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  					ThumbState = 3;  				else  					ThumbState = 1;  			}  			else {  				ThumbState = 5;  			}  			OnDrawThumb (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  			ChannelBounds = nmcustomdraw.rc.ToRectangle ();  			OnDrawChannel (nmcustomdraw.hdc);  		}  		else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  			OnDrawTicks (nmcustomdraw.hdc);  		}  		ptr = new IntPtr (4);  		m.Result = ptr;  	}  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  	Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  	PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  	e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  	base.InvokePaintBackground (base.Parent' e);  	base.InvokePaint (base.Parent' e);  	SolidBrush brush = new SolidBrush (BackColor);  	e.Graphics.FillRectangle (brush' base.Bounds);  	brush.Dispose ();  	e.Graphics.ResetTransform ();  	e.Dispose ();  	graphics.Dispose ();  	ptr = new IntPtr (0x30);  	m.Result = ptr;  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		if (base.Enabled) {  			if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  				ThumbState = 3;  			else  				ThumbState = 1;  		}  		else {  			ThumbState = 5;  		}  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  		OnDrawTicks (nmcustomdraw.hdc);  	}  	ptr = new IntPtr (4);  	m.Result = ptr;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  	Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  	PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  	e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  	base.InvokePaintBackground (base.Parent' e);  	base.InvokePaint (base.Parent' e);  	SolidBrush brush = new SolidBrush (BackColor);  	e.Graphics.FillRectangle (brush' base.Bounds);  	brush.Dispose ();  	e.Graphics.ResetTransform ();  	e.Dispose ();  	graphics.Dispose ();  	ptr = new IntPtr (0x30);  	m.Result = ptr;  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		if (base.Enabled) {  			if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  				ThumbState = 3;  			else  				ThumbState = 1;  		}  		else {  			ThumbState = 5;  		}  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  		OnDrawTicks (nmcustomdraw.hdc);  	}  	ptr = new IntPtr (4);  	m.Result = ptr;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  	Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  	PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  	e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  	base.InvokePaintBackground (base.Parent' e);  	base.InvokePaint (base.Parent' e);  	SolidBrush brush = new SolidBrush (BackColor);  	e.Graphics.FillRectangle (brush' base.Bounds);  	brush.Dispose ();  	e.Graphics.ResetTransform ();  	e.Dispose ();  	graphics.Dispose ();  	ptr = new IntPtr (0x30);  	m.Result = ptr;  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		if (base.Enabled) {  			if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  				ThumbState = 3;  			else  				ThumbState = 1;  		}  		else {  			ThumbState = 5;  		}  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  		OnDrawTicks (nmcustomdraw.hdc);  	}  	ptr = new IntPtr (4);  	m.Result = ptr;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  	Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  	PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  	e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  	base.InvokePaintBackground (base.Parent' e);  	base.InvokePaint (base.Parent' e);  	SolidBrush brush = new SolidBrush (BackColor);  	e.Graphics.FillRectangle (brush' base.Bounds);  	brush.Dispose ();  	e.Graphics.ResetTransform ();  	e.Dispose ();  	graphics.Dispose ();  	ptr = new IntPtr (0x30);  	m.Result = ptr;  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		if (base.Enabled) {  			if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  				ThumbState = 3;  			else  				ThumbState = 1;  		}  		else {  			ThumbState = 5;  		}  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  		OnDrawTicks (nmcustomdraw.hdc);  	}  	ptr = new IntPtr (4);  	m.Result = ptr;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_PREPAINT) {  	Graphics graphics = Graphics.FromHdc (nmcustomdraw.hdc);  	PaintEventArgs e = new PaintEventArgs (graphics' base.Bounds);  	e.Graphics.TranslateTransform ((float)-base.Left' (float)-base.Top);  	base.InvokePaintBackground (base.Parent' e);  	base.InvokePaint (base.Parent' e);  	SolidBrush brush = new SolidBrush (BackColor);  	e.Graphics.FillRectangle (brush' base.Bounds);  	brush.Dispose ();  	e.Graphics.ResetTransform ();  	e.Dispose ();  	graphics.Dispose ();  	ptr = new IntPtr (0x30);  	m.Result = ptr;  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		if (base.Enabled) {  			if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  				ThumbState = 3;  			else  				ThumbState = 1;  		}  		else {  			ThumbState = 5;  		}  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  		OnDrawTicks (nmcustomdraw.hdc);  	}  	ptr = new IntPtr (4);  	m.Result = ptr;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		if (base.Enabled) {  			if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  				ThumbState = 3;  			else  				ThumbState = 1;  		}  		else {  			ThumbState = 5;  		}  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  		OnDrawTicks (nmcustomdraw.hdc);  	}  	ptr = new IntPtr (4);  	m.Result = ptr;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		if (base.Enabled) {  			if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  				ThumbState = 3;  			else  				ThumbState = 1;  		}  		else {  			ThumbState = 5;  		}  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  		OnDrawTicks (nmcustomdraw.hdc);  	}  	ptr = new IntPtr (4);  	m.Result = ptr;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		if (base.Enabled) {  			if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  				ThumbState = 3;  			else  				ThumbState = 1;  		}  		else {  			ThumbState = 5;  		}  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  		OnDrawTicks (nmcustomdraw.hdc);  	}  	ptr = new IntPtr (4);  	m.Result = ptr;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		if (base.Enabled) {  			if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  				ThumbState = 3;  			else  				ThumbState = 1;  		}  		else {  			ThumbState = 5;  		}  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  		OnDrawTicks (nmcustomdraw.hdc);  	}  	ptr = new IntPtr (4);  	m.Result = ptr;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_POSTPAINT) {  	OnDrawTicks (nmcustomdraw.hdc);  	OnDrawChannel (nmcustomdraw.hdc);  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		if (base.Enabled) {  			if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  				ThumbState = 3;  			else  				ThumbState = 1;  		}  		else {  			ThumbState = 5;  		}  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  		OnDrawTicks (nmcustomdraw.hdc);  	}  	ptr = new IntPtr (4);  	m.Result = ptr;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		if (base.Enabled) {  			if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  				ThumbState = 3;  			else  				ThumbState = 1;  		}  		else {  			ThumbState = 5;  		}  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  		OnDrawTicks (nmcustomdraw.hdc);  	}  	ptr = new IntPtr (4);  	m.Result = ptr;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		if (base.Enabled) {  			if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  				ThumbState = 3;  			else  				ThumbState = 1;  		}  		else {  			ThumbState = 5;  		}  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  		OnDrawTicks (nmcustomdraw.hdc);  	}  	ptr = new IntPtr (4);  	m.Result = ptr;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		if (base.Enabled) {  			if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  				ThumbState = 3;  			else  				ThumbState = 1;  		}  		else {  			ThumbState = 5;  		}  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  		OnDrawTicks (nmcustomdraw.hdc);  	}  	ptr = new IntPtr (4);  	m.Result = ptr;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		if (base.Enabled) {  			if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  				ThumbState = 3;  			else  				ThumbState = 1;  		}  		else {  			ThumbState = 5;  		}  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  		OnDrawTicks (nmcustomdraw.hdc);  	}  	ptr = new IntPtr (4);  	m.Result = ptr;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwDrawStage == Fusionbird.FusionToolkit.NativeMethods.CustomDrawDrawStage.CDDS_ITEMPREPAINT) {  	if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  		ThumbBounds = nmcustomdraw.rc.ToRectangle ();  		if (base.Enabled) {  			if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  				ThumbState = 3;  			else  				ThumbState = 1;  		}  		else {  			ThumbState = 5;  		}  		OnDrawThumb (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  		ChannelBounds = nmcustomdraw.rc.ToRectangle ();  		OnDrawChannel (nmcustomdraw.hdc);  	}  	else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  		OnDrawTicks (nmcustomdraw.hdc);  	}  	ptr = new IntPtr (4);  	m.Result = ptr;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  	ThumbBounds = nmcustomdraw.rc.ToRectangle ();  	if (base.Enabled) {  		if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  			ThumbState = 3;  		else  			ThumbState = 1;  	}  	else {  		ThumbState = 5;  	}  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  	ChannelBounds = nmcustomdraw.rc.ToRectangle ();  	OnDrawChannel (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  	OnDrawTicks (nmcustomdraw.hdc);  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  	ThumbBounds = nmcustomdraw.rc.ToRectangle ();  	if (base.Enabled) {  		if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  			ThumbState = 3;  		else  			ThumbState = 1;  	}  	else {  		ThumbState = 5;  	}  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  	ChannelBounds = nmcustomdraw.rc.ToRectangle ();  	OnDrawChannel (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  	OnDrawTicks (nmcustomdraw.hdc);  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  	ThumbBounds = nmcustomdraw.rc.ToRectangle ();  	if (base.Enabled) {  		if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  			ThumbState = 3;  		else  			ThumbState = 1;  	}  	else {  		ThumbState = 5;  	}  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  	ChannelBounds = nmcustomdraw.rc.ToRectangle ();  	OnDrawChannel (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  	OnDrawTicks (nmcustomdraw.hdc);  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwItemSpec.ToInt32 () == 2) {  	ThumbBounds = nmcustomdraw.rc.ToRectangle ();  	if (base.Enabled) {  		if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  			ThumbState = 3;  		else  			ThumbState = 1;  	}  	else {  		ThumbState = 5;  	}  	OnDrawThumb (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  	ChannelBounds = nmcustomdraw.rc.ToRectangle ();  	OnDrawChannel (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  	OnDrawTicks (nmcustomdraw.hdc);  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (base.Enabled) {  	if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  		ThumbState = 3;  	else  		ThumbState = 1;  }  else {  	ThumbState = 5;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (base.Enabled) {  	if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  		ThumbState = 3;  	else  		ThumbState = 1;  }  else {  	ThumbState = 5;  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.uItemState == Fusionbird.FusionToolkit.NativeMethods.CustomDrawItemState.CDIS_SELECTED)  	ThumbState = 3;  else  	ThumbState = 1;  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: ThumbState = 3;  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: ThumbState = 5;  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: if (nmcustomdraw.dwItemSpec.ToInt32 () == 3) {  	ChannelBounds = nmcustomdraw.rc.ToRectangle ();  	OnDrawChannel (nmcustomdraw.hdc);  }  else if (nmcustomdraw.dwItemSpec.ToInt32 () == 1) {  	OnDrawTicks (nmcustomdraw.hdc);  }  
Magic Number,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,WndProc,The following statement contains a magic number: ptr = new IntPtr (4);  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,HexBox,The following statement contains a magic number: this._thumbTrackTimer.Interval = 50;  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,_vScrollBar_Scroll,The following statement contains a magic number: switch (e.Type) {  case ScrollEventType.SmallDecrement:  	this.PerformScrollLineUp ();  	break;  case ScrollEventType.SmallIncrement:  	this.PerformScrollLineDown ();  	break;  case ScrollEventType.LargeDecrement:  	this.PerformScrollPageUp ();  	break;  case ScrollEventType.LargeIncrement:  	this.PerformScrollPageDown ();  	break;  case ScrollEventType.ThumbPosition: {  	long pos = this.FromScrollPos (e.NewValue);  	this.PerformScrollThumpPosition (pos);  	break;  }  case ScrollEventType.ThumbTrack: {  	if (this._thumbTrackTimer.Enabled) {  		this._thumbTrackTimer.Enabled = false;  	}  	int tickCount = Environment.TickCount;  	if ((tickCount - this._lastThumbtrack) > 50) {  		this.PerformScrollThumbTrack (null' null);  		this._lastThumbtrack = tickCount;  	}  	else {  		this._thumbTrackPosition = this.FromScrollPos (e.NewValue);  		this._thumbTrackTimer.Enabled = true;  	}  	break;  }  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,_vScrollBar_Scroll,The following statement contains a magic number: if ((tickCount - this._lastThumbtrack) > 50) {  	this.PerformScrollThumbTrack (null' null);  	this._lastThumbtrack = tickCount;  }  else {  	this._thumbTrackPosition = this.FromScrollPos (e.NewValue);  	this._thumbTrackTimer.Enabled = true;  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,FromScrollPos,The following statement contains a magic number: return (long)((int)Math.Floor ((double)((((double)this._scrollVmax) / 100.0) * num2)));  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (((this._keyInterpreter != null) && this.Focused) && ((this._bytePos != -1L) && base.Enabled)) {  	if (this._keyInterpreter.GetType () == typeof(KeyInterpreter)) {  		if (this._selectionLength != 0L) {  			int num = this._recStringView.Width - ((int)this._charSize.Width);  			Point gridBytePoint = this.GetGridBytePoint (this._bytePos - this._startByte);  			PointF byteStringPointF = this.GetByteStringPointF (gridBytePoint);  			Point gp = this.GetGridBytePoint (((this._bytePos - this._startByte) + this._selectionLength) - 1L);  			PointF tf3 = this.GetByteStringPointF (gp);  			int num2 = gp.Y - gridBytePoint.Y;  			if (num2 != 0) {  				Rectangle rec = new Rectangle ((int)byteStringPointF.X' (int)byteStringPointF.Y' (int)(((this._recStringView.X + num) - byteStringPointF.X) + this._charSize.Width)' (int)this._charSize.Height);  				if (rec.IntersectsWith (this._recStringView)) {  					rec.Intersect (this._recStringView);  					this.PaintCurrentByteSign (g' rec);  				}  				if (num2 > 1) {  					Rectangle rectangle4 = new Rectangle (this._recStringView.X' (int)(byteStringPointF.Y + this._charSize.Height)' this._recStringView.Width' (int)(this._charSize.Height * (num2 - 1)));  					if (rectangle4.IntersectsWith (this._recStringView)) {  						rectangle4.Intersect (this._recStringView);  						this.PaintCurrentByteSign (g' rectangle4);  					}  				}  				Rectangle rectangle5 = new Rectangle (this._recStringView.X' (int)tf3.Y' (int)((tf3.X - this._recStringView.X) + this._charSize.Width)' (int)this._charSize.Height);  				if (rectangle5.IntersectsWith (this._recStringView)) {  					rectangle5.Intersect (this._recStringView);  					this.PaintCurrentByteSign (g' rectangle5);  				}  			}  			else {  				Rectangle rectangle2 = new Rectangle ((int)byteStringPointF.X' (int)byteStringPointF.Y' (int)((tf3.X - byteStringPointF.X) + this._charSize.Width)' (int)this._charSize.Height);  				if (rectangle2.IntersectsWith (this._recStringView)) {  					rectangle2.Intersect (this._recStringView);  					this.PaintCurrentByteSign (g' rectangle2);  				}  			}  		}  		else {  			Point point = this.GetGridBytePoint (this._bytePos - this._startByte);  			PointF tf = this.GetByteStringPointF (point);  			Size size = new Size ((int)this._charSize.Width' (int)this._charSize.Height);  			Rectangle rectangle = new Rectangle ((int)tf.X' (int)tf.Y' size.Width' size.Height);  			if (rectangle.IntersectsWith (this._recStringView)) {  				rectangle.Intersect (this._recStringView);  				this.PaintCurrentByteSign (g' rectangle);  			}  		}  	}  	else if (this._selectionLength == 0L) {  		Point point4 = this.GetGridBytePoint (this._bytePos - this._startByte);  		PointF bytePointF = this.GetBytePointF (point4);  		Size size2 = new Size (((int)this._charSize.Width) * 2' (int)this._charSize.Height);  		Rectangle rectangle6 = new Rectangle ((int)bytePointF.X' (int)bytePointF.Y' size2.Width' size2.Height);  		this.PaintCurrentByteSign (g' rectangle6);  	}  	else {  		int num3 = this._recHex.Width - ((int)(this._charSize.Width * 5f));  		Point point5 = this.GetGridBytePoint (this._bytePos - this._startByte);  		PointF tf5 = this.GetBytePointF (point5);  		Point point6 = this.GetGridBytePoint (((this._bytePos - this._startByte) + this._selectionLength) - 1L);  		PointF tf6 = this.GetBytePointF (point6);  		int num4 = point6.Y - point5.Y;  		if (num4 == 0) {  			Rectangle rectangle7 = new Rectangle ((int)tf5.X' (int)tf5.Y' (int)((tf6.X - tf5.X) + (this._charSize.Width * 2f))' (int)this._charSize.Height);  			if (rectangle7.IntersectsWith (this._recHex)) {  				rectangle7.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rectangle7);  			}  		}  		else {  			Rectangle rectangle8 = new Rectangle ((int)tf5.X' (int)tf5.Y' (int)(((this._recHex.X + num3) - tf5.X) + (this._charSize.Width * 2f))' (int)this._charSize.Height);  			if (rectangle8.IntersectsWith (this._recHex)) {  				rectangle8.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rectangle8);  			}  			if (num4 > 1) {  				Rectangle rectangle9 = new Rectangle (this._recHex.X' (int)(tf5.Y + this._charSize.Height)' num3 + ((int)(this._charSize.Width * 2f))' (int)(this._charSize.Height * (num4 - 1)));  				if (rectangle9.IntersectsWith (this._recHex)) {  					rectangle9.Intersect (this._recHex);  					this.PaintCurrentByteSign (g' rectangle9);  				}  			}  			Rectangle rectangle10 = new Rectangle (this._recHex.X' (int)tf6.Y' (int)((tf6.X - this._recHex.X) + (this._charSize.Width * 2f))' (int)this._charSize.Height);  			if (rectangle10.IntersectsWith (this._recHex)) {  				rectangle10.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rectangle10);  			}  		}  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (this._keyInterpreter.GetType () == typeof(KeyInterpreter)) {  	if (this._selectionLength != 0L) {  		int num = this._recStringView.Width - ((int)this._charSize.Width);  		Point gridBytePoint = this.GetGridBytePoint (this._bytePos - this._startByte);  		PointF byteStringPointF = this.GetByteStringPointF (gridBytePoint);  		Point gp = this.GetGridBytePoint (((this._bytePos - this._startByte) + this._selectionLength) - 1L);  		PointF tf3 = this.GetByteStringPointF (gp);  		int num2 = gp.Y - gridBytePoint.Y;  		if (num2 != 0) {  			Rectangle rec = new Rectangle ((int)byteStringPointF.X' (int)byteStringPointF.Y' (int)(((this._recStringView.X + num) - byteStringPointF.X) + this._charSize.Width)' (int)this._charSize.Height);  			if (rec.IntersectsWith (this._recStringView)) {  				rec.Intersect (this._recStringView);  				this.PaintCurrentByteSign (g' rec);  			}  			if (num2 > 1) {  				Rectangle rectangle4 = new Rectangle (this._recStringView.X' (int)(byteStringPointF.Y + this._charSize.Height)' this._recStringView.Width' (int)(this._charSize.Height * (num2 - 1)));  				if (rectangle4.IntersectsWith (this._recStringView)) {  					rectangle4.Intersect (this._recStringView);  					this.PaintCurrentByteSign (g' rectangle4);  				}  			}  			Rectangle rectangle5 = new Rectangle (this._recStringView.X' (int)tf3.Y' (int)((tf3.X - this._recStringView.X) + this._charSize.Width)' (int)this._charSize.Height);  			if (rectangle5.IntersectsWith (this._recStringView)) {  				rectangle5.Intersect (this._recStringView);  				this.PaintCurrentByteSign (g' rectangle5);  			}  		}  		else {  			Rectangle rectangle2 = new Rectangle ((int)byteStringPointF.X' (int)byteStringPointF.Y' (int)((tf3.X - byteStringPointF.X) + this._charSize.Width)' (int)this._charSize.Height);  			if (rectangle2.IntersectsWith (this._recStringView)) {  				rectangle2.Intersect (this._recStringView);  				this.PaintCurrentByteSign (g' rectangle2);  			}  		}  	}  	else {  		Point point = this.GetGridBytePoint (this._bytePos - this._startByte);  		PointF tf = this.GetByteStringPointF (point);  		Size size = new Size ((int)this._charSize.Width' (int)this._charSize.Height);  		Rectangle rectangle = new Rectangle ((int)tf.X' (int)tf.Y' size.Width' size.Height);  		if (rectangle.IntersectsWith (this._recStringView)) {  			rectangle.Intersect (this._recStringView);  			this.PaintCurrentByteSign (g' rectangle);  		}  	}  }  else if (this._selectionLength == 0L) {  	Point point4 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF bytePointF = this.GetBytePointF (point4);  	Size size2 = new Size (((int)this._charSize.Width) * 2' (int)this._charSize.Height);  	Rectangle rectangle6 = new Rectangle ((int)bytePointF.X' (int)bytePointF.Y' size2.Width' size2.Height);  	this.PaintCurrentByteSign (g' rectangle6);  }  else {  	int num3 = this._recHex.Width - ((int)(this._charSize.Width * 5f));  	Point point5 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF tf5 = this.GetBytePointF (point5);  	Point point6 = this.GetGridBytePoint (((this._bytePos - this._startByte) + this._selectionLength) - 1L);  	PointF tf6 = this.GetBytePointF (point6);  	int num4 = point6.Y - point5.Y;  	if (num4 == 0) {  		Rectangle rectangle7 = new Rectangle ((int)tf5.X' (int)tf5.Y' (int)((tf6.X - tf5.X) + (this._charSize.Width * 2f))' (int)this._charSize.Height);  		if (rectangle7.IntersectsWith (this._recHex)) {  			rectangle7.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rectangle7);  		}  	}  	else {  		Rectangle rectangle8 = new Rectangle ((int)tf5.X' (int)tf5.Y' (int)(((this._recHex.X + num3) - tf5.X) + (this._charSize.Width * 2f))' (int)this._charSize.Height);  		if (rectangle8.IntersectsWith (this._recHex)) {  			rectangle8.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rectangle8);  		}  		if (num4 > 1) {  			Rectangle rectangle9 = new Rectangle (this._recHex.X' (int)(tf5.Y + this._charSize.Height)' num3 + ((int)(this._charSize.Width * 2f))' (int)(this._charSize.Height * (num4 - 1)));  			if (rectangle9.IntersectsWith (this._recHex)) {  				rectangle9.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rectangle9);  			}  		}  		Rectangle rectangle10 = new Rectangle (this._recHex.X' (int)tf6.Y' (int)((tf6.X - this._recHex.X) + (this._charSize.Width * 2f))' (int)this._charSize.Height);  		if (rectangle10.IntersectsWith (this._recHex)) {  			rectangle10.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rectangle10);  		}  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (this._selectionLength == 0L) {  	Point point4 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF bytePointF = this.GetBytePointF (point4);  	Size size2 = new Size (((int)this._charSize.Width) * 2' (int)this._charSize.Height);  	Rectangle rectangle6 = new Rectangle ((int)bytePointF.X' (int)bytePointF.Y' size2.Width' size2.Height);  	this.PaintCurrentByteSign (g' rectangle6);  }  else {  	int num3 = this._recHex.Width - ((int)(this._charSize.Width * 5f));  	Point point5 = this.GetGridBytePoint (this._bytePos - this._startByte);  	PointF tf5 = this.GetBytePointF (point5);  	Point point6 = this.GetGridBytePoint (((this._bytePos - this._startByte) + this._selectionLength) - 1L);  	PointF tf6 = this.GetBytePointF (point6);  	int num4 = point6.Y - point5.Y;  	if (num4 == 0) {  		Rectangle rectangle7 = new Rectangle ((int)tf5.X' (int)tf5.Y' (int)((tf6.X - tf5.X) + (this._charSize.Width * 2f))' (int)this._charSize.Height);  		if (rectangle7.IntersectsWith (this._recHex)) {  			rectangle7.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rectangle7);  		}  	}  	else {  		Rectangle rectangle8 = new Rectangle ((int)tf5.X' (int)tf5.Y' (int)(((this._recHex.X + num3) - tf5.X) + (this._charSize.Width * 2f))' (int)this._charSize.Height);  		if (rectangle8.IntersectsWith (this._recHex)) {  			rectangle8.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rectangle8);  		}  		if (num4 > 1) {  			Rectangle rectangle9 = new Rectangle (this._recHex.X' (int)(tf5.Y + this._charSize.Height)' num3 + ((int)(this._charSize.Width * 2f))' (int)(this._charSize.Height * (num4 - 1)));  			if (rectangle9.IntersectsWith (this._recHex)) {  				rectangle9.Intersect (this._recHex);  				this.PaintCurrentByteSign (g' rectangle9);  			}  		}  		Rectangle rectangle10 = new Rectangle (this._recHex.X' (int)tf6.Y' (int)((tf6.X - this._recHex.X) + (this._charSize.Width * 2f))' (int)this._charSize.Height);  		if (rectangle10.IntersectsWith (this._recHex)) {  			rectangle10.Intersect (this._recHex);  			this.PaintCurrentByteSign (g' rectangle10);  		}  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintHexAndStringView,The following statement contains a magic number: for (long i = startByte; i < (num2 + 1L); i += 1L) {  	string str;  	num++;  	Point gridBytePoint = this.GetGridBytePoint ((long)num);  	PointF byteStringPointF = this.GetByteStringPointF (gridBytePoint);  	byte b = this._byteProvider.ReadByte (i);  	bool flag3 = ((i >= this._bytePos) && (i <= ((this._bytePos + this._selectionLength) - 1L))) && (this._selectionLength != 0L);  	if (flag3 && flag) {  		this.PaintHexStringSelected (g' b' brush2' brushBack' gridBytePoint);  	}  	else {  		this.PaintHexString (g' b' brush' gridBytePoint);  	}  	if ((b > 0x1f) && ((b <= 0x7e) || (b >= 160))) {  		str = ((char)b).ToString ();  	}  	else {  		str = ".";  	}  	if (flag3 && flag2) {  		g.FillRectangle (brushBack' byteStringPointF.X' byteStringPointF.Y' this._charSize.Width' this._charSize.Height);  		g.DrawString (str' this.Font' brush2' byteStringPointF' this._stringFormat);  	}  	else {  		g.DrawString (str' this.Font' brush' byteStringPointF' this._stringFormat);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintHexAndStringView,The following statement contains a magic number: if ((b > 0x1f) && ((b <= 0x7e) || (b >= 160))) {  	str = ((char)b).ToString ();  }  else {  	str = ".";  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PaintLineInfo,The following statement contains a magic number: for (int i = 0; i < num; i++) {  	string str2;  	long num3 = startByte + (this._iHexMaxHBytes * i);  	PointF bytePointF = this.GetBytePointF (new Point (0' i));  	string str = num3.ToString (this._hexStringFormat' Thread.CurrentThread.CurrentCulture);  	int num4 = 8 - str.Length;  	if (num4 > -1) {  		str2 = new string ('0'' this.lineInfoDigits - str.Length) + str;  	}  	else {  		str2 = new string ('~'' this.lineInfoDigits);  	}  	g.DrawString (str2' this.Font' brush' new PointF ((float)this._recLineInfo.X' bytePointF.Y)' this._stringFormat);  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (this._lineInfoVisible) {  	this._recLineInfo = new Rectangle (this._recContent.X + num' this._recContent.Y' (int)(this._charSize.Width * (this.lineInfoDigits + 2))' this._recContent.Height);  }  else {  	this._recLineInfo = Rectangle.Empty;  	this._recLineInfo.X = num;  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: this._recLineInfo = new Rectangle (this._recContent.X + num' this._recContent.Y' (int)(this._charSize.Width * (this.lineInfoDigits + 2))' this._recContent.Height);  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (this.UseFixedBytesPerLine) {  	this.SetHorizontalByteCount (this._bytesPerLine);  	this._recHex.Width = (int)Math.Floor ((double)(((this._iHexMaxHBytes * this._charSize.Width) * 3.0) + (2f * this._charSize.Width)));  }  else {  	int num2 = (int)Math.Floor ((double)(((double)this._recHex.Width) / ((double)this._charSize.Width)));  	if (num2 > 1) {  		this.SetHorizontalByteCount ((int)Math.Floor ((double)(((double)num2) / 3.0)));  	}  	else {  		this.SetHorizontalByteCount (num2);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (this.UseFixedBytesPerLine) {  	this.SetHorizontalByteCount (this._bytesPerLine);  	this._recHex.Width = (int)Math.Floor ((double)(((this._iHexMaxHBytes * this._charSize.Width) * 3.0) + (2f * this._charSize.Width)));  }  else {  	int num2 = (int)Math.Floor ((double)(((double)this._recHex.Width) / ((double)this._charSize.Width)));  	if (num2 > 1) {  		this.SetHorizontalByteCount ((int)Math.Floor ((double)(((double)num2) / 3.0)));  	}  	else {  		this.SetHorizontalByteCount (num2);  	}  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: this._recHex.Width = (int)Math.Floor ((double)(((this._iHexMaxHBytes * this._charSize.Width) * 3.0) + (2f * this._charSize.Width)));  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (num2 > 1) {  	this.SetHorizontalByteCount ((int)Math.Floor ((double)(((double)num2) / 3.0)));  }  else {  	this.SetHorizontalByteCount (num2);  }  
Magic Number,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: this.SetHorizontalByteCount ((int)Math.Floor ((double)(((double)num2) / 3.0)));  
Magic Number,SemtechLib.General.TypeConverters,UInt16HexConverter,C:\repos\x893_SX1231\SemtechLib\General\TypeConverters\UInt16HexConverter.cs,ConvertFrom,The following statement contains a magic number: try {  	string str = (string)value;  	if ((str.StartsWith ("0x"' true' info) && (str.Length <= 6)) || (str.Length <= 4)) {  		return Convert.ToUInt16 (str' 0x10);  	}  }  catch {  }  
Magic Number,SemtechLib.General.TypeConverters,UInt16HexConverter,C:\repos\x893_SX1231\SemtechLib\General\TypeConverters\UInt16HexConverter.cs,ConvertFrom,The following statement contains a magic number: try {  	string str = (string)value;  	if ((str.StartsWith ("0x"' true' info) && (str.Length <= 6)) || (str.Length <= 4)) {  		return Convert.ToUInt16 (str' 0x10);  	}  }  catch {  }  
Magic Number,SemtechLib.General.TypeConverters,UInt16HexConverter,C:\repos\x893_SX1231\SemtechLib\General\TypeConverters\UInt16HexConverter.cs,ConvertFrom,The following statement contains a magic number: if ((str.StartsWith ("0x"' true' info) && (str.Length <= 6)) || (str.Length <= 4)) {  	return Convert.ToUInt16 (str' 0x10);  }  
Magic Number,SemtechLib.General.TypeConverters,UInt16HexConverter,C:\repos\x893_SX1231\SemtechLib\General\TypeConverters\UInt16HexConverter.cs,ConvertFrom,The following statement contains a magic number: if ((str.StartsWith ("0x"' true' info) && (str.Length <= 6)) || (str.Length <= 4)) {  	return Convert.ToUInt16 (str' 0x10);  }  
Magic Number,SemtechLib.General.TypeConverters,UInt32HexConverter,C:\repos\x893_SX1231\SemtechLib\General\TypeConverters\UInt32HexConverter.cs,ConvertFrom,The following statement contains a magic number: try {  	string str = (string)value;  	if ((str.StartsWith ("0x"' true' info) && (str.Length <= 10)) || (str.Length <= 8)) {  		return Convert.ToUInt32 (str' 0x10);  	}  }  catch {  }  
Magic Number,SemtechLib.General.TypeConverters,UInt32HexConverter,C:\repos\x893_SX1231\SemtechLib\General\TypeConverters\UInt32HexConverter.cs,ConvertFrom,The following statement contains a magic number: try {  	string str = (string)value;  	if ((str.StartsWith ("0x"' true' info) && (str.Length <= 10)) || (str.Length <= 8)) {  		return Convert.ToUInt32 (str' 0x10);  	}  }  catch {  }  
Magic Number,SemtechLib.General.TypeConverters,UInt32HexConverter,C:\repos\x893_SX1231\SemtechLib\General\TypeConverters\UInt32HexConverter.cs,ConvertFrom,The following statement contains a magic number: if ((str.StartsWith ("0x"' true' info) && (str.Length <= 10)) || (str.Length <= 8)) {  	return Convert.ToUInt32 (str' 0x10);  }  
Magic Number,SemtechLib.General.TypeConverters,UInt32HexConverter,C:\repos\x893_SX1231\SemtechLib\General\TypeConverters\UInt32HexConverter.cs,ConvertFrom,The following statement contains a magic number: if ((str.StartsWith ("0x"' true' info) && (str.Length <= 10)) || (str.Length <= 8)) {  	return Convert.ToUInt32 (str' 0x10);  }  
Magic Number,SemtechLib.General.TypeConverters,ByteHexConverter,C:\repos\x893_SX1231\SemtechLib\General\TypeConverters\ByteHexConverter.cs,ConvertFrom,The following statement contains a magic number: try {  	string str = (string)value;  	if ((str.StartsWith ("0x"' true' info) && (str.Length <= 4)) || (str.Length <= 2)) {  		return Convert.ToByte (str' 0x10);  	}  }  catch {  }  
Magic Number,SemtechLib.General.TypeConverters,ByteHexConverter,C:\repos\x893_SX1231\SemtechLib\General\TypeConverters\ByteHexConverter.cs,ConvertFrom,The following statement contains a magic number: try {  	string str = (string)value;  	if ((str.StartsWith ("0x"' true' info) && (str.Length <= 4)) || (str.Length <= 2)) {  		return Convert.ToByte (str' 0x10);  	}  }  catch {  }  
Magic Number,SemtechLib.General.TypeConverters,ByteHexConverter,C:\repos\x893_SX1231\SemtechLib\General\TypeConverters\ByteHexConverter.cs,ConvertFrom,The following statement contains a magic number: if ((str.StartsWith ("0x"' true' info) && (str.Length <= 4)) || (str.Length <= 2)) {  	return Convert.ToByte (str' 0x10);  }  
Magic Number,SemtechLib.General.TypeConverters,ByteHexConverter,C:\repos\x893_SX1231\SemtechLib\General\TypeConverters\ByteHexConverter.cs,ConvertFrom,The following statement contains a magic number: if ((str.StartsWith ("0x"' true' info) && (str.Length <= 4)) || (str.Length <= 2)) {  	return Convert.ToByte (str' 0x10);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,Celsius2Fahrenheit,The following statement contains a magic number: return ((celsius * 1.8) + 32.0);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,Celsius2Fahrenheit,The following statement contains a magic number: return ((celsius * 1.8) + 32.0);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: if (this.drawTics) {  	Point point;  	Point point2;  	PointF tf;  	this.fRange = (float)(this.Range.Max - this.Range.Min);  	Font font = new Font ("Arial"' 7f);  	StringFormat format = new StringFormat ();  	format.Alignment = StringAlignment.Far;  	format.LineAlignment = StringAlignment.Center;  	float num = this.rectCylinder.Height / this.fRange;  	float num2 = num * this.largeTicFreq;  	long max = (long)this.Range.Max;  	for (float i = this.rectCylinder.Top; i <= this.rectCylinder.Bottom; i += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)i);  		point2 = new Point (((int)this.rectCylinder.Right) + 10' (int)i);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Right + 30f' i);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max -= this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float j = this.rectCylinder.Top; j <= this.rectCylinder.Bottom; j += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)j);  		point2 = new Point (((int)this.rectCylinder.Right) + 8' (int)j);  		g.DrawLine (this.scalePen' point' point2);  	}  	double num6 = this.Celsius2Fahrenheit (this.Range.Max);  	int num7 = (int)(num6 % 10.0);  	if (num7 != 0) {  		num7 = 10 - num7;  	}  	num6 -= num7;  	this.fRange = (float)(this.Celsius2Fahrenheit (this.Range.Max) - this.Celsius2Fahrenheit (this.Range.Min));  	num = this.rectCylinder.Height / this.fRange;  	num2 = num * this.largeTicFreq;  	max = (long)this.Celsius2Fahrenheit (this.Range.Min);  	for (float k = this.rectCylinder.Bottom; k >= this.rectCylinder.Top; k -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 10' (int)k);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)k);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Left - 15f' k);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max += this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float m = this.rectCylinder.Bottom; m >= this.rectCylinder.Top; m -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 8' (int)m);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)m);  		g.DrawLine (this.scalePen' point' point2);  	}  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: if (this.drawTics) {  	Point point;  	Point point2;  	PointF tf;  	this.fRange = (float)(this.Range.Max - this.Range.Min);  	Font font = new Font ("Arial"' 7f);  	StringFormat format = new StringFormat ();  	format.Alignment = StringAlignment.Far;  	format.LineAlignment = StringAlignment.Center;  	float num = this.rectCylinder.Height / this.fRange;  	float num2 = num * this.largeTicFreq;  	long max = (long)this.Range.Max;  	for (float i = this.rectCylinder.Top; i <= this.rectCylinder.Bottom; i += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)i);  		point2 = new Point (((int)this.rectCylinder.Right) + 10' (int)i);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Right + 30f' i);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max -= this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float j = this.rectCylinder.Top; j <= this.rectCylinder.Bottom; j += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)j);  		point2 = new Point (((int)this.rectCylinder.Right) + 8' (int)j);  		g.DrawLine (this.scalePen' point' point2);  	}  	double num6 = this.Celsius2Fahrenheit (this.Range.Max);  	int num7 = (int)(num6 % 10.0);  	if (num7 != 0) {  		num7 = 10 - num7;  	}  	num6 -= num7;  	this.fRange = (float)(this.Celsius2Fahrenheit (this.Range.Max) - this.Celsius2Fahrenheit (this.Range.Min));  	num = this.rectCylinder.Height / this.fRange;  	num2 = num * this.largeTicFreq;  	max = (long)this.Celsius2Fahrenheit (this.Range.Min);  	for (float k = this.rectCylinder.Bottom; k >= this.rectCylinder.Top; k -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 10' (int)k);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)k);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Left - 15f' k);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max += this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float m = this.rectCylinder.Bottom; m >= this.rectCylinder.Top; m -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 8' (int)m);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)m);  		g.DrawLine (this.scalePen' point' point2);  	}  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: if (this.drawTics) {  	Point point;  	Point point2;  	PointF tf;  	this.fRange = (float)(this.Range.Max - this.Range.Min);  	Font font = new Font ("Arial"' 7f);  	StringFormat format = new StringFormat ();  	format.Alignment = StringAlignment.Far;  	format.LineAlignment = StringAlignment.Center;  	float num = this.rectCylinder.Height / this.fRange;  	float num2 = num * this.largeTicFreq;  	long max = (long)this.Range.Max;  	for (float i = this.rectCylinder.Top; i <= this.rectCylinder.Bottom; i += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)i);  		point2 = new Point (((int)this.rectCylinder.Right) + 10' (int)i);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Right + 30f' i);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max -= this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float j = this.rectCylinder.Top; j <= this.rectCylinder.Bottom; j += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)j);  		point2 = new Point (((int)this.rectCylinder.Right) + 8' (int)j);  		g.DrawLine (this.scalePen' point' point2);  	}  	double num6 = this.Celsius2Fahrenheit (this.Range.Max);  	int num7 = (int)(num6 % 10.0);  	if (num7 != 0) {  		num7 = 10 - num7;  	}  	num6 -= num7;  	this.fRange = (float)(this.Celsius2Fahrenheit (this.Range.Max) - this.Celsius2Fahrenheit (this.Range.Min));  	num = this.rectCylinder.Height / this.fRange;  	num2 = num * this.largeTicFreq;  	max = (long)this.Celsius2Fahrenheit (this.Range.Min);  	for (float k = this.rectCylinder.Bottom; k >= this.rectCylinder.Top; k -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 10' (int)k);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)k);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Left - 15f' k);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max += this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float m = this.rectCylinder.Bottom; m >= this.rectCylinder.Top; m -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 8' (int)m);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)m);  		g.DrawLine (this.scalePen' point' point2);  	}  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: if (this.drawTics) {  	Point point;  	Point point2;  	PointF tf;  	this.fRange = (float)(this.Range.Max - this.Range.Min);  	Font font = new Font ("Arial"' 7f);  	StringFormat format = new StringFormat ();  	format.Alignment = StringAlignment.Far;  	format.LineAlignment = StringAlignment.Center;  	float num = this.rectCylinder.Height / this.fRange;  	float num2 = num * this.largeTicFreq;  	long max = (long)this.Range.Max;  	for (float i = this.rectCylinder.Top; i <= this.rectCylinder.Bottom; i += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)i);  		point2 = new Point (((int)this.rectCylinder.Right) + 10' (int)i);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Right + 30f' i);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max -= this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float j = this.rectCylinder.Top; j <= this.rectCylinder.Bottom; j += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)j);  		point2 = new Point (((int)this.rectCylinder.Right) + 8' (int)j);  		g.DrawLine (this.scalePen' point' point2);  	}  	double num6 = this.Celsius2Fahrenheit (this.Range.Max);  	int num7 = (int)(num6 % 10.0);  	if (num7 != 0) {  		num7 = 10 - num7;  	}  	num6 -= num7;  	this.fRange = (float)(this.Celsius2Fahrenheit (this.Range.Max) - this.Celsius2Fahrenheit (this.Range.Min));  	num = this.rectCylinder.Height / this.fRange;  	num2 = num * this.largeTicFreq;  	max = (long)this.Celsius2Fahrenheit (this.Range.Min);  	for (float k = this.rectCylinder.Bottom; k >= this.rectCylinder.Top; k -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 10' (int)k);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)k);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Left - 15f' k);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max += this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float m = this.rectCylinder.Bottom; m >= this.rectCylinder.Top; m -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 8' (int)m);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)m);  		g.DrawLine (this.scalePen' point' point2);  	}  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: if (this.drawTics) {  	Point point;  	Point point2;  	PointF tf;  	this.fRange = (float)(this.Range.Max - this.Range.Min);  	Font font = new Font ("Arial"' 7f);  	StringFormat format = new StringFormat ();  	format.Alignment = StringAlignment.Far;  	format.LineAlignment = StringAlignment.Center;  	float num = this.rectCylinder.Height / this.fRange;  	float num2 = num * this.largeTicFreq;  	long max = (long)this.Range.Max;  	for (float i = this.rectCylinder.Top; i <= this.rectCylinder.Bottom; i += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)i);  		point2 = new Point (((int)this.rectCylinder.Right) + 10' (int)i);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Right + 30f' i);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max -= this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float j = this.rectCylinder.Top; j <= this.rectCylinder.Bottom; j += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)j);  		point2 = new Point (((int)this.rectCylinder.Right) + 8' (int)j);  		g.DrawLine (this.scalePen' point' point2);  	}  	double num6 = this.Celsius2Fahrenheit (this.Range.Max);  	int num7 = (int)(num6 % 10.0);  	if (num7 != 0) {  		num7 = 10 - num7;  	}  	num6 -= num7;  	this.fRange = (float)(this.Celsius2Fahrenheit (this.Range.Max) - this.Celsius2Fahrenheit (this.Range.Min));  	num = this.rectCylinder.Height / this.fRange;  	num2 = num * this.largeTicFreq;  	max = (long)this.Celsius2Fahrenheit (this.Range.Min);  	for (float k = this.rectCylinder.Bottom; k >= this.rectCylinder.Top; k -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 10' (int)k);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)k);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Left - 15f' k);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max += this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float m = this.rectCylinder.Bottom; m >= this.rectCylinder.Top; m -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 8' (int)m);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)m);  		g.DrawLine (this.scalePen' point' point2);  	}  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: if (this.drawTics) {  	Point point;  	Point point2;  	PointF tf;  	this.fRange = (float)(this.Range.Max - this.Range.Min);  	Font font = new Font ("Arial"' 7f);  	StringFormat format = new StringFormat ();  	format.Alignment = StringAlignment.Far;  	format.LineAlignment = StringAlignment.Center;  	float num = this.rectCylinder.Height / this.fRange;  	float num2 = num * this.largeTicFreq;  	long max = (long)this.Range.Max;  	for (float i = this.rectCylinder.Top; i <= this.rectCylinder.Bottom; i += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)i);  		point2 = new Point (((int)this.rectCylinder.Right) + 10' (int)i);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Right + 30f' i);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max -= this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float j = this.rectCylinder.Top; j <= this.rectCylinder.Bottom; j += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)j);  		point2 = new Point (((int)this.rectCylinder.Right) + 8' (int)j);  		g.DrawLine (this.scalePen' point' point2);  	}  	double num6 = this.Celsius2Fahrenheit (this.Range.Max);  	int num7 = (int)(num6 % 10.0);  	if (num7 != 0) {  		num7 = 10 - num7;  	}  	num6 -= num7;  	this.fRange = (float)(this.Celsius2Fahrenheit (this.Range.Max) - this.Celsius2Fahrenheit (this.Range.Min));  	num = this.rectCylinder.Height / this.fRange;  	num2 = num * this.largeTicFreq;  	max = (long)this.Celsius2Fahrenheit (this.Range.Min);  	for (float k = this.rectCylinder.Bottom; k >= this.rectCylinder.Top; k -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 10' (int)k);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)k);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Left - 15f' k);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max += this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float m = this.rectCylinder.Bottom; m >= this.rectCylinder.Top; m -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 8' (int)m);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)m);  		g.DrawLine (this.scalePen' point' point2);  	}  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: if (this.drawTics) {  	Point point;  	Point point2;  	PointF tf;  	this.fRange = (float)(this.Range.Max - this.Range.Min);  	Font font = new Font ("Arial"' 7f);  	StringFormat format = new StringFormat ();  	format.Alignment = StringAlignment.Far;  	format.LineAlignment = StringAlignment.Center;  	float num = this.rectCylinder.Height / this.fRange;  	float num2 = num * this.largeTicFreq;  	long max = (long)this.Range.Max;  	for (float i = this.rectCylinder.Top; i <= this.rectCylinder.Bottom; i += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)i);  		point2 = new Point (((int)this.rectCylinder.Right) + 10' (int)i);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Right + 30f' i);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max -= this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float j = this.rectCylinder.Top; j <= this.rectCylinder.Bottom; j += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)j);  		point2 = new Point (((int)this.rectCylinder.Right) + 8' (int)j);  		g.DrawLine (this.scalePen' point' point2);  	}  	double num6 = this.Celsius2Fahrenheit (this.Range.Max);  	int num7 = (int)(num6 % 10.0);  	if (num7 != 0) {  		num7 = 10 - num7;  	}  	num6 -= num7;  	this.fRange = (float)(this.Celsius2Fahrenheit (this.Range.Max) - this.Celsius2Fahrenheit (this.Range.Min));  	num = this.rectCylinder.Height / this.fRange;  	num2 = num * this.largeTicFreq;  	max = (long)this.Celsius2Fahrenheit (this.Range.Min);  	for (float k = this.rectCylinder.Bottom; k >= this.rectCylinder.Top; k -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 10' (int)k);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)k);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Left - 15f' k);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max += this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float m = this.rectCylinder.Bottom; m >= this.rectCylinder.Top; m -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 8' (int)m);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)m);  		g.DrawLine (this.scalePen' point' point2);  	}  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: if (this.drawTics) {  	Point point;  	Point point2;  	PointF tf;  	this.fRange = (float)(this.Range.Max - this.Range.Min);  	Font font = new Font ("Arial"' 7f);  	StringFormat format = new StringFormat ();  	format.Alignment = StringAlignment.Far;  	format.LineAlignment = StringAlignment.Center;  	float num = this.rectCylinder.Height / this.fRange;  	float num2 = num * this.largeTicFreq;  	long max = (long)this.Range.Max;  	for (float i = this.rectCylinder.Top; i <= this.rectCylinder.Bottom; i += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)i);  		point2 = new Point (((int)this.rectCylinder.Right) + 10' (int)i);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Right + 30f' i);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max -= this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float j = this.rectCylinder.Top; j <= this.rectCylinder.Bottom; j += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)j);  		point2 = new Point (((int)this.rectCylinder.Right) + 8' (int)j);  		g.DrawLine (this.scalePen' point' point2);  	}  	double num6 = this.Celsius2Fahrenheit (this.Range.Max);  	int num7 = (int)(num6 % 10.0);  	if (num7 != 0) {  		num7 = 10 - num7;  	}  	num6 -= num7;  	this.fRange = (float)(this.Celsius2Fahrenheit (this.Range.Max) - this.Celsius2Fahrenheit (this.Range.Min));  	num = this.rectCylinder.Height / this.fRange;  	num2 = num * this.largeTicFreq;  	max = (long)this.Celsius2Fahrenheit (this.Range.Min);  	for (float k = this.rectCylinder.Bottom; k >= this.rectCylinder.Top; k -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 10' (int)k);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)k);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Left - 15f' k);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max += this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float m = this.rectCylinder.Bottom; m >= this.rectCylinder.Top; m -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 8' (int)m);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)m);  		g.DrawLine (this.scalePen' point' point2);  	}  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: if (this.drawTics) {  	Point point;  	Point point2;  	PointF tf;  	this.fRange = (float)(this.Range.Max - this.Range.Min);  	Font font = new Font ("Arial"' 7f);  	StringFormat format = new StringFormat ();  	format.Alignment = StringAlignment.Far;  	format.LineAlignment = StringAlignment.Center;  	float num = this.rectCylinder.Height / this.fRange;  	float num2 = num * this.largeTicFreq;  	long max = (long)this.Range.Max;  	for (float i = this.rectCylinder.Top; i <= this.rectCylinder.Bottom; i += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)i);  		point2 = new Point (((int)this.rectCylinder.Right) + 10' (int)i);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Right + 30f' i);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max -= this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float j = this.rectCylinder.Top; j <= this.rectCylinder.Bottom; j += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)j);  		point2 = new Point (((int)this.rectCylinder.Right) + 8' (int)j);  		g.DrawLine (this.scalePen' point' point2);  	}  	double num6 = this.Celsius2Fahrenheit (this.Range.Max);  	int num7 = (int)(num6 % 10.0);  	if (num7 != 0) {  		num7 = 10 - num7;  	}  	num6 -= num7;  	this.fRange = (float)(this.Celsius2Fahrenheit (this.Range.Max) - this.Celsius2Fahrenheit (this.Range.Min));  	num = this.rectCylinder.Height / this.fRange;  	num2 = num * this.largeTicFreq;  	max = (long)this.Celsius2Fahrenheit (this.Range.Min);  	for (float k = this.rectCylinder.Bottom; k >= this.rectCylinder.Top; k -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 10' (int)k);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)k);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Left - 15f' k);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max += this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float m = this.rectCylinder.Bottom; m >= this.rectCylinder.Top; m -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 8' (int)m);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)m);  		g.DrawLine (this.scalePen' point' point2);  	}  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: if (this.drawTics) {  	Point point;  	Point point2;  	PointF tf;  	this.fRange = (float)(this.Range.Max - this.Range.Min);  	Font font = new Font ("Arial"' 7f);  	StringFormat format = new StringFormat ();  	format.Alignment = StringAlignment.Far;  	format.LineAlignment = StringAlignment.Center;  	float num = this.rectCylinder.Height / this.fRange;  	float num2 = num * this.largeTicFreq;  	long max = (long)this.Range.Max;  	for (float i = this.rectCylinder.Top; i <= this.rectCylinder.Bottom; i += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)i);  		point2 = new Point (((int)this.rectCylinder.Right) + 10' (int)i);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Right + 30f' i);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max -= this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float j = this.rectCylinder.Top; j <= this.rectCylinder.Bottom; j += num2) {  		point = new Point (((int)this.rectCylinder.Right) + 3' (int)j);  		point2 = new Point (((int)this.rectCylinder.Right) + 8' (int)j);  		g.DrawLine (this.scalePen' point' point2);  	}  	double num6 = this.Celsius2Fahrenheit (this.Range.Max);  	int num7 = (int)(num6 % 10.0);  	if (num7 != 0) {  		num7 = 10 - num7;  	}  	num6 -= num7;  	this.fRange = (float)(this.Celsius2Fahrenheit (this.Range.Max) - this.Celsius2Fahrenheit (this.Range.Min));  	num = this.rectCylinder.Height / this.fRange;  	num2 = num * this.largeTicFreq;  	max = (long)this.Celsius2Fahrenheit (this.Range.Min);  	for (float k = this.rectCylinder.Bottom; k >= this.rectCylinder.Top; k -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 10' (int)k);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)k);  		g.DrawLine (this.scalePen' point' point2);  		tf = new PointF (this.rectCylinder.Left - 15f' k);  		g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  		max += this.largeTicFreq;  	}  	num2 = num * this.smallTicFreq;  	for (float m = this.rectCylinder.Bottom; m >= this.rectCylinder.Top; m -= num2) {  		point = new Point (((int)this.rectCylinder.Left) - 8' (int)m);  		point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)m);  		g.DrawLine (this.scalePen' point' point2);  	}  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: for (float i = this.rectCylinder.Top; i <= this.rectCylinder.Bottom; i += num2) {  	point = new Point (((int)this.rectCylinder.Right) + 3' (int)i);  	point2 = new Point (((int)this.rectCylinder.Right) + 10' (int)i);  	g.DrawLine (this.scalePen' point' point2);  	tf = new PointF (this.rectCylinder.Right + 30f' i);  	g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  	max -= this.largeTicFreq;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: for (float i = this.rectCylinder.Top; i <= this.rectCylinder.Bottom; i += num2) {  	point = new Point (((int)this.rectCylinder.Right) + 3' (int)i);  	point2 = new Point (((int)this.rectCylinder.Right) + 10' (int)i);  	g.DrawLine (this.scalePen' point' point2);  	tf = new PointF (this.rectCylinder.Right + 30f' i);  	g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  	max -= this.largeTicFreq;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: point = new Point (((int)this.rectCylinder.Right) + 3' (int)i);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: point2 = new Point (((int)this.rectCylinder.Right) + 10' (int)i);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: for (float j = this.rectCylinder.Top; j <= this.rectCylinder.Bottom; j += num2) {  	point = new Point (((int)this.rectCylinder.Right) + 3' (int)j);  	point2 = new Point (((int)this.rectCylinder.Right) + 8' (int)j);  	g.DrawLine (this.scalePen' point' point2);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: for (float j = this.rectCylinder.Top; j <= this.rectCylinder.Bottom; j += num2) {  	point = new Point (((int)this.rectCylinder.Right) + 3' (int)j);  	point2 = new Point (((int)this.rectCylinder.Right) + 8' (int)j);  	g.DrawLine (this.scalePen' point' point2);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: point = new Point (((int)this.rectCylinder.Right) + 3' (int)j);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: point2 = new Point (((int)this.rectCylinder.Right) + 8' (int)j);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: if (num7 != 0) {  	num7 = 10 - num7;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: num7 = 10 - num7;  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: for (float k = this.rectCylinder.Bottom; k >= this.rectCylinder.Top; k -= num2) {  	point = new Point (((int)this.rectCylinder.Left) - 10' (int)k);  	point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)k);  	g.DrawLine (this.scalePen' point' point2);  	tf = new PointF (this.rectCylinder.Left - 15f' k);  	g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  	max += this.largeTicFreq;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: for (float k = this.rectCylinder.Bottom; k >= this.rectCylinder.Top; k -= num2) {  	point = new Point (((int)this.rectCylinder.Left) - 10' (int)k);  	point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)k);  	g.DrawLine (this.scalePen' point' point2);  	tf = new PointF (this.rectCylinder.Left - 15f' k);  	g.DrawString (max.ToString ()' font' this.blackBrush' tf' format);  	max += this.largeTicFreq;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: point = new Point (((int)this.rectCylinder.Left) - 10' (int)k);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)k);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: for (float m = this.rectCylinder.Bottom; m >= this.rectCylinder.Top; m -= num2) {  	point = new Point (((int)this.rectCylinder.Left) - 8' (int)m);  	point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)m);  	g.DrawLine (this.scalePen' point' point2);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: for (float m = this.rectCylinder.Bottom; m >= this.rectCylinder.Top; m -= num2) {  	point = new Point (((int)this.rectCylinder.Left) - 8' (int)m);  	point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)m);  	g.DrawLine (this.scalePen' point' point2);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: point = new Point (((int)this.rectCylinder.Left) - 8' (int)m);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,DrawTicks,The following statement contains a magic number: point2 = new Point (((int)this.rectCylinder.Left) - 3' (int)m);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,Fahrenheit2Celsius,The following statement contains a magic number: return ((fahrenheit - 32.0) / 1.8);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,Fahrenheit2Celsius,The following statement contains a magic number: return ((fahrenheit - 32.0) / 1.8);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: if ((offset < -255) || (offset > 255)) {  	return color;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: if ((offset < -255) || (offset > 255)) {  	return color;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: if (offset > 0) {  	if ((r + offset) > 255) {  		nR = (short)(255 - r);  	}  	if ((g + offset) > 255) {  		nG = (short)(255 - g);  	}  	if ((b + offset) > 255) {  		nB = (short)(255 - b);  	}  	offset = Math.Min (Math.Min (nR' nG)' nB);  }  else {  	if ((r + offset) < 0) {  		nR = (short)(-(short)r);  	}  	if ((g + offset) < 0) {  		nG = (short)(-(short)g);  	}  	if ((b + offset) < 0) {  		nB = (short)(-(short)b);  	}  	offset = Math.Max (Math.Max (nR' nG)' nB);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: if (offset > 0) {  	if ((r + offset) > 255) {  		nR = (short)(255 - r);  	}  	if ((g + offset) > 255) {  		nG = (short)(255 - g);  	}  	if ((b + offset) > 255) {  		nB = (short)(255 - b);  	}  	offset = Math.Min (Math.Min (nR' nG)' nB);  }  else {  	if ((r + offset) < 0) {  		nR = (short)(-(short)r);  	}  	if ((g + offset) < 0) {  		nG = (short)(-(short)g);  	}  	if ((b + offset) < 0) {  		nB = (short)(-(short)b);  	}  	offset = Math.Max (Math.Max (nR' nG)' nB);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: if (offset > 0) {  	if ((r + offset) > 255) {  		nR = (short)(255 - r);  	}  	if ((g + offset) > 255) {  		nG = (short)(255 - g);  	}  	if ((b + offset) > 255) {  		nB = (short)(255 - b);  	}  	offset = Math.Min (Math.Min (nR' nG)' nB);  }  else {  	if ((r + offset) < 0) {  		nR = (short)(-(short)r);  	}  	if ((g + offset) < 0) {  		nG = (short)(-(short)g);  	}  	if ((b + offset) < 0) {  		nB = (short)(-(short)b);  	}  	offset = Math.Max (Math.Max (nR' nG)' nB);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: if (offset > 0) {  	if ((r + offset) > 255) {  		nR = (short)(255 - r);  	}  	if ((g + offset) > 255) {  		nG = (short)(255 - g);  	}  	if ((b + offset) > 255) {  		nB = (short)(255 - b);  	}  	offset = Math.Min (Math.Min (nR' nG)' nB);  }  else {  	if ((r + offset) < 0) {  		nR = (short)(-(short)r);  	}  	if ((g + offset) < 0) {  		nG = (short)(-(short)g);  	}  	if ((b + offset) < 0) {  		nB = (short)(-(short)b);  	}  	offset = Math.Max (Math.Max (nR' nG)' nB);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: if (offset > 0) {  	if ((r + offset) > 255) {  		nR = (short)(255 - r);  	}  	if ((g + offset) > 255) {  		nG = (short)(255 - g);  	}  	if ((b + offset) > 255) {  		nB = (short)(255 - b);  	}  	offset = Math.Min (Math.Min (nR' nG)' nB);  }  else {  	if ((r + offset) < 0) {  		nR = (short)(-(short)r);  	}  	if ((g + offset) < 0) {  		nG = (short)(-(short)g);  	}  	if ((b + offset) < 0) {  		nB = (short)(-(short)b);  	}  	offset = Math.Max (Math.Max (nR' nG)' nB);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: if (offset > 0) {  	if ((r + offset) > 255) {  		nR = (short)(255 - r);  	}  	if ((g + offset) > 255) {  		nG = (short)(255 - g);  	}  	if ((b + offset) > 255) {  		nB = (short)(255 - b);  	}  	offset = Math.Min (Math.Min (nR' nG)' nB);  }  else {  	if ((r + offset) < 0) {  		nR = (short)(-(short)r);  	}  	if ((g + offset) < 0) {  		nG = (short)(-(short)g);  	}  	if ((b + offset) < 0) {  		nB = (short)(-(short)b);  	}  	offset = Math.Max (Math.Max (nR' nG)' nB);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: if ((r + offset) > 255) {  	nR = (short)(255 - r);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: if ((r + offset) > 255) {  	nR = (short)(255 - r);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: nR = (short)(255 - r);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: if ((g + offset) > 255) {  	nG = (short)(255 - g);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: if ((g + offset) > 255) {  	nG = (short)(255 - g);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: nG = (short)(255 - g);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: if ((b + offset) > 255) {  	nB = (short)(255 - b);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: if ((b + offset) > 255) {  	nB = (short)(255 - b);  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OffsetColor,The following statement contains a magic number: nB = (short)(255 - b);  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: if ((this.backgroundImg == null) || this.requiresRedraw) {  	this.backgroundImg = new Bitmap (base.Width' base.Height);  	Graphics g = Graphics.FromImage (this.backgroundImg);  	g.SmoothingMode = SmoothingMode.HighQuality;  	this.rectBackgroundImg = new RectangleF (0f' 0f' (float)base.Width' (float)base.Height);  	this.pointCenter = new PointF (this.rectBackgroundImg.Left + (this.rectBackgroundImg.Width / 2f)' this.rectBackgroundImg.Top + (this.rectBackgroundImg.Height / 2f));  	this.fTmpWidth = this.rectBackgroundImg.Width / 5f;  	this.rectBulb = new RectangleF (this.pointCenter.X - this.fTmpWidth' this.rectBackgroundImg.Bottom - ((this.fTmpWidth * 2f) + 25f)' this.fTmpWidth * 2f' this.fTmpWidth * 2f);  	this.rectCylinder = new RectangleF (this.pointCenter.X - (this.fTmpWidth / 2f)' this.rectBackgroundImg.Top + (this.drawTics ? ((float)0x19) : ((float)10))' this.fTmpWidth' (this.rectBulb.Top - this.rectBackgroundImg.Top) - (this.drawTics ? ((float)20) : ((float)5)));  	if (!base.Enabled) {  		this.colorFore = SystemColors.ControlDark;  		this.colorScale = SystemColors.GrayText;  		this.colorScaleText = SystemColors.GrayText;  		this.colorOutline = SystemColors.ControlDark;  	}  	else {  		this.colorFore = this.ForeColor;  		this.colorScale = Color.FromArgb (0' 0' 0);  		this.colorScaleText = Color.FromArgb (0' 0' 0);  		this.colorOutline = Color.FromArgb (0x40' 0' 0);  	}  	this.forePen = new Pen (this.colorFore);  	this.scalePen = new Pen (this.colorScale);  	this.outlinePen = new Pen (this.colorOutline);  	this.blackBrush = new SolidBrush (this.colorScaleText);  	this.fillBrush = new SolidBrush (this.colorBack);  	this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' 0x37)' this.OffsetColor (this.colorFore' -55)' LinearGradientMode.Horizontal);  	this.strfmtText.Alignment = StringAlignment.Center;  	this.strfmtText.LineAlignment = StringAlignment.Center;  	this.DrawBulb (g' this.rectBackgroundImg' base.Enabled);  	this.DrawCylinder (g' this.rectBackgroundImg' base.Enabled);  	RectangleF rect = new RectangleF (this.rectCylinder.X' this.rectCylinder.Y - 5f' this.rectCylinder.Width' 5f);  	g.DrawEllipse (this.outlinePen' rect);  	this.DrawTicks (g' this.rectBackgroundImg' base.Enabled);  	this.requiresRedraw = false;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: if ((this.backgroundImg == null) || this.requiresRedraw) {  	this.backgroundImg = new Bitmap (base.Width' base.Height);  	Graphics g = Graphics.FromImage (this.backgroundImg);  	g.SmoothingMode = SmoothingMode.HighQuality;  	this.rectBackgroundImg = new RectangleF (0f' 0f' (float)base.Width' (float)base.Height);  	this.pointCenter = new PointF (this.rectBackgroundImg.Left + (this.rectBackgroundImg.Width / 2f)' this.rectBackgroundImg.Top + (this.rectBackgroundImg.Height / 2f));  	this.fTmpWidth = this.rectBackgroundImg.Width / 5f;  	this.rectBulb = new RectangleF (this.pointCenter.X - this.fTmpWidth' this.rectBackgroundImg.Bottom - ((this.fTmpWidth * 2f) + 25f)' this.fTmpWidth * 2f' this.fTmpWidth * 2f);  	this.rectCylinder = new RectangleF (this.pointCenter.X - (this.fTmpWidth / 2f)' this.rectBackgroundImg.Top + (this.drawTics ? ((float)0x19) : ((float)10))' this.fTmpWidth' (this.rectBulb.Top - this.rectBackgroundImg.Top) - (this.drawTics ? ((float)20) : ((float)5)));  	if (!base.Enabled) {  		this.colorFore = SystemColors.ControlDark;  		this.colorScale = SystemColors.GrayText;  		this.colorScaleText = SystemColors.GrayText;  		this.colorOutline = SystemColors.ControlDark;  	}  	else {  		this.colorFore = this.ForeColor;  		this.colorScale = Color.FromArgb (0' 0' 0);  		this.colorScaleText = Color.FromArgb (0' 0' 0);  		this.colorOutline = Color.FromArgb (0x40' 0' 0);  	}  	this.forePen = new Pen (this.colorFore);  	this.scalePen = new Pen (this.colorScale);  	this.outlinePen = new Pen (this.colorOutline);  	this.blackBrush = new SolidBrush (this.colorScaleText);  	this.fillBrush = new SolidBrush (this.colorBack);  	this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' 0x37)' this.OffsetColor (this.colorFore' -55)' LinearGradientMode.Horizontal);  	this.strfmtText.Alignment = StringAlignment.Center;  	this.strfmtText.LineAlignment = StringAlignment.Center;  	this.DrawBulb (g' this.rectBackgroundImg' base.Enabled);  	this.DrawCylinder (g' this.rectBackgroundImg' base.Enabled);  	RectangleF rect = new RectangleF (this.rectCylinder.X' this.rectCylinder.Y - 5f' this.rectCylinder.Width' 5f);  	g.DrawEllipse (this.outlinePen' rect);  	this.DrawTicks (g' this.rectBackgroundImg' base.Enabled);  	this.requiresRedraw = false;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: if ((this.backgroundImg == null) || this.requiresRedraw) {  	this.backgroundImg = new Bitmap (base.Width' base.Height);  	Graphics g = Graphics.FromImage (this.backgroundImg);  	g.SmoothingMode = SmoothingMode.HighQuality;  	this.rectBackgroundImg = new RectangleF (0f' 0f' (float)base.Width' (float)base.Height);  	this.pointCenter = new PointF (this.rectBackgroundImg.Left + (this.rectBackgroundImg.Width / 2f)' this.rectBackgroundImg.Top + (this.rectBackgroundImg.Height / 2f));  	this.fTmpWidth = this.rectBackgroundImg.Width / 5f;  	this.rectBulb = new RectangleF (this.pointCenter.X - this.fTmpWidth' this.rectBackgroundImg.Bottom - ((this.fTmpWidth * 2f) + 25f)' this.fTmpWidth * 2f' this.fTmpWidth * 2f);  	this.rectCylinder = new RectangleF (this.pointCenter.X - (this.fTmpWidth / 2f)' this.rectBackgroundImg.Top + (this.drawTics ? ((float)0x19) : ((float)10))' this.fTmpWidth' (this.rectBulb.Top - this.rectBackgroundImg.Top) - (this.drawTics ? ((float)20) : ((float)5)));  	if (!base.Enabled) {  		this.colorFore = SystemColors.ControlDark;  		this.colorScale = SystemColors.GrayText;  		this.colorScaleText = SystemColors.GrayText;  		this.colorOutline = SystemColors.ControlDark;  	}  	else {  		this.colorFore = this.ForeColor;  		this.colorScale = Color.FromArgb (0' 0' 0);  		this.colorScaleText = Color.FromArgb (0' 0' 0);  		this.colorOutline = Color.FromArgb (0x40' 0' 0);  	}  	this.forePen = new Pen (this.colorFore);  	this.scalePen = new Pen (this.colorScale);  	this.outlinePen = new Pen (this.colorOutline);  	this.blackBrush = new SolidBrush (this.colorScaleText);  	this.fillBrush = new SolidBrush (this.colorBack);  	this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' 0x37)' this.OffsetColor (this.colorFore' -55)' LinearGradientMode.Horizontal);  	this.strfmtText.Alignment = StringAlignment.Center;  	this.strfmtText.LineAlignment = StringAlignment.Center;  	this.DrawBulb (g' this.rectBackgroundImg' base.Enabled);  	this.DrawCylinder (g' this.rectBackgroundImg' base.Enabled);  	RectangleF rect = new RectangleF (this.rectCylinder.X' this.rectCylinder.Y - 5f' this.rectCylinder.Width' 5f);  	g.DrawEllipse (this.outlinePen' rect);  	this.DrawTicks (g' this.rectBackgroundImg' base.Enabled);  	this.requiresRedraw = false;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: if ((this.backgroundImg == null) || this.requiresRedraw) {  	this.backgroundImg = new Bitmap (base.Width' base.Height);  	Graphics g = Graphics.FromImage (this.backgroundImg);  	g.SmoothingMode = SmoothingMode.HighQuality;  	this.rectBackgroundImg = new RectangleF (0f' 0f' (float)base.Width' (float)base.Height);  	this.pointCenter = new PointF (this.rectBackgroundImg.Left + (this.rectBackgroundImg.Width / 2f)' this.rectBackgroundImg.Top + (this.rectBackgroundImg.Height / 2f));  	this.fTmpWidth = this.rectBackgroundImg.Width / 5f;  	this.rectBulb = new RectangleF (this.pointCenter.X - this.fTmpWidth' this.rectBackgroundImg.Bottom - ((this.fTmpWidth * 2f) + 25f)' this.fTmpWidth * 2f' this.fTmpWidth * 2f);  	this.rectCylinder = new RectangleF (this.pointCenter.X - (this.fTmpWidth / 2f)' this.rectBackgroundImg.Top + (this.drawTics ? ((float)0x19) : ((float)10))' this.fTmpWidth' (this.rectBulb.Top - this.rectBackgroundImg.Top) - (this.drawTics ? ((float)20) : ((float)5)));  	if (!base.Enabled) {  		this.colorFore = SystemColors.ControlDark;  		this.colorScale = SystemColors.GrayText;  		this.colorScaleText = SystemColors.GrayText;  		this.colorOutline = SystemColors.ControlDark;  	}  	else {  		this.colorFore = this.ForeColor;  		this.colorScale = Color.FromArgb (0' 0' 0);  		this.colorScaleText = Color.FromArgb (0' 0' 0);  		this.colorOutline = Color.FromArgb (0x40' 0' 0);  	}  	this.forePen = new Pen (this.colorFore);  	this.scalePen = new Pen (this.colorScale);  	this.outlinePen = new Pen (this.colorOutline);  	this.blackBrush = new SolidBrush (this.colorScaleText);  	this.fillBrush = new SolidBrush (this.colorBack);  	this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' 0x37)' this.OffsetColor (this.colorFore' -55)' LinearGradientMode.Horizontal);  	this.strfmtText.Alignment = StringAlignment.Center;  	this.strfmtText.LineAlignment = StringAlignment.Center;  	this.DrawBulb (g' this.rectBackgroundImg' base.Enabled);  	this.DrawCylinder (g' this.rectBackgroundImg' base.Enabled);  	RectangleF rect = new RectangleF (this.rectCylinder.X' this.rectCylinder.Y - 5f' this.rectCylinder.Width' 5f);  	g.DrawEllipse (this.outlinePen' rect);  	this.DrawTicks (g' this.rectBackgroundImg' base.Enabled);  	this.requiresRedraw = false;  }  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: this.rectCylinder = new RectangleF (this.pointCenter.X - (this.fTmpWidth / 2f)' this.rectBackgroundImg.Top + (this.drawTics ? ((float)0x19) : ((float)10))' this.fTmpWidth' (this.rectBulb.Top - this.rectBackgroundImg.Top) - (this.drawTics ? ((float)20) : ((float)5)));  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: this.rectCylinder = new RectangleF (this.pointCenter.X - (this.fTmpWidth / 2f)' this.rectBackgroundImg.Top + (this.drawTics ? ((float)0x19) : ((float)10))' this.fTmpWidth' (this.rectBulb.Top - this.rectBackgroundImg.Top) - (this.drawTics ? ((float)20) : ((float)5)));  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: this.rectCylinder = new RectangleF (this.pointCenter.X - (this.fTmpWidth / 2f)' this.rectBackgroundImg.Top + (this.drawTics ? ((float)0x19) : ((float)10))' this.fTmpWidth' (this.rectBulb.Top - this.rectBackgroundImg.Top) - (this.drawTics ? ((float)20) : ((float)5)));  
Magic Number,SemtechLib.Controls,TempCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\TempCtrl.cs,OnPaintBackground,The following statement contains a magic number: this.bulbBrush = new LinearGradientBrush (this.rectBulb' this.OffsetColor (this.colorFore' 0x37)' this.OffsetColor (this.colorFore' -55)' LinearGradientMode.Horizontal);  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: if (this.bevelHeight > 0) {  	buttonRect.Inflate (1' 1);  	brush.CenterPoint = new PointF ((float)((buttonRect.X + (buttonRect.Width / 8)) + this.buttonPressOffset)' (float)((buttonRect.Y + (buttonRect.Height / 8)) + this.buttonPressOffset));  	brush.CenterColor = this.cColor;  	this.FillShape (g' brush' buttonRect);  	this.ShrinkShape (ref g' ref buttonRect' this.bevelHeight);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: if (this.bevelHeight > 0) {  	buttonRect.Inflate (1' 1);  	brush.CenterPoint = new PointF ((float)((buttonRect.X + (buttonRect.Width / 8)) + this.buttonPressOffset)' (float)((buttonRect.Y + (buttonRect.Height / 8)) + this.buttonPressOffset));  	brush.CenterColor = this.cColor;  	this.FillShape (g' brush' buttonRect);  	this.ShrinkShape (ref g' ref buttonRect' this.bevelHeight);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: brush.CenterPoint = new PointF ((float)((buttonRect.X + (buttonRect.Width / 8)) + this.buttonPressOffset)' (float)((buttonRect.Y + (buttonRect.Height / 8)) + this.buttonPressOffset));  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: brush.CenterPoint = new PointF ((float)((buttonRect.X + (buttonRect.Width / 8)) + this.buttonPressOffset)' (float)((buttonRect.Y + (buttonRect.Height / 8)) + this.buttonPressOffset));  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: if (this.dome) {  	brush.CenterColor = this.cColor;  	brush.CenterPoint = new PointF ((float)((buttonRect.X + (buttonRect.Width / 8)) + this.buttonPressOffset)' (float)((buttonRect.Y + (buttonRect.Height / 8)) + this.buttonPressOffset));  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: if (this.dome) {  	brush.CenterColor = this.cColor;  	brush.CenterPoint = new PointF ((float)((buttonRect.X + (buttonRect.Width / 8)) + this.buttonPressOffset)' (float)((buttonRect.Y + (buttonRect.Height / 8)) + this.buttonPressOffset));  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: brush.CenterPoint = new PointF ((float)((buttonRect.X + (buttonRect.Width / 8)) + this.buttonPressOffset)' (float)((buttonRect.Y + (buttonRect.Height / 8)) + this.buttonPressOffset));  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,DrawButton,The following statement contains a magic number: brush.CenterPoint = new PointF ((float)((buttonRect.X + (buttonRect.Width / 8)) + this.buttonPressOffset)' (float)((buttonRect.Y + (buttonRect.Height / 8)) + this.buttonPressOffset));  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,DrawFocus,The following statement contains a magic number: rect.Inflate (-2' -2);  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,DrawFocus,The following statement contains a magic number: rect.Inflate (-2' -2);  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,GetEdgeWidth,The following statement contains a magic number: if ((rect.Width < 50) | (rect.Height < 50)) {  	return 1;  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,GetEdgeWidth,The following statement contains a magic number: if ((rect.Width < 50) | (rect.Height < 50)) {  	return 1;  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,GetEdgeWidth,The following statement contains a magic number: return 2;  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	if (!base.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics g = e.Graphics;  	g.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = (base.Size.Width * 80) / 100;  	this.itemSize.Height = (base.Size.Height * 80) / 100;  	int num = (base.Size.Width * 10) / 100;  	Rectangle rect = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rectangle2 = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' (this.itemSize.Width + (num * 2)) - 1' (this.itemSize.Height + (num * 2)) - 1);  	this.edgeWidth = this.GetEdgeWidth (rect);  	this.FillBackground (g' rectangle2);  	g.DrawRectangle (new Pen (new SolidBrush (this.borderColor))' rectangle2);  	if (this.RecessDepth > 0) {  		this.DrawRecess (ref g' ref rect);  	}  	this.DrawEdges (g' ref rect);  	this.ShrinkShape (ref g' ref rect' this.edgeWidth);  	this.DrawButton (g' rect);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	if (!base.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics g = e.Graphics;  	g.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = (base.Size.Width * 80) / 100;  	this.itemSize.Height = (base.Size.Height * 80) / 100;  	int num = (base.Size.Width * 10) / 100;  	Rectangle rect = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rectangle2 = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' (this.itemSize.Width + (num * 2)) - 1' (this.itemSize.Height + (num * 2)) - 1);  	this.edgeWidth = this.GetEdgeWidth (rect);  	this.FillBackground (g' rectangle2);  	g.DrawRectangle (new Pen (new SolidBrush (this.borderColor))' rectangle2);  	if (this.RecessDepth > 0) {  		this.DrawRecess (ref g' ref rect);  	}  	this.DrawEdges (g' ref rect);  	this.ShrinkShape (ref g' ref rect' this.edgeWidth);  	this.DrawButton (g' rect);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	if (!base.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics g = e.Graphics;  	g.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = (base.Size.Width * 80) / 100;  	this.itemSize.Height = (base.Size.Height * 80) / 100;  	int num = (base.Size.Width * 10) / 100;  	Rectangle rect = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rectangle2 = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' (this.itemSize.Width + (num * 2)) - 1' (this.itemSize.Height + (num * 2)) - 1);  	this.edgeWidth = this.GetEdgeWidth (rect);  	this.FillBackground (g' rectangle2);  	g.DrawRectangle (new Pen (new SolidBrush (this.borderColor))' rectangle2);  	if (this.RecessDepth > 0) {  		this.DrawRecess (ref g' ref rect);  	}  	this.DrawEdges (g' ref rect);  	this.ShrinkShape (ref g' ref rect' this.edgeWidth);  	this.DrawButton (g' rect);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	if (!base.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics g = e.Graphics;  	g.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = (base.Size.Width * 80) / 100;  	this.itemSize.Height = (base.Size.Height * 80) / 100;  	int num = (base.Size.Width * 10) / 100;  	Rectangle rect = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rectangle2 = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' (this.itemSize.Width + (num * 2)) - 1' (this.itemSize.Height + (num * 2)) - 1);  	this.edgeWidth = this.GetEdgeWidth (rect);  	this.FillBackground (g' rectangle2);  	g.DrawRectangle (new Pen (new SolidBrush (this.borderColor))' rectangle2);  	if (this.RecessDepth > 0) {  		this.DrawRecess (ref g' ref rect);  	}  	this.DrawEdges (g' ref rect);  	this.ShrinkShape (ref g' ref rect' this.edgeWidth);  	this.DrawButton (g' rect);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	if (!base.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics g = e.Graphics;  	g.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = (base.Size.Width * 80) / 100;  	this.itemSize.Height = (base.Size.Height * 80) / 100;  	int num = (base.Size.Width * 10) / 100;  	Rectangle rect = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rectangle2 = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' (this.itemSize.Width + (num * 2)) - 1' (this.itemSize.Height + (num * 2)) - 1);  	this.edgeWidth = this.GetEdgeWidth (rect);  	this.FillBackground (g' rectangle2);  	g.DrawRectangle (new Pen (new SolidBrush (this.borderColor))' rectangle2);  	if (this.RecessDepth > 0) {  		this.DrawRecess (ref g' ref rect);  	}  	this.DrawEdges (g' ref rect);  	this.ShrinkShape (ref g' ref rect' this.edgeWidth);  	this.DrawButton (g' rect);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	if (!base.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics g = e.Graphics;  	g.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = (base.Size.Width * 80) / 100;  	this.itemSize.Height = (base.Size.Height * 80) / 100;  	int num = (base.Size.Width * 10) / 100;  	Rectangle rect = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rectangle2 = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' (this.itemSize.Width + (num * 2)) - 1' (this.itemSize.Height + (num * 2)) - 1);  	this.edgeWidth = this.GetEdgeWidth (rect);  	this.FillBackground (g' rectangle2);  	g.DrawRectangle (new Pen (new SolidBrush (this.borderColor))' rectangle2);  	if (this.RecessDepth > 0) {  		this.DrawRecess (ref g' ref rect);  	}  	this.DrawEdges (g' ref rect);  	this.ShrinkShape (ref g' ref rect' this.edgeWidth);  	this.DrawButton (g' rect);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	if (!base.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics g = e.Graphics;  	g.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = (base.Size.Width * 80) / 100;  	this.itemSize.Height = (base.Size.Height * 80) / 100;  	int num = (base.Size.Width * 10) / 100;  	Rectangle rect = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rectangle2 = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' (this.itemSize.Width + (num * 2)) - 1' (this.itemSize.Height + (num * 2)) - 1);  	this.edgeWidth = this.GetEdgeWidth (rect);  	this.FillBackground (g' rectangle2);  	g.DrawRectangle (new Pen (new SolidBrush (this.borderColor))' rectangle2);  	if (this.RecessDepth > 0) {  		this.DrawRecess (ref g' ref rect);  	}  	this.DrawEdges (g' ref rect);  	this.ShrinkShape (ref g' ref rect' this.edgeWidth);  	this.DrawButton (g' rect);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	if (!base.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics g = e.Graphics;  	g.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = (base.Size.Width * 80) / 100;  	this.itemSize.Height = (base.Size.Height * 80) / 100;  	int num = (base.Size.Width * 10) / 100;  	Rectangle rect = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rectangle2 = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' (this.itemSize.Width + (num * 2)) - 1' (this.itemSize.Height + (num * 2)) - 1);  	this.edgeWidth = this.GetEdgeWidth (rect);  	this.FillBackground (g' rectangle2);  	g.DrawRectangle (new Pen (new SolidBrush (this.borderColor))' rectangle2);  	if (this.RecessDepth > 0) {  		this.DrawRecess (ref g' ref rect);  	}  	this.DrawEdges (g' ref rect);  	this.ShrinkShape (ref g' ref rect' this.edgeWidth);  	this.DrawButton (g' rect);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	if (!base.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics g = e.Graphics;  	g.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = (base.Size.Width * 80) / 100;  	this.itemSize.Height = (base.Size.Height * 80) / 100;  	int num = (base.Size.Width * 10) / 100;  	Rectangle rect = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rectangle2 = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' (this.itemSize.Width + (num * 2)) - 1' (this.itemSize.Height + (num * 2)) - 1);  	this.edgeWidth = this.GetEdgeWidth (rect);  	this.FillBackground (g' rectangle2);  	g.DrawRectangle (new Pen (new SolidBrush (this.borderColor))' rectangle2);  	if (this.RecessDepth > 0) {  		this.DrawRecess (ref g' ref rect);  	}  	this.DrawEdges (g' ref rect);  	this.ShrinkShape (ref g' ref rect' this.edgeWidth);  	this.DrawButton (g' rect);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	if (!base.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics g = e.Graphics;  	g.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = (base.Size.Width * 80) / 100;  	this.itemSize.Height = (base.Size.Height * 80) / 100;  	int num = (base.Size.Width * 10) / 100;  	Rectangle rect = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rectangle2 = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' (this.itemSize.Width + (num * 2)) - 1' (this.itemSize.Height + (num * 2)) - 1);  	this.edgeWidth = this.GetEdgeWidth (rect);  	this.FillBackground (g' rectangle2);  	g.DrawRectangle (new Pen (new SolidBrush (this.borderColor))' rectangle2);  	if (this.RecessDepth > 0) {  		this.DrawRecess (ref g' ref rect);  	}  	this.DrawEdges (g' ref rect);  	this.ShrinkShape (ref g' ref rect' this.edgeWidth);  	this.DrawButton (g' rect);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	if (!base.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics g = e.Graphics;  	g.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = (base.Size.Width * 80) / 100;  	this.itemSize.Height = (base.Size.Height * 80) / 100;  	int num = (base.Size.Width * 10) / 100;  	Rectangle rect = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rectangle2 = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' (this.itemSize.Width + (num * 2)) - 1' (this.itemSize.Height + (num * 2)) - 1);  	this.edgeWidth = this.GetEdgeWidth (rect);  	this.FillBackground (g' rectangle2);  	g.DrawRectangle (new Pen (new SolidBrush (this.borderColor))' rectangle2);  	if (this.RecessDepth > 0) {  		this.DrawRecess (ref g' ref rect);  	}  	this.DrawEdges (g' ref rect);  	this.ShrinkShape (ref g' ref rect' this.edgeWidth);  	this.DrawButton (g' rect);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	if (!base.Enabled) {  		this.buttonColor = ControlPaint.Light (SystemColors.InactiveCaption);  		this.backgroudColor = SystemColors.InactiveCaption;  		this.borderColor = SystemColors.InactiveBorder;  	}  	else {  		this.buttonColor = Color.Aqua;  		this.backgroudColor = Color.GhostWhite;  		this.borderColor = Color.Black;  	}  	this.edgeColor1 = ControlPaint.Light (this.buttonColor);  	this.edgeColor2 = ControlPaint.Dark (this.buttonColor);  	Graphics g = e.Graphics;  	g.SmoothingMode = SmoothingMode.AntiAlias;  	this.itemSize.Width = (base.Size.Width * 80) / 100;  	this.itemSize.Height = (base.Size.Height * 80) / 100;  	int num = (base.Size.Width * 10) / 100;  	Rectangle rect = new Rectangle (this.PosFromAlignment.X + 2' this.PosFromAlignment.Y + 2' this.itemSize.Width - 4' this.itemSize.Height - 4);  	Rectangle rectangle2 = new Rectangle (this.PosFromAlignment.X - num' this.PosFromAlignment.Y - num' (this.itemSize.Width + (num * 2)) - 1' (this.itemSize.Height + (num * 2)) - 1);  	this.edgeWidth = this.GetEdgeWidth (rect);  	this.FillBackground (g' rectangle2);  	g.DrawRectangle (new Pen (new SolidBrush (this.borderColor))' rectangle2);  	if (this.RecessDepth > 0) {  		this.DrawRecess (ref g' ref rect);  	}  	this.DrawEdges (g' ref rect);  	this.ShrinkShape (ref g' ref rect' this.edgeWidth);  	this.DrawButton (g' rect);  }  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: this.itemSize.Width = (base.Size.Width * 80) / 100;  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: this.itemSize.Width = (base.Size.Width * 80) / 100;  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: this.itemSize.Height = (base.Size.Height * 80) / 100;  
Magic Number,SemtechLib.Controls,PushBtn,C:\repos\x893_SX1231\SemtechLib\Controls\PushBtn.cs,OnPaint,The following statement contains a magic number: this.itemSize.Height = (base.Size.Height * 80) / 100;  
Magic Number,SemtechLib.Controls,MenuStripEx,C:\repos\x893_SX1231\SemtechLib\Controls\MenuStripEx.cs,WndProc,The following statement contains a magic number: if (m.Msg != 0x200L || !suppressHighlighting || base.TopLevelControl.ContainsFocus) {  	base.WndProc (ref m);  	if (m.Msg == 0x21L && clickThrough && m.Result == (IntPtr)2)  		m.Result = (IntPtr)1;  }  
Magic Number,SemtechLib.Controls,MenuStripEx,C:\repos\x893_SX1231\SemtechLib\Controls\MenuStripEx.cs,WndProc,The following statement contains a magic number: if (m.Msg == 0x21L && clickThrough && m.Result == (IntPtr)2)  	m.Result = (IntPtr)1;  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,SwitchBtn,The following statement contains a magic number: base.Width = 15;  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,SwitchBtn,The following statement contains a magic number: this.itemSize.Width = 10;  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	if (base.Enabled) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  		if (this.Checked) {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  		}  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0xff' 0' 0))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  	if (this.Checked) {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  	}  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (200' 120' 120))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' (int)(this.PosFromAlignment.X + 2)' (int)(this.PosFromAlignment.Y + 5)' (int)(this.itemSize.Width - 4)' (int)(this.itemSize.Height - 10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: if (this.Checked) {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  }  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 6)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,SwitchBtn,C:\repos\x893_SX1231\SemtechLib\Controls\SwitchBtn.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (100' 100' 100))' (int)(this.PosFromAlignment.X + 3)' (int)(this.PosFromAlignment.Y + 10)' (int)(this.itemSize.Width - 6)' (int)(this.itemSize.Height - 0x10));  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,Led,The following statement contains a magic number: base.Size = new Size (15' 15);  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,Led,The following statement contains a magic number: base.Size = new Size (15' 15);  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	float num = 1f - (((float)base.Width) / ((float)base.Height));  	float angle = 50f - (15f * num);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush brush = new LinearGradientBrush (rect' ControlPaint.Dark (base.Parent.BackColor)' ControlPaint.LightLight (base.Parent.BackColor)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush.Blend = blend;  	Rectangle rectangle2 = rect;  	rectangle2.Inflate (1' 1);  	e.Graphics.FillEllipse (brush' rectangle2);  	if (base.Enabled) {  		if (this.Checked) {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  		else {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  	}  	LinearGradientBrush brush2 = new LinearGradientBrush (rect' Color.FromArgb (150' 0xff' 0xff' 0xff)' Color.Transparent' angle);  	LinearGradientBrush brush3 = new LinearGradientBrush (rect' Color.FromArgb (100' 0xff' 0xff' 0xff)' Color.FromArgb (100' 0xff' 0xff' 0xff)' angle);  	Blend blend2 = new Blend ();  	blend2.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend2.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush2.Blend = blend2;  	brush3.Blend = blend2;  	e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  	e.Graphics.FillEllipse (brush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	float num = 1f - (((float)base.Width) / ((float)base.Height));  	float angle = 50f - (15f * num);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush brush = new LinearGradientBrush (rect' ControlPaint.Dark (base.Parent.BackColor)' ControlPaint.LightLight (base.Parent.BackColor)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush.Blend = blend;  	Rectangle rectangle2 = rect;  	rectangle2.Inflate (1' 1);  	e.Graphics.FillEllipse (brush' rectangle2);  	if (base.Enabled) {  		if (this.Checked) {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  		else {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  	}  	LinearGradientBrush brush2 = new LinearGradientBrush (rect' Color.FromArgb (150' 0xff' 0xff' 0xff)' Color.Transparent' angle);  	LinearGradientBrush brush3 = new LinearGradientBrush (rect' Color.FromArgb (100' 0xff' 0xff' 0xff)' Color.FromArgb (100' 0xff' 0xff' 0xff)' angle);  	Blend blend2 = new Blend ();  	blend2.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend2.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush2.Blend = blend2;  	brush3.Blend = blend2;  	e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  	e.Graphics.FillEllipse (brush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	float num = 1f - (((float)base.Width) / ((float)base.Height));  	float angle = 50f - (15f * num);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush brush = new LinearGradientBrush (rect' ControlPaint.Dark (base.Parent.BackColor)' ControlPaint.LightLight (base.Parent.BackColor)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush.Blend = blend;  	Rectangle rectangle2 = rect;  	rectangle2.Inflate (1' 1);  	e.Graphics.FillEllipse (brush' rectangle2);  	if (base.Enabled) {  		if (this.Checked) {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  		else {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  	}  	LinearGradientBrush brush2 = new LinearGradientBrush (rect' Color.FromArgb (150' 0xff' 0xff' 0xff)' Color.Transparent' angle);  	LinearGradientBrush brush3 = new LinearGradientBrush (rect' Color.FromArgb (100' 0xff' 0xff' 0xff)' Color.FromArgb (100' 0xff' 0xff' 0xff)' angle);  	Blend blend2 = new Blend ();  	blend2.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend2.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush2.Blend = blend2;  	brush3.Blend = blend2;  	e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  	e.Graphics.FillEllipse (brush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	float num = 1f - (((float)base.Width) / ((float)base.Height));  	float angle = 50f - (15f * num);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush brush = new LinearGradientBrush (rect' ControlPaint.Dark (base.Parent.BackColor)' ControlPaint.LightLight (base.Parent.BackColor)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush.Blend = blend;  	Rectangle rectangle2 = rect;  	rectangle2.Inflate (1' 1);  	e.Graphics.FillEllipse (brush' rectangle2);  	if (base.Enabled) {  		if (this.Checked) {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  		else {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  	}  	LinearGradientBrush brush2 = new LinearGradientBrush (rect' Color.FromArgb (150' 0xff' 0xff' 0xff)' Color.Transparent' angle);  	LinearGradientBrush brush3 = new LinearGradientBrush (rect' Color.FromArgb (100' 0xff' 0xff' 0xff)' Color.FromArgb (100' 0xff' 0xff' 0xff)' angle);  	Blend blend2 = new Blend ();  	blend2.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend2.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush2.Blend = blend2;  	brush3.Blend = blend2;  	e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  	e.Graphics.FillEllipse (brush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	float num = 1f - (((float)base.Width) / ((float)base.Height));  	float angle = 50f - (15f * num);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush brush = new LinearGradientBrush (rect' ControlPaint.Dark (base.Parent.BackColor)' ControlPaint.LightLight (base.Parent.BackColor)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush.Blend = blend;  	Rectangle rectangle2 = rect;  	rectangle2.Inflate (1' 1);  	e.Graphics.FillEllipse (brush' rectangle2);  	if (base.Enabled) {  		if (this.Checked) {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  		else {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  	}  	LinearGradientBrush brush2 = new LinearGradientBrush (rect' Color.FromArgb (150' 0xff' 0xff' 0xff)' Color.Transparent' angle);  	LinearGradientBrush brush3 = new LinearGradientBrush (rect' Color.FromArgb (100' 0xff' 0xff' 0xff)' Color.FromArgb (100' 0xff' 0xff' 0xff)' angle);  	Blend blend2 = new Blend ();  	blend2.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend2.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush2.Blend = blend2;  	brush3.Blend = blend2;  	e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  	e.Graphics.FillEllipse (brush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	float num = 1f - (((float)base.Width) / ((float)base.Height));  	float angle = 50f - (15f * num);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush brush = new LinearGradientBrush (rect' ControlPaint.Dark (base.Parent.BackColor)' ControlPaint.LightLight (base.Parent.BackColor)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush.Blend = blend;  	Rectangle rectangle2 = rect;  	rectangle2.Inflate (1' 1);  	e.Graphics.FillEllipse (brush' rectangle2);  	if (base.Enabled) {  		if (this.Checked) {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  		else {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  	}  	LinearGradientBrush brush2 = new LinearGradientBrush (rect' Color.FromArgb (150' 0xff' 0xff' 0xff)' Color.Transparent' angle);  	LinearGradientBrush brush3 = new LinearGradientBrush (rect' Color.FromArgb (100' 0xff' 0xff' 0xff)' Color.FromArgb (100' 0xff' 0xff' 0xff)' angle);  	Blend blend2 = new Blend ();  	blend2.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend2.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush2.Blend = blend2;  	brush3.Blend = blend2;  	e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  	e.Graphics.FillEllipse (brush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	float num = 1f - (((float)base.Width) / ((float)base.Height));  	float angle = 50f - (15f * num);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush brush = new LinearGradientBrush (rect' ControlPaint.Dark (base.Parent.BackColor)' ControlPaint.LightLight (base.Parent.BackColor)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush.Blend = blend;  	Rectangle rectangle2 = rect;  	rectangle2.Inflate (1' 1);  	e.Graphics.FillEllipse (brush' rectangle2);  	if (base.Enabled) {  		if (this.Checked) {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  		else {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  	}  	LinearGradientBrush brush2 = new LinearGradientBrush (rect' Color.FromArgb (150' 0xff' 0xff' 0xff)' Color.Transparent' angle);  	LinearGradientBrush brush3 = new LinearGradientBrush (rect' Color.FromArgb (100' 0xff' 0xff' 0xff)' Color.FromArgb (100' 0xff' 0xff' 0xff)' angle);  	Blend blend2 = new Blend ();  	blend2.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend2.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush2.Blend = blend2;  	brush3.Blend = blend2;  	e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  	e.Graphics.FillEllipse (brush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	float num = 1f - (((float)base.Width) / ((float)base.Height));  	float angle = 50f - (15f * num);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush brush = new LinearGradientBrush (rect' ControlPaint.Dark (base.Parent.BackColor)' ControlPaint.LightLight (base.Parent.BackColor)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush.Blend = blend;  	Rectangle rectangle2 = rect;  	rectangle2.Inflate (1' 1);  	e.Graphics.FillEllipse (brush' rectangle2);  	if (base.Enabled) {  		if (this.Checked) {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  		else {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  	}  	LinearGradientBrush brush2 = new LinearGradientBrush (rect' Color.FromArgb (150' 0xff' 0xff' 0xff)' Color.Transparent' angle);  	LinearGradientBrush brush3 = new LinearGradientBrush (rect' Color.FromArgb (100' 0xff' 0xff' 0xff)' Color.FromArgb (100' 0xff' 0xff' 0xff)' angle);  	Blend blend2 = new Blend ();  	blend2.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend2.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush2.Blend = blend2;  	brush3.Blend = blend2;  	e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  	e.Graphics.FillEllipse (brush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	float num = 1f - (((float)base.Width) / ((float)base.Height));  	float angle = 50f - (15f * num);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush brush = new LinearGradientBrush (rect' ControlPaint.Dark (base.Parent.BackColor)' ControlPaint.LightLight (base.Parent.BackColor)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush.Blend = blend;  	Rectangle rectangle2 = rect;  	rectangle2.Inflate (1' 1);  	e.Graphics.FillEllipse (brush' rectangle2);  	if (base.Enabled) {  		if (this.Checked) {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  		else {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  	}  	LinearGradientBrush brush2 = new LinearGradientBrush (rect' Color.FromArgb (150' 0xff' 0xff' 0xff)' Color.Transparent' angle);  	LinearGradientBrush brush3 = new LinearGradientBrush (rect' Color.FromArgb (100' 0xff' 0xff' 0xff)' Color.FromArgb (100' 0xff' 0xff' 0xff)' angle);  	Blend blend2 = new Blend ();  	blend2.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend2.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush2.Blend = blend2;  	brush3.Blend = blend2;  	e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  	e.Graphics.FillEllipse (brush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	float num = 1f - (((float)base.Width) / ((float)base.Height));  	float angle = 50f - (15f * num);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush brush = new LinearGradientBrush (rect' ControlPaint.Dark (base.Parent.BackColor)' ControlPaint.LightLight (base.Parent.BackColor)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush.Blend = blend;  	Rectangle rectangle2 = rect;  	rectangle2.Inflate (1' 1);  	e.Graphics.FillEllipse (brush' rectangle2);  	if (base.Enabled) {  		if (this.Checked) {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  		else {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  	}  	LinearGradientBrush brush2 = new LinearGradientBrush (rect' Color.FromArgb (150' 0xff' 0xff' 0xff)' Color.Transparent' angle);  	LinearGradientBrush brush3 = new LinearGradientBrush (rect' Color.FromArgb (100' 0xff' 0xff' 0xff)' Color.FromArgb (100' 0xff' 0xff' 0xff)' angle);  	Blend blend2 = new Blend ();  	blend2.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend2.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush2.Blend = blend2;  	brush3.Blend = blend2;  	e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  	e.Graphics.FillEllipse (brush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: if (this.Paint != null) {  	this.Paint (this' e);  }  else {  	base.OnPaint (e);  	float num = 1f - (((float)base.Width) / ((float)base.Height));  	float angle = 50f - (15f * num);  	Rectangle rect = new Rectangle (this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  	LinearGradientBrush brush = new LinearGradientBrush (rect' ControlPaint.Dark (base.Parent.BackColor)' ControlPaint.LightLight (base.Parent.BackColor)' angle);  	Blend blend = new Blend ();  	blend.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush.Blend = blend;  	Rectangle rectangle2 = rect;  	rectangle2.Inflate (1' 1);  	e.Graphics.FillEllipse (brush' rectangle2);  	if (base.Enabled) {  		if (this.Checked) {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Light (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  		else {  			e.Graphics.FillEllipse (new SolidBrush (ControlPaint.Dark (this.ledColor))' this.PosFromAlignment.X' this.PosFromAlignment.Y' this.itemSize.Width' this.itemSize.Height);  		}  	}  	LinearGradientBrush brush2 = new LinearGradientBrush (rect' Color.FromArgb (150' 0xff' 0xff' 0xff)' Color.Transparent' angle);  	LinearGradientBrush brush3 = new LinearGradientBrush (rect' Color.FromArgb (100' 0xff' 0xff' 0xff)' Color.FromArgb (100' 0xff' 0xff' 0xff)' angle);  	Blend blend2 = new Blend ();  	blend2.Positions = new float[] {  		0f'  		0.2f'  		0.4f'  		0.6f'  		0.8f'  		1f  	};  	blend2.Factors = new float[] {  		0.2f'  		0.2f'  		0.4f'  		0.4f'  		1f'  		1f  	};  	brush2.Blend = blend2;  	brush3.Blend = blend2;  	e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  	e.Graphics.FillEllipse (brush2' new Rectangle (this.PosFromAlignment' this.itemSize));  }  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  
Magic Number,SemtechLib.Controls,Led,C:\repos\x893_SX1231\SemtechLib\Controls\Led.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillEllipse (brush3' (int)(this.PosFromAlignment.X + ((this.itemSize.Width * 13) / 100))' (int)(this.PosFromAlignment.Y + ((this.itemSize.Height * 13) / 100))' (int)((this.itemSize.Width * 40) / 100)' (int)((this.itemSize.Height * 40) / 100));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Paint != null) {  	Paint (this' e);  }  else {  	base.OnPaint (e);  	itemSize.Width = (base.Size.Width * 0x42) / 100;  	itemSize.Height = (base.Size.Height * 0x5c) / 100;  	if (base.Enabled) {  		Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  		e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  		if (Checked) {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  		}  		else {  			e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  		}  	}  	else {  		Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  		e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  	}  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: itemSize.Width = (base.Size.Width * 0x42) / 100;  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: itemSize.Height = (base.Size.Height * 0x5c) / 100;  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (base.Enabled) {  	Size size = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  	e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  	if (Checked) {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  	}  	else {  		e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  	}  }  else {  	Size size2 = new Size ((itemSize.Width * 40) / 100' (itemSize.Width * 40) / 100);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveCaption)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  	e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (150' 150' 150))' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' itemSize.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size.Height / 2)' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size.Height / 2)' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (0' 0' 0))' (PosFromAlignment.X + (itemSize.Width / 2)) - (size.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size.Height / 2)' size.Width' size.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Checked) {  	e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Checked) {  	e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Checked) {  	e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Checked) {  	e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Checked) {  	e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: if (Checked) {  	e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  }  else {  	e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  }  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y' itemSize.Width' 3 * (itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (ForeColor)' PosFromAlignment.X' PosFromAlignment.Y + (2 * (itemSize.Height / 5))' itemSize.Width' 3 * (itemSize.Height / 5));  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 4)) - (size2.Height / 2)' size2.Width' size2.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (itemSize.Height / 2)) - (size2.Height / 2)' size2.Width' size2.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  
Magic Number,SemtechLib.Controls,Jumper,C:\repos\x893_SX1231\SemtechLib\Controls\Jumper.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (SystemColors.InactiveBorder)' (PosFromAlignment.X + (itemSize.Width / 2)) - (size2.Width / 2)' (PosFromAlignment.Y + (3 * (itemSize.Height / 4))) - (size2.Height / 2)' size2.Width' size2.Height);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl,The following statement contains a magic number: History = 100;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl,The following statement contains a magic number: UpdateRate = 100;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl,The following statement contains a magic number: ScaleX.Max = 100;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl,The following statement contains a magic number: ScaleY.Max = 100;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl,The following statement contains a magic number: GridX.Minor = 5;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl,The following statement contains a magic number: GridY.Minor = 5;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (!frameFit) {  	if (ScaleY.Show) {  		labelScaleYmax.Text = FrameZoom.Top.ToString ();  		labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  		Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  		labelScaleYmax.Location = point;  		textBoxScaleYmax.Location = point;  		point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  		labelScaleYmin.Location = point;  		textBoxScaleYmin.Location = point;  		labelScaleYmax.Visible = true;  		labelScaleYmin.Visible = true;  		leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  	}  	else {  		labelScaleYmax.Visible = false;  		labelScaleYmin.Visible = false;  		leftOffset = 0;  	}  	if (ScaleX.Show) {  	}  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (!frameFit) {  	if (ScaleY.Show) {  		labelScaleYmax.Text = FrameZoom.Top.ToString ();  		labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  		Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  		labelScaleYmax.Location = point;  		textBoxScaleYmax.Location = point;  		point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  		labelScaleYmin.Location = point;  		textBoxScaleYmin.Location = point;  		labelScaleYmax.Visible = true;  		labelScaleYmin.Visible = true;  		leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  	}  	else {  		labelScaleYmax.Visible = false;  		labelScaleYmin.Visible = false;  		leftOffset = 0;  	}  	if (ScaleX.Show) {  	}  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (!frameFit) {  	if (ScaleY.Show) {  		labelScaleYmax.Text = FrameZoom.Top.ToString ();  		labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  		Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  		labelScaleYmax.Location = point;  		textBoxScaleYmax.Location = point;  		point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  		labelScaleYmin.Location = point;  		textBoxScaleYmin.Location = point;  		labelScaleYmax.Visible = true;  		labelScaleYmin.Visible = true;  		leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  	}  	else {  		labelScaleYmax.Visible = false;  		labelScaleYmin.Visible = false;  		leftOffset = 0;  	}  	if (ScaleX.Show) {  	}  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (!frameFit) {  	if (ScaleY.Show) {  		labelScaleYmax.Text = FrameZoom.Top.ToString ();  		labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  		Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  		labelScaleYmax.Location = point;  		textBoxScaleYmax.Location = point;  		point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  		labelScaleYmin.Location = point;  		textBoxScaleYmin.Location = point;  		labelScaleYmax.Visible = true;  		labelScaleYmin.Visible = true;  		leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  	}  	else {  		labelScaleYmax.Visible = false;  		labelScaleYmin.Visible = false;  		leftOffset = 0;  	}  	if (ScaleX.Show) {  	}  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (ScaleY.Show) {  	labelScaleYmax.Text = FrameZoom.Top.ToString ();  	labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  	Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  	labelScaleYmax.Location = point;  	textBoxScaleYmax.Location = point;  	point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  	labelScaleYmin.Location = point;  	textBoxScaleYmin.Location = point;  	labelScaleYmax.Visible = true;  	labelScaleYmin.Visible = true;  	leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  	leftOffset = 0;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (ScaleY.Show) {  	labelScaleYmax.Text = FrameZoom.Top.ToString ();  	labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  	Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  	labelScaleYmax.Location = point;  	textBoxScaleYmax.Location = point;  	point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  	labelScaleYmin.Location = point;  	textBoxScaleYmin.Location = point;  	labelScaleYmax.Visible = true;  	labelScaleYmin.Visible = true;  	leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  	leftOffset = 0;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (ScaleY.Show) {  	labelScaleYmax.Text = FrameZoom.Top.ToString ();  	labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  	Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  	labelScaleYmax.Location = point;  	textBoxScaleYmax.Location = point;  	point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  	labelScaleYmin.Location = point;  	textBoxScaleYmin.Location = point;  	labelScaleYmax.Visible = true;  	labelScaleYmin.Visible = true;  	leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  	leftOffset = 0;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (ScaleY.Show) {  	labelScaleYmax.Text = FrameZoom.Top.ToString ();  	labelScaleYmin.Text = FrameZoom.Bottom.ToString ();  	Point point = new Point (0' GraphWindow.Top - (labelScaleYmax.Size.Height / 2));  	labelScaleYmax.Location = point;  	textBoxScaleYmax.Location = point;  	point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  	labelScaleYmin.Location = point;  	textBoxScaleYmin.Location = point;  	labelScaleYmax.Visible = true;  	labelScaleYmin.Visible = true;  	leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  }  else {  	labelScaleYmax.Visible = false;  	labelScaleYmin.Visible = false;  	leftOffset = 0;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: point.Y = GraphWindow.Bottom - (labelScaleYmin.Size.Height / 2);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: leftOffset = Math.Max ((int)(labelScaleYmax.ClientRectangle.Width / 2)' (int)(labelScaleYmin.ClientRectangle.Width / 2));  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: point2.X = (workingArea.Left + (workingArea.Width / 2)) - (labelSample.ClientRectangle.Width / 2);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: point2.X = (workingArea.Left + (workingArea.Width / 2)) - (labelSample.ClientRectangle.Width / 2);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (GraphData data2 in dataCollection) {  	int num7;  	penLine.Color = data2.Color;  	brushPoint = new SolidBrush (data2.Color);  	List<Point> pointsZoom = GetPointsZoom (data2);  	switch (data2.GraphType) {  	case eGraphType.Dot:  		foreach (Point point3 in pointsZoom) {  			e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  		}  		goto Label_0806;  	case eGraphType.Line:  		for (int j = 0; j < (pointsZoom.Count - 1); j++) {  			e.Graphics.DrawLine (penLine' pointsZoom [j]' pointsZoom [j + 1]);  		}  		goto Label_0806;  	case eGraphType.Bar:  		if (pointsZoom.Count > 0) {  			num7 = workingArea.Bottom - ((workingArea.Height * -FrameZoom.Bottom) / FrameZoom.Height);  			Point point7 = pointsZoom [pointsZoom.Count - 1];  			if (point7.Y >= num7) {  				break;  			}  			Point point9 = pointsZoom [pointsZoom.Count - 1];  			Point point10 = pointsZoom [pointsZoom.Count - 1];  			e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point9.Y' workingArea.Width / num4' num7 - point10.Y));  		}  		goto Label_0806;  	default:  		goto Label_0806;  	}  	Point point11 = pointsZoom [pointsZoom.Count - 1];  	if (point11.Y > num7) {  		Point point13 = pointsZoom [pointsZoom.Count - 1];  		e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' num7' workingArea.Width / num4' point13.Y - num7));  	}  	else {  		penLine.Color = Color.Blue;  		e.Graphics.DrawRectangle (penLine' (float)(workingArea.Location.X + (num5 * (workingArea.Width / num4)))' (float)num7' (float)(workingArea.Width / num4)' 0.1f);  	}  	Label_0806:  	num5++;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (GraphData data2 in dataCollection) {  	int num7;  	penLine.Color = data2.Color;  	brushPoint = new SolidBrush (data2.Color);  	List<Point> pointsZoom = GetPointsZoom (data2);  	switch (data2.GraphType) {  	case eGraphType.Dot:  		foreach (Point point3 in pointsZoom) {  			e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  		}  		goto Label_0806;  	case eGraphType.Line:  		for (int j = 0; j < (pointsZoom.Count - 1); j++) {  			e.Graphics.DrawLine (penLine' pointsZoom [j]' pointsZoom [j + 1]);  		}  		goto Label_0806;  	case eGraphType.Bar:  		if (pointsZoom.Count > 0) {  			num7 = workingArea.Bottom - ((workingArea.Height * -FrameZoom.Bottom) / FrameZoom.Height);  			Point point7 = pointsZoom [pointsZoom.Count - 1];  			if (point7.Y >= num7) {  				break;  			}  			Point point9 = pointsZoom [pointsZoom.Count - 1];  			Point point10 = pointsZoom [pointsZoom.Count - 1];  			e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point9.Y' workingArea.Width / num4' num7 - point10.Y));  		}  		goto Label_0806;  	default:  		goto Label_0806;  	}  	Point point11 = pointsZoom [pointsZoom.Count - 1];  	if (point11.Y > num7) {  		Point point13 = pointsZoom [pointsZoom.Count - 1];  		e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' num7' workingArea.Width / num4' point13.Y - num7));  	}  	else {  		penLine.Color = Color.Blue;  		e.Graphics.DrawRectangle (penLine' (float)(workingArea.Location.X + (num5 * (workingArea.Width / num4)))' (float)num7' (float)(workingArea.Width / num4)' 0.1f);  	}  	Label_0806:  	num5++;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: switch (data2.GraphType) {  case eGraphType.Dot:  	foreach (Point point3 in pointsZoom) {  		e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  	}  	goto Label_0806;  case eGraphType.Line:  	for (int j = 0; j < (pointsZoom.Count - 1); j++) {  		e.Graphics.DrawLine (penLine' pointsZoom [j]' pointsZoom [j + 1]);  	}  	goto Label_0806;  case eGraphType.Bar:  	if (pointsZoom.Count > 0) {  		num7 = workingArea.Bottom - ((workingArea.Height * -FrameZoom.Bottom) / FrameZoom.Height);  		Point point7 = pointsZoom [pointsZoom.Count - 1];  		if (point7.Y >= num7) {  			break;  		}  		Point point9 = pointsZoom [pointsZoom.Count - 1];  		Point point10 = pointsZoom [pointsZoom.Count - 1];  		e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point9.Y' workingArea.Width / num4' num7 - point10.Y));  	}  	goto Label_0806;  default:  	goto Label_0806;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: switch (data2.GraphType) {  case eGraphType.Dot:  	foreach (Point point3 in pointsZoom) {  		e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  	}  	goto Label_0806;  case eGraphType.Line:  	for (int j = 0; j < (pointsZoom.Count - 1); j++) {  		e.Graphics.DrawLine (penLine' pointsZoom [j]' pointsZoom [j + 1]);  	}  	goto Label_0806;  case eGraphType.Bar:  	if (pointsZoom.Count > 0) {  		num7 = workingArea.Bottom - ((workingArea.Height * -FrameZoom.Bottom) / FrameZoom.Height);  		Point point7 = pointsZoom [pointsZoom.Count - 1];  		if (point7.Y >= num7) {  			break;  		}  		Point point9 = pointsZoom [pointsZoom.Count - 1];  		Point point10 = pointsZoom [pointsZoom.Count - 1];  		e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point9.Y' workingArea.Width / num4' num7 - point10.Y));  	}  	goto Label_0806;  default:  	goto Label_0806;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (Point point3 in pointsZoom) {  	e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (Point point3 in pointsZoom) {  	e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (brushPoint' point3.X' point3.Y' 2' 2);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (((FrameZoom.Top != frameFull.Top) || (FrameZoom.Bottom != frameFull.Bottom)) || ((FrameZoom.Left != frameFull.Left) || (FrameZoom.Right != frameFull.Right))) {  	Point point4 = new Point (workingArea.Location.X + (workingArea.Width / 50)' workingArea.Location.Y + (workingArea.Height / 50));  	workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  	workingArea.Location = point4;  	e.Graphics.SetClip (workingArea);  	e.Graphics.FillRectangle (brushBackground' workingArea);  	e.Graphics.DrawRectangle (penLine' workingArea.X' workingArea.Y' workingArea.Width - 1' workingArea.Height - 1);  	num5 = 0;  	foreach (GraphData data3 in dataCollection) {  		penLine.Color = data3.Color;  		brushPoint = new SolidBrush (data3.Color);  		List<Point> points = GetPoints (data3);  		switch (data3.GraphType) {  		case eGraphType.Dot:  			foreach (Point point5 in points) {  				e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  			}  			break;  		case eGraphType.Line:  			for (int k = 0; k < (points.Count - 1); k++) {  				e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  			}  			break;  		case eGraphType.Bar:  			if (points.Count > 0) {  				Point point18 = points [points.Count - 1];  				e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  			}  			break;  		}  		num5++;  	}  	penFrame.DashStyle = DashStyle.Dot;  	e.Graphics.DrawRectangle (penFrame' ZoomRect);  	penFrame.DashStyle = DashStyle.Solid;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: workingArea.Inflate ((-2 * workingArea.Width) / 5' (-2 * workingArea.Height) / 5);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (GraphData data3 in dataCollection) {  	penLine.Color = data3.Color;  	brushPoint = new SolidBrush (data3.Color);  	List<Point> points = GetPoints (data3);  	switch (data3.GraphType) {  	case eGraphType.Dot:  		foreach (Point point5 in points) {  			e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  		}  		break;  	case eGraphType.Line:  		for (int k = 0; k < (points.Count - 1); k++) {  			e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  		}  		break;  	case eGraphType.Bar:  		if (points.Count > 0) {  			Point point18 = points [points.Count - 1];  			e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  		}  		break;  	}  	num5++;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (GraphData data3 in dataCollection) {  	penLine.Color = data3.Color;  	brushPoint = new SolidBrush (data3.Color);  	List<Point> points = GetPoints (data3);  	switch (data3.GraphType) {  	case eGraphType.Dot:  		foreach (Point point5 in points) {  			e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  		}  		break;  	case eGraphType.Line:  		for (int k = 0; k < (points.Count - 1); k++) {  			e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  		}  		break;  	case eGraphType.Bar:  		if (points.Count > 0) {  			Point point18 = points [points.Count - 1];  			e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  		}  		break;  	}  	num5++;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: switch (data3.GraphType) {  case eGraphType.Dot:  	foreach (Point point5 in points) {  		e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  	}  	break;  case eGraphType.Line:  	for (int k = 0; k < (points.Count - 1); k++) {  		e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  	}  	break;  case eGraphType.Bar:  	if (points.Count > 0) {  		Point point18 = points [points.Count - 1];  		e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  	}  	break;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: switch (data3.GraphType) {  case eGraphType.Dot:  	foreach (Point point5 in points) {  		e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  	}  	break;  case eGraphType.Line:  	for (int k = 0; k < (points.Count - 1); k++) {  		e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  	}  	break;  case eGraphType.Bar:  	if (points.Count > 0) {  		Point point18 = points [points.Count - 1];  		e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  	}  	break;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (Point point5 in points) {  	e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: foreach (Point point5 in points) {  	e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (Zoom) {  	int x = base.ClientRectangle.Right - (checkBoxAutoScale.Width + 3);  	int y = (base.ClientRectangle.Bottom - base.ClientRectangle.Top) / 2;  	Point point6 = new Point (x' y - (checkBoxAutoScale.Height * 2));  	checkBoxAutoScale.Location = point6;  	point6 = new Point (x' y - checkBoxAutoScale.Height);  	checkBoxZoomIn.Location = point6;  	point6 = new Point (x' y);  	checkBoxZoomOut.Location = point6;  	point6 = new Point (x' y + checkBoxAutoScale.Height);  	checkBoxHand.Location = point6;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (Zoom) {  	int x = base.ClientRectangle.Right - (checkBoxAutoScale.Width + 3);  	int y = (base.ClientRectangle.Bottom - base.ClientRectangle.Top) / 2;  	Point point6 = new Point (x' y - (checkBoxAutoScale.Height * 2));  	checkBoxAutoScale.Location = point6;  	point6 = new Point (x' y - checkBoxAutoScale.Height);  	checkBoxZoomIn.Location = point6;  	point6 = new Point (x' y);  	checkBoxZoomOut.Location = point6;  	point6 = new Point (x' y + checkBoxAutoScale.Height);  	checkBoxHand.Location = point6;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following statement contains a magic number: if (Zoom) {  	int x = base.ClientRectangle.Right - (checkBoxAutoScale.Width + 3);  	int y = (base.ClientRectangle.Bottom - base.ClientRectangle.Top) / 2;  	Point point6 = new Point (x' y - (checkBoxAutoScale.Height * 2));  	checkBoxAutoScale.Location = point6;  	point6 = new Point (x' y - checkBoxAutoScale.Height);  	checkBoxZoomIn.Location = point6;  	point6 = new Point (x' y);  	checkBoxZoomOut.Location = point6;  	point6 = new Point (x' y + checkBoxAutoScale.Height);  	checkBoxHand.Location = point6;  }  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: labelScaleYmin.Location = new Point (4' 0x2a);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: labelScaleYmin.Size = new Size (0x17' 13);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: labelScaleYmax.Location = new Point (4' 0x1c);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: labelScaleYmax.Size = new Size (0x1a' 13);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: textBoxScaleYmax.Size = new Size (0x2f' 13);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: textBoxScaleYmax.TabIndex = 2;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: textBoxScaleYmin.Size = new Size (0x2f' 13);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: textBoxScaleYmin.TabIndex = 2;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: labelSample.Location = new Point (50' 0x80);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: labelSample.Size = new Size (0x2a' 13);  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: labelSample.TabIndex = 3;  
Magic Number,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,InitializeComponent,The following statement contains a magic number: checkBoxZoomOut.Location = new Point (0x7f' 80);  
Missing Default,SemtechLib.Ftdi,FtdiDevice,C:\repos\x893_SX1231\SemtechLib\Ftdi\FtdiDevice.cs,FtdiDevice,The following switch statement is missing a default case: switch (protocol) {  case MpsseProtocol.SPI:  	portA = new MpsseSPI ("A");  	break;  case MpsseProtocol.I2C:  	portA = new MpsseI2C ("A");  	break;  }  
Missing Default,Fusionbird.FusionToolkit.FusionTrackBar,FusionTrackBar,C:\repos\x893_SX1231\SemtechLib\Fusionbird\FusionToolkit\FusionTrackBar\FusionTrackBar.cs,OnDrawThumb,The following switch statement is missing a default case: switch (base.TickStyle) {  case TickStyle.None:  case TickStyle.BottomRight:  	parts = (base.Orientation != Orientation.Horizontal) ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBRIGHT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBBOTTOM;  	break;  case TickStyle.TopLeft:  	parts = (base.Orientation != Orientation.Horizontal) ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBLEFT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBTOP;  	break;  case TickStyle.Both:  	parts = (base.Orientation != Orientation.Horizontal) ? Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMBVERT : Fusionbird.FusionToolkit.NativeMethods.TrackBarParts.TKP_THUMB;  	break;  }  
Missing Default,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,_vScrollBar_Scroll,The following switch statement is missing a default case: switch (e.Type) {  case ScrollEventType.SmallDecrement:  	this.PerformScrollLineUp ();  	break;  case ScrollEventType.SmallIncrement:  	this.PerformScrollLineDown ();  	break;  case ScrollEventType.LargeDecrement:  	this.PerformScrollPageUp ();  	break;  case ScrollEventType.LargeIncrement:  	this.PerformScrollPageDown ();  	break;  case ScrollEventType.ThumbPosition: {  	long pos = this.FromScrollPos (e.NewValue);  	this.PerformScrollThumpPosition (pos);  	break;  }  case ScrollEventType.ThumbTrack: {  	if (this._thumbTrackTimer.Enabled) {  		this._thumbTrackTimer.Enabled = false;  	}  	int tickCount = Environment.TickCount;  	if ((tickCount - this._lastThumbtrack) > 50) {  		this.PerformScrollThumbTrack (null' null);  		this._lastThumbtrack = tickCount;  	}  	else {  		this._thumbTrackPosition = this.FromScrollPos (e.NewValue);  		this._thumbTrackTimer.Enabled = true;  	}  	break;  }  }  
Missing Default,SemtechLib.Controls.HexBoxCtrl,HexBox,C:\repos\x893_SX1231\SemtechLib\Controls\HexBoxCtrl\HexBox.cs,PreProcessMessage,The following switch statement is missing a default case: switch (m.Msg) {  case 0x100:  	return this._keyInterpreter.PreProcessWmKeyDown (ref m);  case 0x101:  	return this._keyInterpreter.PreProcessWmKeyUp (ref m);  case 0x102:  	return this._keyInterpreter.PreProcessWmChar (ref m);  }  
Missing Default,SemtechLib.Controls.Graph,GraphCtrl,C:\repos\x893_SX1231\SemtechLib\Controls\Graph\GraphCtrl.cs,GraphCtrl_Paint,The following switch statement is missing a default case: switch (data3.GraphType) {  case eGraphType.Dot:  	foreach (Point point5 in points) {  		e.Graphics.FillEllipse (brushPoint' point5.X' point5.Y' 2' 2);  	}  	break;  case eGraphType.Line:  	for (int k = 0; k < (points.Count - 1); k++) {  		e.Graphics.DrawLine (penLine' points [k]' points [k + 1]);  	}  	break;  case eGraphType.Bar:  	if (points.Count > 0) {  		Point point18 = points [points.Count - 1];  		e.Graphics.FillRectangle (brushPoint' new Rectangle (workingArea.Location.X + (num5 * (workingArea.Width / num4))' point18.Y' workingArea.Width / num4' workingArea.Location.Y + workingArea.Height));  	}  	break;  }  
