Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AsyncPackage,BlockingAsyncAnalyzer,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\BlockingAsyncAnalyzer.cs,AnalyzeNode,Cyclomatic complexity of the method is 9
Complex Method,AsyncPackage,BlockingAsyncCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\BlockingAsyncCodeFix.cs,RegisterCodeFixesAsync,Cyclomatic complexity of the method is 8
Long Statement,AsyncPackage,AsyncLambdaAnalyzer,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\AsyncLambdaAnalyzer.cs,Initialize,The length of the statement  "            context.RegisterSyntaxNodeAction(AnalyzeNode' SyntaxKind.ParenthesizedLambdaExpression' SyntaxKind.SimpleLambdaExpression' SyntaxKind.AnonymousMethodExpression); " is 161.
Long Statement,AsyncPackage,CancellationCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\CancellationCodeFix.cs,AddCancellationTokenAsync,The length of the statement  "            ITypeSymbol cancellationTokenType = semanticModel.Compilation.GetTypeByMetadataName("System.Threading.CancellationToken"); " is 122.
Long Statement,AsyncPackage,CancellationCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\CancellationCodeFix.cs,AddCancellationTokenAsync,The length of the statement  "                newArgs = invocation.ArgumentList.Arguments.Insert(firstSlotIndex' SyntaxFactory.Argument(newIdentifier).WithLeadingTrivia(SyntaxFactory.TriviaList(SyntaxFactory.ElasticSpace))); " is 178.
Long Statement,AsyncPackage,AsyncLambdaVariableCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\AsyncLambdaVariableCodeFix.cs,ChangeToFunc,The length of the statement  "            var newDeclaration = variableDeclaration.WithType(SyntaxFactory.ParseTypeName("System.Func<System.Threading.Tasks.Task>").WithAdditionalAnnotations(Simplifier.Annotation' Formatter.Annotation) " is 192.
Long Statement,AsyncPackage,AsyncLambdaVariableCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\AsyncLambdaVariableCodeFix.cs,ChangeToFunc,The length of the statement  "                .WithLeadingTrivia(variableDeclaration.Type.GetLeadingTrivia()).WithTrailingTrivia(variableDeclaration.Type.GetTrailingTrivia())); " is 130.
Long Statement,AsyncPackage,CancellationAnalyzer,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\CancellationAnalyzer.cs,CreateAnalyzerWithinCodeBlock,The length of the statement  "                ITypeSymbol cancellationTokenType = context.SemanticModel.Compilation.GetTypeByMetadataName("System.Threading.CancellationToken"); " is 130.
Long Statement,AsyncPackage,CancellationAnalyzer_Inner,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\CancellationAnalyzer.cs,AnalyzeNode,The length of the statement  "                    ITypeSymbol cancellationTokenType = context.SemanticModel.Compilation.GetTypeByMetadataName("System.Threading.CancellationToken"); " is 130.
Long Statement,AsyncPackage,AsyncVoidCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\AsyncVoidCodeFix.cs,VoidToTaskAsync,The length of the statement  "            var newType = SyntaxFactory.ParseTypeName("System.Threading.Tasks.Task").WithAdditionalAnnotations(Simplifier.Annotation).WithTrailingTrivia(methodDeclaration.ReturnType.GetTrailingTrivia()); " is 191.
Long Statement,AsyncPackage,RenameAsyncAnalyzer,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\RenameAsyncAnalyzer.cs,AnalyzeSymbol,The length of the statement  "                || methodSymbol.ReturnType.OriginalDefinition == context.Compilation.GetTypeByMetadataName("System.Threading.Tasks.Task`1").OriginalDefinition) " is 143.
Long Statement,AsyncPackage,RenameAsyncCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\RenameAsyncCodeFix.cs,RenameMethodAsync,The length of the statement  "            var newSolution = await Renamer.RenameSymbolAsync(document.Project.Solution' symbol' newName' document.Project.Solution.Workspace.Options).ConfigureAwait(false); " is 161.
Long Statement,AsyncPackage,RenameAsyncCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\RenameAsyncCodeFix.cs,HasAsyncSuffix,The length of the statement  "                else if (((last5letters.Contains("A") || last5letters.Contains("a")) && last5letters.Contains("s") && last5letters.Contains("y") " is 128.
Long Statement,AsyncPackage,RenameAsyncCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\RenameAsyncCodeFix.cs,HasAsyncSuffix,The length of the statement  "                    return true; // Basic spellchecker. This is obviously not conclusive' but it may catch a small error if the letters are simply switched around. " is 143.
Long Statement,AsyncPackage,BlockingAsyncCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\BlockingAsyncCodeFix.cs,ToDelayWhenAnyWhenAllAsync,The length of the statement  "                simpleExpression = SyntaxFactory.ParseName("System.Threading.Tasks.Task.WhenAny").WithAdditionalAnnotations(Simplifier.Annotation); " is 131.
Long Statement,AsyncPackage,BlockingAsyncCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\BlockingAsyncCodeFix.cs,ToDelayWhenAnyWhenAllAsync,The length of the statement  "                simpleExpression = SyntaxFactory.ParseName("System.Threading.Tasks.Task.WhenAll").WithAdditionalAnnotations(Simplifier.Annotation); " is 131.
Long Statement,AsyncPackage,BlockingAsyncCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\BlockingAsyncCodeFix.cs,ToDelayWhenAnyWhenAllAsync,The length of the statement  "                simpleExpression = SyntaxFactory.ParseName("System.Threading.Tasks.Task.Delay").WithAdditionalAnnotations(Simplifier.Annotation); " is 129.
Long Statement,AsyncPackage,BlockingAsyncCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\BlockingAsyncCodeFix.cs,ToDelayWhenAnyWhenAllAsync,The length of the statement  "            var expression = invocation.WithExpression(simpleExpression).WithLeadingTrivia(invocation.GetLeadingTrivia()).WithTrailingTrivia(invocation.GetTrailingTrivia()); " is 161.
Long Statement,AsyncPackage,BlockingAsyncCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\BlockingAsyncCodeFix.cs,ToDelayWhenAnyWhenAllAsync,The length of the statement  "            var newExpression = SyntaxFactory.PrefixUnaryExpression(SyntaxKind.AwaitExpression' expression.WithLeadingTrivia(SyntaxFactory.Space)).WithTrailingTrivia(invocation.GetTrailingTrivia()).WithLeadingTrivia(invocation.GetLeadingTrivia()); " is 235.
Long Statement,AsyncPackage,BlockingAsyncCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\BlockingAsyncCodeFix.cs,ChangetoAwaitGetAwaiterAsync,The length of the statement  "            var awaitedInvocation = SyntaxFactory.PrefixUnaryExpression(SyntaxKind.AwaitExpression' invocation.WithLeadingTrivia(SyntaxFactory.Space)).WithLeadingTrivia(invocation.GetLeadingTrivia()); " is 188.
Complex Conditional,AsyncPackage,RenameAsyncAnalyzer,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\RenameAsyncAnalyzer.cs,AnalyzeSymbol,The conditional expression  "(methodSymbol.ReturnType == context.Compilation.GetTypeByMetadataName("System.Threading.Tasks.Task")                  || methodSymbol.ReturnType.OriginalDefinition == context.Compilation.GetTypeByMetadataName("System.Threading.Tasks.Task`1").OriginalDefinition)                  && !methodSymbol.Name.EndsWith("Async") && !methodSymbol.IsOverride && !methodSymbol.IsVirtual"  is complex.
Complex Conditional,AsyncPackage,RenameAsyncCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\RenameAsyncCodeFix.cs,HasAsyncSuffix,The conditional expression  "((last5letters.Contains("A") || last5letters.Contains("a")) && last5letters.Contains("s") && last5letters.Contains("y")                      && last5letters.Contains("n") && last5letters.Contains("c")) && !last5letters.ToLower().Equals("scany")"  is complex.
Magic Number,AsyncPackage,AsyncVoidAnalyzer,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\AsyncVoidAnalyzer.cs,AnalyzeSymbol,The following statement contains a magic number: if (methodSymbol.ReturnsVoid && methodSymbol.IsAsync)              {                  if (methodSymbol.Parameters.Length == 2)                  {                      var firstParam = methodSymbol.Parameters[0];                      var secondParam = methodSymbol.Parameters[1];                        if (firstParam is object)                      {                          // Check each parameter for EventHandler shape and return if it matches.                          if (firstParam.Name.ToLower().Equals("sender") && secondParam.Type == eventType)                          {                              return;                          }                          else                          {                              // Check if the second parameter implements EventArgs. If it does; return.                              var checkForEventType = secondParam.Type.BaseType;                              while (checkForEventType.OriginalDefinition != context.Compilation.GetTypeByMetadataName("System.Object"))                              {                                  if (checkForEventType == eventType)                                  {                                      return;                                  }                                    checkForEventType = checkForEventType.BaseType;                              }                          }                      }                  }                    context.ReportDiagnostic(Diagnostic.Create(VoidReturnType' methodSymbol.Locations[0]' methodSymbol.Name));                  return;              }
Magic Number,AsyncPackage,RenameAsyncCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\RenameAsyncCodeFix.cs,RenameMethodAsync,The following statement contains a magic number: if (HasAsyncSuffix(oldName))              {                  newName = oldName.Substring(0' oldName.Length - 5) + "Async";              }              else              {                  newName = oldName + "Async";              }
Magic Number,AsyncPackage,RenameAsyncCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\RenameAsyncCodeFix.cs,HasAsyncSuffix,The following statement contains a magic number: if (oldName.Length >= 5)              {                  var last5letters = oldName.Substring(oldName.Length - 5);                    // Check case. The A in Async must be capitalized                  if (last5letters.Contains("async") || last5letters.Contains("asinc"))                  {                      return true;                  }                  else if (((last5letters.Contains("A") || last5letters.Contains("a")) && last5letters.Contains("s") && last5letters.Contains("y")                      && last5letters.Contains("n") && last5letters.Contains("c")) && !last5letters.ToLower().Equals("scany"))                  {                      return true; // Basic spellchecker. This is obviously not conclusive' but it may catch a small error if the letters are simply switched around.                  }              }
Magic Number,AsyncPackage,RenameAsyncCodeFix,C:\repos\mono_roslyn\src\Samples\CSharp\AsyncPackage\RenameAsyncCodeFix.cs,HasAsyncSuffix,The following statement contains a magic number: if (oldName.Length >= 5)              {                  var last5letters = oldName.Substring(oldName.Length - 5);                    // Check case. The A in Async must be capitalized                  if (last5letters.Contains("async") || last5letters.Contains("asinc"))                  {                      return true;                  }                  else if (((last5letters.Contains("A") || last5letters.Contains("a")) && last5letters.Contains("s") && last5letters.Contains("y")                      && last5letters.Contains("n") && last5letters.Contains("c")) && !last5letters.ToLower().Equals("scany"))                  {                      return true; // Basic spellchecker. This is obviously not conclusive' but it may catch a small error if the letters are simply switched around.                  }              }
