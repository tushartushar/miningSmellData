Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Design,CSharpCA1003DiagnosticAnalyzer,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Design\CSharpCA1003DiagnosticAnalyzer.cs,GetAnalyzer,The method has 5 parameters. Parameters: compilation' eventHandler' genericEventHandler' eventArgs' comSourceInterfacesAttribute
Long Parameter List,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Design,Analyzer,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Design\CSharpCA1003DiagnosticAnalyzer.cs,Analyzer,The method has 5 parameters. Parameters: compilation' eventHandler' genericEventHandler' eventArgs' comSourceInterfacesAttribute
Long Parameter List,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Globalization,CA1309CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Globalization\CodeFixes\CA1309CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The method has 6 parameters. Parameters: document' model' root' nodeToFix' diagnostic' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Globalization,CA2101CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Globalization\CodeFixes\CA2101CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The method has 6 parameters. Parameters: document' model' root' nodeToFix' diagnostic' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Performance,CA1813CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Performance\CodeFixes\CA1813CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The method has 6 parameters. Parameters: document' model' root' nodeToFix' diagnostic' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Usage,CA2213CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Usage\CodeFixes\CA2213CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The method has 6 parameters. Parameters: document' model' root' nodeToFix' diagnostic' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Usage,CA2231CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Usage\CodeFixes\CA2231CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The method has 6 parameters. Parameters: document' model' root' nodeToFix' diagnostic' cancellationToken
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Globalization,CA1309CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Globalization\CodeFixes\CA1309CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "                        var newOrdinalText = isIgnoreCase ? CA1309DiagnosticAnalyzer.OrdinalIgnoreCaseText : CA1309DiagnosticAnalyzer.OrdinalText; " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Globalization,CA1309CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Globalization\CodeFixes\CA1309CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "                        var newMemberAccess = memberAccess.WithName((SimpleNameSyntax)newIdentifier).WithAdditionalAnnotations(Formatter.Annotation); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Globalization,CA1309CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Globalization\CodeFixes\CA1309CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "                            var newInvoke = invokeParent.AddArgumentListArguments((ArgumentSyntax)newArg).WithAdditionalAnnotations(Formatter.Annotation); " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Globalization,CA1309CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Globalization\CodeFixes\CA1309CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "                    var invocation = CreateEqualsExpression(syntaxFactoryService' model' binaryExpression.Left' binaryExpression.Right' kind == SyntaxKind.EqualsExpression).WithAdditionalAnnotations(Formatter.Annotation); " is 201.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Globalization,CA2101CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Globalization\CodeFixes\CA2101CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "                    var argumentValue = CreateCharSetArgument(syntaxFactoryService' charSetType).WithAdditionalAnnotations(Formatter.Annotation); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Globalization,CA2101CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Globalization\CodeFixes\CA2101CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "                    var namedParameter = arguments.FirstOrDefault(arg => arg.NameEquals != null && arg.NameEquals.Name.Identifier.Text == CharSetText); " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Globalization,CA2101CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Globalization\CodeFixes\CA2101CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "                        namedParameter = SyntaxFactory.AttributeArgument(SyntaxFactory.NameEquals(CharSetText)' null' (ExpressionSyntax)argumentValue) " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Globalization,CSharpCA1309DiagnosticAnalyzer,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Globalization\CSharpCA1309DiagnosticAnalyzer.cs,GetAnalyzer,The length of the statement  "            context.RegisterSyntaxNodeAction(new Analyzer(stringComparisonType).AnalyzeNode' SyntaxKind.EqualsExpression' SyntaxKind.NotEqualsExpression' SyntaxKind.InvocationExpression); " is 175.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Globalization,Analyzer,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Globalization\CSharpCA1309DiagnosticAnalyzer.cs,AnalyzeBinaryExpression,The length of the statement  "                if (leftType != null && rightType != null && leftType.SpecialType == SpecialType.System_String && rightType.SpecialType == SpecialType.System_String) " is 149.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Performance,CodeBlockEndedAnalyzer,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Performance\CSharpCA1821DiagnosticAnalyzer.cs,IsEmptyFinalizer,The length of the statement  "                foreach (var exp in node.DescendantNodes().OfType<StatementSyntax>().Where(n => !n.IsKind(SyntaxKind.Block) && !n.IsKind(SyntaxKind.EmptyStatement))) " is 149.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Performance,CodeBlockEndedAnalyzer,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Performance\CSharpCA1821DiagnosticAnalyzer.cs,IsEmptyFinalizer,The length of the statement  "                    // Here in order to minimize false negatives' we conservatively treat it as non-empty finalizer if its body contains any statements. " is 132.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Performance,CodeBlockEndedAnalyzer,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Performance\CSharpCA1821DiagnosticAnalyzer.cs,HasConditionalAttribute,The length of the statement  "                        if (symbol != null && symbol.GetAttributes().Any(n => n.AttributeClass.Equals(WellKnownTypes.ConditionalAttribute(model.Compilation)))) " is 135.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Usage,CA2213CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Usage\CodeFixes\CA2213CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "            // handle a case where a local in the Dipose method with the same name by generating this (or ClassName) and simplifying it " is 123.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Usage,CA2213CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Usage\CodeFixes\CA2213CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "                            factory.MemberAccessExpression(path' factory.IdentifierName(symbol.Name)).WithAdditionalAnnotations(Simplification.Simplifier.Annotation)' " is 138.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Usage,CA2231CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Usage\CodeFixes\CA2231CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "            var parameters = new[] { CreateParameter(syntaxNode.Identifier.ValueText' LeftName)' CreateParameter(syntaxNode.Identifier.ValueText' RightName) }; " is 147.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Usage,CA2231CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Usage\CodeFixes\CA2231CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "            var newNode = syntaxNode.AddMembers(new[] { op_equality' op_inequality }).WithAdditionalAnnotations(Formatter.Annotation); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Usage,CA2231CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Usage\CodeFixes\CA2231CSharpCodeFixProvider.cs,CreateOperatorDeclaration,The length of the statement  "                SyntaxFactory.TokenList(new SyntaxToken[] { SyntaxFactory.Token(SyntaxKind.PublicKeyword)' SyntaxFactory.Token(SyntaxKind.StaticKeyword) })' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Usage,CSharpCA2213DiagnosticAnalyzer,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Usage\CSharpCA2213DiagnosticAnalyzer.cs,GetAnalyzer,The length of the statement  "            context.RegisterSyntaxNodeAction(analyzer.AnalyzeNode' SyntaxKind.SimpleMemberAccessExpression' SyntaxKind.UsingStatement); " is 123.
Long Statement,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Usage,CSharpCA2214DiagnosticAnalyzer,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Usage\CSharpCA2214DiagnosticAnalyzer.cs,GetCodeBlockEndedAnalyzer,The length of the statement  "            context.RegisterSyntaxNodeAction(new SyntaxNodeAnalyzer(constructorSymbol).AnalyzeNode' SyntaxKind.InvocationExpression); " is 121.
Complex Conditional,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Globalization,CA2101CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Globalization\CodeFixes\CA2101CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The conditional expression  "charSetType == null || dllImportType == null || marshalAsType == null || unmanagedType == null"  is complex.
Complex Conditional,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Globalization,Analyzer,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Globalization\CSharpCA1309DiagnosticAnalyzer.cs,AnalyzeInvocationExpression,The conditional expression  "lastArgSymbol != null && lastArgSymbol.ContainingType != null &&                                      lastArgSymbol.ContainingType.Equals(StringComparisonType) &&                                      !IsOrdinalOrOrdinalIgnoreCase(lastArgument' model)"  is complex.
Complex Conditional,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Globalization,Analyzer,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Globalization\CSharpCA1309DiagnosticAnalyzer.cs,AnalyzeBinaryExpression,The conditional expression  "leftType != null && rightType != null && leftType.SpecialType == SpecialType.System_String && rightType.SpecialType == SpecialType.System_String"  is complex.
Complex Conditional,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Usage,SyntaxNodeAnalyzer,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Usage\CSharpCA2214DiagnosticAnalyzer.cs,AnalyzeNode,The conditional expression  "method != null &&                      (method.IsAbstract || method.IsVirtual) &&                      method.ContainingType == _containingType"  is complex.
Missing Default,Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Globalization,CA1309CSharpCodeFixProvider,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Globalization\CodeFixes\CA1309CSharpCodeFixProvider.cs,GetUpdatedDocumentAsync,The following switch statement is missing a default case: switch (kind)              {                  case SyntaxKind.Argument:                      // StringComparison.CurrentCulture => StringComparison.Ordinal                      // StringComparison.CurrentCultureIgnoreCase => StringComparison.OrdinalIgnoreCase                      var argument = (ArgumentSyntax)nodeToFix;                      var memberAccess = argument.Expression as MemberAccessExpressionSyntax;                      if (memberAccess != null)                      {                          // preserve the "IgnoreCase" suffix if present                          bool isIgnoreCase = memberAccess.Name.GetText().ToString().EndsWith(CA1309DiagnosticAnalyzer.IgnoreCaseText);                          var newOrdinalText = isIgnoreCase ? CA1309DiagnosticAnalyzer.OrdinalIgnoreCaseText : CA1309DiagnosticAnalyzer.OrdinalText;                          var newIdentifier = syntaxFactoryService.IdentifierName(newOrdinalText);                          var newMemberAccess = memberAccess.WithName((SimpleNameSyntax)newIdentifier).WithAdditionalAnnotations(Formatter.Annotation);                          newRoot = root.ReplaceNode(memberAccess' newMemberAccess);                      }                        break;                  case SyntaxKind.IdentifierName:                      // string.Equals(a' b) => string.Equals(a' b' StringComparison.Ordinal)                      // string.Compare(a' b) => string.Compare(a' b' StringComparison.Ordinal)                      var identifier = (IdentifierNameSyntax)nodeToFix;                      var invokeParent = identifier.Parent?.FirstAncestorOrSelf<InvocationExpressionSyntax>();                      if (invokeParent != null)                      {                          var methodSymbol = model.GetSymbolInfo(identifier' cancellationToken).Symbol as IMethodSymbol;                          if (methodSymbol != null && CanAddStringComparison(methodSymbol))                          {                              // append a new StringComparison.Ordinal argument                              var newArg = syntaxFactoryService.Argument(CreateOrdinalMemberAccess(syntaxFactoryService' model))                                  .WithAdditionalAnnotations(Formatter.Annotation);                              var newInvoke = invokeParent.AddArgumentListArguments((ArgumentSyntax)newArg).WithAdditionalAnnotations(Formatter.Annotation);                              newRoot = root.ReplaceNode(invokeParent' newInvoke);                          }                      }                        break;                  case SyntaxKind.EqualsExpression:                  case SyntaxKind.NotEqualsExpression:                      // "a == b" => "string.Equals(a' b' StringComparison.Ordinal)"                      // "a != b" => "!string.Equals(a' b' StringComparison.Ordinal)"                      var binaryExpression = (BinaryExpressionSyntax)nodeToFix;                      var invocation = CreateEqualsExpression(syntaxFactoryService' model' binaryExpression.Left' binaryExpression.Right' kind == SyntaxKind.EqualsExpression).WithAdditionalAnnotations(Formatter.Annotation);                      newRoot = root.ReplaceNode(nodeToFix' invocation);                      break;              }
Missing Default,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CSharpCA2200DiagnosticAnalyzer,C:\repos\mono_roslyn\src\Diagnostics\FxCop\CSharp\Usage\CSharpCA2200DiagnosticAnalyzer.cs,AnalyzeNode,The following switch statement is missing a default case: switch (syntax.Kind())                  {                      case SyntaxKind.CatchClause:                          {                              var local = context.SemanticModel.GetSymbolInfo(expr).Symbol as ILocalSymbol;                              if (local == null || local.Locations.Length == 0)                              {                                  return;                              }                                // if (local.LocalKind != LocalKind.Catch) return; // TODO: expose LocalKind in the symbol model?                                var catchClause = syntax as CatchClauseSyntax;                              if (catchClause != null && catchClause.Declaration.Span.Contains(local.Locations[0].SourceSpan))                              {                                  context.ReportDiagnostic(CreateDiagnostic(throwStatement));                                  return;                              }                          }                            break;                        case SyntaxKind.ParenthesizedLambdaExpression:                      case SyntaxKind.SimpleLambdaExpression:                      case SyntaxKind.AnonymousMethodExpression:                      case SyntaxKind.ClassDeclaration:                      case SyntaxKind.StructDeclaration:                          return;                  }
