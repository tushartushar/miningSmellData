Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,AssemblyAttributesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\AssemblyAttributesDiagnosticAnalyzer.cs,AnalyzeCompilation,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1019DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1019DiagnosticAnalyzer.cs,AnalyzeParameters,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.CodeAnalysis.FxCopAnalyzers.Interoperability,Analyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Interoperability\PInvokeDiagnosticAnalyzer.cs,AnalyzeSymbol,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.CodeAnalysis.FxCopAnalyzers.Utilities,DiagnosticHelpers,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Shared\DiagnosticHelpers.cs,TryConvertToUInt64,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.CodeAnalysis.FxCopAnalyzers.Utilities,ITypeSymbolExtensions,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Shared\Extensions\ITypeSymbolExtensions.cs,Inherits,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.CodeAnalysis.FxCopAnalyzers.Utilities,WordParser,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Shared\WordParser.cs,TryParseWord,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,Analyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\SerializationRulesDiagnosticAnalyzer.cs,AnalyzeSymbol,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers,AbstractNamedTypeAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\AbstractNamedTypeAnalyzer.cs,AnalyzeSymbol,The method has 5 parameters. Parameters: symbol' compilation' addDiagnostic' options' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers,CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\CodeFixProviderBase.cs,GetUpdatedDocumentAsync,The method has 6 parameters. Parameters: document' model' root' nodeToFix' diagnostic' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers,MultipleCodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\MultipleCodeFixProviderBase.cs,GetFixesAsync,The method has 5 parameters. Parameters: document' model' root' nodeToFix' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1003DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1003DiagnosticAnalyzer.cs,GetAnalyzer,The method has 5 parameters. Parameters: compilation' eventHandler' genericEventHandler' eventArgs' comSourceInterfacesAttribute
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,AnalyzerBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1003DiagnosticAnalyzer.cs,AnalyzerBase,The method has 5 parameters. Parameters: compilation' eventHandler' genericEventHandler' eventArgs' comSourceInterfacesAttribute
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1008DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1008DiagnosticAnalyzer.cs,AnalyzeSymbol,The method has 5 parameters. Parameters: symbol' compilation' addDiagnostic' options' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1012DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1012DiagnosticAnalyzer.cs,AnalyzeSymbol,The method has 5 parameters. Parameters: symbol' compilation' addDiagnostic' options' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1018DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1018DiagnosticAnalyzer.cs,AnalyzeSymbol,The method has 5 parameters. Parameters: symbol' compilation' addDiagnostic' options' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1019DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1019DiagnosticAnalyzer.cs,AnalyzeSymbol,The method has 5 parameters. Parameters: symbol' compilation' addDiagnostic' options' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1019DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1019DiagnosticAnalyzer.cs,AnalyzeParameters,The method has 5 parameters. Parameters: compilation' parameters' propertiesMap' attributeType' addDiagnostic
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1060DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1060DiagnosticAnalyzer.cs,AnalyzeSymbol,The method has 5 parameters. Parameters: symbol' compilation' addDiagnostic' options' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1008CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CodeFixes\CA1008CodeFixProviderBase.cs,GetUpdatedDocumentWithFix,The method has 5 parameters. Parameters: document' root' nodeToFix' newFields' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1008CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CodeFixes\CA1008CodeFixProviderBase.cs,GetUpdatedDocumentAsync,The method has 6 parameters. Parameters: document' model' root' nodeToFix' diagnostic' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1012CodeFixProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CodeFixes\CA1012CodeFixProvider.cs,GetUpdatedDocumentAsync,The method has 6 parameters. Parameters: document' model' root' nodeToFix' diagnostic' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,EnumWithFlagsCodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CodeFixes\EnumWithFlagsCodeFixProviderBase.cs,GetUpdatedDocumentAsync,The method has 6 parameters. Parameters: document' model' root' nodeToFix' diagnostic' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,EnumWithFlagsCodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CodeFixes\EnumWithFlagsCodeFixProviderBase.cs,RemoveFlagsAttribute,The method has 5 parameters. Parameters: workspace' model' enumTypeSyntax' flagsAttributeType' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,EnumWithFlagsDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\EnumWithFlagsDiagnosticAnalyzer.cs,AnalyzeSymbol,The method has 5 parameters. Parameters: symbol' compilation' addDiagnostic' options' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,StaticTypeRulesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\StaticTypeRulesDiagnosticAnalyzer.cs,AnalyzeSymbol,The method has 5 parameters. Parameters: symbol' compilation' addDiagnostic' options' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1036DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1036DiagnosticAnalyzer.cs,AnalyzeSymbol,The method has 5 parameters. Parameters: namedTypeSymbol' compilation' addDiagnostic' options' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,CA1309CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CodeFixes\CA1309CodeFixProviderBase.cs,CreateEqualsExpression,The method has 5 parameters. Parameters: syntaxFactoryService' model' operand1' operand2' isEquals
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Naming,CA1708DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Naming\CA1708DiagnosticAnalyzer.cs,AnalyzeSymbol,The method has 5 parameters. Parameters: namedTypeSymbol' compilation' addDiagnostic' options' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Performance,CA1813DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Performance\CA1813DiagnosticAnalyzer.cs,AnalyzeSymbol,The method has 5 parameters. Parameters: namedType' compilation' addDiagnostic' options' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Performance,CA1821CodeFixProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Performance\CodeFixes\CA1821CodeFixProvider.cs,GetUpdatedDocumentAsync,The method has 6 parameters. Parameters: document' model' root' nodeToFix' diagnostic' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2231DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CA2231DiagnosticAnalyzer.cs,AnalyzeSymbol,The method has 5 parameters. Parameters: namedTypeSymbol' compilation' addDiagnostic' options' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2229CodeFixProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CodeFixes\CA2229CodeFixProvider.cs,GetUpdatedDocumentAsync,The method has 6 parameters. Parameters: document' model' root' nodeToFix' diagnostic' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2235CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CodeFixes\CA2235CodeFixProviderBase.cs,GetFixesAsync,The method has 5 parameters. Parameters: document' model' root' nodeToFix' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2235CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CodeFixes\CA2235CodeFixProviderBase.cs,AddSerializableAttributeToType,The method has 5 parameters. Parameters: document' model' generator' type' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2235CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CodeFixes\CA2235CodeFixProviderBase.cs,AddNonSerializedAttribute,The method has 5 parameters. Parameters: document' model' root' fieldNode' generator
Long Parameter List,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2237CodeFixProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CodeFixes\CA2237CodeFixProvider.cs,GetUpdatedDocumentAsync,The method has 6 parameters. Parameters: document' model' root' nodeToFix' diagnostic' cancellationToken
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,AssemblyAttributesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\AssemblyAttributesDiagnosticAnalyzer.cs,AnalyzeCompilation,The length of the parameter assemblyVersionAttributeSymbol is 30.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,AssemblyAttributesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\AssemblyAttributesDiagnosticAnalyzer.cs,AnalyzeCompilation,The length of the parameter assemblyComplianceAttributeSymbol is 33.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,AssemblyAttributesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\AssemblyAttributesDiagnosticAnalyzer.cs,AnalyzeCompilation,The length of the parameter assemblyComplianceAttributeFound is 32.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,AssemblyAttributesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\AssemblyAttributesDiagnosticAnalyzer.cs,,The length of the parameter s_localizableDescriptionCA1014 is 30.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1008DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1008DiagnosticAnalyzer.cs,,The length of the parameter s_localizableMessageRuleRename is 30.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1008DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1008DiagnosticAnalyzer.cs,,The length of the parameter s_localizableMessageRuleMultipleZero is 36.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1008DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1008DiagnosticAnalyzer.cs,,The length of the parameter s_localizableMessageRuleNoZero is 30.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,EnumWithFlagsDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\EnumWithFlagsDiagnosticAnalyzer.cs,,The length of the parameter s_localizableDescriptionCA1027 is 30.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,EnumWithFlagsDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\EnumWithFlagsDiagnosticAnalyzer.cs,,The length of the parameter s_localizableDescriptionCA2217 is 30.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Interoperability,PInvokeDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Interoperability\PInvokeDiagnosticAnalyzer.cs,,The length of the parameter s_localizableMessageAndTitleCA2101 is 34.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Interoperability,PInvokeDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Interoperability\PInvokeDiagnosticAnalyzer.cs,,The length of the parameter s_localizableDescriptionCA2101 is 30.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Naming,CA1715DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Naming\CA1715DiagnosticAnalyzer.cs,,The length of the parameter s_localizableMessageAndTitleInterfaceRule is 41.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Naming,CA1715DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Naming\CA1715DiagnosticAnalyzer.cs,,The length of the parameter s_localizableMessageAndTitleTypeParameterRule is 45.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Reliability,CA2002DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Reliability\CA2002DiagnosticAnalyzer.cs,TypeHasWeakIdentity,The length of the parameter executionEngineExceptionTypeSymbol is 34.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Reliability,CA2002DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Reliability\CA2002DiagnosticAnalyzer.cs,TypeHasWeakIdentity,The length of the parameter outOfMemoryExceptionTypeSymbol is 30.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Reliability,CA2002DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Reliability\CA2002DiagnosticAnalyzer.cs,TypeHasWeakIdentity,The length of the parameter stackOverflowExceptionTypeSymbol is 32.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,SerializationRulesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\SerializationRulesDiagnosticAnalyzer.cs,Initialize,The length of the parameter serializableAttributeTypeSymbol is 31.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,SerializationRulesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\SerializationRulesDiagnosticAnalyzer.cs,,The length of the parameter s_localizableDescriptionCA2229 is 30.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,SerializationRulesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\SerializationRulesDiagnosticAnalyzer.cs,,The length of the parameter s_localizableDescriptionCA2237 is 30.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,SerializationRulesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\SerializationRulesDiagnosticAnalyzer.cs,,The length of the parameter s_localizableDescriptionCA2235 is 30.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,Analyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\SerializationRulesDiagnosticAnalyzer.cs,Analyzer,The length of the parameter serializableAttributeTypeSymbol is 31.
Long Identifier,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,Analyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\SerializationRulesDiagnosticAnalyzer.cs,,The length of the parameter _serializableAttributeTypeSymbol is 32.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers,AbstractNamedTypeAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\AbstractNamedTypeAnalyzer.cs,Initialize,The length of the statement  "                        AnalyzeSymbol((INamedTypeSymbol)context.Symbol' context.Compilation' context.ReportDiagnostic' context.Options' context.CancellationToken); " is 139.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers,CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\CodeFixProviderBase.cs,RegisterCodeFixesAsync,The length of the statement  "                var newDocument = await GetUpdatedDocumentAsync(document' model' root' nodeToFix' diagnostic' cancellationToken).ConfigureAwait(false); " is 135.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,AssemblyAttributesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\AssemblyAttributesDiagnosticAnalyzer.cs,AnalyzeCompilation,The length of the statement  "            // Check for the case where we do not have the target attribute defined at all in our metadata references. If so' how can they reference it " is 139.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1003DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1003DiagnosticAnalyzer.cs,Initialize,The length of the statement  "                    context.RegisterSymbolAction(GetAnalyzer(context.Compilation' eventHandler' genericEventHandler' eventArgs' comSourceInterfacesAttribute).AnalyzeSymbol' SymbolKind.Event); " is 171.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1017DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1017DiagnosticAnalyzer.cs,AnalyzeCompilation,The length of the statement  "                var attributeInstance = context.Compilation.Assembly.GetAttributes().FirstOrDefault(a => a.AttributeClass.Equals(comVisibleAttributeSymbol)); " is 141.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1017DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1017DiagnosticAnalyzer.cs,AnalyzeCompilation,The length of the statement  "                        context.ReportDiagnostic(Diagnostic.Create(Rule' Location.None' string.Format(FxCopRulesResources.CA1017_AttributeTrue' context.Compilation.Assembly.Name))); " is 157.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1017DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1017DiagnosticAnalyzer.cs,AnalyzeCompilation,The length of the statement  "                    context.ReportDiagnostic(Diagnostic.Create(Rule' Location.None' string.Format(FxCopRulesResources.CA1017_NoAttribute' context.Compilation.Assembly.Name))); " is 155.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1018DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1018DiagnosticAnalyzer.cs,AnalyzeSymbol,The length of the statement  "            var hasAttributeUsageAttribute = symbol.GetAttributes().Any(attribute => attribute.AttributeClass == attributeUsageAttribute); " is 126.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1019DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1019DiagnosticAnalyzer.cs,GetAllPublicConstructorParameters,The length of the statement  "            var instanceConstructorsToCheck = attributeType.InstanceConstructors.Where(c => c.DeclaredAccessibility == Accessibility.Public); " is 129.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1019DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1019DiagnosticAnalyzer.cs,AnalyzeParameters,The length of the statement  "                            // Remove the property setter from '{0}' or reduce its accessibility because it corresponds to positional argument '{1}'. " is 121.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1019DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1019DiagnosticAnalyzer.cs,GetDefaultDiagnostic,The length of the statement  "            var message = string.Format(FxCopRulesResources.DefineAccessorsForAttributeArgumentsDefault' parameter.Name' attributeType.Name); " is 129.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1019DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1019DiagnosticAnalyzer.cs,GetIncreaseVisibilityDiagnostic,The length of the statement  "            var message = string.Format(FxCopRulesResources.DefineAccessorsForAttributeArgumentsIncreaseVisibility' property.Name' parameter.Name); " is 135.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1019DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1019DiagnosticAnalyzer.cs,GetRemoveSetterDiagnostic,The length of the statement  "            // Remove the property setter from '{0}' or reduce its accessibility because it corresponds to positional argument '{1}'. " is 121.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1019DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1019DiagnosticAnalyzer.cs,GetRemoveSetterDiagnostic,The length of the statement  "            var message = string.Format(FxCopRulesResources.DefineAccessorsForAttributeArgumentsRemoveSetter' property.Name' parameter.Name); " is 129.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1024DiagnosticAnalyzer<TLanguageKindEnum>,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1024DiagnosticAnalyzer.cs,Initialize,The length of the statement  "                        !(methodSymbol.DeclaredAccessibility == Accessibility.Public || methodSymbol.DeclaredAccessibility == Accessibility.Protected) || " is 129.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1024DiagnosticAnalyzer<TLanguageKindEnum>,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1024DiagnosticAnalyzer.cs,Initialize,The length of the statement  "                    // Ensure that the method is non-generic' non-virtual/override' has no overloads and doesn't have special names: 'GetHashCode' or 'GetEnumerator'. " is 146.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1008CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CodeFixes\CA1008CodeFixProviderBase.cs,GetUpdatedDocumentForRuleNameRenameAsync,The length of the statement  "            var newSolution = await Rename.Renamer.RenameSymbolAsync(document.Project.Solution' field' "None"' null' cancellationToken).ConfigureAwait(false); " is 146.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1008CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CodeFixes\CA1008CodeFixProviderBase.cs,ApplyRuleNameMultipleZeroAsync,The length of the statement  "                        await editor.EditOneDeclarationAsync(field' (e' d) => e.ReplaceNode(d' GetExplicitlyAssignedField(field' d' e.Generator))' cancellationToken); " is 142.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1008CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CodeFixes\CA1008CodeFixProviderBase.cs,ApplyRuleNameMultipleZeroAsync,The length of the statement  "                    await editor.EditOneDeclarationAsync(field' (e' d) => e.RemoveNode(d)' cancellationToken); // removes the field declaration " is 123.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1008CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CodeFixes\CA1008CodeFixProviderBase.cs,ApplyRuleNameMultipleZeroAsync,The length of the statement  "                await editor.EditOneDeclarationAsync(enumType' (e' d) => e.InsertMembers(d' 0' new[] { e.Generator.EnumMember("None") })' cancellationToken); " is 141.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1008CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CodeFixes\CA1008CodeFixProviderBase.cs,ApplyRuleNameNoZeroValueAsync,The length of the statement  "            await editor.EditOneDeclarationAsync(enumType' (e' d) => e.InsertMembers(d' 0' new[] { e.Generator.EnumMember("None") })' cancellationToken); " is 141.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1008CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CodeFixes\CA1008CodeFixProviderBase.cs,GetUpdatedDocumentAsync,The length of the statement  "                        return await GetUpdatedDocumentForRuleNameRenameAsync(document' (IFieldSymbol)declaredSymbol' cancellationToken).ConfigureAwait(false); " is 135.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1012CodeFixProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CodeFixes\CA1012CodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "            var instanceConstructors = classSymbol.InstanceConstructors.Where(t => t.DeclaredAccessibility == Accessibility.Public).Select(t => GetDeclaration(t)).Where(d => d != null).ToList(); " is 182.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1012CodeFixProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CodeFixes\CA1012CodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "            var newRoot = root.ReplaceNodes(instanceConstructors' (original' rewritten) => generator.WithAccessibility(original' Accessibility.Protected)); " is 143.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,StaticTypeRulesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\StaticTypeRulesDiagnosticAnalyzer.cs,AnalyzeSymbol,The length of the statement  "                if (allMembers.All(member => (member.IsStatic || symbol.InstanceConstructors.Contains(member)) && !IsUserdefinedOperator(member))) " is 130.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1036DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1036DiagnosticAnalyzer.cs,DoesOverrideEquals,The length of the statement  "            return symbol.GetMembers(WellKnownMemberNames.ObjectEquals).OfType<IMethodSymbol>().Where(m => IsEqualsOverride(m)).Any(); " is 122.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1036DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1036DiagnosticAnalyzer.cs,IsEqualityOperatorImplemented,The length of the statement  "            // Does the symbol overload all of the equality operators?  (All are required per http://msdn.microsoft.com/en-us/library/ms182163.aspx example.) " is 145.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Interoperability,PInvokeDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Interoperability\PInvokeDiagnosticAnalyzer.cs,Initialize,The length of the statement  "                    context.RegisterSymbolAction(new Analyzer(dllImportType' marshalAsType' stringBuilderType' unmanagedType).AnalyzeSymbol' SymbolKind.Method); " is 140.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Interoperability,Analyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Interoperability\PInvokeDiagnosticAnalyzer.cs,AnalyzeSymbol,The length of the statement  "                var defaultLocation = dllAttribute == null ? methodSymbol.Locations.FirstOrDefault() : GetAttributeLocation(dllAttribute); " is 122.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Interoperability,Analyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Interoperability\PInvokeDiagnosticAnalyzer.cs,AnalyzeSymbol,The length of the statement  "                if (methodSymbol.DeclaredAccessibility == Accessibility.Public || methodSymbol.DeclaredAccessibility == Accessibility.Protected) " is 128.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Interoperability,Analyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Interoperability\PInvokeDiagnosticAnalyzer.cs,AnalyzeSymbol,The length of the statement  "                        (methodSymbol.ReturnType.SpecialType == SpecialType.System_String || methodSymbol.ReturnType.Equals(_stringBuilderType))) " is 121.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Naming,CA1708DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Naming\CA1708DiagnosticAnalyzer.cs,CheckNamespaceMembers,The length of the statement  "                    // If there is a child namespace that has externally visible types' then remove the parent namespace from exclusion list " is 120.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Naming,CA1708DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Naming\CA1708DiagnosticAnalyzer.cs,CheckTypeMembers,The length of the statement  "            var membersForNameCheck = members.Where(item => !item.IsConstructor() && !item.IsDestructor() && !item.IsIndexer() && !item.IsUserDefinedOperator()); " is 149.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Naming,CA1708DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Naming\CA1708DiagnosticAnalyzer.cs,CheckParameterNames,The length of the statement  "            var parameterList = parameters.GroupBy((item) => item.Name' StringComparer.InvariantCultureIgnoreCase).Where((group) => group.Count() > 1); " is 139.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Naming,CA1708DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Naming\CA1708DiagnosticAnalyzer.cs,HasViolatingParameters,The length of the statement  "            return parameters.GroupBy(item => item.Name' StringComparer.InvariantCultureIgnoreCase).Where((group) => group.Count() > 1).Any(); " is 130.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Naming,CA1708DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Naming\CA1708DiagnosticAnalyzer.cs,CheckMemberNames,The length of the statement  "            var overloadedMembers = members.Where((item) => !item.IsType()).GroupBy((item) => item.Name).Where((group) => group.Count() > 1).SelectMany((group) => group.Skip(1)); " is 166.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Naming,CA1708DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Naming\CA1708DiagnosticAnalyzer.cs,CheckMemberNames,The length of the statement  "            var memberList = members.Where((item) => !overloadedMembers.Contains(item)).GroupBy((item) => DiagnosticHelpers.GetMemberName(item)' StringComparer.InvariantCultureIgnoreCase).Where((group) => group.Count() > 1); " is 212.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Naming,CA1708DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Naming\CA1708DiagnosticAnalyzer.cs,CheckTypeNames,The length of the statement  "            var typeList = types.GroupBy((item) => DiagnosticHelpers.GetMemberName(item)' StringComparer.InvariantCultureIgnoreCase) " is 120.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Naming,CA1708DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Naming\CA1708DiagnosticAnalyzer.cs,CheckNamespaceNames,The length of the statement  "            var namespaceList = namespaces.GroupBy((item) => item.ToDisplayString()' StringComparer.InvariantCultureIgnoreCase).Where((group) => group.Count() > 1); " is 152.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Reliability,CA2002DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Reliability\CA2002DiagnosticAnalyzer.cs,TypeHasWeakIdentity,The length of the statement  "                    INamedTypeSymbol executionEngineExceptionTypeSymbol = compilation.GetTypeByMetadataName("System.ExecutionEngineException"); " is 123.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,AbstractAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CA2213DiagnosticAnalyzer.cs,AnalyzeSymbol,The length of the statement  "                    // If a call to dispose this field is found in a method body' that will be noted by the language specific INodeInCodeBodyAnalyzer " is 129.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2231DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CA2231DiagnosticAnalyzer.cs,AnalyzeSymbol,The length of the statement  "            if (namedTypeSymbol.IsValueType && IsOverridesEquals(namedTypeSymbol) && !IsEqualityOperatorImplemented(namedTypeSymbol)) " is 121.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2231DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CA2231DiagnosticAnalyzer.cs,IsOverridesEquals,The length of the statement  "            return symbol.GetMembers(WellKnownMemberNames.ObjectEquals).OfType<IMethodSymbol>().Where(m => IsEqualsOverride(m)).Any(); " is 122.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2231DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CA2231DiagnosticAnalyzer.cs,IsEqualityOperatorImplemented,The length of the statement  "            return symbol.GetMembers(WellKnownMemberNames.EqualityOperatorName).OfType<IMethodSymbol>().Where(m => m.MethodKind == MethodKind.UserDefinedOperator).Any() || " is 159.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2231DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CA2231DiagnosticAnalyzer.cs,IsEqualityOperatorImplemented,The length of the statement  "                    symbol.GetMembers(WellKnownMemberNames.InequalityOperatorName).OfType<IMethodSymbol>().Where(m => m.MethodKind == MethodKind.UserDefinedOperator).Any(); " is 152.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2229CodeFixProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CodeFixes\CA2229CodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "                var throwStatement = generator.ThrowStatement(generator.ObjectCreationExpression(generator.DottedName("System.NotImplementedException"))); " is 138.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2229CodeFixProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CodeFixes\CA2229CodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "                        generator.ParameterDeclaration("serializationInfo"' generator.TypeExpression(WellKnownTypes.SerializationInfo(model.Compilation)))' " is 131.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2229CodeFixProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CodeFixes\CA2229CodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "                        generator.ParameterDeclaration("streamingContext"' generator.TypeExpression(WellKnownTypes.StreamingContext(model.Compilation))) " is 128.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2229CodeFixProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CodeFixes\CA2229CodeFixProvider.cs,GetUpdatedDocumentAsync,The length of the statement  "                await editor.EditOneDeclarationAsync(typeSymbol' nodeToFix.GetLocation()' (e' d) => e.AddMember(d' ctorDecl)' cancellationToken); " is 129.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2235CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CodeFixes\CA2235CodeFixProviderBase.cs,GetFixesAsync,The length of the statement  "                                                                  async ct => await AddSerializableAttributeToType(document' model' generator' type' cancellationToken).ConfigureAwait(false)); " is 125.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2235CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CodeFixes\CA2235CodeFixProviderBase.cs,AddSerializableAttributeToType,The length of the statement  "            var serializableAttr = generator.Attribute(generator.TypeExpression(WellKnownTypes.SerializableAttribute(model.Compilation))); " is 126.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,CA2235CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\CodeFixes\CA2235CodeFixProviderBase.cs,AddSerializableAttributeToType,The length of the statement  "            var newDocumentContainingNode = documentContainingNode.WithSyntaxRoot(docRoot.ReplaceNode(typeDeclNode' newTypeDeclNode)); " is 122.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,SerializationRulesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\SerializationRulesDiagnosticAnalyzer.cs,Initialize,The length of the statement  "                    var serializationInfoTypeSymbol = context.Compilation.GetTypeByMetadataName("System.Runtime.Serialization.SerializationInfo"); " is 126.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,SerializationRulesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\SerializationRulesDiagnosticAnalyzer.cs,Initialize,The length of the statement  "                    var streamingContextTypeSymbol = context.Compilation.GetTypeByMetadataName("System.Runtime.Serialization.StreamingContext"); " is 124.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,SerializationRulesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\SerializationRulesDiagnosticAnalyzer.cs,Initialize,The length of the statement  "                    context.RegisterSymbolAction(new Analyzer(iserializableTypeSymbol' serializationInfoTypeSymbol' streamingContextTypeSymbol' serializableAttributeTypeSymbol).AnalyzeSymbol' SymbolKind.NamedType); " is 194.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,Analyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\SerializationRulesDiagnosticAnalyzer.cs,AnalyzeSymbol,The length of the statement  "                if (namedTypeSymbol.DeclaredAccessibility == Accessibility.Public && namedTypeSymbol.AllInterfaces.Contains(_iserializableTypeSymbol)) " is 134.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,Analyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\SerializationRulesDiagnosticAnalyzer.cs,AnalyzeSymbol,The length of the statement  "                            context.ReportDiagnostic(namedTypeSymbol.CreateDiagnostic(RuleCA2229' string.Format(FxCopRulesResources.SerializableTypeDoesntHaveCtor' namedTypeSymbol.Name))); " is 160.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,Analyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\SerializationRulesDiagnosticAnalyzer.cs,AnalyzeSymbol,The length of the statement  "                                context.ReportDiagnostic(serializationCtor.CreateDiagnostic(RuleCA2229' string.Format(FxCopRulesResources.SerializationCtorAccessibilityForSealedType' namedTypeSymbol.Name))); " is 175.
Long Statement,Microsoft.CodeAnalysis.FxCopAnalyzers.Usage,Analyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Usage\SerializationRulesDiagnosticAnalyzer.cs,AnalyzeSymbol,The length of the statement  "                                context.ReportDiagnostic(serializationCtor.CreateDiagnostic(RuleCA2229' string.Format(FxCopRulesResources.SerializationCtorAccessibilityForUnSealedType' namedTypeSymbol.Name))); " is 177.
Complex Conditional,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,AnalyzerBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1003DiagnosticAnalyzer.cs,AnalyzeSymbol,The conditional expression  "eventType != null &&                          eventSymbol.GetResultantVisibility() == SymbolVisibility.Public &&                          !eventSymbol.IsOverride &&                          !HasComSourceInterfacesAttribute(eventSymbol.ContainingType) &&                          IsViolatingEventHandler(eventType)"  is complex.
Complex Conditional,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1024DiagnosticAnalyzer<TLanguageKindEnum>,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1024DiagnosticAnalyzer.cs,Initialize,The conditional expression  "methodSymbol == null ||                          methodSymbol.ReturnsVoid ||                          methodSymbol.ReturnType.Kind == SymbolKind.ArrayType ||                          methodSymbol.Parameters.Length > 0 ||                          !(methodSymbol.DeclaredAccessibility == Accessibility.Public || methodSymbol.DeclaredAccessibility == Accessibility.Protected) ||                          methodSymbol.IsAccessorMethod() ||                          !IsPropertyLikeName(methodSymbol.Name)"  is complex.
Complex Conditional,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1024DiagnosticAnalyzer<TLanguageKindEnum>,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1024DiagnosticAnalyzer.cs,Initialize,The conditional expression  "methodSymbol.IsGenericMethod ||                          methodSymbol.IsVirtual ||                          methodSymbol.IsOverride ||                          methodSymbol.ContainingType.GetMembers(methodSymbol.Name).Length > 1 ||                          methodSymbol.Name == GetHashCodeName ||                          methodSymbol.Name == GetEnumeratorName"  is complex.
Complex Conditional,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,StaticTypeRulesDiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\StaticTypeRulesDiagnosticAnalyzer.cs,AnalyzeSymbol,The conditional expression  "!symbol.IsStatic && !symbol.IsSealed                  && (symbol.DeclaredAccessibility == Accessibility.Public || symbol.DeclaredAccessibility == Accessibility.Protected)"  is complex.
Complex Conditional,Microsoft.CodeAnalysis.FxCopAnalyzers.Interoperability,Analyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Interoperability\PInvokeDiagnosticAnalyzer.cs,AnalyzeSymbol,The conditional expression  "!appliedCA2101ToMethod && dllImportData.CharacterSet != CharSet.Unicode &&                          (methodSymbol.ReturnType.SpecialType == SpecialType.System_String || methodSymbol.ReturnType.Equals(_stringBuilderType))"  is complex.
Complex Conditional,Microsoft.CodeAnalysis.FxCopAnalyzers.Utilities,ITypeSymbolExtensions,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Shared\Extensions\ITypeSymbolExtensions.cs,IsAttribute,The conditional expression  "b.MetadataName == "Attribute" &&                       b.ContainingType == null &&                       b.ContainingNamespace != null &&                       b.ContainingNamespace.Name == "System" &&                       b.ContainingNamespace.ContainingNamespace != null &&                       b.ContainingNamespace.ContainingNamespace.IsGlobalNamespace"  is complex.
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1024DiagnosticAnalyzer<TLanguageKindEnum>,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1024DiagnosticAnalyzer.cs,IsPropertyLikeName,The following statement contains a magic number: return methodName.Length > 3 &&                  methodName.StartsWith("Get"' StringComparison.OrdinalIgnoreCase) &&                  !char.IsLower(methodName[3]);
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1024DiagnosticAnalyzer<TLanguageKindEnum>,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CA1024DiagnosticAnalyzer.cs,IsPropertyLikeName,The following statement contains a magic number: return methodName.Length > 3 &&                  methodName.StartsWith("Get"' StringComparison.OrdinalIgnoreCase) &&                  !char.IsLower(methodName[3]);
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,AbstractCodeBlockAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CA1309DiagnosticAnalyzer.cs,IsAcceptableInstanceOverload,The following statement contains a magic number: switch (methodSymbol.Parameters.Length)                      {                          case 1:                              // the instance method .Equals(object) is OK                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_Object;                          case 2:                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.Equals(stringComparisonType);                      }
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,AbstractCodeBlockAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CA1309DiagnosticAnalyzer.cs,IsAcceptableStaticOverload,The following statement contains a magic number: switch (methodSymbol.Parameters.Length)                      {                          case 3:                              // (string' string' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[2].Type.Equals(stringComparisonType);                          case 6:                              // (string' int' string' int' int' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[2].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[4].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[5].Type.Equals(stringComparisonType);                      }
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,AbstractCodeBlockAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CA1309DiagnosticAnalyzer.cs,IsAcceptableStaticOverload,The following statement contains a magic number: switch (methodSymbol.Parameters.Length)                      {                          case 3:                              // (string' string' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[2].Type.Equals(stringComparisonType);                          case 6:                              // (string' int' string' int' int' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[2].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[4].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[5].Type.Equals(stringComparisonType);                      }
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,AbstractCodeBlockAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CA1309DiagnosticAnalyzer.cs,IsAcceptableStaticOverload,The following statement contains a magic number: switch (methodSymbol.Parameters.Length)                      {                          case 3:                              // (string' string' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[2].Type.Equals(stringComparisonType);                          case 6:                              // (string' int' string' int' int' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[2].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[4].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[5].Type.Equals(stringComparisonType);                      }
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,AbstractCodeBlockAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CA1309DiagnosticAnalyzer.cs,IsAcceptableStaticOverload,The following statement contains a magic number: switch (methodSymbol.Parameters.Length)                      {                          case 3:                              // (string' string' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[2].Type.Equals(stringComparisonType);                          case 6:                              // (string' int' string' int' int' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[2].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[4].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[5].Type.Equals(stringComparisonType);                      }
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,AbstractCodeBlockAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CA1309DiagnosticAnalyzer.cs,IsAcceptableStaticOverload,The following statement contains a magic number: switch (methodSymbol.Parameters.Length)                      {                          case 3:                              // (string' string' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[2].Type.Equals(stringComparisonType);                          case 6:                              // (string' int' string' int' int' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[2].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[4].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[5].Type.Equals(stringComparisonType);                      }
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,AbstractCodeBlockAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CA1309DiagnosticAnalyzer.cs,IsAcceptableStaticOverload,The following statement contains a magic number: switch (methodSymbol.Parameters.Length)                      {                          case 3:                              // (string' string' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[2].Type.Equals(stringComparisonType);                          case 6:                              // (string' int' string' int' int' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[2].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[4].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[5].Type.Equals(stringComparisonType);                      }
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,AbstractCodeBlockAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CA1309DiagnosticAnalyzer.cs,IsAcceptableStaticOverload,The following statement contains a magic number: switch (methodSymbol.Parameters.Length)                      {                          case 3:                              // (string' string' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[2].Type.Equals(stringComparisonType);                          case 6:                              // (string' int' string' int' int' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[2].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[4].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[5].Type.Equals(stringComparisonType);                      }
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,CA1309CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CodeFixes\CA1309CodeFixProviderBase.cs,CanAddStringComparison,The following statement contains a magic number: switch (methodSymbol.Name)              {                  case CA1309DiagnosticAnalyzer.EqualsMethodName:                      // can fix .Equals() with (string)' (string' string)                      switch (parameters.Length)                      {                          case 1:                              return parameters[0].Type.SpecialType == SpecialType.System_String;                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                      }                        break;                  case CA1309DiagnosticAnalyzer.CompareMethodName:                      // can fix .Compare() with (string' string)' (string' int' string' int' int)                      switch (parameters.Length)                      {                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                          case 5:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[2].Type.SpecialType == SpecialType.System_String &&                                  parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[4].Type.SpecialType == SpecialType.System_Int32;                      }                        break;              }
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,CA1309CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CodeFixes\CA1309CodeFixProviderBase.cs,CanAddStringComparison,The following statement contains a magic number: switch (methodSymbol.Name)              {                  case CA1309DiagnosticAnalyzer.EqualsMethodName:                      // can fix .Equals() with (string)' (string' string)                      switch (parameters.Length)                      {                          case 1:                              return parameters[0].Type.SpecialType == SpecialType.System_String;                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                      }                        break;                  case CA1309DiagnosticAnalyzer.CompareMethodName:                      // can fix .Compare() with (string' string)' (string' int' string' int' int)                      switch (parameters.Length)                      {                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                          case 5:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[2].Type.SpecialType == SpecialType.System_String &&                                  parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[4].Type.SpecialType == SpecialType.System_Int32;                      }                        break;              }
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,CA1309CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CodeFixes\CA1309CodeFixProviderBase.cs,CanAddStringComparison,The following statement contains a magic number: switch (methodSymbol.Name)              {                  case CA1309DiagnosticAnalyzer.EqualsMethodName:                      // can fix .Equals() with (string)' (string' string)                      switch (parameters.Length)                      {                          case 1:                              return parameters[0].Type.SpecialType == SpecialType.System_String;                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                      }                        break;                  case CA1309DiagnosticAnalyzer.CompareMethodName:                      // can fix .Compare() with (string' string)' (string' int' string' int' int)                      switch (parameters.Length)                      {                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                          case 5:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[2].Type.SpecialType == SpecialType.System_String &&                                  parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[4].Type.SpecialType == SpecialType.System_Int32;                      }                        break;              }
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,CA1309CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CodeFixes\CA1309CodeFixProviderBase.cs,CanAddStringComparison,The following statement contains a magic number: switch (methodSymbol.Name)              {                  case CA1309DiagnosticAnalyzer.EqualsMethodName:                      // can fix .Equals() with (string)' (string' string)                      switch (parameters.Length)                      {                          case 1:                              return parameters[0].Type.SpecialType == SpecialType.System_String;                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                      }                        break;                  case CA1309DiagnosticAnalyzer.CompareMethodName:                      // can fix .Compare() with (string' string)' (string' int' string' int' int)                      switch (parameters.Length)                      {                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                          case 5:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[2].Type.SpecialType == SpecialType.System_String &&                                  parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[4].Type.SpecialType == SpecialType.System_Int32;                      }                        break;              }
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,CA1309CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CodeFixes\CA1309CodeFixProviderBase.cs,CanAddStringComparison,The following statement contains a magic number: switch (methodSymbol.Name)              {                  case CA1309DiagnosticAnalyzer.EqualsMethodName:                      // can fix .Equals() with (string)' (string' string)                      switch (parameters.Length)                      {                          case 1:                              return parameters[0].Type.SpecialType == SpecialType.System_String;                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                      }                        break;                  case CA1309DiagnosticAnalyzer.CompareMethodName:                      // can fix .Compare() with (string' string)' (string' int' string' int' int)                      switch (parameters.Length)                      {                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                          case 5:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[2].Type.SpecialType == SpecialType.System_String &&                                  parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[4].Type.SpecialType == SpecialType.System_Int32;                      }                        break;              }
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,CA1309CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CodeFixes\CA1309CodeFixProviderBase.cs,CanAddStringComparison,The following statement contains a magic number: switch (methodSymbol.Name)              {                  case CA1309DiagnosticAnalyzer.EqualsMethodName:                      // can fix .Equals() with (string)' (string' string)                      switch (parameters.Length)                      {                          case 1:                              return parameters[0].Type.SpecialType == SpecialType.System_String;                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                      }                        break;                  case CA1309DiagnosticAnalyzer.CompareMethodName:                      // can fix .Compare() with (string' string)' (string' int' string' int' int)                      switch (parameters.Length)                      {                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                          case 5:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[2].Type.SpecialType == SpecialType.System_String &&                                  parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[4].Type.SpecialType == SpecialType.System_Int32;                      }                        break;              }
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Utilities,WordParser,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Shared\WordParser.cs,TryParseWord,The following statement contains a magic number: c == '#' && IsHexDigit(Peek(2))
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Utilities,WordParser,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Shared\WordParser.cs,TryParsePrefix,The following statement contains a magic number: c = Peek(2);
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Utilities,WordParser,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Shared\WordParser.cs,ParseNumeric,The following statement contains a magic number: c = Peek(2);
Magic Number,Microsoft.CodeAnalysis.FxCopAnalyzers.Utilities,WordParser,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Shared\WordParser.cs,ParseNumeric,The following statement contains a magic number: (c == 'x' || c == 'X') && IsHexDigit(Peek(3))
Missing Default,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1008CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CodeFixes\CA1008CodeFixProviderBase.cs,GetCodeFixDescription,The following switch statement is missing a default case: switch (customTag)                  {                      case CA1008DiagnosticAnalyzer.RuleRenameCustomTag:                          return FxCopFixersResources.EnumsShouldZeroValueFlagsRenameCodeFix;                        case CA1008DiagnosticAnalyzer.RuleMultipleZeroCustomTag:                          return FxCopFixersResources.EnumsShouldZeroValueFlagsMultipleZeroCodeFix;                        case CA1008DiagnosticAnalyzer.RuleNoZeroCustomTag:                          return FxCopFixersResources.EnumsShouldZeroValueNotFlagsNoZeroValueCodeFix;                  }
Missing Default,Microsoft.CodeAnalysis.FxCopAnalyzers.Design,CA1008CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Design\CodeFixes\CA1008CodeFixProviderBase.cs,GetUpdatedDocumentAsync,The following switch statement is missing a default case: switch (customTag)                  {                      case CA1008DiagnosticAnalyzer.RuleRenameCustomTag:                          return await GetUpdatedDocumentForRuleNameRenameAsync(document' (IFieldSymbol)declaredSymbol' cancellationToken).ConfigureAwait(false);                        case CA1008DiagnosticAnalyzer.RuleMultipleZeroCustomTag:                          await ApplyRuleNameMultipleZeroAsync(editor' (INamedTypeSymbol)declaredSymbol' cancellationToken);                          return editor.GetChangedDocuments().First();                        case CA1008DiagnosticAnalyzer.RuleNoZeroCustomTag:                          await ApplyRuleNameNoZeroValueAsync(editor' (INamedTypeSymbol)declaredSymbol' cancellationToken);                          return editor.GetChangedDocuments().First();                  }
Missing Default,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,AbstractCodeBlockAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CA1309DiagnosticAnalyzer.cs,IsAcceptableInstanceOverload,The following switch statement is missing a default case: switch (methodSymbol.Parameters.Length)                      {                          case 1:                              // the instance method .Equals(object) is OK                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_Object;                          case 2:                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.Equals(stringComparisonType);                      }
Missing Default,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,AbstractCodeBlockAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CA1309DiagnosticAnalyzer.cs,IsAcceptableStaticOverload,The following switch statement is missing a default case: switch (methodSymbol.Parameters.Length)                      {                          case 3:                              // (string' string' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[2].Type.Equals(stringComparisonType);                          case 6:                              // (string' int' string' int' int' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[2].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[4].Type.SpecialType == SpecialType.System_Int32 &&                                  methodSymbol.Parameters[5].Type.Equals(stringComparisonType);                      }
Missing Default,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,AbstractCodeBlockAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CA1309DiagnosticAnalyzer.cs,IsAcceptableStaticOverload,The following switch statement is missing a default case: switch (methodSymbol.Parameters.Length)                      {                          case 2:                              // (object' object) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_Object &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_Object;                          case 3:                              // (string' string' StringComparison) is acceptable                              return methodSymbol.Parameters[0].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[1].Type.SpecialType == SpecialType.System_String &&                                  methodSymbol.Parameters[2].Type.Equals(stringComparisonType);                      }
Missing Default,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,CA1309CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CodeFixes\CA1309CodeFixProviderBase.cs,CanAddStringComparison,The following switch statement is missing a default case: switch (methodSymbol.Name)              {                  case CA1309DiagnosticAnalyzer.EqualsMethodName:                      // can fix .Equals() with (string)' (string' string)                      switch (parameters.Length)                      {                          case 1:                              return parameters[0].Type.SpecialType == SpecialType.System_String;                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                      }                        break;                  case CA1309DiagnosticAnalyzer.CompareMethodName:                      // can fix .Compare() with (string' string)' (string' int' string' int' int)                      switch (parameters.Length)                      {                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                          case 5:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[2].Type.SpecialType == SpecialType.System_String &&                                  parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[4].Type.SpecialType == SpecialType.System_Int32;                      }                        break;              }
Missing Default,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,CA1309CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CodeFixes\CA1309CodeFixProviderBase.cs,CanAddStringComparison,The following switch statement is missing a default case: switch (parameters.Length)                      {                          case 1:                              return parameters[0].Type.SpecialType == SpecialType.System_String;                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                      }
Missing Default,Microsoft.CodeAnalysis.FxCopAnalyzers.Globalization,CA1309CodeFixProviderBase,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Globalization\CodeFixes\CA1309CodeFixProviderBase.cs,CanAddStringComparison,The following switch statement is missing a default case: switch (parameters.Length)                      {                          case 2:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_String;                          case 5:                              return parameters[0].Type.SpecialType == SpecialType.System_String &&                                  parameters[1].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[2].Type.SpecialType == SpecialType.System_String &&                                  parameters[3].Type.SpecialType == SpecialType.System_Int32 &&                                  parameters[4].Type.SpecialType == SpecialType.System_Int32;                      }
Missing Default,Microsoft.CodeAnalysis.FxCopAnalyzers.Naming,CA1715DiagnosticAnalyzer,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Naming\CA1715DiagnosticAnalyzer.cs,Initialize,The following switch statement is missing a default case: switch (context.Symbol.Kind)                  {                      case SymbolKind.NamedType:                          AnalyzeNamedTypeSymbol((INamedTypeSymbol)context.Symbol' context.ReportDiagnostic);                          break;                        case SymbolKind.Method:                          AnalyzeMethodSymbol((IMethodSymbol)context.Symbol' context.ReportDiagnostic);                          break;                  }
Missing Default,Microsoft.CodeAnalysis.FxCopAnalyzers.Utilities,DiagnosticHelpers,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Shared\DiagnosticHelpers.cs,TryConvertToUInt64,The following switch statement is missing a default case: switch (specialType)                  {                      case SpecialType.System_Int16:                          convertedValue = unchecked((ulong)((short)value));                          success = true;                          break;                      case SpecialType.System_Int32:                          convertedValue = unchecked((ulong)((int)value));                          success = true;                          break;                      case SpecialType.System_Int64:                          convertedValue = unchecked((ulong)((long)value));                          success = true;                          break;                      case SpecialType.System_UInt16:                          convertedValue = (ushort)value;                          success = true;                          break;                      case SpecialType.System_UInt32:                          convertedValue = (uint)value;                          success = true;                          break;                      case SpecialType.System_UInt64:                          convertedValue = (ulong)value;                          success = true;                          break;                      case SpecialType.System_Byte:                          convertedValue = (byte)value;                          success = true;                          break;                      case SpecialType.System_SByte:                          convertedValue = unchecked((ulong)((sbyte)value));                          success = true;                          break;                      case SpecialType.System_Char:                          convertedValue = (char)value;                          success = true;                          break;                  }
Missing Default,Microsoft.CodeAnalysis.FxCopAnalyzers.Utilities,ISymbolExtensions,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Shared\Extensions\ISymbolExtensions.cs,GetResultantVisibility,The following switch statement is missing a default case: switch (symbol.Kind)              {                  case SymbolKind.Alias:                      // Aliases are uber private.  They're only visible in the same file that they                      // were declared in.                      return SymbolVisibility.Private;                    case SymbolKind.Parameter:                      // Parameters are only as visible as their containing symbol                      return GetResultantVisibility(symbol.ContainingSymbol);                    case SymbolKind.TypeParameter:                      // Type Parameters are private.                      return SymbolVisibility.Private;              }
Missing Default,Microsoft.CodeAnalysis.FxCopAnalyzers.Utilities,ISymbolExtensions,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Shared\Extensions\ISymbolExtensions.cs,GetResultantVisibility,The following switch statement is missing a default case: switch (symbol.DeclaredAccessibility)                  {                      // If we see anything private' then the symbol is private.                      case Accessibility.NotApplicable:                      case Accessibility.Private:                          return SymbolVisibility.Private;                        // If we see anything internal' then knock it down from public to                      // internal.                      case Accessibility.Internal:                      case Accessibility.ProtectedAndInternal:                          visibility = SymbolVisibility.Internal;                          break;                            // For anything else (Public' Protected' ProtectedOrInternal)' the                          // symbol stays at the level we've gotten so far.                  }
Missing Default,Microsoft.CodeAnalysis.FxCopAnalyzers.Utilities,WordParser,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Shared\WordParser.cs,IsHexDigit,The following switch statement is missing a default case: switch (c)              {                  case 'A':                  case 'a':                  case 'B':                  case 'b':                  case 'C':                  case 'c':                  case 'D':                  case 'd':                  case 'E':                  case 'e':                  case 'F':                  case 'f':                      return true;              }
Missing Default,Microsoft.CodeAnalysis.FxCopAnalyzers.Utilities,WordParser,C:\research\architectureSmells\repos\mono_roslyn\src\Diagnostics\FxCop\Core\Shared\WordParser.cs,IsIntraWordPunctuation,The following switch statement is missing a default case: switch (c)              {                  case '-':                  case '\u00AD': // Soft hyphen                  case '\'':                  case '\u2019': // Right Single Quotation Mark                      return true;              }
