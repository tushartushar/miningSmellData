Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.VisualStudio.InteractiveWindow.Commands,Commands,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Commands\InteractiveWindowCommands.cs,DisplayCommandUsage,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.VisualStudio.InteractiveWindow,History,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\History.cs,Move,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,ProjectionBufferChanged,Cyclomatic complexity of the method is 12
Long Parameter List,Microsoft.VisualStudio.InteractiveWindow.Commands,Commands,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Commands\InteractiveWindowCommands.cs,Commands,The method has 5 parameters. Parameters: window' prefix' commands' contentTypeRegistry' classificationRegistry
Long Parameter List,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,InteractiveWindow,The method has 9 parameters. Parameters: host' contentTypeRegistry' bufferFactory' projectionBufferFactory' editorOperationsFactory' editorFactory' intellisenseSessionStackMap' smartIndenterService' evaluator
Long Parameter List,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindowProvider,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindowProvider.cs,InteractiveWindowProvider,The method has 8 parameters. Parameters: contentTypeRegistry' bufferFactory' projectionBufferFactory' editorOperationsFactory' editorFactory' intellisenseSessionStackMap' smartIndenterService' windowFactoryService
Long Identifier,Microsoft.VisualStudio.InteractiveWindow.Commands,PredefinedInteractiveCommandsContentTypes,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Commands\PredefinedInteractiveCommandsContentTypes.cs,,The length of the parameter InteractiveCommandContentTypeName is 33.
Long Identifier,Microsoft.VisualStudio.InteractiveWindow.Commands,PredefinedInteractiveCommandsContentTypes,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Commands\PredefinedInteractiveCommandsContentTypes.cs,,The length of the parameter InteractiveCommandContentTypeDefinition is 39.
Long Identifier,Microsoft.VisualStudio.InteractiveWindow,PredefinedInteractiveContentTypes,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\PredefinedInteractiveContentTypes.cs,,The length of the parameter InteractiveOutputContentTypeName is 32.
Long Identifier,Microsoft.VisualStudio.InteractiveWindow,InteractiveContentTypeDefinitions,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveContentTypeDefinitions.cs,,The length of the parameter InteractiveContentTypeDefinition is 32.
Long Identifier,Microsoft.VisualStudio.InteractiveWindow,InteractiveContentTypeDefinitions,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveContentTypeDefinitions.cs,,The length of the parameter InteractiveOutputContentTypeDefinition is 38.
Long Identifier,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,GetContainingRegion,The length of the parameter closestPrecedingPrimaryPromptIndex is 34.
Long Identifier,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,ProjectionBufferChanged,The length of the parameter oldSurfaceLanguageBufferExtent is 30.
Long Identifier,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,ProjectionBufferChanged,The length of the parameter newSurfaceLanguageBufferExtent is 30.
Long Statement,Microsoft.VisualStudio.InteractiveWindow.Commands,ResetCommand,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Commands\ResetCommand.cs,ClassifyArguments,The length of the statement  "                yield return new ClassificationSpan(new SnapshotSpan(snapshot' Span.FromBounds(argumentsSpan.Start + noConfigStart' argumentsSpan.Start + noConfigEnd))' registry.Keyword); " is 171.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,GetContainingRegion,The length of the statement  "                    return new SnapshotSpan(new SnapshotPoint(TextBuffer.CurrentSnapshot' 0)' projectedLanguageBufferStart - promptProjectionSpan.Length); " is 134.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,GetContainingRegion,The length of the statement  "            // this was the last primary/stdin prompt - select the part of the projection buffer behind the end of the language/stdin buffer: " is 129.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,GetContainingRegion,The length of the statement  "            ReplSpan lastSpanBeforeNextPrompt = projectionSpans[promptLineMapping[closestPrecedingPrimaryPromptIndex + 1].Value - 1]; " is 121.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,CutOrDeleteCurrentLine,The length of the statement  "            TextView.Caret.MoveTo(new VirtualSnapshotPoint(TextView.TextBuffer.CurrentSnapshot.GetLineFromLineNumber(line.LineNumber)' column)); " is 132.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,GetLanguageBuffer,The length of the statement  "            // if the point is at the end of the buffer it might be on the next line that doesn't logically belong to the input region: " is 123.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,GetLanguageBuffer,The length of the statement  "            if (point > projectedSnapshotEnd || (point == projectedSnapshotEnd && projectedSnapshotEnd.GetContainingLine().LineBreakLength != 0)) " is 133.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,FinishCurrentSubmissionInput,The length of the statement  "                // TODO (tomat): remember the index of the adornment(s) in the current output and minimize those instead of the last one  " is 120.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,SubmitStandardInput,The length of the statement  "            inputValue = new SnapshotSpan(stdInputBuffer.CurrentSnapshot' Span.FromBounds(stdInputStart.Value' stdInputBuffer.CurrentSnapshot.Length)); " is 139.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,CreatePrompt,The length of the statement  "            Debug.Assert(promptKind == ReplSpanKind.Prompt || promptKind == ReplSpanKind.StandardInputPrompt || promptKind == ReplSpanKind.SecondaryPrompt); " is 144.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,MeasurePrompts,The length of the statement  "            var promptSpanIndex = GetProjectionSpanIndexFromEditableBufferPosition(projectionBuffer.CurrentSnapshot' projectionSpans.Count' startLine) - 1; " is 143.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,ApplyProtection,The length of the statement  "                var region1 = (end > 0) ? readonlyEdit.CreateReadOnlyRegion(new Span(0' 0)' SpanTrackingMode.EdgeExclusive' EdgeInsertionMode.Deny) : null; " is 139.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,ProjectionBufferChanged,The length of the statement  "            // projection buffer is changed before language buffer is created (for example' output might be printed out during initialization): " is 131.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,ProjectionBufferChanged,The length of the statement  "                Span oldSurfaceIntersection = oldSurfaceLanguageBufferExtent.Intersection(change.OldSpan) ?? new Span(oldSurfaceLanguageBufferExtent.Start' 0); " is 143.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,ProjectionBufferChanged,The length of the statement  "                Span newSurfaceIntersection = newSurfaceLanguageBufferExtent.Intersection(change.NewSpan) ?? new Span(newSurfaceLanguageBufferExtent.Start' 0); " is 143.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,ProjectionBufferChanged,The length of the statement  "                int oldStartSpanIndex = GetProjectionSpanIndexFromEditableBufferPosition(e.Before' oldProjectionSpanCount' oldSurfaceStartLineNumber); " is 134.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,ProjectionBufferChanged,The length of the statement  "                int oldEndSpanIndex = GetProjectionSpanIndexFromEditableBufferPosition(e.Before' oldProjectionSpanCount' oldSurfaceEndLineNumber); " is 130.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,ProjectionBufferChanged,The length of the statement  "                        // TODO (crwilcox): do we need two prompts?  Can I tell it to not do this?  Or perhaps we do want this since we want different markings? " is 136.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,InsertProjectionSpans,The length of the statement  "            projectionBuffer.ReplaceSpans(index' 0' new[] { span1.Span' span2.Span }' EditOptions.None' editTag: suppressPromptInjectionTag); " is 129.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,ReplaceProjectionSpan,The length of the statement  "            projectionBuffer.ReplaceSpans(spanToReplace' 1' new[] { newSpan.Span }' EditOptions.None' editTag: suppressPromptInjectionTag); " is 127.
Long Statement,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,RemoveProjectionSpans,The length of the statement  "            projectionBuffer.ReplaceSpans(index' count' SpecializedCollections.EmptyList<object>()' EditOptions.None' suppressPromptInjectionTag); " is 134.
Complex Conditional,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,ProjectionBufferChanged,The conditional expression  "oldSurfaceStartLineNumber == oldSurfaceEndLineNumber &&                      change.LineCountDelta == 0 &&                      oldSurfaceIntersection == change.OldSpan &&                      newSurfaceIntersection == change.NewSpan"  is complex.
Magic Number,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,StartCursorTimer,The following statement contains a magic number: timer.Interval = TimeSpan.FromMilliseconds(250);
Magic Number,Microsoft.VisualStudio.InteractiveWindow,OutputBuffer,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\OutputBuffer.cs,Flush,The following statement contains a magic number: lock (mutex)              {                  // if we're rapidly outputting grow the threshold                  long curTime = stopwatch.ElapsedMilliseconds;                  if (curTime - lastFlushTimeMilliseconds < 1000)                  {                      if (flushThreshold < 1024 * 1024)                      {                          flushThreshold *= 2;                      }                  }                    lastFlushTimeMilliseconds = stopwatch.ElapsedMilliseconds;                    if (unflushedLength > 0)                  {                      // normalize line breaks - the editor isn't happy about projections that cut "\r\n" line break in half:                      if (lastEntry.Text[lastEntry.Text.Length - 1] == '\r')                      {                          AddEntry("\n");                      }                        firstEntryToFlush = firstEntry;                      flushLength = unflushedLength;                        firstEntry = lastEntry = null;                      unflushedLength = 0;                  }                    timer.IsEnabled = false;              }
Magic Number,Microsoft.VisualStudio.InteractiveWindow,OutputBuffer,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\OutputBuffer.cs,Flush,The following statement contains a magic number: lock (mutex)              {                  // if we're rapidly outputting grow the threshold                  long curTime = stopwatch.ElapsedMilliseconds;                  if (curTime - lastFlushTimeMilliseconds < 1000)                  {                      if (flushThreshold < 1024 * 1024)                      {                          flushThreshold *= 2;                      }                  }                    lastFlushTimeMilliseconds = stopwatch.ElapsedMilliseconds;                    if (unflushedLength > 0)                  {                      // normalize line breaks - the editor isn't happy about projections that cut "\r\n" line break in half:                      if (lastEntry.Text[lastEntry.Text.Length - 1] == '\r')                      {                          AddEntry("\n");                      }                        firstEntryToFlush = firstEntry;                      flushLength = unflushedLength;                        firstEntry = lastEntry = null;                      unflushedLength = 0;                  }                    timer.IsEnabled = false;              }
Magic Number,Microsoft.VisualStudio.InteractiveWindow,OutputBuffer,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\OutputBuffer.cs,Flush,The following statement contains a magic number: lock (mutex)              {                  // if we're rapidly outputting grow the threshold                  long curTime = stopwatch.ElapsedMilliseconds;                  if (curTime - lastFlushTimeMilliseconds < 1000)                  {                      if (flushThreshold < 1024 * 1024)                      {                          flushThreshold *= 2;                      }                  }                    lastFlushTimeMilliseconds = stopwatch.ElapsedMilliseconds;                    if (unflushedLength > 0)                  {                      // normalize line breaks - the editor isn't happy about projections that cut "\r\n" line break in half:                      if (lastEntry.Text[lastEntry.Text.Length - 1] == '\r')                      {                          AddEntry("\n");                      }                        firstEntryToFlush = firstEntry;                      flushLength = unflushedLength;                        firstEntry = lastEntry = null;                      unflushedLength = 0;                  }                    timer.IsEnabled = false;              }
Magic Number,Microsoft.VisualStudio.InteractiveWindow,OutputBuffer,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\OutputBuffer.cs,Flush,The following statement contains a magic number: lock (mutex)              {                  // if we're rapidly outputting grow the threshold                  long curTime = stopwatch.ElapsedMilliseconds;                  if (curTime - lastFlushTimeMilliseconds < 1000)                  {                      if (flushThreshold < 1024 * 1024)                      {                          flushThreshold *= 2;                      }                  }                    lastFlushTimeMilliseconds = stopwatch.ElapsedMilliseconds;                    if (unflushedLength > 0)                  {                      // normalize line breaks - the editor isn't happy about projections that cut "\r\n" line break in half:                      if (lastEntry.Text[lastEntry.Text.Length - 1] == '\r')                      {                          AddEntry("\n");                      }                        firstEntryToFlush = firstEntry;                      flushLength = unflushedLength;                        firstEntry = lastEntry = null;                      unflushedLength = 0;                  }                    timer.IsEnabled = false;              }
Magic Number,Microsoft.VisualStudio.InteractiveWindow,ResizingAdorner,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\ResizingAdorner.cs,BuildAdornerCorner,The following statement contains a magic number: thumb.Height = thumb.Width = 10;
Magic Number,Microsoft.VisualStudio.InteractiveWindow,ResizingAdorner,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\ResizingAdorner.cs,BuildAdornerCorner,The following statement contains a magic number: thumb.Opacity = 0.40;
Magic Number,Microsoft.VisualStudio.InteractiveWindow,ResizingAdorner,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\ResizingAdorner.cs,ArrangeOverride,The following statement contains a magic number: bottomRight.Arrange(new Rect((desiredWidth - adornerWidth) / 2'                  (desiredHeight - adornerHeight) / 2' adornerWidth' adornerHeight));
Magic Number,Microsoft.VisualStudio.InteractiveWindow,ResizingAdorner,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\ResizingAdorner.cs,ArrangeOverride,The following statement contains a magic number: bottomRight.Arrange(new Rect((desiredWidth - adornerWidth) / 2'                  (desiredHeight - adornerHeight) / 2' adornerWidth' adornerHeight));
Magic Number,Microsoft.VisualStudio.InteractiveWindow,ZoomableInlineAdornment,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\ZoomableInlineAdornment.cs,ZoomableInlineAdornment,The following statement contains a magic number: this.zoomStep = 0.25;
Magic Number,Microsoft.VisualStudio.InteractiveWindow,ZoomableInlineAdornment,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\ZoomableInlineAdornment.cs,ZoomableInlineAdornment,The following statement contains a magic number: this.minimizedZoom = 0.25;
Magic Number,Microsoft.VisualStudio.InteractiveWindow,ZoomableInlineAdornment,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\ZoomableInlineAdornment.cs,ZoomableInlineAdornment,The following statement contains a magic number: this.widthRatio = 0.67;
Magic Number,Microsoft.VisualStudio.InteractiveWindow,ZoomableInlineAdornment,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\ZoomableInlineAdornment.cs,ZoomableInlineAdornment,The following statement contains a magic number: this.heightRatio = 0.5;
Magic Number,Microsoft.VisualStudio.InteractiveWindow,ZoomableInlineAdornment,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\ZoomableInlineAdornment.cs,MakeContextMenu,The following statement contains a magic number: AddMenuItem(result' "150%"' null' (s' e) => Zoom(1.5));
Magic Number,Microsoft.VisualStudio.InteractiveWindow,ZoomableInlineAdornment,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\ZoomableInlineAdornment.cs,MakeContextMenu,The following statement contains a magic number: AddMenuItem(result' "75%"' null' (s' e) => Zoom(0.75));
Magic Number,Microsoft.VisualStudio.InteractiveWindow,ZoomableInlineAdornment,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\ZoomableInlineAdornment.cs,MakeContextMenu,The following statement contains a magic number: AddMenuItem(result' "50%"' null' (s' e) => Zoom(0.50));
Magic Number,Microsoft.VisualStudio.InteractiveWindow,ZoomableInlineAdornment,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\ZoomableInlineAdornment.cs,MakeContextMenu,The following statement contains a magic number: AddMenuItem(result' "25%"' null' (s' e) => Zoom(0.25));
Magic Number,Microsoft.VisualStudio.InteractiveWindow,ZoomableInlineAdornment,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\Output\ZoomableInlineAdornment.cs,OnZoomOut,The following statement contains a magic number: if (zoom - zoomStep > 0.1)              {                  zoom -= zoomStep;                  UpdateSize();              }
Missing Default,Microsoft.VisualStudio.InteractiveWindow,InteractiveWindow,C:\repos\mono_roslyn\src\InteractiveWindow\Editor\InteractiveWindow.cs,IndexOfLastPrompt,The following switch statement is missing a default case: switch (projectionSpans[i].Kind)                  {                      case ReplSpanKind.Prompt:                          lastPrimary = i;                          if (last == -1)                          {                              last = i;                          }                            return;                        case ReplSpanKind.SecondaryPrompt:                      case ReplSpanKind.StandardInputPrompt:                          if (last == -1)                          {                              last = i;                          }                            break;                  }
