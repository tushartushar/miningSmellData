Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.CodeAnalysis.CSharp.UnitTests,AsyncParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\AsyncParsingTests.cs,AsyncModifierCases,The method has 105 lines of code.
Long Method,Microsoft.CodeAnalysis.CSharp.UnitTests,AwaitParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\AwaitParsingTests.cs,NestedLambdaAwait,The method has 109 lines of code.
Long Method,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\CrefParsingTests.cs,ParameterComplex,The method has 107 lines of code.
Long Method,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,UsingPartial,The method has 268 lines of code.
Long Method,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Attributes,The method has 197 lines of code.
Long Method,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Fields,The method has 104 lines of code.
Long Method,Microsoft.CodeAnalysis.CSharp.UnitTests,LambdaParameterParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\LambdaParameterParsingTests.cs,EndOfFileAfterOutTypeIdentifierComma,The method has 108 lines of code.
Long Method,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,TypeArguments,The method has 164 lines of code.
Long Method,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,TypeArguments2,The method has 265 lines of code.
Long Method,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,ArrayRankSpecifiers,The method has 220 lines of code.
Long Method,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The method has 107 lines of code.
Long Method,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The method has 104 lines of code.
Long Method,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The method has 100 lines of code.
Long Method,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The method has 102 lines of code.
Long Method,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The method has 100 lines of code.
Complex Method,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,WarningLevel_2,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,VerifyDirectivesSpecial,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,VerifyDirectivePragma,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,BinaryExpressionChanges,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\BinaryExpression.cs,GetExpressionString,Cyclomatic complexity of the method is 24
Complex Method,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,ChangingIdentifiers,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\ChangingIdentifiers.cs,GetNameString,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,CompoundAssignment,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\CompoundAssignment.cs,GetExpressionString,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,UnaryExpression,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\UnaryExpression.cs,GetExpressionString,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,AssertMappedSpanEqual,The method has 8 parameters. Parameters: syntaxTree' sourceText' expectedPath' expectedStartLine' expectedStartOffset' expectedEndLine' expectedEndOffset' hasMappedPath
Long Parameter List,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentOutText,The method has 5 parameters. Parameters: oldText' locationOfChange' widthOfChange' incrementalTree' parsedTree
Long Parameter List,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,RemoveText,The method has 5 parameters. Parameters: oldText' locationOfChange' widthOfChange' incrementalTree' parsedTree
Long Parameter List,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,ChangingIdentifiers,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\ChangingIdentifiers.cs,MakeIncrementalNameChanges,The method has 5 parameters. Parameters: oldStyle' newStyle' expressionValidator' topLevel' options
Long Parameter List,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,GrammarAmbiguities,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\GrammarAmbiguities.cs,VerifyReplace,The method has 5 parameters. Parameters: codeBefore' codeToBeReplaced' codeAfter' replacement' expectedArgumentCount
Long Identifier,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxAnnotationTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxAnnotationTests.cs,CopyAnnotationsTo,The length of the parameter sourceTreeNodeOrTokenEnumerator is 31.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,WarningLevel_2,The length of the statement  "            // If a new warning is added' this test will fail and adding the new case with the expected error level will be required. " is 121.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,Warning_1,The length of the statement  "            option = TestOptions.ReleaseExe.WithGeneralDiagnosticOption(ReportDiagnostic.Default).WithSpecificDiagnosticOptions(warnings); " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_VeryLongIdentifiersAreAllowed,The length of the statement  "#defineis 2343.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_VeryLongIdentifiersAreAllowed,The length of the statement  "#pragma warning disableis 2375.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_VeryLongIdentifiersAreAllowed,The length of the statement  "#pragma warning restoreis 2375.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The length of the statement  "            Assert.Equal(ReportDiagnostic.Default' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "public class").Start)); " is 176.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The length of the statement  "            Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "public static").Start)); " is 178.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The length of the statement  "            Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(219)' GetSpanIn(syntaxTree' "public static").Start)); " is 178.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The length of the statement  "            Assert.Equal(ReportDiagnostic.Default' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "int x").Start)); " is 169.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The length of the statement  "            Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(219)' GetSpanIn(syntaxTree' "int x").Start)); " is 170.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The length of the statement  "            Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "int y").Start)); " is 170.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The length of the statement  "            Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(219)' GetSpanIn(syntaxTree' "int y").Start)); " is 170.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The length of the statement  "            Assert.Equal(ReportDiagnostic.Default' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "int z").Start)); " is 169.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The length of the statement  "            Assert.Equal(ReportDiagnostic.Default' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(219)' GetSpanIn(syntaxTree' "int z").Start)); " is 169.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMapWithIfDirective,The length of the statement  "            Assert.Equal(ReportDiagnostic.Default' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "static void").Start)); " is 175.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMapWithIfDirective,The length of the statement  "            Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "var x").Start)); " is 170.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMapWithIfDirective,The length of the statement  "            Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(219)' GetSpanIn(syntaxTree' "var y").Start)); " is 170.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMapAtTheFirstLine,The length of the statement  "            Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "static void").Start)); " is 176.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping_NoSyntaxTreePath,The length of the statement  "            AssertMappedSpanEqual(SyntaxFactory.ParseSyntaxTree(sampleProgram' path: "")' "class X {}"' ""' 19' 0' 19' 10' hasMappedPath: false); " is 133.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping_NoSyntaxTreePath,The length of the statement  "            AssertMappedSpanEqual(SyntaxFactory.ParseSyntaxTree(sampleProgram' path: "   ")' "class X {}"' "   "' 19' 0' 19' 10' hasMappedPath: false); " is 139.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestExternalLocationFormatting,The length of the statement  "            Location location = Location.Create("test.txt"' new TextSpan()' new LinePositionSpan(new LinePosition(2' 1)' new LinePosition(3' 1))); " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestExternalLocationFormatting,The length of the statement  "            var diagnostic = Diagnostic.Create("CS0000"' ""' "msg"' DiagnosticSeverity.Warning' DiagnosticSeverity.Warning' true' 1' location: location); " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestExternalLocationFormatting,The length of the statement  "            Assert.Equal("test.txt(3'2): warning CS0000: msg"' CSharpDiagnosticFormatter.Instance.Format(diagnostic' EnsureEnglishUICulture.PreferredOrNull)); " is 146.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestDiagnosticsLocationsExistInsideTreeSpan,The length of the statement  "            var node = SyntaxFactory.IdentifierName(SyntaxFactory.Identifier(SyntaxFactory.TriviaList(SyntaxFactory.Whitespace("    "))' "x"' default(SyntaxTriviaList))); " is 158.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestDiagnosticsLocationsExistInsideTreeSpan,The length of the statement  "            var nodeWithBadError = node.Green.WithDiagnosticsGreen(new DiagnosticInfo[] { new SyntaxDiagnosticInfo(10' 10' ErrorCode.ERR_AbstractAndExtern) }).CreateRed(); " is 159.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestDiagnosticsLocationsExistInsideTreeSpan_ZeroWidthTree,The length of the statement  "            var nodeWithBadError = SyntaxFactory.IdentifierName(new SyntaxToken(node.Node.WithDiagnosticsGreen(new DiagnosticInfo[] { new SyntaxDiagnosticInfo(10' 10' ErrorCode.ERR_AbstractAndExtern) }))); " is 193.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentClassWithGTandGTEOperator,The length of the statement  "            Assert.Equal(SyntaxKind.GreaterThanToken' incrementalTree.GetCompilationUnitRoot().ChildNodesAndTokens()[2].ChildNodesAndTokens()[8].Kind); " is 139.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentClassWithGTandGTEOperator,The length of the statement  "            Assert.Equal(SyntaxKind.GreaterThanEqualsToken' incrementalTree.GetCompilationUnitRoot().ChildNodesAndTokens()[2].ChildNodesAndTokens()[9].Kind); " is 145.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentClassWithGTandGTEOperator,The length of the statement  "            Assert.Equal(SyntaxKind.GreaterThanToken' parsedTree.GetCompilationUnitRoot().ChildNodesAndTokens()[2].ChildNodesAndTokens()[8].Kind); " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentClassWithGTandGTEOperator,The length of the statement  "            Assert.Equal(SyntaxKind.GreaterThanEqualsToken' parsedTree.GetCompilationUnitRoot().ChildNodesAndTokens()[2].ChildNodesAndTokens()[9].Kind); " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentClassWithGTandGTEOperator,The length of the statement  "            // Assert.Equal( parsedTree.GetCompilationUnitRoot().ToXml().ToString()' incrementalTree.GetCompilationUnitRoot().ToXml().ToString()); " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CodeWithDollarSign,The length of the statement  "            // Verify when you roundtrip the text from the full parse with change should match the text from the incremental parse with change " is 130.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CodeWithDollarSign,The length of the statement  "            Assert.Equal(parsedTree.GetCompilationUnitRoot().ToFullString()' incrementalTree.GetCompilationUnitRoot().ToFullString()); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentCodeInGOTOStatement,The length of the statement  "            SourceText oldText = SourceText.From(@"class CSTR020mod{ public static void CSTR020()  {  ON ERROR GOTO ErrorTrap; } }"); " is 121.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentCloseBraceInPropertyDecl,The length of the statement  "            // This function will update the first closing brace in property declaration Property_MyStructArr "}" to "/*}*/" in oldText " is 123.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentGlobalUsedAsAlias,The length of the statement  "            Assert.Equal(parsedTree.GetCompilationUnitRoot().ChildNodesAndTokens().Count' incrementalTree.GetCompilationUnitRoot().ChildNodesAndTokens().Count); " is 148.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentGlobalUsedAsAlias,The length of the statement  "                Assert.Equal(parsedTree.GetCompilationUnitRoot().ChildNodesAndTokens()[i].Kind()' incrementalTree.GetCompilationUnitRoot().ChildNodesAndTokens()[i].Kind()); " is 156.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,TrailingCommentFollowingAttributesInsideMethod,The length of the statement  "            Assert.Equal(parsedTree.GetCompilationUnitRoot().ChildNodesAndTokens()[0].AsNode().ToFullString()' incrementalTree.GetCompilationUnitRoot().ChildNodesAndTokens()[0].AsNode().ToFullString()); " is 190.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,AddClassKeywordWithAnonymousMethodThrowsIndexOutOfRangeException,The length of the statement  "            Assert.Equal(parsedTree.GetCompilationUnitRoot().ToFullString()' incrementalTree.GetCompilationUnitRoot().ToFullString()); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexKeywords,The length of the statement  "            AssertTokens("&#103;loba&#108;"' Token(SyntaxKind.IdentifierToken' "&#103;loba&#108;"' "global"' SyntaxKind.GlobalKeyword)); " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u0067lobal"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u0067lobal")); " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u006Fperator"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u006Fperator")); " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u0065xplicit"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u0065xplicit")); " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u0069mplicit"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u0069mplicit")); " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u0072ef"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u0072ef")); " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u006Fut"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u006Fut")); " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u0074rue"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u0074rue")); " is 133.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u0066alse"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u0066alse")); " is 135.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexPunctuation,The length of the statement  "            AssertTokens("&#63;&#63;"' Token(SyntaxKind.QuestionToken' "&#63;"' "?")' Token(SyntaxKind.QuestionToken' "&#63;"' "?")); " is 121.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexPunctuationSequences,The length of the statement  "            AssertTokens(":::::"' Token(SyntaxKind.ColonColonToken)' Token(SyntaxKind.ColonColonToken)' Token(SyntaxKind.ColonToken)); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexPunctuationSequences,The length of the statement  "            AssertTokens("????"' Token(SyntaxKind.QuestionToken)' Token(SyntaxKind.QuestionToken)' Token(SyntaxKind.QuestionToken)' Token(SyntaxKind.QuestionToken)); " is 153.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexOperators,The length of the statement  "            AssertTokens("&#62;&#62;"' Token(SyntaxKind.GreaterThanToken' "&#62;"' ">")' Token(SyntaxKind.GreaterThanToken' "&#62;"' ">")); " is 127.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens("-----"' Token(SyntaxKind.MinusMinusToken)' Token(SyntaxKind.MinusMinusToken)' Token(SyntaxKind.MinusToken)); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens("====="' Token(SyntaxKind.EqualsEqualsToken)' Token(SyntaxKind.EqualsEqualsToken)' Token(SyntaxKind.EqualsToken)); " is 127.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens("&lt;&lt;&lt;"' Token(SyntaxKind.LessThanLessThanToken' "&lt;&lt;"' "<<")' Token(SyntaxKind.LessThanToken' "&lt;"' "<")); " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens("&lt;&lt;&lt;&lt;"' Token(SyntaxKind.LessThanLessThanToken' "&lt;&lt;"' "<<")' Token(SyntaxKind.LessThanLessThanToken' "&lt;&lt;"' "<<")); " is 151.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens("&lt;&lt;&lt;&lt;&lt;"' Token(SyntaxKind.LessThanLessThanToken' "&lt;&lt;"' "<<")' Token(SyntaxKind.LessThanLessThanToken' "&lt;&lt;"' "<<")' Token(SyntaxKind.LessThanToken' "&lt;"' "<")); " is 201.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens(">>>"' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)); " is 128.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens(">>>>"' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)); " is 165.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens(">>>>>"' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)); " is 202.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens("{{{{"' Token(SyntaxKind.LessThanLessThanToken' "{{"' "<<")' Token(SyntaxKind.LessThanLessThanToken' "{{"' "<<")); " is 127.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens("{{{{{"' Token(SyntaxKind.LessThanLessThanToken' "{{"' "<<")' Token(SyntaxKind.LessThanLessThanToken' "{{"' "<<")' Token(SyntaxKind.LessThanToken' "{"' "<")); " is 171.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexBadEntity,The length of the statement  "            AssertTokens("&#a;"' Token(SyntaxKind.XmlEntityLiteralToken' "&#")' Token(SyntaxKind.IdentifierToken' "a")' Token(SyntaxKind.BadToken' ";")); " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,TestLexBadEntity,The length of the statement  "            AssertTokens("&#xg;"' Token(SyntaxKind.XmlEntityLiteralToken' "&#x")' Token(SyntaxKind.IdentifierToken' "g")' Token(SyntaxKind.BadToken' ";")); " is 143.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,CrefLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\CrefLexerTests.cs,GetTokens,The length of the statement  "                    var token = lexer.Lex(InternalSyntax.LexerMode.XmlCrefQuote | InternalSyntax.LexerMode.XmlDocCommentStyleSingleLine | InternalSyntax.LexerMode.XmlDocCommentLocationInterior); " is 174.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestSingleLineCommentWithUnicode,The length of the statement  "            var text = "// ҉ ҉̵̞̟̠̖̗̘̙̜̝̞̟̠͇̊̋̌̍̎̏̐̑̒̓̔̊̋̌̍̎̏̐̑̒̓̔̿̿̿… ͡҉҉ ̵̡̢̛̗̘̙̜̝̞̟̠͇̊̋̌̍̎̏̿̿̿̚ ҉ ҉҉̡̢̡̢̛̛̖̗̘̙̜̝̞̟̠̖̗̘̙̜̝̞̟̠̊̋̌̍̎̏̐̑̒̓̔̊̋̌… ̒̓̔̕̚ ̍̎̏̐̑̒̓̔̕̚̕̚ ̡̢̛̗̘̙̜̝̞̟̠̊̋̌̍̎̏̚ ̡̢̡̢̛̛̖̗̘̙̜̝̞̟̠̖̗̘̙̜̝̞̟̠̊̋̌̍̎̏̐̑̒̓̔̊̋̌̍̎… ̕̚̕̚ ̔̕̚̕̚҉ ҉̵̞̟̠̖̗̘̙̜̝̞̟̠͇̊̋̌̍̎̏̐̑̒̓̔̊̋̌̍̎̏̐̑̒̓̔̿̿̿… ͡҉҉ ̵̡̢̛̗̘̙̜̝̞̟̠͇̊̋̌̍̎̏̿̿̿̚ ҉ "; " is 297.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestIdentifierWithUnicode,The length of the statement  "            var text = "Fō̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄̄o"; " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestStringLiteralWithUnicode,The length of the statement  "            var text = "\"҉ ҉̵̞̟̠̖̗̘̙̜̝̞̟̠͇̊̋̌̍̎̏̐̑̒̓̔̊̋̌̍̎̏̐̑̒̓̔̿̿̿… ͡҉҉ ̵̡̢̛̗̘̙̜̝̞̟̠͇̊̋̌̍̎̏̿̿̿̚ ҉ ҉҉̡̢̡̢̛̛̖̗̘̙̜̝̞̟̠̖̗̘̙̜̝̞̟̠̊̋̌̍̎̏̐̑̒̓̔̊̋̌… ̒̓̔̕̚ ̍̎̏̐̑̒̓̔̕̚̕̚ ̡̢̛̗̘̙̜̝̞̟̠̊̋̌̍̎̏̚ ̡̢̡̢̛̛̖̗̘̙̜̝̞̟̠̖̗̘̙̜̝̞̟̠̊̋̌̍̎̏̐̑̒̓̔̊̋̌̍̎… ̕̚̕̚ ̔̕̚̕̚҉ ҉̵̞̟̠̖̗̘̙̜̝̞̟̠͇̊̋̌̍̎̏̐̑̒̓̔̊̋̌̍̎̏̐̑̒̓̔̿̿̿… ͡҉҉ ̵̡̢̛̗̘̙̜̝̞̟̠͇̊̋̌̍̎̏̿̿̿̚ ҉\""; " is 297.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestStringLiteralWithUnicode,The length of the statement  "            Assert.Equal("҉ ҉̵̞̟̠̖̗̘̙̜̝̞̟̠͇̊̋̌̍̎̏̐̑̒̓̔̊̋̌̍̎̏̐̑̒̓̔̿̿̿… ͡҉҉ ̵̡̢̛̗̘̙̜̝̞̟̠͇̊̋̌̍̎̏̿̿̿̚ ҉ ҉҉̡̢̡̢̛̛̖̗̘̙̜̝̞̟̠̖̗̘̙̜̝̞̟̠̊̋̌̍̎̏̐̑̒̓̔̊̋̌… ̒̓̔̕̚ ̍̎̏̐̑̒̓̔̕̚̕̚ ̡̢̛̗̘̙̜̝̞̟̠̊̋̌̍̎̏̚ ̡̢̡̢̛̛̖̗̘̙̜̝̞̟̠̖̗̘̙̜̝̞̟̠̊̋̌̍̎̏̐̑̒̓̔̊̋̌̍̎… ̕̚̕̚ ̔̕̚̕̚҉ ҉̵̞̟̠̖̗̘̙̜̝̞̟̠͇̊̋̌̍̎̏̐̑̒̓̔̊̋̌̍̎̏̐̑̒̓̔̿̿̿… ͡҉҉ ̵̡̢̛̗̘̙̜̝̞̟̠͇̊̋̌̍̎̏̿̿̿̚ ҉"' token.ValueText); " is 313.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestDebuggerAliasIdentifiers,The length of the statement  "            Assert.Equal("error CS2043: 'id#' syntax is no longer supported. Use '$id' instead."' errors[0].ToString(EnsureEnglishUICulture.PreferredOrNull)); " is 146.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,DecimalLiterals,The length of the statement  "            AssertGoodDecimalLiteral("1e-99999999999999999999999999M"' "000000000000000000000000001c0000"); // Native compiler reports CS0594 " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,DecimalLiterals,The length of the statement  "            AssertGoodDecimalLiteral("1.0e-99999999999999999999999999M"' "000000000000000000000000001c0000"); // Native compiler reports CS0594 " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,DecimalLiterals,The length of the statement  "            AssertGoodDecimalLiteral("0e-29M"' "000000000000000000000000001c0000"); //CONSIDER: dev10 has 00000000000000000000000000000000' which makes no sense " is 148.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,DecimalLiteralsManyDigits,The length of the statement  "            AssertGoodDecimalLiteral("1.23456789012345678901234567890123456789012345678901234567890e28m"' "6e39811546bec9b127e41b3200000000"); " is 130.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,DecimalLiteralsManyDigits,The length of the statement  "            AssertGoodDecimalLiteral("123456789012345678901234567890123456789012345678901234567890e-31m"' "6e39811546bec9b127e41b3200000000"); " is 130.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,DecimalLiteralsManyDigits,The length of the statement  "            AssertGoodDecimalLiteral("123456789012345678901234567890.123456789012345678901234567890e-1m"' "6e39811546bec9b127e41b3200000000"); " is 130.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u0067lobal"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u0067lobal")); " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u006Fperator"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u006Fperator")); " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u0065xplicit"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u0065xplicit")); " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u0069mplicit"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u0069mplicit")); " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u0072ef"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u0072ef")); " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u006Fut"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u006Fut")); " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u0074rue"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u0074rue")); " is 133.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexUnicodeEscapeKeywordsWithEntities,The length of the statement  "            AssertTokens("&#92;u0066alse"' Token(SyntaxKind.XmlEntityLiteralToken' "&#92;"' "\\")' Token(SyntaxKind.IdentifierToken' "u0066alse")); " is 135.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexPunctuation,The length of the statement  "            AssertTokens("&#63;&#63;"' Token(SyntaxKind.QuestionToken' "&#63;"' "?")' Token(SyntaxKind.QuestionToken' "&#63;"' "?")); " is 121.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexPunctuationSequences,The length of the statement  "            AssertTokens(":::::"' Token(SyntaxKind.ColonColonToken)' Token(SyntaxKind.ColonColonToken)' Token(SyntaxKind.ColonToken)); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexPunctuationSequences,The length of the statement  "            AssertTokens("????"' Token(SyntaxKind.QuestionToken)' Token(SyntaxKind.QuestionToken)' Token(SyntaxKind.QuestionToken)' Token(SyntaxKind.QuestionToken)); " is 153.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexOperators,The length of the statement  "            AssertTokens("&#62;&#62;"' Token(SyntaxKind.GreaterThanToken' "&#62;"' ">")' Token(SyntaxKind.GreaterThanToken' "&#62;"' ">")); " is 127.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens("-----"' Token(SyntaxKind.MinusMinusToken)' Token(SyntaxKind.MinusMinusToken)' Token(SyntaxKind.MinusToken)); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens("====="' Token(SyntaxKind.EqualsEqualsToken)' Token(SyntaxKind.EqualsEqualsToken)' Token(SyntaxKind.EqualsToken)); " is 127.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens("&lt;&lt;&lt;"' Token(SyntaxKind.LessThanLessThanToken' "&lt;&lt;"' "<<")' Token(SyntaxKind.LessThanToken' "&lt;"' "<")); " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens("&lt;&lt;&lt;&lt;"' Token(SyntaxKind.LessThanLessThanToken' "&lt;&lt;"' "<<")' Token(SyntaxKind.LessThanLessThanToken' "&lt;&lt;"' "<<")); " is 151.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens("&lt;&lt;&lt;&lt;&lt;"' Token(SyntaxKind.LessThanLessThanToken' "&lt;&lt;"' "<<")' Token(SyntaxKind.LessThanLessThanToken' "&lt;&lt;"' "<<")' Token(SyntaxKind.LessThanToken' "&lt;"' "<")); " is 201.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens(">>>"' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)); " is 128.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens(">>>>"' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)); " is 165.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens(">>>>>"' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)' Token(SyntaxKind.GreaterThanToken)); " is 202.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens("{{{{"' Token(SyntaxKind.LessThanLessThanToken' "{{"' "<<")' Token(SyntaxKind.LessThanLessThanToken' "{{"' "<<")); " is 127.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexOperatorSequence,The length of the statement  "            AssertTokens("{{{{{"' Token(SyntaxKind.LessThanLessThanToken' "{{"' "<<")' Token(SyntaxKind.LessThanLessThanToken' "{{"' "<<")' Token(SyntaxKind.LessThanToken' "{"' "<")); " is 171.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexBadEntity,The length of the statement  "            AssertTokens("&#a;"' Token(SyntaxKind.XmlEntityLiteralToken' "&#")' Token(SyntaxKind.IdentifierToken' "a")' Token(SyntaxKind.BadToken' ";")); " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,TestLexBadEntity,The length of the statement  "            AssertTokens("&#xg;"' Token(SyntaxKind.XmlEntityLiteralToken' "&#x")' Token(SyntaxKind.IdentifierToken' "g")' Token(SyntaxKind.BadToken' ";")); " is 143.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,NameAttributeValueLexerTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\NameAttributeValueLexerTests.cs,GetTokens,The length of the statement  "                    var token = lexer.Lex(InternalSyntax.LexerMode.XmlNameQuote | InternalSyntax.LexerMode.XmlDocCommentStyleSingleLine | InternalSyntax.LexerMode.XmlDocCommentLocationInterior); " is 174.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestDirectiveWithLeadingSpace,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.DefineDirectiveTrivia' Status = NodeStatus.IsActive }); " is 123.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestDirectiveWithSpaceAfterHash,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.DefineDirectiveTrivia' Status = NodeStatus.IsActive }); " is 123.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfNotTakenWithEndIfLeadingWhitespace,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfWithBadTokens,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifTrueEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifTrueEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.TrueValue }' " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifTrueEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifTrueEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 138.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifFalseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifFalseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifFalseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifFalseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifTrueElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifTrueElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.TrueValue }' " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifTrueElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifTrueElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 138.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifTrueElseEndif,The length of the statement  "            VerifyMembers(node' new MemberInfo { Kind = SyntaxKind.ClassDeclaration' Text = "B" }' new MemberInfo { Kind = SyntaxKind.ClassDeclaration' Text = "D" }); " is 154.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifFalseElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifFalseElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifFalseElseEndif,The length of the statement  "            VerifyMembers(node' new MemberInfo { Kind = SyntaxKind.ClassDeclaration' Text = "C" }' new MemberInfo { Kind = SyntaxKind.ClassDeclaration' Text = "D" }); " is 154.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifFalseElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifFalseElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifFalseElseEndif,The length of the statement  "            VerifyMembers(node' new MemberInfo { Kind = SyntaxKind.ClassDeclaration' Text = "A" }' new MemberInfo { Kind = SyntaxKind.ClassDeclaration' Text = "D" }); " is 154.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifFalseElifTrueElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifFalseElifTrueElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifFalseElifTrueElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.TrueValue }' " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifFalseElifTrueElseEndif,The length of the statement  "            VerifyMembers(node' new MemberInfo { Kind = SyntaxKind.ClassDeclaration' Text = "A" }' new MemberInfo { Kind = SyntaxKind.ClassDeclaration' Text = "E" }); " is 154.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifFalseElifTrueElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifFalseElifTrueElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifFalseElifTrueElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 138.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifFalseElifFalseElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifFalseElifFalseElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifFalseElifFalseElseEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueIfTrueEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueIfTrueEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseIfTrueEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseIfTrueEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsNotActive | NodeStatus.NotBranchTaken | NodeStatus.TrueValue }' " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueIfFalseEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueIfFalseEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElseIfTrueEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElseIfTrueEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsNotActive | NodeStatus.NotBranchTaken | NodeStatus.TrueValue }' " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifTrueIfTrueEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifTrueIfTrueEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.TrueValue }' " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfTrueElifTrueIfTrueEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsNotActive | NodeStatus.NotBranchTaken | NodeStatus.TrueValue }' " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifTrueElseIfTrueEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifTrueElseIfTrueEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 138.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseElifTrueElseIfTrueEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsNotActive | NodeStatus.NotBranchTaken | NodeStatus.TrueValue }' " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseIfFalseElseEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseIfFalseElseEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsNotActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 143.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseIfFalseElseEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsNotActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 143.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfFalseIfFalseElseEndIfEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElseDirectiveTrivia' Status = NodeStatus.IsNotActive | NodeStatus.NotBranchTaken }' " is 121.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfWithNameDefined,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfWithNameUndefined,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfWithLogicalOr,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfWithLogicalOrWhenOnlyOneDefined,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfWithLogicalAnd,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfWithLogicalAndWhenOnlyOneDefined,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfWithLogicalNotOnDefined,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfWithLogicalNotOnUndefined,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfWithParens,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfWithEqualsAndBothDefined,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfWithEqualsAndBothNotDefined,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfWithEqualsAndOneDefined,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfWithNotEqualsAndBothDefined,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfWithNotEqualsAndBothUndefined,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfWithNotEqualsAndOneDefined,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfTrueWithNoEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }); " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfFalseWithNoEndif,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }); " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfTrueWithEOF,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }); " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfFalseWithEOF,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }); " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfWithNoCondition,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfTrueWithMissingParen,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfFalseWithMissingParen,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfTrueWithElifAfterElse,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfWithElseAfterElse,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfTrueEndRegionEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfElifWithBoolExpression,The length of the statement  "            VerifyDirectives(node' SyntaxKind.DefineDirectiveTrivia' SyntaxKind.DefineDirectiveTrivia' SyntaxKind.DefineDirectiveTrivia' " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfElifWithBoolExpression,The length of the statement  "                SyntaxKind.IfDirectiveTrivia' SyntaxKind.EndIfDirectiveTrivia' SyntaxKind.IfDirectiveTrivia' SyntaxKind.EndIfDirectiveTrivia' " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfElifWithBoolExpression,The length of the statement  "                SyntaxKind.IfDirectiveTrivia' SyntaxKind.ErrorDirectiveTrivia' SyntaxKind.ElifDirectiveTrivia' SyntaxKind.ElseDirectiveTrivia' SyntaxKind.ErrorDirectiveTrivia' SyntaxKind.EndIfDirectiveTrivia' " is 192.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfElifWithBoolExpression,The length of the statement  "                SyntaxKind.IfDirectiveTrivia' SyntaxKind.ElseDirectiveTrivia' SyntaxKind.ErrorDirectiveTrivia' SyntaxKind.EndIfDirectiveTrivia' " is 127.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfElifWithBoolExpression,The length of the statement  "                SyntaxKind.IfDirectiveTrivia' SyntaxKind.ElseDirectiveTrivia' SyntaxKind.ErrorDirectiveTrivia' SyntaxKind.EndIfDirectiveTrivia' " is 127.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestIfElifWithBoolExpression,The length of the statement  "                SyntaxKind.IfDirectiveTrivia' SyntaxKind.ElseDirectiveTrivia' SyntaxKind.ErrorDirectiveTrivia' SyntaxKind.EndIfDirectiveTrivia); " is 128.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfElifWithBadNumericalName,The length of the statement  "            VerifyDirectives(node' SyntaxKind.IfDirectiveTrivia' SyntaxKind.ElifDirectiveTrivia' SyntaxKind.ElseDirectiveTrivia' SyntaxKind.EndIfDirectiveTrivia); " is 150.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestRegressIfNestedExcludedBody,The length of the statement  "            VerifyDirectives(node' SyntaxKind.IfDirectiveTrivia' SyntaxKind.IfDirectiveTrivia' SyntaxKind.ElseDirectiveTrivia' SyntaxKind.EndIfDirectiveTrivia' SyntaxKind.EndIfDirectiveTrivia); " is 181.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestRegressIfFalseHashExcludedEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestRegressIfFalseHashExcludedEndIf,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestRegressNestedIfWithUndefinedSymbols,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestRegressNestedIfWithUndefinedSymbols,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsNotActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 143.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestRegionIfTrueEndIfEndRegion,The length of the statement  "                    new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegRegionElifEndRegion,The length of the statement  "            VerifyDirectives(node' SyntaxKind.RegionDirectiveTrivia' SyntaxKind.BadDirectiveTrivia' SyntaxKind.EndRegionDirectiveTrivia); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegRegionElseEndRegion,The length of the statement  "            VerifyDirectives(node' SyntaxKind.RegionDirectiveTrivia' SyntaxKind.BadDirectiveTrivia' SyntaxKind.EndRegionDirectiveTrivia); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfTrueRegionEndIf,The length of the statement  "                    new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfTrueRegionEndIfEndRegion,The length of the statement  "                    new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfFalseRegionEndIf,The length of the statement  "                    new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegIfFalseRegionEndIfEndRegion,The length of the statement  "        new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestRegressNegRegionWithInvalidExcapeString,The length of the statement  "            VerifyDirectives(node' SyntaxKind.RegionDirectiveTrivia' SyntaxKind.EndRegionDirectiveTrivia' SyntaxKind.RegionDirectiveTrivia' SyntaxKind.EndRegionDirectiveTrivia); " is 165.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestRegionEndedWithEscapedNewline,The length of the statement  "            VerifyDirectives(node' SyntaxKind.RegionDirectiveTrivia' SyntaxKind.EndRegionDirectiveTrivia' SyntaxKind.RegionDirectiveTrivia' SyntaxKind.EndRegionDirectiveTrivia); " is 165.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestDefineBeforeFirstToken,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.DefineDirectiveTrivia' Status = NodeStatus.IsActive' Text = defSym }); " is 138.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestDefineBeforeFirstToken,The length of the statement  "                new MemberInfo { Kind = SyntaxKind.ClassDeclaration' Status = NodeStatus.Unspecified' Status2 = NodeStatus.Defined' Text = defSym }); " is 133.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegDefineAfterFirstToken,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.DefineDirectiveTrivia' Status = NodeStatus.IsActive' Text = "XXX" }); " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegDefineAfterTokenOnSameLine,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.DefineDirectiveTrivia' Status = NodeStatus.IsActive' Text = "XXX" }); " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestDefineInIfBeforeFirstToken,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestDefineInIfExclusionAfterFirstToken,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestDefineInsideIfFalse,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestDefineInsideIfFalse,The length of the statement  "                new MemberInfo { Kind = SyntaxKind.ClassDeclaration' Status = NodeStatus.Unspecified' Status2 = NodeStatus.Unspecified' Text = defSym }); " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestDefineInsideIfTrue,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestDefineInsideIfTrue,The length of the statement  "                new MemberInfo { Kind = SyntaxKind.ClassDeclaration' Status = NodeStatus.Unspecified' Text = defSym' Status2 = NodeStatus.Defined }); " is 133.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestUndefBeforeFirstToken,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.UndefDirectiveTrivia' Status = NodeStatus.IsActive' Text = defSym }); " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestUndefBeforeFirstToken,The length of the statement  "                new MemberInfo { Kind = SyntaxKind.ClassDeclaration' Status = NodeStatus.Unspecified' Status2 = NodeStatus.Undefined' Text = defSym }); " is 135.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegUndefAfterFirstToken,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.UndefDirectiveTrivia' Status = NodeStatus.IsActive' Text = "XXX" }); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegUndefAfterTokenOnSameLine,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.UndefDirectiveTrivia' Status = NodeStatus.IsActive' Text = "XXX" }); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestUndefInIfBeforeFirstToken,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,Bug869243_01,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,Bug869243_01,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,Bug869243_02,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,Bug869243_02,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,Bug869243_02,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,Bug869243_02,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,Bug869243_03,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,Bug869243_03,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsNotActive | NodeStatus.NotBranchTaken | NodeStatus.TrueValue }' " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,Bug869243_03,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,Bug869243_04,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,Bug869243_04,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,Bug869243_04,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.ElifDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 138.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,Bug869243_04,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestUndefInIfExclusionAfterFirstToken,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestUndefInsideIfFalse,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.NotBranchTaken | NodeStatus.FalseValue }' " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestUndefInsideIfFalse,The length of the statement  "            VerifyMembers(node' new MemberInfo { Kind = SyntaxKind.ClassDeclaration' Status = NodeStatus.Unspecified' Text = "ZZZ" }); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestUndefInsideIfTrue,The length of the statement  "                new DirectiveInfo { Kind = SyntaxKind.IfDirectiveTrivia' Status = NodeStatus.IsActive | NodeStatus.BranchTaken | NodeStatus.TrueValue }' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestUndefInsideIfTrue,The length of the statement  "                new MemberInfo { Kind = SyntaxKind.ClassDeclaration' Status = NodeStatus.Unspecified' Status2 = NodeStatus.Undefined' Text = defSym }); " is 135.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegUndefWithNoName,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.UndefDirectiveTrivia' Status = NodeStatus.IsActive' Text = string.Empty }); " is 143.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegUndefWithBadTokenForName,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.UndefDirectiveTrivia' Status = NodeStatus.IsActive' Text = string.Empty }); " is 143.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegUndefWithBadTokensAfterName,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.UndefDirectiveTrivia' Status = NodeStatus.IsActive' Text = "FOO(" }); " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegDefWithBadCommentsTokensAfterName,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.DefineDirectiveTrivia' Status = NodeStatus.IsActive' Text = "A_1" }); " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegUndefWithBadNumericalName,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.UndefDirectiveTrivia' Status = NodeStatus.IsActive' Text = "1234" }); " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestError,The length of the statement  "            VerifyErrorSpecial(node' new DirectiveInfo { Number = (int)ErrorCode.ERR_ErrorDirective' Text = "#error: 'Your monkey is alive'" }); " is 132.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestError,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.ErrorDirectiveTrivia' Status = NodeStatus.IsActive }); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestWarning,The length of the statement  "            VerifyErrorSpecial(node' new DirectiveInfo { Number = (int)ErrorCode.WRN_WarningDirective' Text = "#warning: 'Your monkey is alive'" }); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestWarning,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.WarningDirectiveTrivia' Status = NodeStatus.IsActive }); " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestErrorWithNoMessage,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.ErrorDirectiveTrivia' Status = NodeStatus.IsActive }); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestWarningWithNoMessage,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.WarningDirectiveTrivia' Status = NodeStatus.IsActive }); " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestErrorWithLeadingWhitespace,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.ErrorDirectiveTrivia' Status = NodeStatus.IsActive }); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestErrorWithTrailingWhitespace,The length of the statement  "            VerifyErrorSpecial(node' new DirectiveInfo { Number = (int)ErrorCode.ERR_ErrorDirective' Text = "#error: 'abc def '" }); " is 120.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestErrorWithTrailingWhitespace,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.ErrorDirectiveTrivia' Status = NodeStatus.IsActive }); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestErrorWithSingleLineComment,The length of the statement  "            VerifyErrorSpecial(node' new DirectiveInfo { Number = (int)ErrorCode.ERR_ErrorDirective' Text = "#error: '/*abc def*/ '" }); " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestErrorWithSingleLineComment,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.ErrorDirectiveTrivia' Status = NodeStatus.IsActive }); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestErrorWithMultiLineComment,The length of the statement  "            VerifyErrorSpecial(node' new DirectiveInfo { Number = (int)ErrorCode.ERR_ErrorDirective' Text = "#error: '/*abc def*/ '" }); " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestErrorWithMultiLineComment,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.ErrorDirectiveTrivia' Status = NodeStatus.IsActive }); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestErrorWithUnterminatedMultiLineComment,The length of the statement  "            VerifyErrorSpecial(node' new DirectiveInfo { Number = (int)ErrorCode.ERR_ErrorDirective' Text = "#error: '/*abc def '" }); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestErrorWithUnterminatedMultiLineComment,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.ErrorDirectiveTrivia' Status = NodeStatus.IsActive }); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestErrorWithNonLatinChars,The length of the statement  "            VerifyErrorSpecial(node' new DirectiveInfo { Number = (int)ErrorCode.ERR_ErrorDirective' Text = string.Format("#error: '{0}'"' errorText) }); " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestErrorWithNonLatinChars,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.ErrorDirectiveTrivia' Status = NodeStatus.IsActive }); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestLine,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 1000 }); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestLineAndFile,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 1000' Text = "bogus.cs" }); " is 155.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestLineDefault,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = -1 }); " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegLineDefaultWithFile,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = -1 }); " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestLineDefaultWithComment,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = -1 }); " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestLineHidden,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = -2 }); " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegLineHiddenWithFile,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = -2 }); " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestLineHiddenWithComment,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = -2 }); " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegLineWithBadNumber,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive }); " is 121.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegLineWithNoNumberOrFile,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive }); " is 121.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegLineWithOnlyFile,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Text = "bogus.cs" }); " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegMoreLineNumThenPDBCanHandle,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 16707566' Text = "XYZ" }); " is 154.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegLineWithExtraTokens,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 1000 }); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestLineWithComment,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 1000 }); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegLineWithFileAndExtraTokens,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 1000' Text = "bogus.cs" }); " is 155.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestLineWithFileAndComment,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 12345' Text = "bogus.cs" }); " is 156.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestRegressNegLineWithErrorMessage,The length of the statement  "            VerifyDirectivesSpecial(tree.GetCompilationUnitRoot()' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 100' Text = "test.cs" }); " is 178.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegLineWithTooLargeNumber,The length of the statement  "            VerifyErrorCode(node' (int)ErrorCode.ERR_IntOverflow); // CS1021' CS1576 (not in parser) ErrorCode.ERR_InvalidLineNumber " is 120.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegLineWithZero,The length of the statement  "            VerifyErrorCode(node' (int)ErrorCode.ERR_InvalidLineNumber); // CS1021' CS1576 (not in parser) ErrorCode.ERR_InvalidLineNumber " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestRegressLineWithVariousFileNameFormats,The length of the statement  "		#line 120 ""C:\Documents and Settings\someuser\Local Settings\Temp\{f0a37341-d692-11d4-a984-009027ec0a9c}\test.cs"" // parser error " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestRegressLineWithVariousFileNameFormats,The length of the statement  "                SyntaxKind.LineDirectiveTrivia' SyntaxKind.LineDirectiveTrivia' SyntaxKind.LineDirectiveTrivia' SyntaxKind.LineDirectiveTrivia' SyntaxKind.LineDirectiveTrivia' " is 159.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestRegressLineWithVariousFileNameFormats,The length of the statement  "                SyntaxKind.LineDirectiveTrivia' SyntaxKind.LineDirectiveTrivia' SyntaxKind.LineDirectiveTrivia' SyntaxKind.LineDirectiveTrivia' SyntaxKind.LineDirectiveTrivia); " is 160.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestStringLiteralsAreDisallowed,The length of the statement  "            VerifyErrorSpecial(node' new DirectiveInfo { Number = (int)ErrorCode.WRN_IdentifierOrNumericLiteralExpected' Status = NodeStatus.IsWarning }); // CS1072 " is 152.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegPragmaWarningWithBadStyle,The length of the statement  "            VerifyErrorSpecial(node' new DirectiveInfo { Number = (int)ErrorCode.WRN_IllegalPPWarning' Status = NodeStatus.IsWarning }); // CS1634 " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegPragmaWarningWithBadStyleAndCodes,The length of the statement  "            VerifyErrorSpecial(node' new DirectiveInfo { Number = (int)ErrorCode.WRN_IllegalPPWarning' Status = NodeStatus.IsWarning }); // CS1634 " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegPragmaWarningWithNoStyle,The length of the statement  "            VerifyErrorSpecial(node' new DirectiveInfo { Number = (int)ErrorCode.WRN_IllegalPPWarning' Status = NodeStatus.IsWarning }); // CS1634 " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestReferenceNumber,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.ReferenceDirectiveTrivia' Status = NodeStatus.IsActive }); " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestReferenceWithoutQuotes,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.ReferenceDirectiveTrivia' Status = NodeStatus.IsActive }); " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestReferenceWithoutFileWithComment,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.ReferenceDirectiveTrivia' Status = NodeStatus.IsActive }); " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegReferenceWithoutFile,The length of the statement  "            VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.ReferenceDirectiveTrivia' Status = NodeStatus.IsActive }); " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestReferenceWithVariousFileNameFormats,The length of the statement  "            VerifyDirectives(node' SyntaxKind.ReferenceDirectiveTrivia' SyntaxKind.ReferenceDirectiveTrivia' SyntaxKind.ReferenceDirectiveTrivia' " is 133.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestReferenceWithVariousFileNameFormats,The length of the statement  "                SyntaxKind.ReferenceDirectiveTrivia' SyntaxKind.ReferenceDirectiveTrivia' SyntaxKind.ReferenceDirectiveTrivia' SyntaxKind.ReferenceDirectiveTrivia' SyntaxKind.ReferenceDirectiveTrivia' " is 184.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestReferenceWithVariousFileNameFormats,The length of the statement  "                SyntaxKind.ReferenceDirectiveTrivia' SyntaxKind.ReferenceDirectiveTrivia' SyntaxKind.ReferenceDirectiveTrivia' SyntaxKind.ReferenceDirectiveTrivia' SyntaxKind.ReferenceDirectiveTrivia); " is 185.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentAfterMultilineXmlComment,The length of the statement  "            VerifyXmlAttributes((firstComment.Content[1] as XmlElementSyntax).StartTag.Attributes' new Dictionary<string' string>() { { "a"' "val" } }); " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentAfterMultilineXmlComment,The length of the statement  "            VerifyXmlAttributes((secondComment.Content[1] as XmlElementSyntax).StartTag.Attributes' new Dictionary<string' string>() { { "a"' "as" } }); " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentAfterInvalidMultilineXmlComment,The length of the statement  "            VerifyXmlAttributes((secondComment.Content[1] as XmlElementSyntax).StartTag.Attributes' new Dictionary<string' string>() { { "a"' "as" } }); " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeMethodDecl,The length of the statement  "            Assert.Equal(typeof(MethodDeclarationSyntax)' (tree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax).Members[0].GetType()); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeMethodDecl,The length of the statement  "            var keyword = ((tree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax).Members[0] as MethodDeclarationSyntax).ReturnType; " is 133.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeMethodDecl,The length of the statement  "            VerifyXmlAttributes((firstComment.Content[0] as XmlEmptyElementSyntax).Attributes' new Dictionary<string' string>() { { "a"' "val" } }); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeGenericMethodDecl,The length of the statement  "            Assert.Equal(typeof(MethodDeclarationSyntax)' (tree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax).Members[0].GetType()); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeGenericMethodDecl,The length of the statement  "            var keyword = ((tree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax).Members[0] as MethodDeclarationSyntax).ReturnType; " is 133.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeGenericMethodDecl,The length of the statement  "            VerifyXmlAttributes((firstComment.Content[0] as XmlElementSyntax).StartTag.Attributes' new Dictionary<string' string>() { { "a"' "val" } }); " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforePropertyDecl,The length of the statement  "            Assert.Equal(typeof(PropertyDeclarationSyntax)' (tree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax).Members[0].GetType()); " is 138.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforePropertyDecl,The length of the statement  "            var keyword = ((tree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax).Members[0] as PropertyDeclarationSyntax).Type; " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforePropertyDecl,The length of the statement  "            VerifyXmlAttributes((firstComment.Content[0] as XmlEmptyElementSyntax).Attributes' new Dictionary<string' string>() { { "a"' "val" } }); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeIndexerDecl,The length of the statement  "            Assert.Equal(typeof(IndexerDeclarationSyntax)' (tree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax).Members[0].GetType()); " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeIndexerDecl,The length of the statement  "            var keyword = ((tree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax).Members[0] as IndexerDeclarationSyntax).Type; " is 128.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeIndexerDecl,The length of the statement  "            VerifyXmlAttributes((firstComment.Content[0] as XmlEmptyElementSyntax).Attributes' new Dictionary<string' string>() { { "a"' "val" } }); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestMultiLineXmlCommentBeforeGenericTypeParameterOnMethodDecl,The length of the statement  "            Assert.Equal(typeof(MethodDeclarationSyntax)' (tree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax).Members[0].GetType()); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestMultiLineXmlCommentBeforeGenericTypeParameterOnClassDecl,The length of the statement  "            var typeParameter = (tree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax).TypeParameterList.Parameters.Single(); " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeIncompleteGenericMethodDecl,The length of the statement  "            Assert.Equal(typeof(MethodDeclarationSyntax)' (tree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax).Members[0].GetType()); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeIncompleteGenericMethodDecl,The length of the statement  "            var keyword = ((tree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax).Members[0] as MethodDeclarationSyntax).ReturnType; " is 133.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeIncompleteGenericMethodDecl,The length of the statement  "            VerifyXmlAttributes((firstComment.Content[0] as XmlElementSyntax).StartTag.Attributes' new Dictionary<string' string>() { { "a"' "val" } }); " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentAfterMethodDecl,The length of the statement  "            VerifyXmlAttributes((firstComment.Content[0] as XmlEmptyElementSyntax).Attributes' new Dictionary<string' string>() { { "a"' "val" } }); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentAfterIncompleteMethodDecl,The length of the statement  "            VerifyXmlAttributes((firstComment.Content[0] as XmlElementSyntax).StartTag.Attributes' new Dictionary<string' string>() { { "a"' "val" } }); " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentWithMultipleAttributes,The length of the statement  "            VerifyXmlElement((trivias[0].GetStructure() as DocumentationCommentTriviaSyntax).Content[0] as XmlElementSyntax' "foo"' " "); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentWithMultipleAttributes,The length of the statement  "            VerifyXmlAttributes(((trivias[0].GetStructure() as DocumentationCommentTriviaSyntax).Content[0] as XmlElementSyntax).StartTag.Attributes' " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,NonAsciiQuotationMarks,The length of the statement  "                // (4'19): warning CS1570: XML comment has badly formed XML -- 'Non-ASCII quotations marks may not be used around string literals.' " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,NonAsciiQuotationMarks,The length of the statement  "                // (4'23): warning CS1570: XML comment has badly formed XML -- 'Non-ASCII quotations marks may not be used around string literals.' " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,NonAsciiQuotationMarks,The length of the statement  "                // (5'21): warning CS1570: XML comment has badly formed XML -- 'Non-ASCII quotations marks may not be used around string literals.' " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,NonAsciiQuotationMarks,The length of the statement  "                // (5'23): warning CS1570: XML comment has badly formed XML -- 'Non-ASCII quotations marks may not be used around string literals.' " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,NonAsciiQuotationMarks,The length of the statement  "                // (6'21): warning CS1570: XML comment has badly formed XML -- 'Non-ASCII quotations marks may not be used around string literals.' " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,Microsoft_TeamFoundation_Client_Dll,The length of the statement  "                // (8'44): warning CS1570: XML comment has badly formed XML -- 'Missing equals sign between attribute and attribute value.' " is 123.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,Microsoft_TeamFoundation_Client_Dll,The length of the statement  "                // (9'11): warning CS1570: XML comment has badly formed XML -- 'End tag 'summary' does not match the start tag 'nodename'.' " is 123.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,Microsoft_TeamFoundation_Client_Dll,The length of the statement  "                // (10'21): warning CS1570: XML comment has badly formed XML -- 'Non-ASCII quotations marks may not be used around string literals.' " is 132.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,Microsoft_TeamFoundation_Client_Dll,The length of the statement  "                // (10'30): warning CS1570: XML comment has badly formed XML -- 'Non-ASCII quotations marks may not be used around string literals.' " is 132.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,Microsoft_TeamFoundation_Client_Dll,The length of the statement  "                // (11'21): warning CS1570: XML comment has badly formed XML -- 'Non-ASCII quotations marks may not be used around string literals.' " is 132.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,Microsoft_TeamFoundation_Client_Dll,The length of the statement  "                // (11'30): warning CS1570: XML comment has badly formed XML -- 'Non-ASCII quotations marks may not be used around string literals.' " is 132.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,AsyncParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\AsyncParsingTests.cs,ParseTree,The length of the statement  "            return SyntaxFactory.ParseSyntaxTree(text' options: (options ?? TestOptions.Regular).WithLanguageVersion(LanguageVersion.CSharp5)); " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,AsyncParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\AsyncParsingTests.cs,ParseNode,The length of the statement  "            return SyntaxFactory.ParseExpression(text' options: (options ?? TestOptions.Regular).WithLanguageVersion(LanguageVersion.CSharp5)); " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassPropertyWithValue,The length of the statement  "            var text = "class a { " + (isEvent ? "event" : string.Empty) + " b c { " + SyntaxFacts.GetText(accessorKeyword) + " { x = value; } } }"; " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,RegressLongDirectiveIdentifierDefn,The length of the statement  "#define A234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890 " is 138.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,RegressLongDirectiveIdentifierDefn,The length of the statement  "#if A2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678 " is 132.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,RegressLongDirectiveIdentifierUse,The length of the statement  "#define A2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678 " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,RegressLongDirectiveIdentifierUse,The length of the statement  "#if A234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890 " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ExpressionParsingTexts,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ExpressionParsingTests.cs,TestConditionalAccessNotVersion5,The length of the statement  "            var expr = this.ParseExpression(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)); " is 120.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ExpressionParsingTexts,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ExpressionParsingTests.cs,TestConditionalAccess,The length of the statement  "            var expr = this.ParseExpression(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp6)); " is 120.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ExpressionParsingTexts,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ExpressionParsingTests.cs,ParseBigExpression,The length of the statement  "            return (stackDepth == 100) || ((stackDepth == 200) || ((stackDepth == 300) || ((stackDepth == 400) || ((stackDepth == 501) || ((stackDepth == 502) || ((stackDepth == 600) || ((stackDepth == 701) || ((stackDepth == 702) || ((stackDepth == 801) || ((stackDepth == 802) || ((stackDepth == 901) || ((stackDepth == 902) || ((stackDepth == 903) || ((stackDepth == 1001) || ((stackDepth == 1002) || ((stackDepth == 1101) || ((stackDepth == 1102) || ((stackDepth == 1201) || ((stackDepth == 1202) || ((stackDepth == 1301) || ((stackDepth == 1302) || ((stackDepth == 1401) || ((stackDepth == 1402) || ((stackDepth == 1403) || ((stackDepth == 1404) || ((stackDepth == 1405) || ((stackDepth == 1406) || ((stackDepth == 1407) || ((stackDepth == 1408) || ((stackDepth == 1409) || ((stackDepth == 1410) || ((stackDepth == 1411) || ((stackDepth == 1412) || ((stackDepth == 1413) || ((stackDepth == 1500) || ((stackDepth == 1601) || ((stackDepth == 1602) || ((stackDepth == 1701) || ((stackDepth == 1702) || ((stackDepth == 1703) || ((stackDepth == 1800) || ((stackDepth == 1901) || ((stackDepth == 1902) || ((stackDepth == 1903) || ((stackDepth == 1904) || ((stackDepth == 2000) || ((stackDepth == 2101) || ((stackDepth == 2102) || ((stackDepth == 2103) || ((stackDepth == 2104) || ((stackDepth == 2105) || ((stackDepth == 2106) || ((stackDepth == 2107) || ((stackDepth == 2201) || ((stackDepth == 2202) || ((stackDepth == 2203) || ((stackDepth == 2301) || ((stackDepth == 2302) || ((stackDepth == 2303) || ((stackDepth == 2304) || ((stackDepth == 2305) || ((stackDepth == 2401) || ((stackDepth == 2402) || ((stackDepth == 2403) || ((stackDepth == 2404) || ((stackDepth == 2501) || ((stackDepth == 2502) || ((stackDepth == 2503) || ((stackDepth == 2504) || ((stackDepth == 2505) || ((stackDepth == 2601) || ((stackDepth == 2602) || ((stackDepth == 2603) || ((stackDepth == 2604) || ((stackDepth == 2605) || ((stackDepth == 2606) || ((stackDepth == 2607) || ((stackDepth == 2608) || ((stackDepth == 2701) || ((stackDepth == 2702) || ((stackDepth == 2703) || ((stackDepth == 2704) || ((stackDepth == 2705) || ((stackDepth == 2706) || ((stackDepth == 2801) || ((stackDepth == 2802) || ((stackDepth == 2803) || ((stackDepth == 2804) || ((stackDepth == 2805) || ((stackDepth == 2806) || ((stackDepth == 2807) || ((stackDepth == 2808) || ((stackDepth == 2809) || ((stackDepth == 2810) || ((stackDepth == 2901) || ((stackDepth == 2902) || ((stackDepth == 3001) || ((stackDepth == 3002) || ((stackDepth == 3101) || ((stackDepth == 3102) || ((stackDepth == 3103) || ((stackDepth == 3104) || ((stackDepth == 3105) || ((stackDepth == 3201) || ((stackDepth == 3202) || ((stackDepth == 3203) || ((stackDepth == 3301) || ((stackDepth == 3302) || ((stackDepth == 3401) || ((stackDepth == 3402) || ((stackDepth == 3403) || ((stackDepth == 3404) || ((stackDepth == 3405) || ((stackDepth == 3406) || ((stackDepth == 3407) || ((stackDepth == 3408) || ((stackDepth == 3409) || ((stackDepth == 3410) || ((stackDepth == 3501) || ((stackDepth == 3502) || ((stackDepth == 3503) || ((stackDepth == 3504) || ((stackDepth == 3505) || ((stackDepth == 3506) || ((stackDepth == 3507) || ((stackDepth == 3508) || ((stackDepth == 3509) || ((stackDepth == 3601) || ((stackDepth == 3602) || ((stackDepth == 3701) || ((stackDepth == 3702) || ((stackDepth == 3703) || ((stackDepth == 3704) || ((stackDepth == 3705) || ((stackDepth == 3706) || ((stackDepth == 3801) || ((stackDepth == 3802) || ((stackDepth == 3803) || ((stackDepth == 3804) || ((stackDepth == 3805) || ((stackDepth == 3901) || ((stackDepth == 3902) || ((stackDepth == 3903) || ((stackDepth == 3904) || ((stackDepth == 3905) || ((stackDepth == 4001) || ((stackDepth == 4002) || ((stackDepth == 4003) || ((stackDepth == 4004) || ((stackDepth == 4005) || ((stackDepth == 4006) || ((stackDepth == 4007) || ((stackDepth == 4100) || ((stackDepth == 4201) || ((stackDepth == 4202) || ((stackDepth == 4203) || ((stackDepth == 4204) || ((stackDepth == 4301) || ((stackDepth == 4302) || ((stackDepth == 4304) || ((stackDepth == 4401) || ((stackDepth == 4402) || ((stackDepth == 4403) || ((stackDepth == 4404) || ((stackDepth == 4501) || ((stackDepth == 4502) || ((stackDepth == 4503) || ((stackDepth == 4504) || ((stackDepth == 4600) || ((stackDepth == 4701) || ((stackDepth == 4702) || ((stackDepth == 4801) || ((stackDepth == 4802) || ((stackDepth == 4803) || ((stackDepth == 4804) || ((stackDepth == 4805) || ((stackDepth == 4806) || ((stackDepth == 4807) || ((stackDepth == 4808) || ((stackDepth == 4809) || ((stackDepth == 4811) || ((stackDepth == 4901) || ((stackDepth == 4902) || ((stackDepth == 4903) || ((stackDepth == 4904) || ((stackDepth == 4905) || ((stackDepth == 4906) || ((stackDepth == 4907) || ((stackDepth == 4908) || ((stackDepth == 4909) || ((stackDepth == 4910) || ((stackDepth == 4911) || ((stackDepth == 4912) || ((stackDepth == 4913) || ((stackDepth == 4914) || ((stackDepth == 4915) || ((stackDepth == 4916) || ((stackDepth == 4917) || ((stackDepth == 4918) || ((stackDepth == 4919) || ((stackDepth == 4920) || ((stackDepth == 4921) || ((stackDepth == 4922) || ((stackDepth == 4923) || ((stackDepth == 5001) || ((stackDepth == 5002) || ((stackDepth == 5003) || ((stackDepth == 5004) || ((stackDepth == 5005) || ((stackDepth == 5006) || ((stackDepth == 5100) || ((stackDepth == 5200) || ((stackDepth == 5301) || ((stackDepth == 5302) || ((stackDepth == 5400) || ((stackDepth == 5500) || ((stackDepth == 5600) || ((stackDepth == 5700) || ((stackDepth == 5801) || ((stackDepth == 5802) || ((stackDepth == 5901) || ((stackDepth == 5902) || ((stackDepth == 6001) || ((stackDepth == 6002) || ((stackDepth == 6101) || ((stackDepth == 6102) || ((stackDepth == 6201) || ((stackDepth == 6202) || ((stackDepth == 6203) || ((stackDepth == 6204) || ((stackDepth == 6205) || ((stackDepth == 6301) || ((stackDepth == 6302) || ((stackDepth == 6401) || ((stackDepth == 6402) || ((stackDepth == 6501) || ((stackDepth == 6502) || ((stackDepth == 6503) || ((stackDepth == 6504) || ((stackDepth == 6601) || ((stackDepth == 6602) || ((stackDepth == 6701) || ((stackDepth == 6702) || ((stackDepth == 6703) || ((stackDepth == 6704) || ((stackDepth == 6801) || ((stackDepth == 6802) || ((stackDepth == 6901) || ((stackDepth == 6902) || ((stackDepth == 6903) || ((stackDepth == 6904) || ((stackDepth == 7001) || ((stackDepth == 7002) || ((stackDepth == 7101) || ((stackDepth == 7102) || ((stackDepth == 7103) || ((stackDepth == 7200) || ((stackDepth == 7301) || ((stackDepth == 7302) || ((stackDepth == 7400) || ((stackDepth == 7501) || ((stackDepth == 7502) || ((stackDepth == 7503) || ((stackDepth == 7600) || ((stackDepth == 7700) || ((stackDepth == 7800) || ((stackDepth == 7900) || ((stackDepth == 8001) || ((stackDepth == 8002) || ((stackDepth == 8101) || ((stackDepth == 8102) || ((stackDepth == 8103) || ((stackDepth == 8200) || ((stackDepth == 8300) || ((stackDepth == 8400) || ((stackDepth == 8501) || ((stackDepth == 8502) || ((stackDepth == 8601) || ((stackDepth == 8602) || ((stackDepth == 8700) || ((stackDepth == 8801) || ((stackDepth == 8802) || ((stackDepth == 8901) || ((stackDepth == 8902) || ((stackDepth == 8903) || ((stackDepth == 9001) || ((stackDepth == 9002) || ((stackDepth == 9003) || ((stackDepth == 9004) || ((stackDepth == 9005) || ((stackDepth == 9101) || ((stackDepth == 9102) || ((stackDepth == 9200) || ((stackDepth == 9300) || ((stackDepth == 9401) || ((stackDepth == 9402) || ((stackDepth == 9403) || ((stackDepth == 9500) || ((stackDepth == 9601) || ((stackDepth == 9602) || ((stackDepth == 9701) || ((stackDepth == 9702) || ((stackDepth == 9801) || ((stackDepth == 9802) || ((stackDepth == 9900) || ((stackDepth == 10000) || ((stackDepth == 10100) || ((stackDepth == 10201) || ((stackDepth == 10202) || ((stackDepth == 10301) || ((stackDepth == 10302) || ((stackDepth == 10401) || ((stackDepth == 10402) || ((stackDepth == 10403) || ((stackDepth == 10501) || ((stackDepth == 10502) || ((stackDepth == 10601) || ((stackDepth == 10602) || ((stackDepth == 10701) || ((stackDepth == 10702) || ((stackDepth == 10703) || ((stackDepth == 10704) || ((stackDepth == 10705) || ((stackDepth == 10706) || ((stackDepth == 10801) || ((stackDepth == 10802) || ((stackDepth == 10803) || ((stackDepth == 10804) || ((stackDepth == 10805) || ((stackDepth == 10806) || ((stackDepth == 10807) || ((stackDepth == 10808) || ((stackDepth == 10809) || ((stackDepth == 10900) || ((stackDepth == 11000) || ((stackDepth == 11100) || ((stackDepth == 11201) || ((stackDepth == 11202) || ((stackDepth == 11203) || ((stackDepth == 11204) || ((stackDepth == 11205) || ((stackDepth == 11206) || ((stackDepth == 11207) || ((stackDepth == 11208) || ((stackDepth == 11209) || ((stackDepth == 11210) || ((stackDepth == 11211) || ((stackDepth == 11212) || ((stackDepth == 11213) || ((stackDepth == 11214) || ((stackDepth == 11301) || ((stackDepth == 11302) || ((stackDepth == 11303) || ((stackDepth == 11304) || ((stackDepth == 11305) || ((stackDepth == 11306) || ((stackDepth == 11307) || ((stackDepth == 11308) || ((stackDepth == 11309) || ((stackDepth == 11401) || ((stackDepth == 11402) || ((stackDepth == 11403) || ((stackDepth == 11404) || ((stackDepth == 11501) || ((stackDepth == 11502) || ((stackDepth == 11503) || ((stackDepth == 11504) || ((stackDepth == 11505) || ((stackDepth == 11601) || ((stackDepth == 11602) || ((stackDepth == 11603) || ((stackDepth == 11604) || ((stackDepth == 11605) || ((stackDepth == 11606) || ((stackDepth == 11701) || ((stackDepth == 11702) || ((stackDepth == 11800) || ((stackDepth == 11901) || ((stackDepth == 11902) || ((stackDepth == 11903) || ((stackDepth == 11904) || ((stackDepth == 11905) || ((stackDepth == 12001) || ((stackDepth == 12002) || ((stackDepth == 12003) || ((stackDepth == 12004) || ((stackDepth == 12101) || ((stackDepth == 12102) || ((stackDepth == 12103) || ((stackDepth == 12104) || ((stackDepth == 12105) || ((stackDepth == 12106) || ((stackDepth == 12107) || ((stackDepth == 12108) || ((stackDepth == 12109) || ((stackDepth == 12110) || ((stackDepth == 12111) || ((stackDepth == 12112) || ((stackDepth == 12113) || ((stackDepth == 12114) || ((stackDepth == 12115) || ((stackDepth == 12116) || ((stackDepth == 12201) || ((stackDepth == 12202) || ((stackDepth == 12203) || ((stackDepth == 12204) || ((stackDepth == 12205) || ((stackDepth == 12301) || ((stackDepth == 12302) || ((stackDepth == 12401) || ((stackDepth == 12402) || ((stackDepth == 12403) || ((stackDepth == 12404) || ((stackDepth == 12405) || ((stackDepth == 12406) || ((stackDepth == 12501) || ((stackDepth == 12502) || ((stackDepth == 12601) || ((stackDepth == 12602) || ((stackDepth == 12603) || ((stackDepth == 12700) || ((stackDepth == 12800) || ((stackDepth == 12900) || ((stackDepth == 13001) || ((stackDepth == 13002) || ((stackDepth == 13003) || ((stackDepth == 13004) || ((stackDepth == 13005) || ((stackDepth == 13101) || ((stackDepth == 13102) || ((stackDepth == 13103) || ((stackDepth == 13201) || ((stackDepth == 13202) || ((stackDepth == 13203) || ((stackDepth == 13301) || ((stackDepth == 13302) || ((stackDepth == 13303) || ((stackDepth == 13304) || ((stackDepth == 13401) || ((stackDepth == 13402) || ((stackDepth == 13403) || ((stackDepth == 13404) || ((stackDepth == 13405) || ((stackDepth == 13501) || ((stackDepth == 13502) || ((stackDepth == 13600) || ((stackDepth == 13701) || ((stackDepth == 13702) || ((stackDepth == 13703) || ((stackDepth == 13800) || ((stackDepth == 13901) || ((stackDepth == 13902) || ((stackDepth == 13903) || ((stackDepth == 14001) || ((stackDepth == 14002) || ((stackDepth == 14100) || ((stackDepth == 14200) || ((stackDepth == 14301) || ((stackDepth == 14302) || ((stackDepth == 14400) || ((stackDepth == 14501) || ((stackDepth == 14502) || ((stackDepth == 14601) || ((stackDepth == 14602) || ((stackDepth == 14603) || ((stackDepth == 14604) || ((stackDepth == 14605) || ((stackDepth == 14606) || ((stackDepth == 14607) || ((stackDepth == 14701) || ((stackDepth == 14702) || ((stackDepth == 14703) || ((stackDepth == 14704) || ((stackDepth == 14705) || ((stackDepth == 14706) || ((stackDepth == 14707) || ((stackDepth == 14708) || ((stackDepth == 14709) || ((stackDepth == 14710) || ((stackDepth == 14711) || ((stackDepth == 14712) || ((stackDepth == 14713) || ((stackDepth == 14714) || ((stackDepth == 14715) || ((stackDepth == 14716) || ((stackDepth == 14717) || ((stackDepth == 14718) || ((stackDepth == 14719) || ((stackDepth == 14720 || ((stackDepth == 14717 || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717 || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717 || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepth == 14717) || ((stackDepthis 19554.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Multiplication,The length of the statement  "            ParseAndValidate(test' TestOptions.Regular' new[] { new ErrorDescription { Code = 1002' Line = 1' Column = 8 } }); // expected ';' " is 130.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Multiplication,The length of the statement  "            ParseAndValidate(test' TestOptions.Script' new[] { new ErrorDescription { Code = 1002' Line = 1' Column = 8 } });   // expected ';' " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0071ERR_ExplicitEventFieldImpl,The length of the statement  "            ParseAndValidate(test' Diagnostic(ErrorCode.ERR_ExplicitEventFieldImpl' ".")' Diagnostic(ErrorCode.ERR_MemberNeedsType' "E")); " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0267ERR_PartialMisplaced_Delegate,The length of the statement  "    // (2'1): error CS0267: The 'partial' modifier can only appear immediately before 'class'' 'struct'' 'interface'' or 'void' " is 123.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0270ERR_ArraySizeInDeclaration,The length of the statement  "    // (7'20): error CS0650: Bad array declarator: To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field' use the fixed keyword before the field type. " is 211.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0270ERR_ArraySizeInDeclaration,The length of the statement  "    // (7'21): error CS0270: Array size cannot be specified in a variable declaration (try initializing with a 'new' expression) " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0270ERR_ArraySizeInDeclaration,The length of the statement  "    // (8'18): error CS0650: Bad array declarator: To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field' use the fixed keyword before the field type. " is 211.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0270ERR_ArraySizeInDeclaration,The length of the statement  "    // (8'19): error CS0270: Array size cannot be specified in a variable declaration (try initializing with a 'new' expression) " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0270ERR_ArraySizeInDeclaration,The length of the statement  "    // (9'15): error CS0650: Bad array declarator: To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field' use the fixed keyword before the field type. " is 211.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0270ERR_ArraySizeInDeclaration,The length of the statement  "    // (9'16): error CS0270: Array size cannot be specified in a variable declaration (try initializing with a 'new' expression) " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0270ERR_ArraySizeInDeclaration,The length of the statement  "    // (9'19): error CS0270: Array size cannot be specified in a variable declaration (try initializing with a 'new' expression) " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0270ERR_ArraySizeInDeclaration,The length of the statement  "    // (10'17): error CS0650: Bad array declarator: To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field' use the fixed keyword before the field type. " is 212.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0270ERR_ArraySizeInDeclaration,The length of the statement  "    // (10'18): error CS0270: Array size cannot be specified in a variable declaration (try initializing with a 'new' expression) " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0270ERR_ArraySizeInDeclaration,The length of the statement  "    // (10'21): error CS0270: Array size cannot be specified in a variable declaration (try initializing with a 'new' expression) " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0270ERR_ArraySizeInDeclaration,The length of the statement  "    // (10'23): error CS0270: Array size cannot be specified in a variable declaration (try initializing with a 'new' expression) " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0270ERR_ArraySizeInDeclaration,The length of the statement  "    // (11'12): error CS0650: Bad array declarator: To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field' use the fixed keyword before the field type. " is 212.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0270ERR_ArraySizeInDeclaration,The length of the statement  "    // (11'14): error CS0270: Array size cannot be specified in a variable declaration (try initializing with a 'new' expression) " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The length of the statement  "                // (14'20): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly " is 169.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The length of the statement  "                // (15'22): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly " is 169.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The length of the statement  "                // (16'37): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly " is 169.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The length of the statement  "                // (17'36): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly " is 169.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The length of the statement  "                // (18'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly " is 169.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The length of the statement  "                // (19'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly " is 169.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0514ERR_StaticConstructorWithExplicitConstructorCall,The length of the statement  "            ParseAndValidate(test' Diagnostic(ErrorCode.ERR_StaticConstructorWithExplicitConstructorCall' "base").WithArguments("cly")); " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0514ERR_StaticConstructorWithExplicitConstructorCall2,The length of the statement  "            ParseAndValidate(test' Diagnostic(ErrorCode.ERR_StaticConstructorWithExplicitConstructorCall' "this").WithArguments("C")); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0650ERR_CStyleArray,The length of the statement  "    // (6'20): error CS0650: Bad array declarator: To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field' use the fixed keyword before the field type. " is 211.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0650ERR_CStyleArray,The length of the statement  "    // (6'21): error CS0270: Array size cannot be specified in a variable declaration (try initializing with a 'new' expression) " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0650ERR_CStyleArray,The length of the statement  "    // (7'18): error CS0650: Bad array declarator: To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field' use the fixed keyword before the field type. " is 211.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0650ERR_CStyleArray,The length of the statement  "    // (7'19): error CS0270: Array size cannot be specified in a variable declaration (try initializing with a 'new' expression) " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0650ERR_CStyleArray,The length of the statement  "    // (8'15): error CS0650: Bad array declarator: To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field' use the fixed keyword before the field type. " is 211.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0650ERR_CStyleArray,The length of the statement  "    // (8'16): error CS0270: Array size cannot be specified in a variable declaration (try initializing with a 'new' expression) " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0650ERR_CStyleArray,The length of the statement  "    // (8'19): error CS0270: Array size cannot be specified in a variable declaration (try initializing with a 'new' expression) " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0650ERR_CStyleArray,The length of the statement  "    // (9'17): error CS0650: Bad array declarator: To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field' use the fixed keyword before the field type. " is 211.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0650ERR_CStyleArray,The length of the statement  "    // (9'18): error CS0270: Array size cannot be specified in a variable declaration (try initializing with a 'new' expression) " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0650ERR_CStyleArray,The length of the statement  "    // (9'21): error CS0270: Array size cannot be specified in a variable declaration (try initializing with a 'new' expression) " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0650ERR_CStyleArray,The length of the statement  "    // (9'23): error CS0270: Array size cannot be specified in a variable declaration (try initializing with a 'new' expression) " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0687ERR_AliasQualAsExpression,The length of the statement  "            // (6'25): error CS0400: The type or namespace name 'MyType' could not be found in the global namespace (are you missing an assembly reference?) " is 144.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0706ERR_BadConstraintType,The length of the statement  "                // (2'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter. " is 139.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0706ERR_BadConstraintType,The length of the statement  "                // (3'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter. " is 139.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0706ERR_BadConstraintType,The length of the statement  "                // (9'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter. " is 139.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0706ERR_BadConstraintType,The length of the statement  "                // (10'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter. " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0746ERR_InvalidAnonymousTypeMemberDeclarator_2,The length of the statement  "    // (8'23): error CS0746: Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment' simple name or member access. " is 162.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1029ERR_ErrorDirectiveppNonLatin,The length of the statement  "            Assert.Equal("error CS1029: #error: '\u0444\u0430\u0439\u043B'"' CSharpDiagnosticFormatter.Instance.Format(error.WithLocation(Location.None)' EnsureEnglishUICulture.PreferredOrNull)); " is 183.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1521ERR_BadBaseType,The length of the statement  "            ParseAndValidate(test' Diagnostic(ErrorCode.ERR_BadBaseType' "Test1[]")' Diagnostic(ErrorCode.ERR_BadBaseType' "Test1*")); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1609ERR_NoModifiersOnAccessor,The length of the statement  "            ParseAndValidate(test' Diagnostic(ErrorCode.ERR_NoModifiersOnAccessor' "private")' Diagnostic(ErrorCode.ERR_NoModifiersOnAccessor' "public")); " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1609ERR_NoModifiersOnAccessor_Event,The length of the statement  "            ParseAndValidate(test' Diagnostic(ErrorCode.ERR_NoModifiersOnAccessor' "public")' Diagnostic(ErrorCode.ERR_NoModifiersOnAccessor' "private")); " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1611ERR_ParamsCantBeRefOut,The length of the statement  "            ParseAndValidate(test' Diagnostic(ErrorCode.ERR_ParamsCantBeRefOut' "ref")' Diagnostic(ErrorCode.ERR_ParamsCantBeRefOut' "out")); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1641ERR_FixedDimsRequired,The length of the statement  "            ParseAndValidate(test' Diagnostic(ErrorCode.ERR_FixedDimsRequired' "ia")' Diagnostic(ErrorCode.ERR_ValueExpected' "]")); " is 120.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The length of the statement  "                // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant. " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The length of the statement  "                // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant. " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The length of the statement  "                // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant. " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The length of the statement  "                // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant. " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The length of the statement  "                // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant. " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The length of the statement  "                // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant. " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The length of the statement  "                // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant. " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The length of the statement  "                // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant. " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,PartialTypesBeforeVersionTwo,The length of the statement  "            var tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,PartialTypesBeforeVersionTwo,The length of the statement  "            tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp1)); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,PartialMethodsVersionThree,The length of the statement  "            var tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,PartialMethodsVersionThree,The length of the statement  "            tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp2)); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,QueryBeforeVersionThree,The length of the statement  "            var tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,QueryBeforeVersionThree,The length of the statement  "            tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp2)); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,QueryBeforeVersionThree,The length of the statement  "                // (6'17): error CS8023: Feature 'query expression' is not available in C# 2.  Please use language version 3 or greater. " is 120.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,QueryBeforeVersionThree,The length of the statement  "                // (6'17): error CS8023: Feature 'query expression' is not available in C# 2.  Please use language version 3 or greater. " is 120.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AnonymousTypeBeforeVersionThree,The length of the statement  "            var tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AnonymousTypeBeforeVersionThree,The length of the statement  "            tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp2)); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,ImplicitArrayBeforeVersionThree,The length of the statement  "            var tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,ImplicitArrayBeforeVersionThree,The length of the statement  "            tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp2)); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,ImplicitArrayBeforeVersionThree,The length of the statement  "                // (6'17): error CS8023: Feature 'implicitly typed array' is not available in C# 2.  Please use language version 3 or greater. " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,ObjectInitializerBeforeVersionThree,The length of the statement  "            var tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,ObjectInitializerBeforeVersionThree,The length of the statement  "            tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp2)); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,ObjectInitializerBeforeVersionThree,The length of the statement  "                // (6'25): error CS8023: Feature 'object initializer' is not available in C# 2.  Please use language version 3 or greater. " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,LambdaBeforeVersionThree,The length of the statement  "            var tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,LambdaBeforeVersionThree,The length of the statement  "            tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp2)); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,LambdaBeforeVersionThree,The length of the statement  "                // (6'19): error CS8023: Feature 'lambda expression' is not available in C# 2.  Please use language version 3 or greater. " is 121.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,ExceptionFilterBeforeVersionSix,The length of the statement  "            var tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp6)); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,ExceptionFilterBeforeVersionSix,The length of the statement  "    // (6'23): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater. " is 120.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,ExceptionFilterBeforeVersionSix,The length of the statement  "    Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(6' 23) " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1030WRN_WarningDirectivepp,The length of the statement  "            ParseAndValidate(test' Diagnostic(ErrorCode.WRN_WarningDirective' "//This is a WARNING!").WithArguments("//This is a WARNING!")); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,PartialMethodInCSharp2,The length of the statement  "            CreateCompilationWithMscorlib(test' parseOptions: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp2)).VerifyDiagnostics( " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AsyncBeforeCSharp5,The length of the statement  "            var tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AsyncBeforeCSharp5,The length of the statement  "            tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp3)); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AsyncWithOtherModifiersBeforeCSharp5,The length of the statement  "            var tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AsyncWithOtherModifiersBeforeCSharp5,The length of the statement  "            tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp3)); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AsyncLambdaBeforeCSharp5,The length of the statement  "            var tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AsyncLambdaBeforeCSharp5,The length of the statement  "            tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp4)); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AsyncDelegateBeforeCSharp5,The length of the statement  "            var tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AsyncDelegateBeforeCSharp5,The length of the statement  "            tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp4)); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,NamedArgumentBeforeCSharp4,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp4)).GetDiagnostics().Verify(); " is 144.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,NamedArgumentBeforeCSharp4,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp3)).GetDiagnostics().Verify( " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,GlobalKeywordBeforeCSharp2,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp2)).GetDiagnostics().Verify(); " is 144.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,GlobalKeywordBeforeCSharp2,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp1)).GetDiagnostics().Verify( " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,GlobalKeywordBeforeCSharp2,The length of the statement  "                // (2'11): error CS8022: Feature 'namespace alias qualifier' is not available in C# 1.  Please use language version 2 or greater. " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AliasQualifiedNameBeforeCSharp2,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp2)).GetDiagnostics().Verify(); " is 144.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AliasQualifiedNameBeforeCSharp2,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp1)).GetDiagnostics().Verify( " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AliasQualifiedNameBeforeCSharp2,The length of the statement  "                // (2'11): error CS8022: Feature 'namespace alias qualifier' is not available in C# 1.  Please use language version 2 or greater. " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,OptionalParameterBeforeCSharp4,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp4)).GetDiagnostics().Verify(); " is 144.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,OptionalParameterBeforeCSharp4,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp3)).GetDiagnostics().Verify( " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,OptionalParameterBeforeCSharp4,The length of the statement  "                // (4'18): error CS8024: Feature 'optional parameter' is not available in C# 3.  Please use language version 4 or greater. " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,ObjectInitializerBeforeCSharp3,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp3)).GetDiagnostics().Verify(); " is 144.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,ObjectInitializerBeforeCSharp3,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp2)).GetDiagnostics().Verify( " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,ObjectInitializerBeforeCSharp3,The length of the statement  "                // (6'22): error CS8023: Feature 'object initializer' is not available in C# 2.  Please use language version 3 or greater. " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CollectionInitializerBeforeCSharp3,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp3)).GetDiagnostics().Verify(); " is 144.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CollectionInitializerBeforeCSharp3,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp2)).GetDiagnostics().Verify( " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CollectionInitializerBeforeCSharp3,The length of the statement  "                // (6'22): error CS8023: Feature 'collection initializer' is not available in C# 2.  Please use language version 3 or greater. " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CrefGenericBeforeCSharp2,The length of the statement  "            // NOTE: This actually causes an internal compiler error in dev12 (probably wasn't expecting an error from cref parsing). " is 121.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CrefGenericBeforeCSharp2,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: TestOptions.RegularWithDocumentationComments.WithLanguageVersion(LanguageVersion.CSharp2)).GetDiagnostics().Verify(); " is 162.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CrefGenericBeforeCSharp2,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: TestOptions.RegularWithDocumentationComments.WithLanguageVersion(LanguageVersion.CSharp1)).GetDiagnostics().Verify( " is 160.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CrefGenericBeforeCSharp2,The length of the statement  "                // (2'17): warning CS1658: Feature 'generics' is not available in C# 1.  Please use language version 2 or greater.. See also error CS8022. " is 138.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CrefGenericBeforeCSharp2,The length of the statement  "                Diagnostic(ErrorCode.WRN_ErrorOverride' "{").WithArguments("Feature 'generics' is not available in C# 1.  Please use language version 2 or greater."' "8022")); " is 159.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CrefAliasQualifiedNameBeforeCSharp2,The length of the statement  "            // NOTE: This actually causes an internal compiler error in dev12 (probably wasn't expecting an error from cref parsing). " is 121.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CrefAliasQualifiedNameBeforeCSharp2,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: TestOptions.RegularWithDocumentationComments.WithLanguageVersion(LanguageVersion.CSharp2)).GetDiagnostics().Verify(); " is 162.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CrefAliasQualifiedNameBeforeCSharp2,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: TestOptions.RegularWithDocumentationComments.WithLanguageVersion(LanguageVersion.CSharp1)).GetDiagnostics().Verify( " is 160.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CrefAliasQualifiedNameBeforeCSharp2,The length of the statement  "                // (2'16): warning CS1658: Feature 'namespace alias qualifier' is not available in C# 1.  Please use language version 2 or greater.. See also error CS8022. " is 155.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CrefAliasQualifiedNameBeforeCSharp2,The length of the statement  "                Diagnostic(ErrorCode.WRN_ErrorOverride' "Alias").WithArguments("Feature 'namespace alias qualifier' is not available in C# 1.  Please use language version 2 or greater."' "8022")' " is 179.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CrefAliasQualifiedNameBeforeCSharp2,The length of the statement  "                // (3'16): warning CS1658: Feature 'namespace alias qualifier' is not available in C# 1.  Please use language version 2 or greater.. See also error CS8022. " is 155.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CrefAliasQualifiedNameBeforeCSharp2,The length of the statement  "                Diagnostic(ErrorCode.WRN_ErrorOverride' "global").WithArguments("Feature 'namespace alias qualifier' is not available in C# 1.  Please use language version 2 or greater."' "8022")); " is 181.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,PragmaBeforeCSharp2,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: TestOptions.RegularWithDocumentationComments.WithLanguageVersion(LanguageVersion.CSharp2)).GetDiagnostics().Verify(); " is 162.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,PragmaBeforeCSharp2,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(text' options: TestOptions.RegularWithDocumentationComments.WithLanguageVersion(LanguageVersion.CSharp1)).GetDiagnostics().Verify( " is 160.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AwaitAsIdentifierInAsyncContext,The length of the statement  "            var tree = SyntaxFactory.ParseSyntaxTree(text' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,WRN_NonECMAFeature,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp2)).GetDiagnostics().Verify(); " is 146.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,WRN_NonECMAFeature,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp1)).GetDiagnostics().Verify( " is 144.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,WRN_NonECMAFeature,The length of the statement  "                // (1'2): warning CS1645: Feature 'module as an attribute target specifier' is not part of the standardized ISO C# language specification' and may not be accepted by other compilers " is 181.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp6)).GetDiagnostics().Verify(); " is 146.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "            SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify( " is 144.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater. " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)' " is 132.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater. " is 128.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)' " is 132.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater. " is 130.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)' " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater. " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater. " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)' " is 135.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater. " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)' " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater. " is 121.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)' " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater. " is 130.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The length of the statement  "    Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17) " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,FromKeyword,The length of the statement  "            Assert.Equal((int)ErrorCode.ERR_IdentifierExpected' file.Errors()[0].Code); //expecting item name - found "select" keyword " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,FromKeyword,The length of the statement  "            Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm' file.Errors()[1].Code); //expecting expression - found "select" keyword " is 120.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,FromKeyword,The length of the statement  "            Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code); //we inserted a missing semicolon in a place we didn't expect " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,InsertOpenBraceBeforeCodes,The length of the statement  "            Assert.True(syntaxTree.GetDiagnostics().Select(d => ((IFormattable)d).ToString(null' EnsureEnglishUICulture.PreferredOrNull)).SequenceEqual(new[] " is 145.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,IncompleteTopLevelOperator,The length of the statement  "            Assert.True(syntaxTree.GetDiagnostics().Select(d => ((IFormattable)d).ToString(null' EnsureEnglishUICulture.PreferredOrNull)).SequenceEqual(new[] " is 145.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,IncompleteVariableDeclarationAboveDotMemberAccess,The length of the statement  "            Assert.True(syntaxTree.GetDiagnostics().Select(d => ((IFormattable)d).ToString(null' EnsureEnglishUICulture.PreferredOrNull)).SequenceEqual(new[] " is 145.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,IncompleteVariableDeclarationAbovePointerMemberAccess,The length of the statement  "            Assert.True(syntaxTree.GetDiagnostics().Select(d => ((IFormattable)d).ToString(null' EnsureEnglishUICulture.PreferredOrNull)).SequenceEqual(new[] " is 145.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,IncompleteVariableDeclarationAboveBinaryExpression,The length of the statement  "            Assert.True(syntaxTree.GetDiagnostics().Select(d => ((IFormattable)d).ToString(null' EnsureEnglishUICulture.PreferredOrNull)).SequenceEqual(new[] " is 145.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,IncompleteVariableDeclarationAboveMemberAccess_MultiLine,The length of the statement  "            Assert.True(syntaxTree.GetDiagnostics().Select(d => ((IFormattable)d).ToString(null' EnsureEnglishUICulture.PreferredOrNull)).SequenceEqual(new[] " is 145.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,IncompleteVariableDeclarationBeforeMemberAccessOnSameLine,The length of the statement  "            Assert.True(syntaxTree.GetDiagnostics().Select(d => ((IFormattable)d).ToString(null' EnsureEnglishUICulture.PreferredOrNull)).SequenceEqual(new[] " is 145.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,ExplicitImplementationEventWithColonColon,The length of the statement  "                // (4'14): error CS0687: The namespace alias qualifier '::' always resolves to a type or namespace so is illegal here. Consider using '.' instead. " is 146.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,Bug684860_XmlText,The length of the statement  "            var tree = SyntaxFactory.ParseSyntaxTree(text' options: new CSharpParseOptions(documentationMode: DocumentationMode.Parse)); " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,GreenNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\GreenNodeTests.cs,AttachAndCheckDiagnostics,The length of the statement  "            var nodeWithDiags = node.SetDiagnostics(new DiagnosticInfo[] { new CSDiagnosticInfo(ErrorCode.ERR_AbstractAndExtern) }); " is 120.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,Equality,The length of the statement  "            EqualityTesting.AssertEqual(default(SeparatedSyntaxList<CSharpSyntaxNode>)' default(SeparatedSyntaxList<CSharpSyntaxNode>)); " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,EnumeratorEquality,The length of the statement  "            Assert.Throws<NotSupportedException>(() => default(SeparatedSyntaxList<CSharpSyntaxNode>.Enumerator).Equals(default(SeparatedSyntaxList<CSharpSyntaxNode>.Enumerator))); " is 168.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestSeparatedListInsert,The length of the statement  "            var insertBetween = insertAfter.InsertRange(1' new[] { SyntaxFactory.ParseExpression("a")' SyntaxFactory.ParseExpression("b")' SyntaxFactory.ParseExpression("c") }); " is 165.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestSeparatedListInsert,The length of the statement  "            var insertBeforeMultiLineComment = argsWithMultiLineComment.Insert(1' SyntaxFactory.Argument(SyntaxFactory.ParseExpression("c"))); " is 130.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,StructuredTriviaTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\StructuredTriviaTests.cs,GetParentTrivia,The length of the statement  "            var trivia1 = SyntaxFactory.Trivia(SyntaxFactory.IfDirectiveTrivia(SyntaxFactory.IdentifierName(conditionName)' false' false' false)); " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,StructuredTriviaTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\StructuredTriviaTests.cs,TestStructuredTrivia,The length of the statement  "            var docComment = SyntaxFactory.DocumentationCommentTrivia(SyntaxKind.SingleLineDocumentationCommentTrivia).WithContent(new SyntaxList<XmlNodeSyntax>(xmlElement)); " is 162.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,StructuredTriviaTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\StructuredTriviaTests.cs,DocumentationCommentsLocation_SingleLine,The length of the statement  "            var trivia = tree.GetCompilationUnitRoot().DescendantTrivia().Single(t => t.Kind() == SyntaxKind.SingleLineDocumentationCommentTrivia); " is 135.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,StructuredTriviaTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\StructuredTriviaTests.cs,DocumentationCommentsLocation_MultiLine,The length of the statement  "            var trivia = tree.GetCompilationUnitRoot().DescendantTrivia().Single(t => t.Kind() == SyntaxKind.MultiLineDocumentationCommentTrivia); " is 134.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxEquivalenceTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxEquivalenceTests.cs,TestChangingUsing,The length of the statement  "            var tree1 = SyntaxFactory.ParseSyntaxTree("using System; namespace N { class C { void Foo() { Console.Write(0); } } }"); " is 120.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestConstructPragmaChecksumDirective,The length of the statement  "                SyntaxFactory.ParseToken(string.Format("\"{0}\""' value)).WithLeadingTrivia(SyntaxFactory.ElasticMarker).WithTrailingTrivia(SyntaxFactory.ElasticMarker); " is 153.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestConstructPragmaChecksumDirective,The length of the statement  "            var t = SyntaxFactory.PragmaChecksumDirectiveTrivia(makeStringLiteral("file")' makeStringLiteral("guid")' makeStringLiteral("bytes")' true); " is 140.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestFreeFormTokenFactory_NonTokenKind,The length of the statement  "            Assert.Throws(exceptionType' () => SyntaxFactory.Token(default(SyntaxTriviaList)' SyntaxKind.IdentifierName' "text"' "valueText"' default(SyntaxTriviaList))); " is 158.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestFreeFormTokenFactory_SpecialTokenKinds,The length of the statement  "            Assert.Throws<ArgumentException>(() => SyntaxFactory.Token(default(SyntaxTriviaList)' SyntaxKind.IdentifierToken' "text"' "valueText"' default(SyntaxTriviaList))); " is 163.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestFreeFormTokenFactory_SpecialTokenKinds,The length of the statement  "            Assert.Throws<ArgumentException>(() => SyntaxFactory.Token(default(SyntaxTriviaList)' SyntaxKind.CharacterLiteralToken' "text"' "valueText"' default(SyntaxTriviaList))); " is 169.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestFreeFormTokenFactory_SpecialTokenKinds,The length of the statement  "            Assert.Throws<ArgumentException>(() => SyntaxFactory.Token(default(SyntaxTriviaList)' SyntaxKind.NumericLiteralToken' "text"' "valueText"' default(SyntaxTriviaList))); " is 167.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestFreeFormTokenFactory_DefaultText,The length of the statement  "            for (SyntaxKind kind = InternalSyntax.SyntaxToken.FirstTokenWithWellKnownText; kind <= InternalSyntax.SyntaxToken.LastTokenWithWellKnownText; kind++) " is 149.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestFreeFormTokenFactory_DefaultText,The length of the statement  "                var actualRed = SyntaxFactory.Token(SyntaxTriviaList.Create(SyntaxFactory.ElasticMarker)' kind' defaultText' defaultText' SyntaxTriviaList.Create(SyntaxFactory.ElasticMarker)); " is 176.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestFreeFormTokenFactory_DefaultText,The length of the statement  "                var expectedGreen = InternalSyntax.SyntaxFactory.Token(InternalSyntax.SyntaxFactory.ElasticZeroSpace' kind' InternalSyntax.SyntaxFactory.ElasticZeroSpace); " is 155.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestFreeFormTokenFactory_CustomText,The length of the statement  "            for (SyntaxKind kind = InternalSyntax.SyntaxToken.FirstTokenWithWellKnownText; kind <= InternalSyntax.SyntaxToken.LastTokenWithWellKnownText; kind++) " is 149.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestFreeFormTokenFactory_CustomText,The length of the statement  "                var token = SyntaxFactory.Token(SyntaxTriviaList.Create(SyntaxFactory.ElasticMarker)' kind' text' valueText' SyntaxTriviaList.Create(SyntaxFactory.ElasticMarker)); " is 163.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestSeparatedListFactory_DefaultSeparators,The length of the statement  "            var singleton2 = SyntaxFactory.SeparatedList((System.Collections.Generic.IEnumerable<ExpressionSyntax>)new[] { SyntaxFactory.IdentifierName("x") }); " is 148.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestSeparatedListFactory_DefaultSeparators,The length of the statement  "            var list1 = SyntaxFactory.SeparatedList(new[] { SyntaxFactory.IdentifierName("a")' SyntaxFactory.IdentifierName("b")' SyntaxFactory.IdentifierName("c") }); " is 155.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFormatterTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFormatterTests.cs,TestFormatStatement1,The length of the statement  "            TestFormatStatement("switch(a){case b:c;case d:e;}"' "switch (a)\r\n{\r\n  case b:\r\n    c;\r\n  case d:\r\n    e;\r\n}"); " is 123.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFormatterTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFormatterTests.cs,TestFormatStatement1,The length of the statement  "            TestFormatStatement("switch(a){case b:c;default:d;}"' "switch (a)\r\n{\r\n  case b:\r\n    c;\r\n  default:\r\n    d;\r\n}"); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFormatterTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFormatterTests.cs,TestFormatStatement1,The length of the statement  "            TestFormatStatement("switch(a){case b:{}default:{}}"' "switch (a)\r\n{\r\n  case b:\r\n  {\r\n  }\r\n\r\n  default:\r\n  {\r\n  }\r\n}"); " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFormatterTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFormatterTests.cs,TestFormatStatement1,The length of the statement  "            TestFormatStatement("switch(a){case b:c();d();default:e();f();}"' "switch (a)\r\n{\r\n  case b:\r\n    c();\r\n    d();\r\n  default:\r\n    e();\r\n    f();\r\n}"); " is 165.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFormatterTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFormatterTests.cs,TestFormatStatement1,The length of the statement  "            TestFormatStatement("int i=from v in vals select from x in xxx where x > 10 select x;"' "int i =\r\n  from v in vals\r\n  select\r\n    from x in xxx\r\n    where x > 10\r\n    select x;"); " is 189.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFormatterTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFormatterTests.cs,TestFormatStatement1,The length of the statement  "            TestFormatStatement("int i=from v in vals group v by x into g where g > 10 select g;"' "int i =\r\n  from v in vals\r\n  group v by x into g\r\n    where g > 10\r\n    select g;"); " is 180.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFormatterTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFormatterTests.cs,TestFormatDeclaration1,The length of the statement  "            TestFormatDeclaration("class a{void b(){}void c(){}}"' "class a\r\n{\r\n  void b()\r\n  {\r\n  }\r\n\r\n  void c()\r\n  {\r\n  }\r\n}"); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFormatterTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFormatterTests.cs,TestFormatLineDirectiveTrivia,The length of the statement  "            // Note: without all the escaping' it looks like this '#line 1 @"""a\b"""' (i.e. the string literal has a value of '"a\b"'). " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,EnumeratorEquality,The length of the statement  "            Assert.Throws<NotSupportedException>(() => default(SyntaxList<CSharpSyntaxNode>.Enumerator).Equals(default(SyntaxList<CSharpSyntaxNode>.Enumerator))); " is 150.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndSelf,The length of the statement  "            nodes = statement.DescendantNodesAndSelf(statement.FullSpan' n => n is StatementSyntax' descendIntoTrivia: true).ToList(); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetAllDirectivesUsingDescendantNodes,The length of the statement  "            var descendantDirectives = expr.DescendantNodesAndSelf(n => n.ContainsDirectives' descendIntoTrivia: true).OfType<DirectiveTriviaSyntax>().ToList(); " is 148.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetAllAnnotatedNodesUsingDescendantNodes,The length of the statement  "            var nodesWithMyAnnotations = exprWithAnnotations.DescendantNodesAndSelf(n => n.ContainsAnnotations).Where(n => n.HasAnnotation(myAnnotation)).ToList(); " is 151.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetNextTokenIncludingSkippedTokens,The length of the statement  "            var tokens = tree.GetCompilationUnitRoot().DescendantTokens(descendIntoTrivia: true).Where(SyntaxToken.NonZeroWidth).ToList(); " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetPreviousTokenIncludingSkippedTokens,The length of the statement  "            var tokens = tree.GetCompilationUnitRoot().DescendantTokens(descendIntoTrivia: true).Where(SyntaxToken.NonZeroWidth).ToList(); " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetPreviousTokenIncludingZeroWidthCommon,The length of the statement  "            SyntaxToken token = ((SyntaxToken)((SyntaxTree)syntaxTree).GetCompilationUnitRoot().EndOfFileToken).GetPreviousToken(includeZeroWidth: true); " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,SyntaxNames,The length of the statement  "            var gp = SyntaxFactory.SingletonSeparatedList<TypeSyntax>(SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.IntKeyword))); " is 132.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthTokensInParentAreUnique,The length of the statement  "            var omittedArraySize = SyntaxFactory.OmittedArraySizeExpression(SyntaxFactory.Token(SyntaxKind.OmittedArraySizeExpressionToken)); " is 129.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthTokensInParentAreUnique,The length of the statement  "                SyntaxFactory.SeparatedList<ExpressionSyntax>(new SyntaxNodeOrToken[] { omittedArraySize' missingComma' omittedArraySize' missingComma' omittedArraySize' missingComma' omittedArraySize })' " is 188.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthStructuredTrivia,The length of the statement  "            var zeroWidth = SyntaxFactory.ElseDirectiveTrivia(SyntaxFactory.MissingToken(SyntaxKind.HashToken)' SyntaxFactory.MissingToken(SyntaxKind.ElseKeyword)' SyntaxFactory.MissingToken(SyntaxKind.EndOfDirectiveToken)' false' false); " is 226.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthStructuredTrivia,The length of the statement  "            var someToken = SyntaxFactory.Identifier(default(SyntaxTriviaList)' "foo"' SyntaxFactory.TriviaList(SyntaxFactory.Trivia(zeroWidth)' SyntaxFactory.Trivia(zeroWidth))); " is 167.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthStructuredTriviaOnZeroWidthToken,The length of the statement  "            var zeroWidth = SyntaxFactory.ElseDirectiveTrivia(SyntaxFactory.MissingToken(SyntaxKind.HashToken)' SyntaxFactory.MissingToken(SyntaxKind.ElseKeyword)' SyntaxFactory.MissingToken(SyntaxKind.EndOfDirectiveToken)' false' false); " is 226.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthStructuredTriviaOnZeroWidthToken,The length of the statement  "            var someToken = SyntaxFactory.Identifier(default(SyntaxTriviaList)' ""' SyntaxFactory.TriviaList(SyntaxFactory.Trivia(zeroWidth)' SyntaxFactory.Trivia(zeroWidth))); " is 164.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestIncompleteDeclWithDotToken,The length of the statement  "            Assert.Equal(SyntaxKind.MethodDeclaration' tree.GetCompilationUnitRoot().ChildNodesAndTokens()[0].ChildNodesAndTokens()[3].Kind()); " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ReplaceEndOfCommentToken,The length of the statement  "            var expr2 = expr.ReplaceToken(token' SyntaxFactory.Token(SyntaxTriviaList.Create(SyntaxFactory.Whitespace("garbage"))' token.Kind()' default(SyntaxTriviaList))); " is 161.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ReplaceEndOfFileToken,The length of the statement  "            var cu2 = cu.ReplaceToken(token' SyntaxFactory.Token(SyntaxTriviaList.Create(SyntaxFactory.Whitespace("  "))' token.Kind()' default(SyntaxTriviaList))); " is 152.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestReplaceTriviaDeep,The length of the statement  "            var deepTrivia = expr.GetDirectives().SelectMany(d => d.DescendantTrivia().Where(tr => tr.Kind() == SyntaxKind.WhitespaceTrivia)).ToList(); " is 139.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestRemoveNodeInSeparatedList_KeepExteriorTrivia,The length of the statement  "            var b = expr.DescendantTokens().Where(t => t.Text == "b").Select(t => t.Parent.FirstAncestorOrSelf<ArgumentSyntax>()).FirstOrDefault(); " is 135.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestRemoveNodeInSeparatedList_KeepNoTrivia,The length of the statement  "            var b = expr.DescendantTokens().Where(t => t.Text == "b").Select(t => t.Parent.FirstAncestorOrSelf<ArgumentSyntax>()).FirstOrDefault(); " is 135.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestRemoveOnlyNodeInSeparatedList_KeepExteriorTrivia,The length of the statement  "            var n = expr.DescendantTokens().Where(t => t.Text == "a").Select(t => t.Parent.FirstAncestorOrSelf<ArgumentSyntax>()).FirstOrDefault(); " is 135.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestRemoveFirstNodeInSeparatedList_KeepExteriorTrivia,The length of the statement  "            var n = expr.DescendantTokens().Where(t => t.Text == "a").Select(t => t.Parent.FirstAncestorOrSelf<ArgumentSyntax>()).FirstOrDefault(); " is 135.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestRemoveLastNodeInSeparatedList_KeepExteriorTrivia,The length of the statement  "            var n = expr.DescendantTokens().Where(t => t.Text == "c").Select(t => t.Parent.FirstAncestorOrSelf<ArgumentSyntax>()).FirstOrDefault(); " is 135.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestRemoveNode_KeepNoTrivia,The length of the statement  "            var b = expr.DescendantTokens().Where(t => t.Text == "b").Select(t => t.Parent.FirstAncestorOrSelf<StatementSyntax>()).FirstOrDefault(); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestRemoveNode_KeepExteriorTrivia,The length of the statement  "            var b = expr.DescendantTokens().Where(t => t.Text == "b").Select(t => t.Parent.FirstAncestorOrSelf<StatementSyntax>()).FirstOrDefault(); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,AddMethodModifier,The length of the statement  "            var newModifiers = method.Modifiers.Add(SyntaxFactory.Token(default(SyntaxTriviaList)' SyntaxKind.UnsafeKeyword' SyntaxFactory.TriviaList(SyntaxFactory.Space))); " is 161.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,SeparatedSyntaxListValidation,The length of the statement  "            Assert.Throws<ArgumentException>(() => SyntaxFactory.SeparatedList<TypeSyntax>(new SyntaxNodeOrToken[] { commaToken })); " is 120.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,SeparatedSyntaxListValidation,The length of the statement  "            Assert.Throws<ArgumentException>(() => SyntaxFactory.SeparatedList<TypeSyntax>(new SyntaxNodeOrToken[] { intType' commaToken' commaToken })); " is 141.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,SeparatedSyntaxListValidation,The length of the statement  "            Assert.Throws<ArgumentException>(() => SyntaxFactory.SeparatedList<TypeSyntax>(new SyntaxNodeOrToken[] { intType' intType })); " is 126.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestSyntaxTriviaListEquals,The length of the statement  "            var emptyToken = SyntaxFactory.MissingToken(SyntaxKind.IdentifierToken).WithTrailingTrivia(emptyWhitespace' emptyWhitespace); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestSyntaxTree_Changes,The length of the statement  "            NameSyntax name = SyntaxFactory.QualifiedName(SyntaxFactory.IdentifierName("System")' SyntaxFactory.IdentifierName("Collections.Generic")); " is 139.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxRewriterTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxRewriterTests.cs,TestSyntaxTreeForRewrittenRoot,The length of the statement  "            Assert.True(((SyntaxTree)rewrittenRoot.SyntaxTree).HasCompilationUnitRoot' "how did we get a non-CompilationUnit root?"); " is 121.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxRewriterTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxRewriterTests.cs,RewriteMissingIdentiferInExpressionStatement_ImplicitlyCreatedSyntaxTree,The length of the statement  "            var rewriter = new RedRewriter(rewriteToken: tok => tok.Kind() == SyntaxKind.IdentifierToken ? tok.WithLeadingTrivia(trivia) : tok); " is 132.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxRewriterTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxRewriterTests.cs,RewriteMissingIdentiferInExpressionStatement_WithSyntaxTree,The length of the statement  "            var rewriter = new RedRewriter(rewriteToken: tok => tok.Kind() == SyntaxKind.IdentifierToken ? tok.WithLeadingTrivia(trivia) : tok); " is 132.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTests.cs,AssertCompleteSubmission,The length of the statement  "            Assert.Equal(script' SyntaxFactory.IsCompleteSubmission(SyntaxFactory.ParseSyntaxTree(code' options: TestOptions.Script))); " is 123.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTests.cs,AssertCompleteSubmission,The length of the statement  "            Assert.Equal(interactive' SyntaxFactory.IsCompleteSubmission(SyntaxFactory.ParseSyntaxTree(code' options: TestOptions.Interactive))); " is 133.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,Equality,The length of the statement  "            EqualityTesting.AssertEqual(new SyntaxTriviaList(node1' node1.Node' 0' 0)' new SyntaxTriviaList(node1' node1.Node' 0' 0)); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,Equality,The length of the statement  "            EqualityTesting.AssertNotEqual(new SyntaxTriviaList(node1' node1.Node' 0' 1)' new SyntaxTriviaList(node1' node1.Node' 0' 0)); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,Equality,The length of the statement  "            EqualityTesting.AssertNotEqual(new SyntaxTriviaList(node1' node2.Node' 0' 0)' new SyntaxTriviaList(node1' node1.Node' 0' 0)); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,Equality,The length of the statement  "            EqualityTesting.AssertNotEqual(new SyntaxTriviaList(node2' node1.Node' 0' 0)' new SyntaxTriviaList(node1' node1.Node' 0' 0)); " is 125.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,Equality,The length of the statement  "            EqualityTesting.AssertEqual(new SyntaxTriviaList(node1' node1.Node' 1' 0)' new SyntaxTriviaList(node1' node1.Node' 0' 0)); " is 122.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,Reverse_Equality,The length of the statement  "            EqualityTesting.AssertEqual(new SyntaxTriviaList(node1' node1.Node' 0' 0).Reverse()' new SyntaxTriviaList(node1' node1.Node' 0' 0).Reverse()); " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,Reverse_Equality,The length of the statement  "            EqualityTesting.AssertNotEqual(new SyntaxTriviaList(node1' node1.Node' 0' 1).Reverse()' new SyntaxTriviaList(node1' node1.Node' 0' 0).Reverse()); " is 145.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,Reverse_Equality,The length of the statement  "            EqualityTesting.AssertNotEqual(new SyntaxTriviaList(node1' node2.Node' 0' 0).Reverse()' new SyntaxTriviaList(node1' node1.Node' 0' 0).Reverse()); " is 145.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,Reverse_Equality,The length of the statement  "            EqualityTesting.AssertNotEqual(new SyntaxTriviaList(node2' node1.Node' 0' 0).Reverse()' new SyntaxTriviaList(node1' node1.Node' 0' 0).Reverse()); " is 145.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,Reverse_Equality,The length of the statement  "            EqualityTesting.AssertEqual(new SyntaxTriviaList(node1' node1.Node' 1' 0).Reverse()' new SyntaxTriviaList(node1' node1.Node' 0' 0).Reverse()); " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,TrackNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\TrackNodeTests.cs,TestGetCurrentNodeAfterAddingMultipleThrows,The length of the statement  "            var replacedExpr = trackedExpr.ReplaceNodes(trackedExpr.DescendantNodes().OfType<IdentifierNameSyntax>()' (original' changed) => currentA); " is 139.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests,TrackNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\TrackNodeTests.cs,TestGetCurrentNodeAfterAddingMultipleReturnsMultiple,The length of the statement  "            var replacedExpr = trackedExpr.ReplaceNodes(trackedExpr.DescendantNodes().OfType<IdentifierNameSyntax>()' (original' changed) => currentA); " is 139.
Long Statement,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,Equality,The length of the statement  "            EqualityTesting.AssertEqual(default(SeparatedSyntaxList<CSharpSyntaxNode>)' default(SeparatedSyntaxList<CSharpSyntaxNode>)); " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,EnumeratorEquality,The length of the statement  "            Assert.Throws<NotSupportedException>(() => default(SyntaxNodeOrTokenList.Enumerator).Equals(default(SyntaxNodeOrTokenList.Enumerator))); " is 136.
Long Statement,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The length of the statement  "            var list = SyntaxFactory.NodeOrTokenList(SyntaxFactory.ParseToken("A ")' SyntaxFactory.ParseToken("B ")' SyntaxFactory.ParseToken("C ")); " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestEquality,The length of the statement  "            EqualityTesting.AssertEqual(new SyntaxTokenList(node1' node1.ReturnKeyword.Node' 0' 0)' new SyntaxTokenList(node1' node1.ReturnKeyword.Node' 0' 0)); " is 148.
Long Statement,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestEquality,The length of the statement  "            EqualityTesting.AssertNotEqual(new SyntaxTokenList(node1' node1.ReturnKeyword.Node' 0' 1)' new SyntaxTokenList(node1' node1.ReturnKeyword.Node' 0' 0)); " is 151.
Long Statement,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestEquality,The length of the statement  "            EqualityTesting.AssertEqual(new SyntaxTokenList(node1' node1.ReturnKeyword.Node' 1' 0)' new SyntaxTokenList(node1' node1.ReturnKeyword.Node' 0' 0)); " is 148.
Long Statement,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestReverse_Equality,The length of the statement  "            EqualityTesting.AssertEqual(new SyntaxTokenList(node1' node1.ReturnKeyword.Node' 0' 0).Reverse()' new SyntaxTokenList(node1' node1.ReturnKeyword.Node' 0' 0).Reverse()); " is 168.
Long Statement,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestReverse_Equality,The length of the statement  "            EqualityTesting.AssertNotEqual(new SyntaxTokenList(node1' node1.ReturnKeyword.Node' 0' 1).Reverse()' new SyntaxTokenList(node1' node1.ReturnKeyword.Node' 0' 0).Reverse()); " is 171.
Long Statement,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestReverse_Equality,The length of the statement  "            EqualityTesting.AssertEqual(new SyntaxTokenList(node1' node1.ReturnKeyword.Node' 1' 0).Reverse()' new SyntaxTokenList(node1' node1.ReturnKeyword.Node' 0' 0).Reverse()); " is 168.
Long Statement,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestEnumeratorEquality,The length of the statement  "            Assert.Throws<NotSupportedException>(() => default(SyntaxTokenList.Enumerator).Equals(default(SyntaxTokenList.Enumerator))); " is 124.
Long Statement,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestEnumeratorEquality,The length of the statement  "            Assert.Throws<NotSupportedException>(() => default(SyntaxTokenList.Reversed.Enumerator).Equals(default(SyntaxTokenList.Reversed.Enumerator))); " is 142.
Long Statement,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The length of the statement  "            var list = SyntaxFactory.TokenList(SyntaxFactory.ParseToken("A ")' SyntaxFactory.ParseToken("B ")' SyntaxFactory.ParseToken("C ")); " is 131.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,FuzzTesting,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\FuzzTesting.cs,c01,The length of the statement  "            var test = @"///   \u2750\uDFC1  = </   @goto   </  ascending abstract  + (  descending __arglist  + descending   @if   <?   @switch  + global @long  + @orderby   \u23DC\u6D71\u5070\u9350   ++  into _\u6105\uE331\u27D0   #  join [  + break   @extern   [   @char   <<  partial |  + remove + do   @else  + @typeof   @private  +  " is 325.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,FuzzTesting,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\FuzzTesting.cs,c02,The length of the statement  "            var test = @"internal int TYPES()        {             break  retVal =  @while ; __reftype             CLASS c = dynamic   descending  CLASS( % ; on             IF xx = module   _4䓞  |=              \u14DB\u0849   <![CDATA[  c =>  @default  $             retVal @assembly  += c void .Member &  -= ; @typeof  " is 306.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,FuzzTesting,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\FuzzTesting.cs,c03,The length of the statement  "            var test = @"/// </summary>        /// <returns></returns>         else  int OPERATOR @uint  $ )        { -              static ? operator  :: ]  @readonly  = @on   async  int? ' [ return ] { 1 ! '  @property  &  3 !   @case  %   partial   += ;/*[] bug*/ // YES []            int % ] endregion  var  =   ]]>   @for  |=   @struct ' 3' lock  4 @on  %  5 goto  } @stackalloc  } /*';*/            int %=  i = @fixed   ?> int << a base  <= 1] default ;  " is 447.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,FuzzTesting,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\FuzzTesting.cs,c04,The length of the statement  "            var test = @"/// </summary>        /// <returns></returns>        internal  do  OPERATOR || )        {            int?[] a = new int? \u14DB\u0849 [5] { 1' 2' 3' 4'  @using  } /= /*[] bug*/ // YES []            int[] var = { 1' 2' 3' 4' 5 } $ /*';*/            int i =  ; int)a[1];/*[]*/            i = i  <<=   @__arglist  - i @sbyte  *  @extern  / i % i ++   %  i  ||   @checked  ^ i;  " is 386.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,FuzzTesting,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\FuzzTesting.cs,c000138,The length of the statement  "            var test = @"int?[] ///  a   = new int? .  @string ] { 1'  typeof  $  3' 4' 5 } static ; @partial /*[] bug*/ // YES []            int[] var = { 1'  else ' 3 </  4 |  5 };/*';*/            int i = (int)a @in [ __refvalue ] [ /*[]*/             @readonly  = i + i - abstract   @typevar  * i /  @this  % i & '  i | i ^ unchecked  i; in /*+ - * / % & | ^*/            bool b = true & false +  | true ^ false readonly ;/*& | ^*/             @unsafe  = !b;/*!*/            i = ~i;/*~i*/            b = i < (i -  " is 505.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,FuzzTesting,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\FuzzTesting.cs,c000241,The length of the statement  "            var test = @"/// </summary>        /// <returns></returns>         const   by  TYPES ascending  / ) $         { @let             int @byte   @by   |  0  " is 151.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,FuzzTesting,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\FuzzTesting.cs,c024928,The length of the statement  "            var test = @"/// </summary>        /// <returns></returns>        internal int OPERATOR()        { //             int?[ *   @method   !  new int explicit  ' [  5 --  {  \uDD48\uEF5C ' 2'  @ascending ' @foreach   \uD17B\u21A8  .  5  ;  { /*[] bug*/ // YES []            int ::  (  <=  var  />  { @readonly  1 <!--  2 __makeref  ?  3 @descending ' 4 @float ' 5 } disable ;/*';*/            int -=   _\uAEC4   -  ( operator int <<= a =>  += ] @abstract ; property /*[]*/            i = i double  + i -  @async   -  i '   &  i  )  i &  @using   #   @byte   '   \u7EE1\u8B45 ;/*+ - * / % & | ^*/            bool b %=  = true  }   fixed  | class   join  ^ ?>   true ;/*& | ^*/            b  ^=  ! @null ;/*!*/             @stackalloc  = @in   ==  @default ;/*~i*/            b  \  i base  <  / i -  await ) && @into  ( new i pragma  + 1 @for ) > i _\uE02B\u7325 ; else /*< && >*/             continue   @double  = _Ƚ揞   in   ^  1 internal   ::  0;/*? :*/   // YES :            i++ ~ /*++*/             _\u560C\uF27E\uB73F -- @sizeof ;/*--*/            b @public  = /=   enum  && params  false  >>  true;/*&& ||*/            i @explicit   #   @byte   >>=   await ;/*<<*/             @sbyte  = @operator  i >> 5;/*>>*/            int  @from  = i;            b  >>   @protected  == )  j && assembly  i @const  != j ""   |=  i <=  @explicit  &&  @await  >=  @typeof ;/*= == && != <= >=*/            i @long   >>=  (int ]]>  &=  ( /*+=*/            i _Ƚ揞  -= i explicit  -> /*-=*/            i  {  i -= /**=*/            if ]  ( <<= i @assembly   )  0 .                  @select ++;  " is 1571.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,CSharpParseOptionsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\CSharpParseOptionsTests.cs,WithXxx,The length of the statement  "            TestProperty((old' value) => old.WithPreprocessorSymbols(value)' opt => opt.PreprocessorSymbols' ImmutableArray.Create<string>("A"' "B"' "C")); " is 143.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,CSharpParseOptionsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\CSharpParseOptionsTests.cs,WithXxx,The length of the statement  "            Assert.Throws<ArgumentOutOfRangeException>(() => CSharpParseOptions.Default.WithLanguageVersion((LanguageVersion)1000)); " is 120.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,CSharpParseOptionsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\CSharpParseOptionsTests.cs,WithXxx,The length of the statement  "            Assert.Equal(0' CSharpParseOptions.Default.WithPreprocessorSymbols(ImmutableArray.Create<string>("A"' "B")).WithPreprocessorSymbols(default(ImmutableArray<string>)).PreprocessorSymbols.Length); " is 193.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,CSharpParseOptionsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\CSharpParseOptionsTests.cs,WithXxx,The length of the statement  "            Assert.Equal(0' CSharpParseOptions.Default.WithPreprocessorSymbols(ImmutableArray.Create<string>("A"' "B")).WithPreprocessorSymbols((IEnumerable<string>)null).PreprocessorSymbols.Length); " is 187.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,CSharpParseOptionsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\CSharpParseOptionsTests.cs,WithXxx,The length of the statement  "            Assert.Equal(0' CSharpParseOptions.Default.WithPreprocessorSymbols(ImmutableArray.Create<string>("A"' "B")).WithPreprocessorSymbols((string[])null).PreprocessorSymbols.Length); " is 176.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,CSharpParseOptionsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\CSharpParseOptionsTests.cs,InvalidDefineSymbols,The length of the statement  "            Assert.Throws<ArgumentException>(() => new CSharpParseOptions(preprocessorSymbols: ImmutableArray.Create<string>(" "))); " is 120.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,CSharpParseOptionsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\CSharpParseOptionsTests.cs,InvalidDefineSymbols,The length of the statement  "            Assert.Throws<ArgumentException>(() => new CSharpParseOptions(preprocessorSymbols: ImmutableArray.Create<string>("Good"' "Bad.Symbol"))); " is 137.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,CSharpParseOptionsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\CSharpParseOptionsTests.cs,InvalidDefineSymbols,The length of the statement  "            Assert.Throws<ArgumentException>(() => new CSharpParseOptions(preprocessorSymbols: ImmutableArray.Create<string>("123"' "Good"))); " is 130.
Long Statement,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,CSharpParseOptionsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\CSharpParseOptionsTests.cs,InvalidDefineSymbols,The length of the statement  "            Assert.Throws<ArgumentException>(() => new CSharpParseOptions(preprocessorSymbols: ImmutableArray.Create<string>("Good"' null' @"Bad\Symbol"))); " is 144.
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,TestDiagnostic,The following statement contains a magic number: DiagnosticInfo di2 = new DiagnosticInfo(provider' 1002' "Elvis"' "Mort");
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,TestDiagnostic,The following statement contains a magic number: Assert.Equal(1002' di2.Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,TestDiagnostic,The following statement contains a magic number: Location l1 = new SourceLocation(syntaxTree' new TextSpan(5' 8));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,TestDiagnostic,The following statement contains a magic number: Location l1 = new SourceLocation(syntaxTree' new TextSpan(5' 8));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,TestDiagnostic,The following statement contains a magic number: Assert.Equal(new TextSpan(5' 8)' d1.Location.SourceSpan);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,TestDiagnostic,The following statement contains a magic number: Assert.Equal(new TextSpan(5' 8)' d1.Location.SourceSpan);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,TestCustomErrorInfo,The following statement contains a magic number: DiagnosticInfo di3 = new CustomErrorInfo(provider' "OtherSymbol"' new SourceLocation(syntaxTree' new TextSpan(14' 8)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,TestCustomErrorInfo,The following statement contains a magic number: DiagnosticInfo di3 = new CustomErrorInfo(provider' "OtherSymbol"' new SourceLocation(syntaxTree' new TextSpan(14' 8)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,TestCustomErrorInfo,The following statement contains a magic number: Assert.Equal(new TextSpan(14' 8)' d3.AdditionalLocations.First().SourceSpan);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,TestCustomErrorInfo,The following statement contains a magic number: Assert.Equal(new TextSpan(14' 8)' d3.AdditionalLocations.First().SourceSpan);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,ErrorApplyIndexingToMethod,The following statement contains a magic number: var comp = DiagnosticsUtils.VerifyErrorsAndGetCompilationWithMscorlib(text'                  new ErrorDescription { Code = (int)ErrorCode.ERR_BadIndexLHS' Line = 6' Column = 27 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,ErrorApplyIndexingToMethod,The following statement contains a magic number: var comp = DiagnosticsUtils.VerifyErrorsAndGetCompilationWithMscorlib(text'                  new ErrorDescription { Code = (int)ErrorCode.ERR_BadIndexLHS' Line = 6' Column = 27 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,ErrorApplyIndexingToMethod,The following statement contains a magic number: comp = DiagnosticsUtils.VerifyErrorsAndGetCompilationWithMscorlib(text'                  new ErrorDescription { Code = (int)ErrorCode.ERR_BadIndexLHS' Line = 10' Column = 34 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,ErrorApplyIndexingToMethod,The following statement contains a magic number: comp = DiagnosticsUtils.VerifyErrorsAndGetCompilationWithMscorlib(text'                  new ErrorDescription { Code = (int)ErrorCode.ERR_BadIndexLHS' Line = 10' Column = 34 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,WarningLevel_1,The following statement contains a magic number: i < 10000
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,WarningLevel_2,The following statement contains a magic number: Assert.Equal(2' ErrorFacts.GetWarningLevel(ErrorCode.WRN_DeprecatedCollectionInitAddStr));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,WarningLevel_2,The following statement contains a magic number: Assert.Equal(2' ErrorFacts.GetWarningLevel(ErrorCode.WRN_UnmatchedParamRefTag));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,WarningLevel_2,The following statement contains a magic number: Assert.Equal(2' ErrorFacts.GetWarningLevel(ErrorCode.WRN_UnmatchedTypeParamRefTag));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,WarningLevel_2,The following statement contains a magic number: Assert.Equal(2' ErrorFacts.GetWarningLevel(ErrorCode.WRN_DynamicDispatchToConditionalMethod));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,WarningLevel_2,The following statement contains a magic number: Assert.Equal(3' ErrorFacts.GetWarningLevel(ErrorCode.WRN_IsDynamicIsConfusing));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,WarningLevel_2,The following statement contains a magic number: Assert.Equal(2' ErrorFacts.GetWarningLevel(ErrorCode.WRN_NoSources));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,WarningLevel_2,The following statement contains a magic number: switch (errorCode)                      {                          case ErrorCode.WRN_MainIgnored:                              Assert.Equal(2' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_DelaySignButNoKey:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_InvalidVersionFormat:                              Assert.Equal(4' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_UnimplementedCommandLineSwitch:                          case ErrorCode.WRN_CallerFilePathPreferredOverCallerMemberName:                          case ErrorCode.WRN_CallerLineNumberPreferredOverCallerMemberName:                          case ErrorCode.WRN_CallerLineNumberPreferredOverCallerFilePath:                          case ErrorCode.WRN_AssemblyAttributeFromModuleIsOverridden:                          case ErrorCode.WRN_RefCultureMismatch:                          case ErrorCode.WRN_ConflictingMachineAssembly:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_NubExprIsConstBool2:                          case ErrorCode.WRN_UnqualifiedNestedTypeInCref:                          case ErrorCode.WRN_NoRuntimeMetadataVersion:                              Assert.Equal(2' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_FilterIsConstant:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_PdbLocalNameTooLong:                              Assert.Equal(3' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_AnalyzerCannotBeCreated:                          case ErrorCode.WRN_NoAnalyzerInAssembly:                          case ErrorCode.WRN_UnableToLoadAnalyzer:                          case ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName:                          case ErrorCode.WRN_AlignmentMagnitude:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          default:                              // If a new warning is added' this test will fail                              // and whoever is adding the new warning will have to update it with the expected error level.                              Assert.True(false' "Please update this test case with a proper warning level for '" + errorCodeName + "'");                              break;                      }
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,WarningLevel_2,The following statement contains a magic number: switch (errorCode)                      {                          case ErrorCode.WRN_MainIgnored:                              Assert.Equal(2' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_DelaySignButNoKey:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_InvalidVersionFormat:                              Assert.Equal(4' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_UnimplementedCommandLineSwitch:                          case ErrorCode.WRN_CallerFilePathPreferredOverCallerMemberName:                          case ErrorCode.WRN_CallerLineNumberPreferredOverCallerMemberName:                          case ErrorCode.WRN_CallerLineNumberPreferredOverCallerFilePath:                          case ErrorCode.WRN_AssemblyAttributeFromModuleIsOverridden:                          case ErrorCode.WRN_RefCultureMismatch:                          case ErrorCode.WRN_ConflictingMachineAssembly:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_NubExprIsConstBool2:                          case ErrorCode.WRN_UnqualifiedNestedTypeInCref:                          case ErrorCode.WRN_NoRuntimeMetadataVersion:                              Assert.Equal(2' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_FilterIsConstant:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_PdbLocalNameTooLong:                              Assert.Equal(3' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_AnalyzerCannotBeCreated:                          case ErrorCode.WRN_NoAnalyzerInAssembly:                          case ErrorCode.WRN_UnableToLoadAnalyzer:                          case ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName:                          case ErrorCode.WRN_AlignmentMagnitude:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          default:                              // If a new warning is added' this test will fail                              // and whoever is adding the new warning will have to update it with the expected error level.                              Assert.True(false' "Please update this test case with a proper warning level for '" + errorCodeName + "'");                              break;                      }
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,WarningLevel_2,The following statement contains a magic number: switch (errorCode)                      {                          case ErrorCode.WRN_MainIgnored:                              Assert.Equal(2' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_DelaySignButNoKey:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_InvalidVersionFormat:                              Assert.Equal(4' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_UnimplementedCommandLineSwitch:                          case ErrorCode.WRN_CallerFilePathPreferredOverCallerMemberName:                          case ErrorCode.WRN_CallerLineNumberPreferredOverCallerMemberName:                          case ErrorCode.WRN_CallerLineNumberPreferredOverCallerFilePath:                          case ErrorCode.WRN_AssemblyAttributeFromModuleIsOverridden:                          case ErrorCode.WRN_RefCultureMismatch:                          case ErrorCode.WRN_ConflictingMachineAssembly:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_NubExprIsConstBool2:                          case ErrorCode.WRN_UnqualifiedNestedTypeInCref:                          case ErrorCode.WRN_NoRuntimeMetadataVersion:                              Assert.Equal(2' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_FilterIsConstant:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_PdbLocalNameTooLong:                              Assert.Equal(3' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_AnalyzerCannotBeCreated:                          case ErrorCode.WRN_NoAnalyzerInAssembly:                          case ErrorCode.WRN_UnableToLoadAnalyzer:                          case ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName:                          case ErrorCode.WRN_AlignmentMagnitude:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          default:                              // If a new warning is added' this test will fail                              // and whoever is adding the new warning will have to update it with the expected error level.                              Assert.True(false' "Please update this test case with a proper warning level for '" + errorCodeName + "'");                              break;                      }
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,WarningLevel_2,The following statement contains a magic number: switch (errorCode)                      {                          case ErrorCode.WRN_MainIgnored:                              Assert.Equal(2' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_DelaySignButNoKey:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_InvalidVersionFormat:                              Assert.Equal(4' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_UnimplementedCommandLineSwitch:                          case ErrorCode.WRN_CallerFilePathPreferredOverCallerMemberName:                          case ErrorCode.WRN_CallerLineNumberPreferredOverCallerMemberName:                          case ErrorCode.WRN_CallerLineNumberPreferredOverCallerFilePath:                          case ErrorCode.WRN_AssemblyAttributeFromModuleIsOverridden:                          case ErrorCode.WRN_RefCultureMismatch:                          case ErrorCode.WRN_ConflictingMachineAssembly:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_NubExprIsConstBool2:                          case ErrorCode.WRN_UnqualifiedNestedTypeInCref:                          case ErrorCode.WRN_NoRuntimeMetadataVersion:                              Assert.Equal(2' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_FilterIsConstant:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_PdbLocalNameTooLong:                              Assert.Equal(3' ErrorFacts.GetWarningLevel(errorCode));                              break;                          case ErrorCode.WRN_AnalyzerCannotBeCreated:                          case ErrorCode.WRN_NoAnalyzerInAssembly:                          case ErrorCode.WRN_UnableToLoadAnalyzer:                          case ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName:                          case ErrorCode.WRN_AlignmentMagnitude:                              Assert.Equal(1' ErrorFacts.GetWarningLevel(errorCode));                              break;                          default:                              // If a new warning is added' this test will fail                              // and whoever is adding the new warning will have to update it with the expected error level.                              Assert.True(false' "Please update this test case with a proper warning level for '" + errorCodeName + "'");                              break;                      }
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,WarningLevel_2,The following statement contains a magic number: i < 9000
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,Warning_1,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(420)' ReportDiagnostic.Suppress);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,Warning_1,The following statement contains a magic number: warnings[MessageProvider.Instance.GetIdForErrorCode(420)] = ReportDiagnostic.Error;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,Warning_2,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Suppress);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,Warning_2,The following statement contains a magic number: warnings[MessageProvider.Instance.GetIdForErrorCode(168)] = ReportDiagnostic.Error;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,Warning_2,The following statement contains a magic number: option = commonoption.WithWarningLevel(3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,Warning_2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,Warning_2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithGeneralDiagnosticOption(ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,Warning_2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithSpecificDiagnosticOptions(warnings);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoErrorCodes1,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithGeneralDiagnosticOption(ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithSpecificDiagnosticOptions(warnings);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoErrorCodes2,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithGeneralDiagnosticOption(ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithSpecificDiagnosticOptions(warnings);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericErrorCodes1,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithGeneralDiagnosticOption(ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithSpecificDiagnosticOptions(warnings);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodes1,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithGeneralDiagnosticOption(ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithSpecificDiagnosticOptions(warnings);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericErrorCodes2,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithGeneralDiagnosticOption(ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithSpecificDiagnosticOptions(warnings);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodes2,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithGeneralDiagnosticOption(ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithSpecificDiagnosticOptions(warnings);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: option = commonoption.WithWarningLevel(3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithGeneralDiagnosticOption(ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesAreCaseSensitive,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithSpecificDiagnosticOptions(warnings);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true)'                  // (12'13): error CS0168: Warning as Error: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true)'                  // (12'13): error CS0168: Warning as Error: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true)'                  // (12'13): error CS0168: Warning as Error: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true)'                  // (12'13): error CS0168: Warning as Error: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true)'                  // (12'13): error CS0168: Warning as Error: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true)'                  // (12'13): error CS0168: Warning as Error: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true)'                  // (12'13): error CS0168: Warning as Error: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true)'                  // (12'13): error CS0168: Warning as Error: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: option = commonoption.WithWarningLevel(3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13)'                  // (12'13): warning CS0168: The variable 'w' is declared but never used                  //         int w;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "w").WithArguments("w").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithGeneralDiagnosticOption(ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithSpecificDiagnosticOptions(warnings);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13).WithWarningAsError(true)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): error CS0168: Warning as Error: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13).WithWarningAsError(true));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: option = commonoption.WithWarningLevel(3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(7' 13)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (10'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(10' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithGeneralDiagnosticOption(ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_IdentifierErrorCodesMustMatchExactly2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithSpecificDiagnosticOptions(warnings);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BlockScopeIsNotSignificant1,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BlockScopeIsNotSignificant1,The following statement contains a magic number: option = commonoption.WithWarningLevel(3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BlockScopeIsNotSignificant1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BlockScopeIsNotSignificant1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithGeneralDiagnosticOption(ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BlockScopeIsNotSignificant1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithSpecificDiagnosticOptions(warnings);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BlockScopeIsNotSignificant2,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BlockScopeIsNotSignificant2,The following statement contains a magic number: option = commonoption.WithWarningLevel(3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BlockScopeIsNotSignificant2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BlockScopeIsNotSignificant2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithGeneralDiagnosticOption(ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BlockScopeIsNotSignificant2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithSpecificDiagnosticOptions(warnings);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericAndIdentifierErrorCodes1,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericAndIdentifierErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericAndIdentifierErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericAndIdentifierErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithGeneralDiagnosticOption(ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericAndIdentifierErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithSpecificDiagnosticOptions(warnings);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericAndIdentifierErrorCodes2,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericAndIdentifierErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericAndIdentifierErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericAndIdentifierErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithGeneralDiagnosticOption(ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericAndIdentifierErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithSpecificDiagnosticOptions(warnings);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericAndIdentifierErrorCodes3,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericAndIdentifierErrorCodes3,The following statement contains a magic number: option = commonoption.WithWarningLevel(3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericAndIdentifierErrorCodes3,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericAndIdentifierErrorCodes3,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithGeneralDiagnosticOption(ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NumericAndIdentifierErrorCodes3,The following statement contains a magic number: option = commonoption.WithWarningLevel(2).WithSpecificDiagnosticOptions(warnings);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BadSyntax1,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BadSyntax1,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(1633)' ReportDiagnostic.Suppress);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BadSyntax1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BadSyntax2,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BadSyntax2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BadSyntax3,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_BadSyntax3,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoValidationForErrorCodes1,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoValidationForErrorCodes1,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoValidationForErrorCodes2,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoValidationForErrorCodes2,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoValidationForErrorCodes3,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_NoValidationForErrorCodes3,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_OnlyRestoreWithoutDisableIsNoOp,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_OnlyRestoreWithoutDisableIsNoOp,The following statement contains a magic number: warnings[MessageProvider.Instance.GetIdForErrorCode(168)] = ReportDiagnostic.Suppress;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_OnlyRestoreWithoutDisableIsNoOp,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_StringLiteralsAreNotAllowed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable "CS0168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' @"""CS0168").WithLocation(7' 25)'                  // (8'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x")'                  // (9'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y"));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_StringLiteralsAreNotAllowed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable "CS0168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' @"""CS0168").WithLocation(7' 25)'                  // (8'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x")'                  // (9'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y"));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_StringLiteralsAreNotAllowed,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_StringLiteralsAreNotAllowed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable "CS0168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' @"""CS0168").WithLocation(7' 25)'                  // (8'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithWarningAsError(true)'                  // (9'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y"));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_StringLiteralsAreNotAllowed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable "CS0168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' @"""CS0168").WithLocation(7' 25)'                  // (8'13): error CS0168: Warning as Error: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithWarningAsError(true)'                  // (9'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y"));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_StringLiteralsAreNotAllowed,The following statement contains a magic number: warnings[MessageProvider.Instance.GetIdForErrorCode(168)] = ReportDiagnostic.Suppress;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_StringLiteralsAreNotAllowed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable "CS0168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' @"""CS0168").WithLocation(7' 25)'                  // (9'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y"));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_StringLiteralsAreNotAllowed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable "CS0168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' @"""CS0168").WithLocation(7' 25)'                  // (9'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y"));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_StringLiteralsAreNotAllowed,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_StringLiteralsAreNotAllowed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable "CS0168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' @"""CS0168").WithLocation(7' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_StringLiteralsAreNotAllowed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: option).VerifyDiagnostics(                  // (7'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable "CS0168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' @"""CS0168").WithLocation(7' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_MostKeywordsAreAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (12'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(14' 13)'                  // (13'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(15' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_MostKeywordsAreAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (12'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(14' 13)'                  // (13'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(15' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_MostKeywordsAreAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (12'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(14' 13)'                  // (13'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(15' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_MostKeywordsAreAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (12'13): warning CS0168: The variable 'x' is declared but never used                  //         int x;      // CS0168                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "x").WithArguments("x").WithLocation(14' 13)'                  // (13'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(15' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_SomeKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "true").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define default                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "default").WithLocation(3' 9)'                  // (4'9): error CS1001: Identifier expected                  // #define hidden                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "hidden").WithLocation(4' 9)'                  // (5'9): error CS1001: Identifier expected                  // #define disable                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "disable").WithLocation(5' 9)'                  // (6'9): error CS1001: Identifier expected                  // #define checksum                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "checksum").WithLocation(6' 9)'                  // (7'9): error CS1001: Identifier expected                  // #define restore                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "restore").WithLocation(7' 9)'                  // (8'9): error CS1001: Identifier expected                  // #define false                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "false").WithLocation(8' 9)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "true").WithLocation(13' 25)'                  // (14'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable default                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "default").WithLocation(14' 25)'                  // (15'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable hidden                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "hidden").WithLocation(15' 25)'                  // (16'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable disable                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "disable").WithLocation(16' 25)'                  // (17'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore checksum                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "checksum").WithLocation(17' 25)'                  // (18'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore restore                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "restore").WithLocation(18' 25)'                  // (19'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore false                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "false").WithLocation(19' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_VeryLongIdentifiersAreAllowed,The following statement contains a magic number: Assert.Equal(128' defineName.ValueText.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_VeryLongIdentifiersAreAllowed,The following statement contains a magic number: Assert.Equal(2335' defineName.Text.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_VeryLongIdentifiersAreAllowed,The following statement contains a magic number: Assert.Equal(2335' errorCodeName.ValueText.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_VeryLongIdentifiersAreAllowed,The following statement contains a magic number: Assert.Equal(2335' errorCodeName.Text.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_EscapedKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define @true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define @class                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(3' 9)'                  // (8'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable @true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(8' 25)'                  // (9'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore @class                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(9' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_EscapedKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define @true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define @class                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(3' 9)'                  // (8'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable @true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(8' 25)'                  // (9'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore @class                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(9' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_EscapedKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define @true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define @class                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(3' 9)'                  // (8'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable @true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(8' 25)'                  // (9'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore @class                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(9' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_EscapedKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define @true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define @class                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(3' 9)'                  // (8'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable @true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(8' 25)'                  // (9'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore @class                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(9' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_EscapedKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define @true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define @class                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(3' 9)'                  // (8'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable @true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(8' 25)'                  // (9'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore @class                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(9' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_EscapedKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define @true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define @class                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(3' 9)'                  // (8'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable @true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(8' 25)'                  // (9'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore @class                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(9' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_EscapedKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define @true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define @class                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(3' 9)'                  // (8'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable @true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(8' 25)'                  // (9'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore @class                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(9' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_EscapedKeywordsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (2'9): error CS1001: Identifier expected                  // #define @true                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(2' 9)'                  // (3'9): error CS1001: Identifier expected                  // #define @class                  Diagnostic(ErrorCode.ERR_IdentifierExpected' "@").WithLocation(3' 9)'                  // (8'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable @true                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(8' 25)'                  // (9'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore @class                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(9' 25));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ExpressionsAreNotAllowedAsErrorCodes,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (6'32): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning disable CS0168 + CS0219                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "+").WithLocation(6' 32)'                  // (9'31): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore CS0168.Empty                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(9' 31)'                  // (11'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable (CS0168)                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "(").WithLocation(11' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore -168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "-").WithLocation(13' 25)'                  // (14'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168.1                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' ".").WithLocation(14' 28)'                  // (15'28): warning CS1696: Single-line comment or end-of-line expected                  // #pragma warning restore 168L                  Diagnostic(ErrorCode.WRN_EndOfPPLineExpected' "L").WithLocation(15' 28)'                  // (8'13): warning CS0219: The variable 'y' is assigned but its value is never used                  //         int y = 0;  // CS0219                  Diagnostic(ErrorCode.WRN_UnreferencedVarAssg' "y").WithArguments("y").WithLocation(8' 13)'                  // (12'13): warning CS0168: The variable 'z' is declared but never used                  //         int z;                  Diagnostic(ErrorCode.WRN_UnreferencedVar' "z").WithArguments("z").WithLocation(12' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_WarningsForBadPragmaSyntaxCanBeSuppressed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (12'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable @class                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(12' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore "CS0168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' @"""CS0168").WithLocation(13' 25)'                  // (14'17): warning CS1634: Expected disable or restore                  // #pragma warning blah                  Diagnostic(ErrorCode.WRN_IllegalPPWarning' "blah").WithLocation(14' 17));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_WarningsForBadPragmaSyntaxCanBeSuppressed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (12'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable @class                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(12' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore "CS0168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' @"""CS0168").WithLocation(13' 25)'                  // (14'17): warning CS1634: Expected disable or restore                  // #pragma warning blah                  Diagnostic(ErrorCode.WRN_IllegalPPWarning' "blah").WithLocation(14' 17));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_WarningsForBadPragmaSyntaxCanBeSuppressed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (12'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable @class                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(12' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore "CS0168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' @"""CS0168").WithLocation(13' 25)'                  // (14'17): warning CS1634: Expected disable or restore                  // #pragma warning blah                  Diagnostic(ErrorCode.WRN_IllegalPPWarning' "blah").WithLocation(14' 17));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_WarningsForBadPragmaSyntaxCanBeSuppressed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (12'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable @class                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(12' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore "CS0168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' @"""CS0168").WithLocation(13' 25)'                  // (14'17): warning CS1634: Expected disable or restore                  // #pragma warning blah                  Diagnostic(ErrorCode.WRN_IllegalPPWarning' "blah").WithLocation(14' 17));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_WarningsForBadPragmaSyntaxCanBeSuppressed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (12'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable @class                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(12' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore "CS0168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' @"""CS0168").WithLocation(13' 25)'                  // (14'17): warning CS1634: Expected disable or restore                  // #pragma warning blah                  Diagnostic(ErrorCode.WRN_IllegalPPWarning' "blah").WithLocation(14' 17));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_WarningsForBadPragmaSyntaxCanBeSuppressed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (12'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning disable @class                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' "@").WithLocation(12' 25)'                  // (13'25): warning CS1072: Expected identifier or numeric literal.                  // #pragma warning restore "CS0168                  Diagnostic(ErrorCode.WRN_IdentifierOrNumericLiteralExpected' @"""CS0168").WithLocation(13' 25)'                  // (14'17): warning CS1634: Expected disable or restore                  // #pragma warning blah                  Diagnostic(ErrorCode.WRN_IllegalPPWarning' "blah").WithLocation(14' 17));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ErrorsCantBeSuppressed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'17): error CS0029: Cannot implicitly convert type 'string' to 'int'                  //         int x = string.Empty;                  Diagnostic(ErrorCode.ERR_NoImplicitConv' "string.Empty").WithArguments("string"' "int").WithLocation(7' 17)'                  // (10'17): error CS0029: Cannot implicitly convert type 'string' to 'int'                  //         int y = string.Empty;                  Diagnostic(ErrorCode.ERR_NoImplicitConv' "string.Empty").WithArguments("string"' "int").WithLocation(10' 17));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ErrorsCantBeSuppressed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'17): error CS0029: Cannot implicitly convert type 'string' to 'int'                  //         int x = string.Empty;                  Diagnostic(ErrorCode.ERR_NoImplicitConv' "string.Empty").WithArguments("string"' "int").WithLocation(7' 17)'                  // (10'17): error CS0029: Cannot implicitly convert type 'string' to 'int'                  //         int y = string.Empty;                  Diagnostic(ErrorCode.ERR_NoImplicitConv' "string.Empty").WithArguments("string"' "int").WithLocation(10' 17));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ErrorsCantBeSuppressed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'17): error CS0029: Cannot implicitly convert type 'string' to 'int'                  //         int x = string.Empty;                  Diagnostic(ErrorCode.ERR_NoImplicitConv' "string.Empty").WithArguments("string"' "int").WithLocation(7' 17)'                  // (10'17): error CS0029: Cannot implicitly convert type 'string' to 'int'                  //         int y = string.Empty;                  Diagnostic(ErrorCode.ERR_NoImplicitConv' "string.Empty").WithArguments("string"' "int").WithLocation(10' 17));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_ErrorsCantBeSuppressed,The following statement contains a magic number: CreateCompilationWithMscorlib(text' options: commonoption).VerifyDiagnostics(                  // (7'17): error CS0029: Cannot implicitly convert type 'string' to 'int'                  //         int x = string.Empty;                  Diagnostic(ErrorCode.ERR_NoImplicitConv' "string.Empty").WithArguments("string"' "int").WithLocation(7' 17)'                  // (10'17): error CS0029: Cannot implicitly convert type 'string' to 'int'                  //         int y = string.Empty;                  Diagnostic(ErrorCode.ERR_NoImplicitConv' "string.Empty").WithArguments("string"' "int").WithLocation(10' 17));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_MissingErrorCodes,The following statement contains a magic number: warnings.Add(MessageProvider.Instance.GetIdForErrorCode(168)' ReportDiagnostic.Error);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_MissingErrorCodes,The following statement contains a magic number: warnings[MessageProvider.Instance.GetIdForErrorCode(168)] = ReportDiagnostic.Suppress;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarning_MissingErrorCodes,The following statement contains a magic number: option = commonoption.WithWarningLevel(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The following statement contains a magic number: Assert.Equal(ReportDiagnostic.Default' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "public class").Start));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The following statement contains a magic number: Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "public static").Start));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The following statement contains a magic number: Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(219)' GetSpanIn(syntaxTree' "public static").Start));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The following statement contains a magic number: Assert.Equal(ReportDiagnostic.Default' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "int x").Start));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The following statement contains a magic number: Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(219)' GetSpanIn(syntaxTree' "int x").Start));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The following statement contains a magic number: Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "int y").Start));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The following statement contains a magic number: Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(219)' GetSpanIn(syntaxTree' "int y").Start));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The following statement contains a magic number: Assert.Equal(ReportDiagnostic.Default' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "int z").Start));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMap,The following statement contains a magic number: Assert.Equal(ReportDiagnostic.Default' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(219)' GetSpanIn(syntaxTree' "int z").Start));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMapWithIfDirective,The following statement contains a magic number: Assert.Equal(ReportDiagnostic.Default' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "static void").Start));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMapWithIfDirective,The following statement contains a magic number: Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "var x").Start));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMapWithIfDirective,The following statement contains a magic number: Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(219)' GetSpanIn(syntaxTree' "var y").Start));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DiagnosticTest,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,PragmaWarningDirectiveMapAtTheFirstLine,The following statement contains a magic number: Assert.Equal(ReportDiagnostic.Suppress' syntaxTree.GetPragmaDirectiveWarningState(MessageProvider.Instance.GetIdForErrorCode(168)' GetSpanIn(syntaxTree' "static void").Start));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,MockMessageProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,GetSeverity,The following statement contains a magic number: code >= 1000
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,MockMessageProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,LoadMessage,The following statement contains a magic number: switch (code)                  {                      case 1:                          return "The first error";                      case 2:                          return "The second error is associated with symbol {0}";                      case 1001:                          return "The first warning";                      case 1002:                          return "The second warning about {0} and {1}";                      default:                          return null;                  }
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,MockMessageProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,LoadMessage,The following statement contains a magic number: switch (code)                  {                      case 1:                          return "The first error";                      case 2:                          return "The second error is associated with symbol {0}";                      case 1001:                          return "The first warning";                      case 1002:                          return "The second warning about {0} and {1}";                      default:                          return null;                  }
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,MockMessageProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,LoadMessage,The following statement contains a magic number: switch (code)                  {                      case 1:                          return "The first error";                      case 2:                          return "The second error is associated with symbol {0}";                      case 1001:                          return "The first warning";                      case 1002:                          return "The second warning about {0} and {1}";                      default:                          return null;                  }
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,MockMessageProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,GetWarningLevel,The following statement contains a magic number: return code % 4 + 1;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,MockMessageProvider,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\DiagnosticTest.cs,GetWarningLevel,The following statement contains a magic number: code >= 1000
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestGetSourceLocationInFile,The following statement contains a magic number: TextSpan xSpan = new TextSpan(sampleProgram.IndexOf("x;")' 2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestGetSourceLocationInFile,The following statement contains a magic number: Assert.Equal(2' flpsX.StartLinePosition.Line);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestGetSourceLocationInFile,The following statement contains a magic number: Assert.Equal(4' flpsX.StartLinePosition.Character);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestGetSourceLocationInFile,The following statement contains a magic number: Assert.Equal(2' flpsX.EndLinePosition.Line);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestGetSourceLocationInFile,The following statement contains a magic number: Assert.Equal(6' flpsX.EndLinePosition.Character);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestGetSourceLocationInFile,The following statement contains a magic number: Assert.Equal(19' flpsX.StartLinePosition.Line);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestGetSourceLocationInFile,The following statement contains a magic number: Assert.Equal(4' flpsX.StartLinePosition.Character);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestGetSourceLocationInFile,The following statement contains a magic number: Assert.Equal(19' flpsX.EndLinePosition.Line);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestGetSourceLocationInFile,The following statement contains a magic number: Assert.Equal(6' flpsX.EndLinePosition.Character);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestGetSourceLocationInFile,The following statement contains a magic number: Assert.Equal(2' flpsXToCloseBrace.StartLinePosition.Line);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestGetSourceLocationInFile,The following statement contains a magic number: Assert.Equal(4' flpsXToCloseBrace.StartLinePosition.Character);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestGetSourceLocationInFile,The following statement contains a magic number: Assert.Equal(3' flpsXToCloseBrace.EndLinePosition.Line);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestGetSourceLocationInFile,The following statement contains a magic number: Assert.Equal(19' flpsXToCloseBrace.StartLinePosition.Line);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestGetSourceLocationInFile,The following statement contains a magic number: Assert.Equal(4' flpsXToCloseBrace.StartLinePosition.Character);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestGetSourceLocationInFile,The following statement contains a magic number: Assert.Equal(20' flpsXToCloseBrace.EndLinePosition.Line);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "ing Sy"' "foo.cs"' 0' 2' 0' 8' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "ing Sy"' "foo.cs"' 0' 2' 0' 8' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "class X"' "foo.cs"' 1' 0' 1' 7' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "System;\r\nclass X"' "foo.cs"' 0' 6' 1' 7' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "System;\r\nclass X"' "foo.cs"' 0' 6' 1' 7' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "x;"' "banana.cs"' 19' 4' 19' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "x;"' "banana.cs"' 19' 4' 19' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "x;"' "banana.cs"' 19' 4' 19' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "x;"' "banana.cs"' 19' 4' 19' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "y;"' "banana.cs"' 20' 4' 20' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "y;"' "banana.cs"' 20' 4' 20' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "y;"' "banana.cs"' 20' 4' 20' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "y;"' "banana.cs"' 20' 4' 20' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "z;"' "banana.cs"' 43' 4' 43' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "z;"' "banana.cs"' 43' 4' 43' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "z;"' "banana.cs"' 43' 4' 43' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "z;"' "banana.cs"' 43' 4' 43' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "w;"' "foo.cs"' 8' 4' 8' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "w;"' "foo.cs"' 8' 4' 8' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "w;"' "foo.cs"' 8' 4' 8' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "w;"' "foo.cs"' 8' 4' 8' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "q;\r\nin"' "foo.cs"' 10' 4' 11' 2' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "q;\r\nin"' "foo.cs"' 10' 4' 11' 2' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "q;\r\nin"' "foo.cs"' 10' 4' 11' 2' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "q;\r\nin"' "foo.cs"' 10' 4' 11' 2' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "a;"' "foo.cs"' 15' 4' 15' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "a;"' "foo.cs"' 15' 4' 15' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "a;"' "foo.cs"' 15' 4' 15' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping1,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "a;"' "foo.cs"' 15' 4' 15' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping2,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int x;"' "c:\\foo.cs"' 19' 0' 19' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping2,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int x;"' "c:\\foo.cs"' 19' 0' 19' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping2,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int x;"' "c:\\foo.cs"' 19' 0' 19' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping2,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int y;"' "c:\\foo.cs"' 21' 0' 21' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping2,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int y;"' "c:\\foo.cs"' 21' 0' 21' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping2,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int y;"' "c:\\foo.cs"' 21' 0' 21' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping2,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int z;"' "baz"' 29' 0' 29' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping2,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int z;"' "baz"' 29' 0' 29' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping2,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int z;"' "baz"' 29' 0' 29' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping2,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int w;"' "baz"' 31' 0' 31' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping2,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int w;"' "baz"' 31' 0' 31' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping2,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int w;"' "baz"' 31' 0' 31' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping2,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int v;"' "baz"' 39' 0' 39' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping2,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int v;"' "baz"' 39' 0' 39' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping2,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int v;"' "baz"' 39' 0' 39' 6' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping_NoSyntaxTreePath,The following statement contains a magic number: AssertMappedSpanEqual(SyntaxFactory.ParseSyntaxTree(sampleProgram' path: "")' "class X {}"' ""' 19' 0' 19' 10' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping_NoSyntaxTreePath,The following statement contains a magic number: AssertMappedSpanEqual(SyntaxFactory.ParseSyntaxTree(sampleProgram' path: "")' "class X {}"' ""' 19' 0' 19' 10' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping_NoSyntaxTreePath,The following statement contains a magic number: AssertMappedSpanEqual(SyntaxFactory.ParseSyntaxTree(sampleProgram' path: "")' "class X {}"' ""' 19' 0' 19' 10' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping_NoSyntaxTreePath,The following statement contains a magic number: AssertMappedSpanEqual(SyntaxFactory.ParseSyntaxTree(sampleProgram' path: "   ")' "class X {}"' "   "' 19' 0' 19' 10' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping_NoSyntaxTreePath,The following statement contains a magic number: AssertMappedSpanEqual(SyntaxFactory.ParseSyntaxTree(sampleProgram' path: "   ")' "class X {}"' "   "' 19' 0' 19' 10' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMapping_NoSyntaxTreePath,The following statement contains a magic number: AssertMappedSpanEqual(SyntaxFactory.ParseSyntaxTree(sampleProgram' path: "   ")' "class X {}"' "   "' 19' 0' 19' 10' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestInvalidLineMapping,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int q"' "filename.cs"' 2' 4' 2' 9' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestInvalidLineMapping,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int q"' "filename.cs"' 2' 4' 2' 9' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestInvalidLineMapping,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int q"' "filename.cs"' 2' 4' 2' 9' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestInvalidLineMapping,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int q"' "filename.cs"' 2' 4' 2' 9' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestInvalidLineMapping,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int r"' "filename.cs"' 4' 4' 4' 9' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestInvalidLineMapping,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int r"' "filename.cs"' 4' 4' 4' 9' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestInvalidLineMapping,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int r"' "filename.cs"' 4' 4' 4' 9' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestInvalidLineMapping,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int r"' "filename.cs"' 4' 4' 4' 9' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestInvalidLineMapping,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int s"' "seconddirective"' 19' 4' 19' 9' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestInvalidLineMapping,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int s"' "seconddirective"' 19' 4' 19' 9' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestInvalidLineMapping,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int s"' "seconddirective"' 19' 4' 19' 9' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestInvalidLineMapping,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "int s"' "seconddirective"' 19' 4' 19' 9' hasMappedPath: true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMappingNoDirectives,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "ing Sy"' "c:\\foo.cs"' 0' 2' 0' 8' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMappingNoDirectives,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "ing Sy"' "c:\\foo.cs"' 0' 2' 0' 8' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMappingNoDirectives,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "class X"' "c:\\foo.cs"' 1' 0' 1' 7' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMappingNoDirectives,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "System;\r\nclass X"' "c:\\foo.cs"' 0' 6' 1' 7' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMappingNoDirectives,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "System;\r\nclass X"' "c:\\foo.cs"' 0' 6' 1' 7' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMappingNoDirectives,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "x;"' "c:\\foo.cs"' 2' 4' 2' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMappingNoDirectives,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "x;"' "c:\\foo.cs"' 2' 4' 2' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMappingNoDirectives,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "x;"' "c:\\foo.cs"' 2' 4' 2' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMappingNoDirectives,The following statement contains a magic number: AssertMappedSpanEqual(syntaxTree' "x;"' "c:\\foo.cs"' 2' 4' 2' 6' hasMappedPath: false);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestMissingTokenAtEndOfLine,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 13)' new LinePosition(8' 13)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestMissingTokenAtEndOfLine,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 13)' new LinePosition(8' 13)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestMissingTokenAtEndOfLine,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 13)' new LinePosition(8' 13)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestMissingTokenAtEndOfLine,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 13)' new LinePosition(8' 13)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestMissingTokenAtEndOfLine,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 13)' new LinePosition(8' 13)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestMissingTokenAtEndOfLine,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 13)' new LinePosition(8' 13)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestMissingTokenAtEndOfLine,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 13)' new LinePosition(8' 13)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestMissingTokenAtEndOfLine,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 13)' new LinePosition(8' 13)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestMissingTokenAtEndOfLine,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 13)' new LinePosition(8' 13)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestMissingTokenAtEndOfLine,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 13)' new LinePosition(8' 13)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestMissingTokenAtEndOfLine,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 13)' new LinePosition(8' 13)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestMissingTokenAtEndOfLine,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 13)' new LinePosition(8' 13)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestDiagnosticSpanForIdentifierExpectedError,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 15)' new LinePosition(8' 19)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestDiagnosticSpanForIdentifierExpectedError,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 15)' new LinePosition(8' 19)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestDiagnosticSpanForIdentifierExpectedError,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 15)' new LinePosition(8' 19)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestDiagnosticSpanForIdentifierExpectedError,The following statement contains a magic number: Assert.Equal(flps' new FileLinePositionSpan("c:\\foo.cs"' new LinePosition(8' 15)' new LinePosition(8' 19)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMappingForErrors,The following statement contains a magic number: var span = syntaxTree.GetDiagnostics().ElementAt(3).Location.GetLineSpan();
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMappingForErrors,The following statement contains a magic number: Assert.Equal(span' new FileLinePositionSpan(""' new LinePosition(1' 9)' new LinePosition(1' 9)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestLineMappingForErrors,The following statement contains a magic number: Assert.Equal(span' new FileLinePositionSpan(""' new LinePosition(1' 9)' new LinePosition(1' 9)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestEqualSourceLocations,The following statement contains a magic number: SourceLocation loc1 = new SourceLocation(syntaxTree' new TextSpan(3' 4));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestEqualSourceLocations,The following statement contains a magic number: SourceLocation loc1 = new SourceLocation(syntaxTree' new TextSpan(3' 4));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestEqualSourceLocations,The following statement contains a magic number: SourceLocation loc2 = new SourceLocation(syntaxTree' new TextSpan(3' 4));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestEqualSourceLocations,The following statement contains a magic number: SourceLocation loc2 = new SourceLocation(syntaxTree' new TextSpan(3' 4));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestEqualSourceLocations,The following statement contains a magic number: SourceLocation loc3 = new SourceLocation(syntaxTree' new TextSpan(3' 7));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestEqualSourceLocations,The following statement contains a magic number: SourceLocation loc3 = new SourceLocation(syntaxTree' new TextSpan(3' 7));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestEqualSourceLocations,The following statement contains a magic number: SourceLocation loc4 = new SourceLocation(tree2' new TextSpan(3' 4));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestEqualSourceLocations,The following statement contains a magic number: SourceLocation loc4 = new SourceLocation(tree2' new TextSpan(3' 4));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestSourceLocationToString,The following statement contains a magic number: TextSpan span1 = new TextSpan(sampleProgram.IndexOf("i;")' 2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestSourceLocationToString,The following statement contains a magic number: TextSpan span2 = new TextSpan(sampleProgram.IndexOf("c;")' 2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestExternalLocationFormatting,The following statement contains a magic number: Location location = Location.Create("test.txt"' new TextSpan()' new LinePositionSpan(new LinePosition(2' 1)' new LinePosition(3' 1)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestExternalLocationFormatting,The following statement contains a magic number: Location location = Location.Create("test.txt"' new TextSpan()' new LinePositionSpan(new LinePosition(2' 1)' new LinePosition(3' 1)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestDiagnosticsLocationsExistInsideTreeSpan,The following statement contains a magic number: var nodeWithBadError = node.Green.WithDiagnosticsGreen(new DiagnosticInfo[] { new SyntaxDiagnosticInfo(10' 10' ErrorCode.ERR_AbstractAndExtern) }).CreateRed();
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestDiagnosticsLocationsExistInsideTreeSpan,The following statement contains a magic number: var nodeWithBadError = node.Green.WithDiagnosticsGreen(new DiagnosticInfo[] { new SyntaxDiagnosticInfo(10' 10' ErrorCode.ERR_AbstractAndExtern) }).CreateRed();
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestDiagnosticsLocationsExistInsideTreeSpan,The following statement contains a magic number: Assert.Equal(5' treeSpan.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestDiagnosticsLocationsExistInsideTreeSpan,The following statement contains a magic number: Assert.Equal(5' diagnostics[0].Location.SourceSpan.Start);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestDiagnosticsLocationsExistInsideTreeSpan,The following statement contains a magic number: Assert.Equal(5' lineSpan.StartLinePosition.Character);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestDiagnosticsLocationsExistInsideTreeSpan,The following statement contains a magic number: Assert.Equal(5' lineSpan.EndLinePosition.Character);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestDiagnosticsLocationsExistInsideTreeSpan_ZeroWidthTree,The following statement contains a magic number: var nodeWithBadError = SyntaxFactory.IdentifierName(new SyntaxToken(node.Node.WithDiagnosticsGreen(new DiagnosticInfo[] { new SyntaxDiagnosticInfo(10' 10' ErrorCode.ERR_AbstractAndExtern) })));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LocationsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Diagnostics\LocationsTests.cs,TestDiagnosticsLocationsExistInsideTreeSpan_ZeroWidthTree,The following statement contains a magic number: var nodeWithBadError = SyntaxFactory.IdentifierName(new SyntaxToken(node.Node.WithDiagnosticsGreen(new DiagnosticInfo[] { new SyntaxDiagnosticInfo(10' 10' ErrorCode.ERR_AbstractAndExtern) })));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,TestRemoveEndRegionDirective,The following statement contains a magic number: Assert.Equal(4' oldDirectives.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,TestRemoveEndRegionDirective,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndRegionDirectiveTrivia' oldDirectives[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,TestRemoveEndRegionDirective,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndIfDirectiveTrivia' oldDirectives[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,TestRemoveEndRegionDirective,The following statement contains a magic number: Assert.Equal(2' errors.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,TestRemoveEndRegionDirective,The following statement contains a magic number: Assert.Equal(3' newDirectives.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,TestRemoveEndRegionDirective,The following statement contains a magic number: Assert.Equal(SyntaxKind.BadDirectiveTrivia' newDirectives[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,TestAddEndRegionDirective,The following statement contains a magic number: Assert.Equal(2' errors.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,TestAddEndRegionDirective,The following statement contains a magic number: Assert.Equal(3' oldDirectives.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,TestAddEndRegionDirective,The following statement contains a magic number: Assert.Equal(SyntaxKind.BadDirectiveTrivia' oldDirectives[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,TestAddEndRegionDirective,The following statement contains a magic number: Assert.Equal(4' newDirectives.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,TestAddEndRegionDirective,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndRegionDirectiveTrivia' newDirectives[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,TestAddEndRegionDirective,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndIfDirectiveTrivia' newDirectives[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,Bug896262,The following statement contains a magic number: var newText = text.WithChanges(new TextChange(new TextSpan(0' 8)' ""));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,RemovePartialFromClassWithCorrectSpan,The following statement contains a magic number: var newText = text.WithChanges(new TextChange(new TextSpan(0' 8)' ""));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentOutClassKeyword,The following statement contains a magic number: int locationOfChange = 0' widthOfChange = 5;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentOutOpeningCurlyOnPrivateDeclaration,The following statement contains a magic number: int locationOfChange = 42' widthOfChange = 1;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentOutBracesOnMethodDeclaration,The following statement contains a magic number: int locationOfChange = 139' widthOfChange = 2;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentOutBracesOnMethodDeclaration,The following statement contains a magic number: int locationOfChange = 139' widthOfChange = 2;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentOutEventKeyword,The following statement contains a magic number: int locationOfChange = 20' widthOfChange = 6;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentOutEventKeyword,The following statement contains a magic number: int locationOfChange = 20' widthOfChange = 6;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentOutEventAccessor,The following statement contains a magic number: int locationOfChange = 43' widthOfChange = 3;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentOutEventAccessor,The following statement contains a magic number: int locationOfChange = 43' widthOfChange = 3;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentOutDotInUsingAlias,The following statement contains a magic number: int locationOfChange = 12' widthOfChange = 1;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentOutThisInIndexer,The following statement contains a magic number: int locationOfChange = 26' widthOfChange = 4;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentOutThisInIndexer,The following statement contains a magic number: int locationOfChange = 26' widthOfChange = 4;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentOutReturnStatementInProperty,The following statement contains a magic number: int locationOfChange = 51' widthOfChange = 7;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentOutReturnStatementInProperty,The following statement contains a magic number: int locationOfChange = 51' widthOfChange = 7;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CodeWithDollarSign,The following statement contains a magic number: int locationOfChange = 0' widthOfChange = 5;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentCodeInGOTOStatement,The following statement contains a magic number: int locationOfChange = oldText.ToString().IndexOf("ON")' widthOfChange = 2;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentConstInConstDeclError,The following statement contains a magic number: int locationOfChange = oldText.ToString().IndexOf("const")' widthOfChange = 5;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentClassWithDelegateDecl,The following statement contains a magic number: int locationOfChange = oldText.ToString().IndexOf("class")' widthOfChange = 5;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentCloseBraceInPropertyDecl,The following statement contains a magic number: int locationOfChange = oldText.ToString().IndexOf("}")' widthOfChange = 5;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentFixedInIllegalArrayDecl,The following statement contains a magic number: int locationOfChange = oldText.ToString().IndexOf("fixed")' widthOfChange = 5;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,CommentGlobalUsedAsAlias,The following statement contains a magic number: int locationOfChange = oldText.ToString().IndexOf("@global")' widthOfChange = 7;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,IncrementalParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\IncrementalParsingTests.cs,IncrementalParseTopDownCommentOutLines,The following statement contains a magic number: currLen += item.Length + 3;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalErrorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalErrorTests.cs,TestEndIfExpectedOnEOF,The following statement contains a magic number: ParserErrorMessageTests.ParseAndValidate(test'  Diagnostic(ErrorCode.ERR_EndifDirectiveExpected' "").WithLocation(3' 11));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalErrorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalErrorTests.cs,TestEndIfExpectedOnEOF,The following statement contains a magic number: ParserErrorMessageTests.ParseAndValidate(test'  Diagnostic(ErrorCode.ERR_EndifDirectiveExpected' "").WithLocation(3' 11));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalErrorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalErrorTests.cs,TestEndIfExpectedOnEndRegion,The following statement contains a magic number: ParserErrorMessageTests.ParseAndValidate(test'  Diagnostic(ErrorCode.ERR_EndifDirectiveExpected' "#endregion").WithLocation(5' 1)'  Diagnostic(ErrorCode.ERR_EndifDirectiveExpected' "").WithLocation(6' 1));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalErrorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalErrorTests.cs,TestEndIfExpectedOnEndRegion,The following statement contains a magic number: ParserErrorMessageTests.ParseAndValidate(test'  Diagnostic(ErrorCode.ERR_EndifDirectiveExpected' "#endregion").WithLocation(5' 1)'  Diagnostic(ErrorCode.ERR_EndifDirectiveExpected' "").WithLocation(6' 1));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestMixedUnicodeEscapeIdentifier,The following statement contains a magic number: Assert.Equal(3' ((string)token.ValueText).Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestMultiUnicodeEscapeIdentifier,The following statement contains a magic number: Assert.Equal(4' ((string)token.ValueText).Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNonLatinIdentifier,The following statement contains a magic number: Assert.Equal(3' ((string)token.ValueText).Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestCharacterLiteralThatsTooSmallWithNewline,The following statement contains a magic number: Assert.Equal(2' errors.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestCharacterLiteralThatsTooBigWithNewline,The following statement contains a magic number: Assert.Equal(2' errors.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteral,The following statement contains a magic number: var value = 123;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithDecimal,The following statement contains a magic number: var value = 123.456;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithHugeDecimal,The following statement contains a magic number: var value = 123.45632434234234234234234234324234234234;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithHugeNumberAndDecimal,The following statement contains a magic number: var value = 12332434234234234234234234324234234234.456;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithHugeNumberAndHugeDecimal,The following statement contains a magic number: var value = 12332434234234234234234234324234234234.45623423423423423423423423423423423423;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralStartsWithDecimal,The following statement contains a magic number: var value = .456;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralStartsWithDecimalAndExponent,The following statement contains a magic number: var value = .456e10;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithFloatSpecifer,The following statement contains a magic number: var value = 123f;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithUpperFloatSpecifer,The following statement contains a magic number: var value = 123F;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithDecimalAndFloatSpecifer,The following statement contains a magic number: var value = 123.456f;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithDecimalAndExponentAndFloatSpecifer,The following statement contains a magic number: var value = 123.456e10f;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithDoubleSpecifer,The following statement contains a magic number: var value = 123d;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithUpperDoubleSpecifer,The following statement contains a magic number: var value = 123D;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithDecimalAndDoubleSpecifer,The following statement contains a magic number: var value = 123.456d;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithDecimalAndExponentAndDoubleSpecifer,The following statement contains a magic number: var value = 123.456e10d;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithDecimalSpecifer,The following statement contains a magic number: var value = 123m;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithDecimalPointAndDecimalSpecifer,The following statement contains a magic number: var value = 123.456m;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithDecimalPointAndExponentAndDecimalSpecifer,The following statement contains a magic number: var value = 123.456e2m;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithUnsignedSpecifier,The following statement contains a magic number: var value = 123u;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithUpperUnsignedSpecifier,The following statement contains a magic number: var value = 123U;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithLongSpecifier,The following statement contains a magic number: var value = 123L;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithUpperLongSpecifier,The following statement contains a magic number: var value = 123L;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithUnsignedAndLongSpecifier,The following statement contains a magic number: var value = 123ul;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithUpperUnsignedAndLongSpecifier,The following statement contains a magic number: var value = 123Ul;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithUnsignedAndUpperLongSpecifier,The following statement contains a magic number: var value = 123uL;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericLiteralWithUpperUnsignedAndUpperLongSpecifier,The following statement contains a magic number: var value = 123UL;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericWithTrailingDot,The following statement contains a magic number: var value = 3;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericFloatWithLeadingDecimalPoint,The following statement contains a magic number: var value = .3;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericExponentWithoutDecimalPoint,The following statement contains a magic number: var value = 3e1;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestNumericExponentWithNegative,The following statement contains a magic number: var value = 3e-1;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestDottedNameSequence,The following statement contains a magic number: Assert.Equal(6' results.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,LexicalTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\LexicalTests.cs,TestDebuggerAliasIdentifiers,The following statement contains a magic number: Assert.Equal(123L' token.Value);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,VerifyDirectivesSpecial,The following statement contains a magic number: switch (exp.Kind)                  {                      case SyntaxKind.DefineDirectiveTrivia:                          if (null != exp.Text)                          {                              Assert.Equal(exp.Text' ((DefineDirectiveTriviaSyntax)dt).Name.ValueText); // Text                          }                            break;                      case SyntaxKind.LineDirectiveTrivia:                          var ld = dt as LineDirectiveTriviaSyntax;                            // default number = 0 - no number                          if (exp.Number == -1)                          {                              Assert.Equal(SyntaxKind.LineKeyword' ld.LineKeyword.Kind());                              Assert.Equal(SyntaxKind.DefaultKeyword' ld.Line.Kind());                          }                          else if (exp.Number == -2)                          {                              Assert.Equal(SyntaxKind.LineKeyword' ld.LineKeyword.Kind());                              Assert.Equal(SyntaxKind.HiddenKeyword' ld.Line.Kind());                          }                          else if (exp.Number == 0)                          {                              Assert.Equal(String.Empty' ld.Line.Text);                          }                          else if (exp.Number > 0)                          {                              Assert.Equal(exp.Number' ld.Line.Value); // Number                              Assert.Equal(exp.Number' Int32.Parse(ld.Line.Text));                          }                            if (null == exp.Text)                          {                              Assert.Equal(SyntaxKind.None' ld.File.Kind());                          }                          else                          {                              Assert.NotEqual(SyntaxKind.None' ld.File.Kind());                              Assert.Equal(exp.Text' ld.File.Value);                          }                            break;                  }
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestLine,The following statement contains a magic number: VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 1000 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestLineAndFile,The following statement contains a magic number: VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 1000' Text = "bogus.cs" });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestLineHidden,The following statement contains a magic number: VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = -2 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegLineHiddenWithFile,The following statement contains a magic number: VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = -2 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestLineHiddenWithComment,The following statement contains a magic number: VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = -2 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegMoreLineNumThenPDBCanHandle,The following statement contains a magic number: VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 16707566' Text = "XYZ" });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegLineWithExtraTokens,The following statement contains a magic number: VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 1000 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestLineWithComment,The following statement contains a magic number: VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 1000 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestNegLineWithFileAndExtraTokens,The following statement contains a magic number: VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 1000' Text = "bogus.cs" });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestLineWithFileAndComment,The following statement contains a magic number: VerifyDirectivesSpecial(node' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 12345' Text = "bogus.cs" });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestRegressNegLineWithErrorMessage,The following statement contains a magic number: VerifyDirectivesSpecial(tree.GetCompilationUnitRoot()' new DirectiveInfo { Kind = SyntaxKind.LineDirectiveTrivia' Status = NodeStatus.IsActive' Number = 100' Text = "test.cs" });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestRegressNegLineWithErrorMessage,The following statement contains a magic number: Assert.Equal(99' lineSpan.StartLinePosition.Line);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,TestRegressPragmaWarningDisableWithWarningCode,The following statement contains a magic number: Assert.Equal(440' diagnostic.Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributes,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestFourOrMoreSlashesInsideXmlCommentIsNotXmlComment,The following statement contains a magic number: Assert.Equal(3' leading.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributesPrecedingClass,The following statement contains a magic number: Assert.Equal(3' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributesPrecedingClass,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlText' doc.Content[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributesDelimited,The following statement contains a magic number: Assert.Equal(3' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributesDelimited,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlText' doc.Content[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributesDelimitedPrecedingClass,The following statement contains a magic number: Assert.Equal(2' leading.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributesDelimitedPrecedingClass,The following statement contains a magic number: Assert.Equal(3' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributesDelimitedPrecedingClass,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlText' doc.Content[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributes,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributesSingleQuoted,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributesNestedQuote,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributesNestedQuoteSingleQuoted,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributesMultipleLines,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributesMultipleLinesPrecedingClass,The following statement contains a magic number: Assert.Equal(3' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributesMultipleLinesPrecedingClass,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlText' doc.Content[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributesMultipleLinesDelimited,The following statement contains a magic number: Assert.Equal(3' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributesMultipleLinesDelimited,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlText' doc.Content[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributesMultipleLinesDelimitedPrecedingClass,The following statement contains a magic number: Assert.Equal(2' leading.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributesMultipleLinesDelimitedPrecedingClass,The following statement contains a magic number: Assert.Equal(3' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementNoAttributesMultipleLinesDelimitedPrecedingClass,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlText' doc.Content[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributesDoubleQuoteMultipleLines,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributesQuoteMultipleLines,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributesQuoteMultipleLinesDelimited,The following statement contains a magic number: Assert.Equal(3' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributesQuoteMultipleLinesDelimited,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlText' doc.Content[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributesDoubleQuoteMultipleLinesDelimited,The following statement contains a magic number: Assert.Equal(3' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributesDoubleQuoteMultipleLinesDelimited,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlText' doc.Content[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributeQuoteAndAttributeTextOnMultipleLines,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributeDoubleQuoteAndAttributeTextOnMultipleLines,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributeDoubleQuoteAndAttributeTextOnMultipleLinesDelimited,The following statement contains a magic number: Assert.Equal(3' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributeDoubleQuoteAndAttributeTextOnMultipleLinesDelimited,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlText' doc.Content[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributeQuoteAndAttributeTextOnMultipleLinesDelimited,The following statement contains a magic number: Assert.Equal(3' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEmptyElementWithAttributeQuoteAndAttributeTextOnMultipleLinesDelimited,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlText' doc.Content[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestElementDotInName,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestElementColonInName,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestElementDashInName,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestElementNumberInName,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestNonEmptyElementNoAttributes,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestNonEmptyElementNoAttributes,The following statement contains a magic number: Assert.Equal(4' textsyntax.ChildNodesAndTokens().Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestNonEmptyElementNoAttributes,The following statement contains a magic number: Assert.Equal("\r\n"' textsyntax.ChildNodesAndTokens()[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestNonEmptyElementNoAttributes,The following statement contains a magic number: Assert.Equal(" "' textsyntax.ChildNodesAndTokens()[3].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestNonEmptyElementNoAttributesDelimited,The following statement contains a magic number: Assert.Equal(3' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestNonEmptyElementNoAttributesDelimited,The following statement contains a magic number: Assert.Equal(4' textsyntax.ChildNodesAndTokens().Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestNonEmptyElementNoAttributesDelimited,The following statement contains a magic number: Assert.Equal("\r\n"' textsyntax.ChildNodesAndTokens()[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestNonEmptyElementNoAttributesDelimited,The following statement contains a magic number: Assert.Equal(" "' textsyntax.ChildNodesAndTokens()[3].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCDataSection,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCDataSection,The following statement contains a magic number: Assert.Equal(5' cdata.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCDataSection,The following statement contains a magic number: Assert.Equal(" of &some; cdata /// */ /**"' cdata.TextTokens[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCDataSection,The following statement contains a magic number: Assert.Equal("\r\n"' cdata.TextTokens[3].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCDataSection,The following statement contains a magic number: Assert.Equal(" \"']]<>/></text"' cdata.TextTokens[4].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCDataSectionDelimited,The following statement contains a magic number: Assert.Equal(3' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCDataSectionDelimited,The following statement contains a magic number: Assert.Equal(5' cdata.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCDataSectionDelimited,The following statement contains a magic number: Assert.Equal(" of &some; cdata"' cdata.TextTokens[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCDataSectionDelimited,The following statement contains a magic number: Assert.Equal("\r\n"' cdata.TextTokens[3].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCDataSectionDelimited,The following statement contains a magic number: Assert.Equal(" \"']]<>/></text"' cdata.TextTokens[4].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCDataSectionDelimited,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlText' doc.Content[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestIncompleteEOFCDataSection,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestIncompleteEOLCDataSection,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestIncompleteEOLCDataSection,The following statement contains a magic number: Assert.Equal(2' cdata.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestIncompleteEOLCDataSection_OtherNewline,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestIncompleteEOLCDataSection_OtherNewline,The following statement contains a magic number: Assert.Equal(2' cdata.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestIncompleteDelimitedCDataSection,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestComment,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestComment,The following statement contains a magic number: Assert.Equal(5' comment.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestComment,The following statement contains a magic number: Assert.Equal(" of &some; comment"' comment.TextTokens[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestComment,The following statement contains a magic number: Assert.Equal("\r\n"' comment.TextTokens[3].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestComment,The following statement contains a magic number: Assert.Equal(" \"']]<>/></text"' comment.TextTokens[4].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCommentDelimited,The following statement contains a magic number: Assert.Equal(3' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCommentDelimited,The following statement contains a magic number: Assert.Equal(5' comment.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCommentDelimited,The following statement contains a magic number: Assert.Equal(" of &some; comment"' comment.TextTokens[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCommentDelimited,The following statement contains a magic number: Assert.Equal("\r\n"' comment.TextTokens[3].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCommentDelimited,The following statement contains a magic number: Assert.Equal(" \"']]<>/></text"' comment.TextTokens[4].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCommentDelimited,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlText' doc.Content[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestIncompleteEOFComment,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestIncompleteEOLComment,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestIncompleteEOLComment,The following statement contains a magic number: Assert.Equal(2' comment.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestIncompleteDelimitedComment,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestProcessingInstruction,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestProcessingInstruction,The following statement contains a magic number: Assert.Equal(5' ProcessingInstruction.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestProcessingInstruction,The following statement contains a magic number: Assert.Equal(" of &a; ProcessingInstruction /// */ /**"' ProcessingInstruction.TextTokens[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestProcessingInstruction,The following statement contains a magic number: Assert.Equal("\r\n"' ProcessingInstruction.TextTokens[3].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestProcessingInstruction,The following statement contains a magic number: Assert.Equal(" \"']]>/>?</text"' ProcessingInstruction.TextTokens[4].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestProcessingInstructionDelimited,The following statement contains a magic number: Assert.Equal(3' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestProcessingInstructionDelimited,The following statement contains a magic number: Assert.Equal(5' ProcessingInstruction.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestProcessingInstructionDelimited,The following statement contains a magic number: Assert.Equal(" of &a; ProcessingInstruction"' ProcessingInstruction.TextTokens[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestProcessingInstructionDelimited,The following statement contains a magic number: Assert.Equal("\r\n"' ProcessingInstruction.TextTokens[3].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestProcessingInstructionDelimited,The following statement contains a magic number: Assert.Equal(" \"']]>/></text>]]>"' ProcessingInstruction.TextTokens[4].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestProcessingInstructionDelimited,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlText' doc.Content[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestIncompleteEOFProcessingInstruction,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestIncompleteEOLProcessingInstruction_OtherNewline,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestIncompleteEOLProcessingInstruction_OtherNewline,The following statement contains a magic number: Assert.Equal(2' ProcessingInstruction.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestIncompleteDelimitedProcessingInstruction,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestEarlyTerminationOfXmlParse,The following statement contains a magic number: Assert.Equal(2' tree.GetCompilationUnitRoot().ChildNodesAndTokens().Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestPredefinedXmlEntity,The following statement contains a magic number: Assert.Equal(2' xmltext.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestPredefinedXmlEntityDelimited,The following statement contains a magic number: Assert.Equal(3' xmltext.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestPredefinedXmlEntityDelimited,The following statement contains a magic number: Assert.Equal(" "' xmltext.TextTokens[2].Value);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestHexCharacterXmlEntity,The following statement contains a magic number: Assert.Equal(2' xmltext.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestHexCharacterXmlEntityDelimited,The following statement contains a magic number: Assert.Equal(3' xmltext.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestHexCharacterXmlEntityDelimited,The following statement contains a magic number: Assert.Equal(" "' xmltext.TextTokens[2].Value);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestDecCharacterXmlEntity,The following statement contains a magic number: Assert.Equal(2' xmltext.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestDecCharacterXmlEntityDelimited,The following statement contains a magic number: Assert.Equal(3' xmltext.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestDecCharacterXmlEntityDelimited,The following statement contains a magic number: Assert.Equal(" "' xmltext.TextTokens[2].Value);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestLargeHexCharacterXmlEntity,The following statement contains a magic number: Assert.Equal(2' xmltext.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestLargeHexCharacterXmlEntityDelimited,The following statement contains a magic number: Assert.Equal(3' xmltext.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestLargeHexCharacterXmlEntityDelimited,The following statement contains a magic number: Assert.Equal(" "' xmltext.TextTokens[2].Value);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestPredefinedXmlEntityInAttribute,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestPredefinedXmlEntityInAttribute,The following statement contains a magic number: Assert.Equal(3' attribute.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestPredefinedXmlEntityInAttribute,The following statement contains a magic number: Assert.Equal(" "' attribute.TextTokens[2].Value);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestPredefinedXmlEntityInAttributeDelimited,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestPredefinedXmlEntityInAttributeDelimited,The following statement contains a magic number: Assert.Equal(3' attribute.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestPredefinedXmlEntityInAttributeDelimited,The following statement contains a magic number: Assert.Equal(" "' attribute.TextTokens[2].Value);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestLessThanInAttributeTextIsError,The following statement contains a magic number: Assert.Equal(2' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestNoZeroWidthTrivia,The following statement contains a magic number: Assert.Equal(3' xmltext.ChildNodesAndTokens().Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestNoZeroWidthTrivia,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlTextLiteralNewLineToken' xmltext.ChildNodesAndTokens()[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestNoZeroWidthTrivia,The following statement contains a magic number: Assert.False(xmltext.ChildNodesAndTokens()[2].HasLeadingTrivia);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestNoZeroWidthTrivia,The following statement contains a magic number: Assert.Equal("\r\n"' xmltext.ChildNodesAndTokens()[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestXmlAttributeWithoutEqualSign,The following statement contains a magic number: VerifyDiagnostics(tree.GetCompilationUnitRoot()' new List<TestError>() { new TestError(1570' true) });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestXmlAttributeWithoutWhitespaceSeparators,The following statement contains a magic number: VerifyDiagnostics(tree.GetCompilationUnitRoot()' new List<TestError>() { new TestError(1570' true) });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBetweenRegularComments,The following statement contains a magic number: Assert.Equal(5' trivias.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBetweenRegularComments,The following statement contains a magic number: Assert.False(trivias[4].HasStructure);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBetweenRegularComments,The following statement contains a magic number: Assert.True(trivias[2].HasStructure);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBetweenRegularComments,The following statement contains a magic number: Assert.Equal(typeof(DocumentationCommentTriviaSyntax)' trivias[2].GetStructure().GetType());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBetweenRegularComments,The following statement contains a magic number: var doc = trivias[2].GetStructure() as DocumentationCommentTriviaSyntax;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentAfterMultilineXmlComment,The following statement contains a magic number: Assert.Equal(4' trivias.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentAfterMultilineXmlComment,The following statement contains a magic number: Assert.Equal(typeof(DocumentationCommentTriviaSyntax)' trivias[3].GetStructure().GetType());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentAfterMultilineXmlComment,The following statement contains a magic number: var secondComment = trivias[3].GetStructure() as DocumentationCommentTriviaSyntax;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentAfterInvalidMultilineXmlComment,The following statement contains a magic number: Assert.Equal(4' trivias.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentAfterInvalidMultilineXmlComment,The following statement contains a magic number: Assert.Equal(typeof(DocumentationCommentTriviaSyntax)' trivias[3].GetStructure().GetType());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentAfterInvalidMultilineXmlComment,The following statement contains a magic number: var secondComment = trivias[3].GetStructure() as DocumentationCommentTriviaSyntax;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeMethodDecl,The following statement contains a magic number: Assert.Equal(2' trivias.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeGenericMethodDecl,The following statement contains a magic number: Assert.Equal(2' trivias.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforePropertyDecl,The following statement contains a magic number: Assert.Equal(2' trivias.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeIndexerDecl,The following statement contains a magic number: Assert.Equal(2' trivias.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforeIncompleteGenericMethodDecl,The following statement contains a magic number: Assert.Equal(2' trivias.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentBeforePreprocessorDirective,The following statement contains a magic number: Assert.Equal(3' trivias.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentAfterPreprocessorDirective,The following statement contains a magic number: Assert.Equal(3' trivias.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentAfterPreprocessorDirective,The following statement contains a magic number: Assert.Equal(typeof(DocumentationCommentTriviaSyntax)' trivias[2].GetStructure().GetType());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentAfterPreprocessorDirective,The following statement contains a magic number: var firstComment = trivias[2].GetStructure() as DocumentationCommentTriviaSyntax;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestIncompleteMultiLineXmlComment,The following statement contains a magic number: VerifyDiagnostics(tree.GetCompilationUnitRoot()' new List<TestError>() { new TestError(1035' false) });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentWithMismatchedUpperLowerCaseTagName,The following statement contains a magic number: VerifyDiagnostics(trivias[0]' new List<TestError>() { new TestError(1570' true) });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentWithMissingStartTag,The following statement contains a magic number: VerifyDiagnostics(xmlText' new List<TestError>() { new TestError(1570' true) });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentWithMissingStartTag,The following statement contains a magic number: Assert.Equal(2' xmlText.TextTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestMultiLineXmlCommentWithMissingStartTag,The following statement contains a magic number: VerifyDiagnostics(xmlText' new List<TestError>() { new TestError(1570' true) });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestMultiLineXmlCommentWithInterleavedTags,The following statement contains a magic number: Assert.Equal(2' tree.GetCompilationUnitRoot().ErrorsAndWarnings().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestMultiLineXmlCommentWithInterleavedTags,The following statement contains a magic number: VerifyDiagnostics(doc' new List<TestError>() { new TestError(1570' true)' new TestError(1570' true) });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestMultiLineXmlCommentWithInterleavedTags,The following statement contains a magic number: VerifyDiagnostics(doc' new List<TestError>() { new TestError(1570' true)' new TestError(1570' true) });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentWithInterleavedTags,The following statement contains a magic number: Assert.Equal(2' tree.GetCompilationUnitRoot().Warnings().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentWithInterleavedTags,The following statement contains a magic number: VerifyDiagnostics(doc' new List<TestError>() { new TestError(1570' true)' new TestError(1570' true) });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSingleLineXmlCommentWithInterleavedTags,The following statement contains a magic number: VerifyDiagnostics(doc' new List<TestError>() { new TestError(1570' true)' new TestError(1570' true) });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestMultiLineXmlCommentWithMultipleStartTokens,The following statement contains a magic number: Assert.Equal(2' tree.GetCompilationUnitRoot().Warnings().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestMultiLineXmlCommentWithMultipleEndTags2,The following statement contains a magic number: Assert.Equal(2' tree.GetCompilationUnitRoot().Warnings().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSomeBadXmlEntities,The following statement contains a magic number: Assert.Equal(4' tree.GetCompilationUnitRoot().ErrorsAndWarnings().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSomeBadXmlEntities,The following statement contains a magic number: VerifyDiagnostics(tree.GetCompilationUnitRoot()' new List<TestError>              {                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)              });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSomeBadXmlEntities,The following statement contains a magic number: VerifyDiagnostics(tree.GetCompilationUnitRoot()' new List<TestError>              {                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)              });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSomeBadXmlEntities,The following statement contains a magic number: VerifyDiagnostics(tree.GetCompilationUnitRoot()' new List<TestError>              {                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)              });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSomeBadXmlEntities,The following statement contains a magic number: VerifyDiagnostics(tree.GetCompilationUnitRoot()' new List<TestError>              {                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)              });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSomeBadWhitespaceInTags,The following statement contains a magic number: Assert.Equal(4' tree.GetCompilationUnitRoot().ErrorsAndWarnings().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSomeBadWhitespaceInTags,The following statement contains a magic number: VerifyDiagnostics(tree.GetCompilationUnitRoot()' new List<TestError>              {                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)              });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSomeBadWhitespaceInTags,The following statement contains a magic number: VerifyDiagnostics(tree.GetCompilationUnitRoot()' new List<TestError>              {                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)              });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSomeBadWhitespaceInTags,The following statement contains a magic number: VerifyDiagnostics(tree.GetCompilationUnitRoot()' new List<TestError>              {                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)              });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestSomeBadWhitespaceInTags,The following statement contains a magic number: VerifyDiagnostics(tree.GetCompilationUnitRoot()' new List<TestError>              {                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)'                      new TestError(1570' true)              });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCDataEndTagInXmlText,The following statement contains a magic number: Assert.Equal(2' doc.ErrorsAndWarnings().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCDataEndTagInXmlText,The following statement contains a magic number: VerifyDiagnostics(doc' new List<TestError>() { new TestError(1570' true)' new TestError(1570' true) });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,TestCDataEndTagInXmlText,The following statement contains a magic number: VerifyDiagnostics(doc' new List<TestError>() { new TestError(1570' true)' new TestError(1570' true) });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,AttributesInEndTag,The following statement contains a magic number: Assert.Equal(3' doc.Content.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,XmlDocCommentTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\XmlDocCommentTests.cs,AttributesInEndTag,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlText' doc.Content[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestGlobalAttributeWithMultipleArguments,The following statement contains a magic number: Assert.Equal(2' ad.Attributes[0].ArgumentList.Arguments.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestGlobalAttributeWithMultipleAttributes,The following statement contains a magic number: Assert.Equal(2' ad.Attributes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestMultipleGlobalAttributeDeclarations,The following statement contains a magic number: Assert.Equal(2' file.AttributeLists.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassWithMultipleAttributes,The following statement contains a magic number: Assert.Equal(2' cs.AttributeLists.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassWithMultipleBases,The following statement contains a magic number: Assert.Equal(2' cs.BaseList.Types.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassWithMultipleConstraintBounds,The following statement contains a magic number: Assert.Equal(3' cs.ConstraintClauses[0].Constraints.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassWithMultipleConstraintBounds,The following statement contains a magic number: Assert.Equal(SyntaxKind.ConstructorConstraint' cs.ConstraintClauses[0].Constraints[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassWithMultipleConstraintBounds,The following statement contains a magic number: var bound = (ConstructorConstraintSyntax)cs.ConstraintClauses[0].Constraints[2];
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassWithMultipleConstraints,The following statement contains a magic number: Assert.Equal(2' cs.ConstraintClauses.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassWithMultipleConstraints001,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassWithMultipleConstraints001,The following statement contains a magic number: Assert.Equal(2' cs.ConstraintClauses.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassWithMultipleConstraints002,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassWithMultipleConstraints002,The following statement contains a magic number: Assert.Equal(2' cs.ConstraintClauses.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassWithMultipleBasesAndConstraints,The following statement contains a magic number: Assert.Equal(2' cs.BaseList.Types.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassWithMultipleBasesAndConstraints,The following statement contains a magic number: Assert.Equal(3' cs.ConstraintClauses[0].Constraints.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassWithMultipleBasesAndConstraints,The following statement contains a magic number: Assert.Equal(SyntaxKind.ConstructorConstraint' cs.ConstraintClauses[0].Constraints[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassWithMultipleBasesAndConstraints,The following statement contains a magic number: var bound = (ConstructorConstraintSyntax)cs.ConstraintClauses[0].Constraints[2];
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestNestedProtectedInternalClass,The following statement contains a magic number: Assert.Equal(2' cs.Modifiers.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestNestedInternalProtectedClass,The following statement contains a magic number: Assert.Equal(2' cs.Modifiers.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestDelegateWithMultipleParameters,The following statement contains a magic number: Assert.Equal(2' ds.ParameterList.Parameters.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassMethodWithMulipleParameters,The following statement contains a magic number: Assert.Equal(2' ms.ParameterList.Parameters.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassFieldWithMultipleVariables,The following statement contains a magic number: Assert.Equal(3' fs.Declaration.Variables.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassFieldWithMultipleVariables,The following statement contains a magic number: Assert.NotNull(fs.Declaration.Variables[2].Identifier);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassFieldWithMultipleVariables,The following statement contains a magic number: Assert.Equal("e"' fs.Declaration.Variables[2].Identifier.ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassFieldWithMultipleVariables,The following statement contains a magic number: Assert.Null(fs.Declaration.Variables[2].ArgumentList);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassFieldWithMultipleVariables,The following statement contains a magic number: Assert.Null(fs.Declaration.Variables[2].Initializer);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassFieldWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.Equal(3' fs.Declaration.Variables.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassFieldWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.NotNull(fs.Declaration.Variables[2].Identifier);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassFieldWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.Equal("e"' fs.Declaration.Variables[2].Identifier.ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassFieldWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.Null(fs.Declaration.Variables[2].ArgumentList);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassFieldWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.NotNull(fs.Declaration.Variables[2].Initializer);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassFieldWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.NotNull(fs.Declaration.Variables[2].Initializer.EqualsToken);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassFieldWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.NotNull(fs.Declaration.Variables[2].Initializer.Value);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassFieldWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.Equal("z"' fs.Declaration.Variables[2].Initializer.Value.ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassProperty,The following statement contains a magic number: Assert.Equal(2' ps.AccessorList.Accessors.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassPropertyWithBuiltInType,The following statement contains a magic number: Assert.Equal(2' ps.AccessorList.Accessors.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassPropertyWithBodies,The following statement contains a magic number: Assert.Equal(2' ps.AccessorList.Accessors.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassAutoPropertyWithInitializer,The following statement contains a magic number: Assert.Equal(2' ps.AccessorList.Accessors.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassPropertyWithModifier,The following statement contains a magic number: Assert.Equal(2' ps.AccessorList.Accessors.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassPropertyExplicit,The following statement contains a magic number: Assert.Equal(2' ps.AccessorList.Accessors.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassEventProperty,The following statement contains a magic number: Assert.Equal(2' es.AccessorList.Accessors.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassEventPropertyWithModifier,The following statement contains a magic number: Assert.Equal(2' es.AccessorList.Accessors.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassEventPropertyExplicit,The following statement contains a magic number: Assert.Equal(2' es.AccessorList.Accessors.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassIndexer,The following statement contains a magic number: Assert.Equal(2' ps.AccessorList.Accessors.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassIndexerWithMultipleParameters,The following statement contains a magic number: Assert.Equal(2' ps.ParameterList.Parameters.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassIndexerWithMultipleParameters,The following statement contains a magic number: Assert.Equal(2' ps.AccessorList.Accessors.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassIndexerExplicit,The following statement contains a magic number: Assert.Equal(2' ps.AccessorList.Accessors.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassBinaryOperatorMethod,The following statement contains a magic number: Assert.Equal(2' ps.ParameterList.Parameters.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,DeclarationParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\DeclarationParsingTests.cs,TestClassRightShiftOperatorMethod,The following statement contains a magic number: Assert.Equal(2' ps.ParameterList.Parameters.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ExpressionParsingTexts,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ExpressionParsingTests.cs,TestNewWithNoArgumentsAndInitializers,The following statement contains a magic number: Assert.Equal(3' oc.Initializer.Expressions.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ExpressionParsingTexts,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ExpressionParsingTests.cs,TestNewWithNoArgumentsAndInitializers,The following statement contains a magic number: Assert.Equal("d"' oc.Initializer.Expressions[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ExpressionParsingTexts,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ExpressionParsingTests.cs,TestNewArrayWithInitializers,The following statement contains a magic number: Assert.Equal(3' ac.Initializer.Expressions.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ExpressionParsingTexts,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ExpressionParsingTests.cs,TestNewArrayWithInitializers,The following statement contains a magic number: Assert.Equal("d"' ac.Initializer.Expressions[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ExpressionParsingTexts,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ExpressionParsingTests.cs,TestAnonymousObjectCreation,The following statement contains a magic number: Assert.Equal(2' ac.Initializers.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ExpressionParsingTexts,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ExpressionParsingTests.cs,TestLambdaWithTwoParameters,The following statement contains a magic number: Assert.Equal(2' lambda.ParameterList.Parameters.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ExpressionParsingTexts,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ExpressionParsingTests.cs,TestFromOrderBy2Select,The following statement contains a magic number: Assert.Equal(2' obs.Orderings.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_StaticPartial,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1585' Line = 4' Column = 1 } //static must precede type                             );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_StaticPartial,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1585' Line = 4' Column = 1 } //static must precede type                             );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,CS1002ERR_SemicolonExpected,The following statement contains a magic number: ParseAndValidate(test' TestOptions.Interactive'                  new ErrorDescription[] {                      new ErrorDescription { Code = 1002' Line = 2' Column = 6 }'                      new ErrorDescription { Code = 1002' Line = 3' Column = 12 }});
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,CS1002ERR_SemicolonExpected,The following statement contains a magic number: ParseAndValidate(test' TestOptions.Interactive'                  new ErrorDescription[] {                      new ErrorDescription { Code = 1002' Line = 2' Column = 6 }'                      new ErrorDescription { Code = 1002' Line = 3' Column = 12 }});
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,CS1002ERR_SemicolonExpected,The following statement contains a magic number: ParseAndValidate(test' TestOptions.Interactive'                  new ErrorDescription[] {                      new ErrorDescription { Code = 1002' Line = 2' Column = 6 }'                      new ErrorDescription { Code = 1002' Line = 3' Column = 12 }});
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,CS1002ERR_SemicolonExpected,The following statement contains a magic number: ParseAndValidate(test' TestOptions.Interactive'                  new ErrorDescription[] {                      new ErrorDescription { Code = 1002' Line = 2' Column = 6 }'                      new ErrorDescription { Code = 1002' Line = 3' Column = 12 }});
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,CS1002ERR_SemicolonExpected,The following statement contains a magic number: ParseAndValidate(test' TestOptions.Interactive'                  new ErrorDescription[] {                      new ErrorDescription { Code = 1002' Line = 2' Column = 6 }'                      new ErrorDescription { Code = 1002' Line = 3' Column = 12 }});
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,CS1002ERR_SemicolonExpected,The following statement contains a magic number: ParseAndValidate(test' TestOptions.Interactive'                  new ErrorDescription[] {                      new ErrorDescription { Code = 1002' Line = 2' Column = 6 }'                      new ErrorDescription { Code = 1002' Line = 3' Column = 12 }});
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_NewKeywordUsedAsOperator,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_BadNewExpr' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_TypeExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_GlobalDefinitionOrStatementExpected' Line = 2' Column = 5 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_NewKeywordUsedAsOperator,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_BadNewExpr' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_TypeExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_GlobalDefinitionOrStatementExpected' Line = 2' Column = 5 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_NewKeywordUsedAsOperator,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_BadNewExpr' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_TypeExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_GlobalDefinitionOrStatementExpected' Line = 2' Column = 5 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_NewKeywordUsedAsOperator,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_BadNewExpr' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_TypeExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_GlobalDefinitionOrStatementExpected' Line = 2' Column = 5 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_NewKeywordUsedAsOperator,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_BadNewExpr' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_TypeExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_GlobalDefinitionOrStatementExpected' Line = 2' Column = 5 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_NewKeywordUsedAsOperator,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_BadNewExpr' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_TypeExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_GlobalDefinitionOrStatementExpected' Line = 2' Column = 5 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_NewKeywordUsedAsOperator,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_BadNewExpr' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_TypeExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_GlobalDefinitionOrStatementExpected' Line = 2' Column = 5 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_NewKeywordUsedAsOperator,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_BadNewExpr' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_TypeExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 5 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_GlobalDefinitionOrStatementExpected' Line = 2' Column = 5 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Constructor,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1002' Line = 2' Column = 10 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Constructor,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1002' Line = 2' Column = 10 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Constructor,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1002' Line = 2' Column = 10 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,StaticConstructor,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1520' Line = 2' Column = 8 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,StaticConstructor,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1520' Line = 2' Column = 8 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,StaticConstructor,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1520' Line = 2' Column = 8 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Finalizer,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1002' Line = 2' Column = 11 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Finalizer,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1002' Line = 2' Column = 11 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Finalizer,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1002' Line = 2' Column = 11 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_IndexerDefinition,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1001' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1551' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1514' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1513' Line = 1' Column = 17 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_IndexerDefinition,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1001' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1551' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1514' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1513' Line = 1' Column = 17 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_IndexerDefinition,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1001' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1551' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1514' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1513' Line = 1' Column = 17 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_IndexerDefinition,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1001' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1551' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1514' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1513' Line = 1' Column = 17 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_IndexerDefinition,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1001' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1551' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1514' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1513' Line = 1' Column = 17 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_IndexerDefinition,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1001' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1551' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1514' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1513' Line = 1' Column = 17 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_IndexerDefinition,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1001' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1551' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1514' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1513' Line = 1' Column = 17 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_IndexerDefinition,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1001' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1551' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1514' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1513' Line = 1' Column = 17 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_IndexerDefinition,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1001' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1551' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1514' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1513' Line = 1' Column = 17 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_IndexerDefinition,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1001' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1551' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1514' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1513' Line = 1' Column = 17 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_IndexerDefinition,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1001' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1551' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1514' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1513' Line = 1' Column = 17 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Error_IndexerDefinition,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1001' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 13 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1551' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1514' Line = 1' Column = 17 }'                  new ErrorDescription { Code = 1513' Line = 1' Column = 17 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Delegate,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 2' Column = 13 }'                  new ErrorDescription { Code = 1002' Line = 3' Column = 15 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Delegate,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 2' Column = 13 }'                  new ErrorDescription { Code = 1002' Line = 3' Column = 15 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Delegate,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 2' Column = 13 }'                  new ErrorDescription { Code = 1002' Line = 3' Column = 15 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Delegate,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 2' Column = 13 }'                  new ErrorDescription { Code = 1002' Line = 3' Column = 15 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Delegate,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 2' Column = 13 }'                  new ErrorDescription { Code = 1002' Line = 3' Column = 15 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Delegate,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 2' Column = 13 }'                  new ErrorDescription { Code = 1002' Line = 3' Column = 15 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,ExternAliasAmbiguity,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 7002' Line = 5' Column = 14 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,ExternAliasAmbiguity,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 7002' Line = 5' Column = 14 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,ExternAliasAmbiguity,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 7002' Line = 5' Column = 14 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,ExternOrdering_Statement,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 439' Line = 3' Column = 1 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,ExternOrdering_Statement,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 439' Line = 3' Column = 1 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,ExternOrdering_Method,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 439' Line = 3' Column = 1 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,ExternOrdering_Method,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 439' Line = 3' Column = 1 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,ExternOrdering_Field,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 439' Line = 3' Column = 1 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,ExternOrdering_Field,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 439' Line = 3' Column = 1 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,ExternOrdering_Property,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 439' Line = 3' Column = 1 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,ExternOrdering_Property,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 439' Line = 3' Column = 1 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,UsingOrdering_Statement,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1529' Line = 3' Column = 1 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,UsingOrdering_Statement,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1529' Line = 3' Column = 1 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,UsingOrdering_Member,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1529' Line = 3' Column = 1 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,UsingOrdering_Member,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1529' Line = 3' Column = 1 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,ImplementingDeclarationOfPartialMethod,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1597' Line = 2' Column = 21 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,ImplementingDeclarationOfPartialMethod,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1597' Line = 2' Column = 21 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,ImplementingDeclarationOfPartialMethod,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 1597' Line = 2' Column = 21 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,EnumDeclaration,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 267' Line = 2' Column = 1 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,EnumDeclaration,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 267' Line = 2' Column = 1 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Multiplication,The following statement contains a magic number: ParseAndValidate(test' TestOptions.Regular' new[] { new ErrorDescription { Code = 1002' Line = 1' Column = 8 } });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Multiplication,The following statement contains a magic number: ParseAndValidate(test' TestOptions.Regular' new[] { new ErrorDescription { Code = 1002' Line = 1' Column = 8 } });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Multiplication,The following statement contains a magic number: ParseAndValidate(test' TestOptions.Script' new[] { new ErrorDescription { Code = 1002' Line = 1' Column = 8 } });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Multiplication,The following statement contains a magic number: ParseAndValidate(test' TestOptions.Script' new[] { new ErrorDescription { Code = 1002' Line = 1' Column = 8 } });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,GlobalStatementSeparators_NonAsciiCharacter,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 3 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_UnexpectedCharacter' Line = 2' Column = 3 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 6 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,GlobalStatementSeparators_NonAsciiCharacter,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 3 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_UnexpectedCharacter' Line = 2' Column = 3 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 6 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,GlobalStatementSeparators_NonAsciiCharacter,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 3 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_UnexpectedCharacter' Line = 2' Column = 3 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 6 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,GlobalStatementSeparators_NonAsciiCharacter,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 3 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_UnexpectedCharacter' Line = 2' Column = 3 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 6 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,GlobalStatementSeparators_NonAsciiCharacter,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 3 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_UnexpectedCharacter' Line = 2' Column = 3 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 6 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,GlobalStatementSeparators_NonAsciiCharacter,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 3 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_UnexpectedCharacter' Line = 2' Column = 3 }'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 6 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,GlobalStatementSeparators_UnicodeCharacter,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 29 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,GlobalStatementSeparators_UnicodeCharacter,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = (int)ErrorCode.ERR_SemicolonExpected' Line = 2' Column = 29 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,GlobalStatementSeparators_Missing,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 3' Column = 6 }'                  new ErrorDescription { Code = 1002' Line = 4' Column = 14 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,GlobalStatementSeparators_Missing,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 3' Column = 6 }'                  new ErrorDescription { Code = 1002' Line = 4' Column = 14 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,GlobalStatementSeparators_Missing,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 3' Column = 6 }'                  new ErrorDescription { Code = 1002' Line = 4' Column = 14 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,GlobalStatementSeparators_Missing,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 3' Column = 6 }'                  new ErrorDescription { Code = 1002' Line = 4' Column = 14 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,GlobalStatementSeparators_Missing,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 3' Column = 6 }'                  new ErrorDescription { Code = 1002' Line = 4' Column = 14 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,GlobalStatementSeparators_Missing,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 3' Column = 6 }'                  new ErrorDescription { Code = 1002' Line = 4' Column = 14 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 1 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 1 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 1 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 1 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 1 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 1 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 1 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 1 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 1 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 1 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 1 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorImplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorImplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorImplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorImplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorImplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorImplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorImplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorImplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorImplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorImplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorImplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorImplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorExplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorExplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorExplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorExplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorExplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorExplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorExplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorExplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorExplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorExplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorExplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,OperatorExplicitError,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1031' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1019' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1026' Line = 1' Column = 9 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 9 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,FieldDeclaration,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 145' Line = 3' Column = 11 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,FieldDeclaration,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 145' Line = 3' Column = 11 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,FieldDeclaration,The following statement contains a magic number: ParseAndValidate(test' new ErrorDescription { Code = 145' Line = 3' Column = 11 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,TopLevelXML,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1525' Line = 2' Column = 1 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 10 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 25 }'                  new ErrorDescription { Code = 1525' Line = 2' Column = 26 }'                  new ErrorDescription { Code = 1733' Line = 2' Column = 35 }'                  new ErrorDescription { Code = 1002' Line = 2' Column = 35 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,NotIncorrectKeyword,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 2' Column = 8 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,NotIncorrectKeyword,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 2' Column = 8 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,NotIncorrectKeyword,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 2' Column = 8 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Keyword,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 2' Column = 3 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Keyword,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 2' Column = 3 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,Keyword,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1002' Line = 2' Column = 3 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,CS1733ERR_ExpressionExpected,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 28 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,CS1733ERR_ExpressionExpected,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 28 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,CS1733ERR_ExpressionExpected,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 28 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,CS1733ERR_ExpressionExpected,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 28 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,CS1733ERR_ExpressionExpected,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 28 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,CS1733ERR_ExpressionExpected,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 28 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,CS1733ERR_ExpressionExpected,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 28 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,CS1733ERR_ExpressionExpected,The following statement contains a magic number: ParseAndValidate(test'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1003' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1733' Line = 1' Column = 28 }'                  new ErrorDescription { Code = 1002' Line = 1' Column = 28 });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestMissingNameDueToKeyword,The following statement contains a magic number: Assert.Equal(2' name.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestMissingNameDueToPartialClassStart,The following statement contains a magic number: Assert.Equal(2' name.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestMissingNameDueToPartialMethodStart,The following statement contains a magic number: Assert.Equal(2' name.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestGenericNameWithTwoArguments,The following statement contains a magic number: Assert.Equal(2' gname.TypeArgumentList.Arguments.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestOpenNameWithAComma,The following statement contains a magic number: Assert.Equal(2' gname.TypeArgumentList.Arguments.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestPointerTypeNameWithMultipleAsterisks,The following statement contains a magic number: Assert.Equal(3' depth);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestMultiDimensionalArrayTypeName,The following statement contains a magic number: Assert.Equal(3' array.RankSpecifiers[0].Sizes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestMultiDimensionalArrayTypeName,The following statement contains a magic number: Assert.Equal(2' array.RankSpecifiers[0].Sizes.SeparatorCount);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestMultiDimensionalArrayTypeName,The following statement contains a magic number: Assert.Equal(3' array.RankSpecifiers[0].Rank);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestMultiRankedArrayTypeName,The following statement contains a magic number: Assert.Equal(3' array.RankSpecifiers.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestMultiRankedArrayTypeName,The following statement contains a magic number: Assert.Equal(2' array.RankSpecifiers[1].Sizes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestMultiRankedArrayTypeName,The following statement contains a magic number: Assert.Equal(2' array.RankSpecifiers[1].Rank);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestMultiRankedArrayTypeName,The following statement contains a magic number: Assert.Equal(3' array.RankSpecifiers[2].Sizes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestMultiRankedArrayTypeName,The following statement contains a magic number: Assert.Equal(3' array.RankSpecifiers[2].Sizes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestMultiRankedArrayTypeName,The following statement contains a magic number: Assert.Equal(2' array.RankSpecifiers[2].Sizes.SeparatorCount);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestMultiRankedArrayTypeName,The following statement contains a magic number: Assert.Equal(2' array.RankSpecifiers[2].Sizes.SeparatorCount);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestMultiRankedArrayTypeName,The following statement contains a magic number: Assert.Equal(3' array.RankSpecifiers[2].Rank);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestMultiRankedArrayTypeName,The following statement contains a magic number: Assert.Equal(3' array.RankSpecifiers[2].Rank);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,NameParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\NameParsingTests.cs,TestAttributeAndVarianceInNameBad,The following statement contains a magic number: Assert.Equal(2' arg.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0080ERR_ConstraintOnlyAllowedOnGenericDecl,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (3'9): error CS0080: Constraints are not allowed on non-generic declarations                  Diagnostic(ErrorCode.ERR_ConstraintOnlyAllowedOnGenericDecl' "where").WithLocation(3' 9));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0080ERR_ConstraintOnlyAllowedOnGenericDecl,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (3'9): error CS0080: Constraints are not allowed on non-generic declarations                  Diagnostic(ErrorCode.ERR_ConstraintOnlyAllowedOnGenericDecl' "where").WithLocation(3' 9));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0401ERR_NewBoundMustBeLast,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (5'22): error CS0401: The new() constraint must be the last constraint specified                  Diagnostic(ErrorCode.ERR_NewBoundMustBeLast' "new").WithLocation(5' 22));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0401ERR_NewBoundMustBeLast,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (5'22): error CS0401: The new() constraint must be the last constraint specified                  Diagnostic(ErrorCode.ERR_NewBoundMustBeLast' "new").WithLocation(5' 22));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0449ERR_RefValBoundMustBeFirst,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (5'41): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "struct").WithLocation(5' 41)'                  // (6'37): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "struct").WithLocation(6' 37)'                  // (7'37): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "class").WithLocation(7' 37));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0449ERR_RefValBoundMustBeFirst,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (5'41): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "struct").WithLocation(5' 41)'                  // (6'37): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "struct").WithLocation(6' 37)'                  // (7'37): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "class").WithLocation(7' 37));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0449ERR_RefValBoundMustBeFirst,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (5'41): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "struct").WithLocation(5' 41)'                  // (6'37): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "struct").WithLocation(6' 37)'                  // (7'37): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "class").WithLocation(7' 37));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0449ERR_RefValBoundMustBeFirst,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (5'41): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "struct").WithLocation(5' 41)'                  // (6'37): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "struct").WithLocation(6' 37)'                  // (7'37): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "class").WithLocation(7' 37));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0449ERR_RefValBoundMustBeFirst,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (5'41): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "struct").WithLocation(5' 41)'                  // (6'37): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "struct").WithLocation(6' 37)'                  // (7'37): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "class").WithLocation(7' 37));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0449ERR_RefValBoundMustBeFirst,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (5'41): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "struct").WithLocation(5' 41)'                  // (6'37): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "struct").WithLocation(6' 37)'                  // (7'37): error CS0449: The 'class' or 'struct' constraint must come before any other constraints                  Diagnostic(ErrorCode.ERR_RefValBoundMustBeFirst' "class").WithLocation(7' 37));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0451ERR_NewBoundWithVal,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (4'42): error CS0451: The 'new()' constraint cannot be used with the 'struct' constraint                  Diagnostic(ErrorCode.ERR_NewBoundWithVal' "new").WithLocation(4' 42));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0451ERR_NewBoundWithVal,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (4'42): error CS0451: The 'new()' constraint cannot be used with the 'struct' constraint                  Diagnostic(ErrorCode.ERR_NewBoundWithVal' "new").WithLocation(4' 42));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (14'20): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(14' 20)'                  // (15'22): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(15' 22)'                  // (16'37): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(16' 37)'                  // (17'36): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(17' 36)'                  // (18'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(18' 45)'                  // (19'37): error CS0115: 'B.M4<T>()': no suitable method found to override                  Diagnostic(ErrorCode.ERR_OverrideNotExpected' "M4").WithArguments("B.M4<T>()").WithLocation(19' 37)'                  // (19'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(19' 45));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (14'20): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(14' 20)'                  // (15'22): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(15' 22)'                  // (16'37): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(16' 37)'                  // (17'36): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(17' 36)'                  // (18'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(18' 45)'                  // (19'37): error CS0115: 'B.M4<T>()': no suitable method found to override                  Diagnostic(ErrorCode.ERR_OverrideNotExpected' "M4").WithArguments("B.M4<T>()").WithLocation(19' 37)'                  // (19'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(19' 45));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (14'20): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(14' 20)'                  // (15'22): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(15' 22)'                  // (16'37): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(16' 37)'                  // (17'36): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(17' 36)'                  // (18'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(18' 45)'                  // (19'37): error CS0115: 'B.M4<T>()': no suitable method found to override                  Diagnostic(ErrorCode.ERR_OverrideNotExpected' "M4").WithArguments("B.M4<T>()").WithLocation(19' 37)'                  // (19'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(19' 45));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (14'20): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(14' 20)'                  // (15'22): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(15' 22)'                  // (16'37): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(16' 37)'                  // (17'36): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(17' 36)'                  // (18'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(18' 45)'                  // (19'37): error CS0115: 'B.M4<T>()': no suitable method found to override                  Diagnostic(ErrorCode.ERR_OverrideNotExpected' "M4").WithArguments("B.M4<T>()").WithLocation(19' 37)'                  // (19'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(19' 45));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (14'20): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(14' 20)'                  // (15'22): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(15' 22)'                  // (16'37): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(16' 37)'                  // (17'36): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(17' 36)'                  // (18'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(18' 45)'                  // (19'37): error CS0115: 'B.M4<T>()': no suitable method found to override                  Diagnostic(ErrorCode.ERR_OverrideNotExpected' "M4").WithArguments("B.M4<T>()").WithLocation(19' 37)'                  // (19'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(19' 45));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (14'20): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(14' 20)'                  // (15'22): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(15' 22)'                  // (16'37): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(16' 37)'                  // (17'36): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(17' 36)'                  // (18'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(18' 45)'                  // (19'37): error CS0115: 'B.M4<T>()': no suitable method found to override                  Diagnostic(ErrorCode.ERR_OverrideNotExpected' "M4").WithArguments("B.M4<T>()").WithLocation(19' 37)'                  // (19'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(19' 45));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (14'20): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(14' 20)'                  // (15'22): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(15' 22)'                  // (16'37): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(16' 37)'                  // (17'36): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(17' 36)'                  // (18'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(18' 45)'                  // (19'37): error CS0115: 'B.M4<T>()': no suitable method found to override                  Diagnostic(ErrorCode.ERR_OverrideNotExpected' "M4").WithArguments("B.M4<T>()").WithLocation(19' 37)'                  // (19'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(19' 45));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (14'20): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(14' 20)'                  // (15'22): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(15' 22)'                  // (16'37): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(16' 37)'                  // (17'36): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(17' 36)'                  // (18'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(18' 45)'                  // (19'37): error CS0115: 'B.M4<T>()': no suitable method found to override                  Diagnostic(ErrorCode.ERR_OverrideNotExpected' "M4").WithArguments("B.M4<T>()").WithLocation(19' 37)'                  // (19'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(19' 45));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (14'20): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(14' 20)'                  // (15'22): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(15' 22)'                  // (16'37): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(16' 37)'                  // (17'36): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(17' 36)'                  // (18'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(18' 45)'                  // (19'37): error CS0115: 'B.M4<T>()': no suitable method found to override                  Diagnostic(ErrorCode.ERR_OverrideNotExpected' "M4").WithArguments("B.M4<T>()").WithLocation(19' 37)'                  // (19'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(19' 45));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (14'20): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(14' 20)'                  // (15'22): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(15' 22)'                  // (16'37): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(16' 37)'                  // (17'36): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(17' 36)'                  // (18'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(18' 45)'                  // (19'37): error CS0115: 'B.M4<T>()': no suitable method found to override                  Diagnostic(ErrorCode.ERR_OverrideNotExpected' "M4").WithArguments("B.M4<T>()").WithLocation(19' 37)'                  // (19'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(19' 45));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (14'20): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(14' 20)'                  // (15'22): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(15' 22)'                  // (16'37): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(16' 37)'                  // (17'36): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(17' 36)'                  // (18'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(18' 45)'                  // (19'37): error CS0115: 'B.M4<T>()': no suitable method found to override                  Diagnostic(ErrorCode.ERR_OverrideNotExpected' "M4").WithArguments("B.M4<T>()").WithLocation(19' 37)'                  // (19'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(19' 45));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (14'20): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(14' 20)'                  // (15'22): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(15' 22)'                  // (16'37): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(16' 37)'                  // (17'36): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(17' 36)'                  // (18'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(18' 45)'                  // (19'37): error CS0115: 'B.M4<T>()': no suitable method found to override                  Diagnostic(ErrorCode.ERR_OverrideNotExpected' "M4").WithArguments("B.M4<T>()").WithLocation(19' 37)'                  // (19'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(19' 45));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (14'20): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(14' 20)'                  // (15'22): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(15' 22)'                  // (16'37): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(16' 37)'                  // (17'36): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(17' 36)'                  // (18'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(18' 45)'                  // (19'37): error CS0115: 'B.M4<T>()': no suitable method found to override                  Diagnostic(ErrorCode.ERR_OverrideNotExpected' "M4").WithArguments("B.M4<T>()").WithLocation(19' 37)'                  // (19'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(19' 45));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0460ERR_OverrideWithConstraints,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (14'20): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(14' 20)'                  // (15'22): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(15' 22)'                  // (16'37): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(16' 37)'                  // (17'36): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(17' 36)'                  // (18'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(18' 45)'                  // (19'37): error CS0115: 'B.M4<T>()': no suitable method found to override                  Diagnostic(ErrorCode.ERR_OverrideNotExpected' "M4").WithArguments("B.M4<T>()").WithLocation(19' 37)'                  // (19'45): error CS0460: Constraints for override and explicit interface implementation methods are inherited from the base method' so they cannot be specified directly                  Diagnostic(ErrorCode.ERR_OverrideWithConstraints' "where").WithLocation(19' 45));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0706ERR_BadConstraintType,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (2'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(2' 15)'                  // (3'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(3' 15)'                  // (9'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(9' 19)'                  // (10'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(10' 19)'                    // CONSIDER: Dev10 doesn't report these cascading errors.                    // (2'15): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (2'15): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T")'                  // (9'19): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (9'19): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T"));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0706ERR_BadConstraintType,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (2'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(2' 15)'                  // (3'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(3' 15)'                  // (9'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(9' 19)'                  // (10'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(10' 19)'                    // CONSIDER: Dev10 doesn't report these cascading errors.                    // (2'15): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (2'15): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T")'                  // (9'19): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (9'19): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T"));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0706ERR_BadConstraintType,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (2'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(2' 15)'                  // (3'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(3' 15)'                  // (9'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(9' 19)'                  // (10'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(10' 19)'                    // CONSIDER: Dev10 doesn't report these cascading errors.                    // (2'15): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (2'15): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T")'                  // (9'19): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (9'19): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T"));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0706ERR_BadConstraintType,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (2'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(2' 15)'                  // (3'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(3' 15)'                  // (9'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(9' 19)'                  // (10'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(10' 19)'                    // CONSIDER: Dev10 doesn't report these cascading errors.                    // (2'15): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (2'15): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T")'                  // (9'19): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (9'19): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T"));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0706ERR_BadConstraintType,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (2'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(2' 15)'                  // (3'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(3' 15)'                  // (9'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(9' 19)'                  // (10'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(10' 19)'                    // CONSIDER: Dev10 doesn't report these cascading errors.                    // (2'15): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (2'15): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T")'                  // (9'19): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (9'19): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T"));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0706ERR_BadConstraintType,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (2'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(2' 15)'                  // (3'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(3' 15)'                  // (9'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(9' 19)'                  // (10'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(10' 19)'                    // CONSIDER: Dev10 doesn't report these cascading errors.                    // (2'15): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (2'15): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T")'                  // (9'19): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (9'19): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T"));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0706ERR_BadConstraintType,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (2'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(2' 15)'                  // (3'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(3' 15)'                  // (9'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(9' 19)'                  // (10'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(10' 19)'                    // CONSIDER: Dev10 doesn't report these cascading errors.                    // (2'15): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (2'15): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T")'                  // (9'19): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (9'19): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T"));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS0706ERR_BadConstraintType,The following statement contains a magic number: CreateCompilationWithMscorlib(source).VerifyDiagnostics(                  // (2'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(2' 15)'                  // (3'15): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(3' 15)'                  // (9'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T*").WithLocation(9' 19)'                  // (10'19): error CS0706: Invalid constraint type. A type used as a constraint must be an interface' a non-sealed class or a type parameter.                  Diagnostic(ErrorCode.ERR_BadConstraintType' "T[]").WithLocation(10' 19)'                    // CONSIDER: Dev10 doesn't report these cascading errors.                    // (2'15): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (2'15): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T")'                  // (9'19): error CS0214: Pointers and fixed size buffers may only be used in an unsafe context                  Diagnostic(ErrorCode.ERR_UnsafeNeeded' "T*")'                  // (9'19): error CS0208: Cannot take the address of' get the size of' or declare a pointer to a managed type ('T')                  Diagnostic(ErrorCode.ERR_ManagedAddr' "T*").WithArguments("T"));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected01,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"namespace x  {      abstract public class clx       {          enum E : sbyte { x' y' z } // no error          enum F : char { x' y' z } // CS1008' char not valid type for enums          enum G : short { A' B' C } // no error          enum H : System.Int16 { A' B' C } // CS1008' short not System.Int16      }  }  ")              .VerifyDiagnostics(                  // (6'18): error CS1008: Type byte' sbyte' short' ushort' int' uint' long' or ulong expected                  //         enum F : char { x' y' z } // CS1008' char not valid type for enums                  Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "char").WithLocation(6' 18)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected01,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"namespace x  {      abstract public class clx       {          enum E : sbyte { x' y' z } // no error          enum F : char { x' y' z } // CS1008' char not valid type for enums          enum G : short { A' B' C } // no error          enum H : System.Int16 { A' B' C } // CS1008' short not System.Int16      }  }  ")              .VerifyDiagnostics(                  // (6'18): error CS1008: Type byte' sbyte' short' ushort' int' uint' long' or ulong expected                  //         enum F : char { x' y' z } // CS1008' char not valid type for enums                  Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "char").WithLocation(6' 18)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"interface I { }  class C { }  enum E { }  enum F : I { A }  enum G : C { A }  enum H : E { A }  enum K : System.Enum { A }  enum L : string { A }  enum M : float { A }  enum N : decimal { A }  ")                  .VerifyDiagnostics(                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "I").WithLocation(4' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "C").WithLocation(5' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "E").WithLocation(6' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "System.Enum").WithLocation(7' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "string").WithLocation(8' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "float").WithLocation(9' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "decimal").WithLocation(10' 10));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"interface I { }  class C { }  enum E { }  enum F : I { A }  enum G : C { A }  enum H : E { A }  enum K : System.Enum { A }  enum L : string { A }  enum M : float { A }  enum N : decimal { A }  ")                  .VerifyDiagnostics(                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "I").WithLocation(4' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "C").WithLocation(5' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "E").WithLocation(6' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "System.Enum").WithLocation(7' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "string").WithLocation(8' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "float").WithLocation(9' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "decimal").WithLocation(10' 10));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"interface I { }  class C { }  enum E { }  enum F : I { A }  enum G : C { A }  enum H : E { A }  enum K : System.Enum { A }  enum L : string { A }  enum M : float { A }  enum N : decimal { A }  ")                  .VerifyDiagnostics(                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "I").WithLocation(4' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "C").WithLocation(5' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "E").WithLocation(6' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "System.Enum").WithLocation(7' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "string").WithLocation(8' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "float").WithLocation(9' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "decimal").WithLocation(10' 10));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"interface I { }  class C { }  enum E { }  enum F : I { A }  enum G : C { A }  enum H : E { A }  enum K : System.Enum { A }  enum L : string { A }  enum M : float { A }  enum N : decimal { A }  ")                  .VerifyDiagnostics(                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "I").WithLocation(4' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "C").WithLocation(5' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "E").WithLocation(6' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "System.Enum").WithLocation(7' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "string").WithLocation(8' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "float").WithLocation(9' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "decimal").WithLocation(10' 10));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"interface I { }  class C { }  enum E { }  enum F : I { A }  enum G : C { A }  enum H : E { A }  enum K : System.Enum { A }  enum L : string { A }  enum M : float { A }  enum N : decimal { A }  ")                  .VerifyDiagnostics(                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "I").WithLocation(4' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "C").WithLocation(5' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "E").WithLocation(6' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "System.Enum").WithLocation(7' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "string").WithLocation(8' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "float").WithLocation(9' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "decimal").WithLocation(10' 10));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"interface I { }  class C { }  enum E { }  enum F : I { A }  enum G : C { A }  enum H : E { A }  enum K : System.Enum { A }  enum L : string { A }  enum M : float { A }  enum N : decimal { A }  ")                  .VerifyDiagnostics(                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "I").WithLocation(4' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "C").WithLocation(5' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "E").WithLocation(6' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "System.Enum").WithLocation(7' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "string").WithLocation(8' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "float").WithLocation(9' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "decimal").WithLocation(10' 10));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"interface I { }  class C { }  enum E { }  enum F : I { A }  enum G : C { A }  enum H : E { A }  enum K : System.Enum { A }  enum L : string { A }  enum M : float { A }  enum N : decimal { A }  ")                  .VerifyDiagnostics(                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "I").WithLocation(4' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "C").WithLocation(5' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "E").WithLocation(6' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "System.Enum").WithLocation(7' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "string").WithLocation(8' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "float").WithLocation(9' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "decimal").WithLocation(10' 10));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"interface I { }  class C { }  enum E { }  enum F : I { A }  enum G : C { A }  enum H : E { A }  enum K : System.Enum { A }  enum L : string { A }  enum M : float { A }  enum N : decimal { A }  ")                  .VerifyDiagnostics(                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "I").WithLocation(4' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "C").WithLocation(5' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "E").WithLocation(6' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "System.Enum").WithLocation(7' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "string").WithLocation(8' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "float").WithLocation(9' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "decimal").WithLocation(10' 10));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"interface I { }  class C { }  enum E { }  enum F : I { A }  enum G : C { A }  enum H : E { A }  enum K : System.Enum { A }  enum L : string { A }  enum M : float { A }  enum N : decimal { A }  ")                  .VerifyDiagnostics(                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "I").WithLocation(4' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "C").WithLocation(5' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "E").WithLocation(6' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "System.Enum").WithLocation(7' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "string").WithLocation(8' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "float").WithLocation(9' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "decimal").WithLocation(10' 10));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"interface I { }  class C { }  enum E { }  enum F : I { A }  enum G : C { A }  enum H : E { A }  enum K : System.Enum { A }  enum L : string { A }  enum M : float { A }  enum N : decimal { A }  ")                  .VerifyDiagnostics(                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "I").WithLocation(4' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "C").WithLocation(5' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "E").WithLocation(6' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "System.Enum").WithLocation(7' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "string").WithLocation(8' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "float").WithLocation(9' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "decimal").WithLocation(10' 10));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"interface I { }  class C { }  enum E { }  enum F : I { A }  enum G : C { A }  enum H : E { A }  enum K : System.Enum { A }  enum L : string { A }  enum M : float { A }  enum N : decimal { A }  ")                  .VerifyDiagnostics(                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "I").WithLocation(4' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "C").WithLocation(5' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "E").WithLocation(6' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "System.Enum").WithLocation(7' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "string").WithLocation(8' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "float").WithLocation(9' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "decimal").WithLocation(10' 10));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"interface I { }  class C { }  enum E { }  enum F : I { A }  enum G : C { A }  enum H : E { A }  enum K : System.Enum { A }  enum L : string { A }  enum M : float { A }  enum N : decimal { A }  ")                  .VerifyDiagnostics(                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "I").WithLocation(4' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "C").WithLocation(5' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "E").WithLocation(6' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "System.Enum").WithLocation(7' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "string").WithLocation(8' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "float").WithLocation(9' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "decimal").WithLocation(10' 10));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"interface I { }  class C { }  enum E { }  enum F : I { A }  enum G : C { A }  enum H : E { A }  enum K : System.Enum { A }  enum L : string { A }  enum M : float { A }  enum N : decimal { A }  ")                  .VerifyDiagnostics(                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "I").WithLocation(4' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "C").WithLocation(5' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "E").WithLocation(6' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "System.Enum").WithLocation(7' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "string").WithLocation(8' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "float").WithLocation(9' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "decimal").WithLocation(10' 10));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1008ERR_IntegralTypeExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(  @"interface I { }  class C { }  enum E { }  enum F : I { A }  enum G : C { A }  enum H : E { A }  enum K : System.Enum { A }  enum L : string { A }  enum M : float { A }  enum N : decimal { A }  ")                  .VerifyDiagnostics(                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "I").WithLocation(4' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "C").WithLocation(5' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "E").WithLocation(6' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "System.Enum").WithLocation(7' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "string").WithLocation(8' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "float").WithLocation(9' 10)'                      Diagnostic(ErrorCode.ERR_IntegralTypeExpected' "decimal").WithLocation(10' 10));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1022ERR_EOFExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (1'2): error CS1022: Type or namespace definition' or end-of-file expected                  Diagnostic(ErrorCode.ERR_EOFExpected' ">").WithLocation(1' 2)'                  // (1'21): error CS0116: A namespace does not directly contain members such as fields or methods                  Diagnostic(ErrorCode.ERR_NamespaceUnexpected' "dll").WithLocation(1' 21)'                  // (1'24): error CS1022: Type or namespace definition' or end-of-file expected                  Diagnostic(ErrorCode.ERR_EOFExpected' "!").WithLocation(1' 24)'                  // (1'27): error CS0116: A namespace does not directly contain members such as fields or methods                  Diagnostic(ErrorCode.ERR_NamespaceUnexpected' "Basic").WithLocation(1' 27));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1022ERR_EOFExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (1'2): error CS1022: Type or namespace definition' or end-of-file expected                  Diagnostic(ErrorCode.ERR_EOFExpected' ">").WithLocation(1' 2)'                  // (1'21): error CS0116: A namespace does not directly contain members such as fields or methods                  Diagnostic(ErrorCode.ERR_NamespaceUnexpected' "dll").WithLocation(1' 21)'                  // (1'24): error CS1022: Type or namespace definition' or end-of-file expected                  Diagnostic(ErrorCode.ERR_EOFExpected' "!").WithLocation(1' 24)'                  // (1'27): error CS0116: A namespace does not directly contain members such as fields or methods                  Diagnostic(ErrorCode.ERR_NamespaceUnexpected' "Basic").WithLocation(1' 27));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1022ERR_EOFExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (1'2): error CS1022: Type or namespace definition' or end-of-file expected                  Diagnostic(ErrorCode.ERR_EOFExpected' ">").WithLocation(1' 2)'                  // (1'21): error CS0116: A namespace does not directly contain members such as fields or methods                  Diagnostic(ErrorCode.ERR_NamespaceUnexpected' "dll").WithLocation(1' 21)'                  // (1'24): error CS1022: Type or namespace definition' or end-of-file expected                  Diagnostic(ErrorCode.ERR_EOFExpected' "!").WithLocation(1' 24)'                  // (1'27): error CS0116: A namespace does not directly contain members such as fields or methods                  Diagnostic(ErrorCode.ERR_NamespaceUnexpected' "Basic").WithLocation(1' 27));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1022ERR_EOFExpected02,The following statement contains a magic number: CreateCompilationWithMscorlib(test).VerifyDiagnostics(                  // (1'2): error CS1022: Type or namespace definition' or end-of-file expected                  Diagnostic(ErrorCode.ERR_EOFExpected' ">").WithLocation(1' 2)'                  // (1'21): error CS0116: A namespace does not directly contain members such as fields or methods                  Diagnostic(ErrorCode.ERR_NamespaceUnexpected' "dll").WithLocation(1' 21)'                  // (1'24): error CS1022: Type or namespace definition' or end-of-file expected                  Diagnostic(ErrorCode.ERR_EOFExpected' "!").WithLocation(1' 24)'                  // (1'27): error CS0116: A namespace does not directly contain members such as fields or methods                  Diagnostic(ErrorCode.ERR_NamespaceUnexpected' "Basic").WithLocation(1' 27));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1041ERR_IdentifierExpectedKW05,The following statement contains a magic number: ParseAndValidate(test'                  // (6'25): error CS1026: ) expected                  Diagnostic(ErrorCode.ERR_CloseParenExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "this").WithLocation(6' 25)'                  // (6'30): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "object").WithLocation(6' 30)'                  // (6'38): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' ")").WithLocation(6' 38)'                  // (6'38): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' ")").WithLocation(6' 38));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1041ERR_IdentifierExpectedKW05,The following statement contains a magic number: ParseAndValidate(test'                  // (6'25): error CS1026: ) expected                  Diagnostic(ErrorCode.ERR_CloseParenExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "this").WithLocation(6' 25)'                  // (6'30): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "object").WithLocation(6' 30)'                  // (6'38): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' ")").WithLocation(6' 38)'                  // (6'38): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' ")").WithLocation(6' 38));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1041ERR_IdentifierExpectedKW05,The following statement contains a magic number: ParseAndValidate(test'                  // (6'25): error CS1026: ) expected                  Diagnostic(ErrorCode.ERR_CloseParenExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "this").WithLocation(6' 25)'                  // (6'30): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "object").WithLocation(6' 30)'                  // (6'38): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' ")").WithLocation(6' 38)'                  // (6'38): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' ")").WithLocation(6' 38));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1041ERR_IdentifierExpectedKW05,The following statement contains a magic number: ParseAndValidate(test'                  // (6'25): error CS1026: ) expected                  Diagnostic(ErrorCode.ERR_CloseParenExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "this").WithLocation(6' 25)'                  // (6'30): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "object").WithLocation(6' 30)'                  // (6'38): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' ")").WithLocation(6' 38)'                  // (6'38): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' ")").WithLocation(6' 38));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1041ERR_IdentifierExpectedKW05,The following statement contains a magic number: ParseAndValidate(test'                  // (6'25): error CS1026: ) expected                  Diagnostic(ErrorCode.ERR_CloseParenExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "this").WithLocation(6' 25)'                  // (6'30): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "object").WithLocation(6' 30)'                  // (6'38): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' ")").WithLocation(6' 38)'                  // (6'38): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' ")").WithLocation(6' 38));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1041ERR_IdentifierExpectedKW05,The following statement contains a magic number: ParseAndValidate(test'                  // (6'25): error CS1026: ) expected                  Diagnostic(ErrorCode.ERR_CloseParenExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "this").WithLocation(6' 25)'                  // (6'30): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "object").WithLocation(6' 30)'                  // (6'38): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' ")").WithLocation(6' 38)'                  // (6'38): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' ")").WithLocation(6' 38));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1041ERR_IdentifierExpectedKW05,The following statement contains a magic number: ParseAndValidate(test'                  // (6'25): error CS1026: ) expected                  Diagnostic(ErrorCode.ERR_CloseParenExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "this").WithLocation(6' 25)'                  // (6'30): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "object").WithLocation(6' 30)'                  // (6'38): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' ")").WithLocation(6' 38)'                  // (6'38): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' ")").WithLocation(6' 38));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1041ERR_IdentifierExpectedKW05,The following statement contains a magic number: ParseAndValidate(test'                  // (6'25): error CS1026: ) expected                  Diagnostic(ErrorCode.ERR_CloseParenExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "this").WithLocation(6' 25)'                  // (6'30): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "object").WithLocation(6' 30)'                  // (6'38): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' ")").WithLocation(6' 38)'                  // (6'38): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' ")").WithLocation(6' 38));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1041ERR_IdentifierExpectedKW05,The following statement contains a magic number: ParseAndValidate(test'                  // (6'25): error CS1026: ) expected                  Diagnostic(ErrorCode.ERR_CloseParenExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "this").WithLocation(6' 25)'                  // (6'30): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "object").WithLocation(6' 30)'                  // (6'38): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' ")").WithLocation(6' 38)'                  // (6'38): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' ")").WithLocation(6' 38));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1041ERR_IdentifierExpectedKW05,The following statement contains a magic number: ParseAndValidate(test'                  // (6'25): error CS1026: ) expected                  Diagnostic(ErrorCode.ERR_CloseParenExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "this").WithLocation(6' 25)'                  // (6'30): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "object").WithLocation(6' 30)'                  // (6'38): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' ")").WithLocation(6' 38)'                  // (6'38): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' ")").WithLocation(6' 38));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1041ERR_IdentifierExpectedKW05,The following statement contains a magic number: ParseAndValidate(test'                  // (6'25): error CS1026: ) expected                  Diagnostic(ErrorCode.ERR_CloseParenExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "this").WithLocation(6' 25)'                  // (6'30): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "object").WithLocation(6' 30)'                  // (6'38): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' ")").WithLocation(6' 38)'                  // (6'38): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' ")").WithLocation(6' 38));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1041ERR_IdentifierExpectedKW05,The following statement contains a magic number: ParseAndValidate(test'                  // (6'25): error CS1026: ) expected                  Diagnostic(ErrorCode.ERR_CloseParenExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "this").WithLocation(6' 25)'                  // (6'25): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "this").WithLocation(6' 25)'                  // (6'30): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "object").WithLocation(6' 30)'                  // (6'38): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' ")").WithLocation(6' 38)'                  // (6'38): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' ")").WithLocation(6' 38));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1733ERR_ExpressionExpected_02,The following statement contains a magic number: ParseAndValidate(test'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1003: Syntax error' ':' expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SyntaxError' "").WithArguments(":"' "").WithLocation(9' 36)'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1002: ; expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1733ERR_ExpressionExpected_02,The following statement contains a magic number: ParseAndValidate(test'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1003: Syntax error' ':' expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SyntaxError' "").WithArguments(":"' "").WithLocation(9' 36)'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1002: ; expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1733ERR_ExpressionExpected_02,The following statement contains a magic number: ParseAndValidate(test'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1003: Syntax error' ':' expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SyntaxError' "").WithArguments(":"' "").WithLocation(9' 36)'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1002: ; expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1733ERR_ExpressionExpected_02,The following statement contains a magic number: ParseAndValidate(test'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1003: Syntax error' ':' expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SyntaxError' "").WithArguments(":"' "").WithLocation(9' 36)'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1002: ; expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1733ERR_ExpressionExpected_02,The following statement contains a magic number: ParseAndValidate(test'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1003: Syntax error' ':' expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SyntaxError' "").WithArguments(":"' "").WithLocation(9' 36)'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1002: ; expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1733ERR_ExpressionExpected_02,The following statement contains a magic number: ParseAndValidate(test'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1003: Syntax error' ':' expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SyntaxError' "").WithArguments(":"' "").WithLocation(9' 36)'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1002: ; expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1733ERR_ExpressionExpected_02,The following statement contains a magic number: ParseAndValidate(test'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1003: Syntax error' ':' expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SyntaxError' "").WithArguments(":"' "").WithLocation(9' 36)'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1002: ; expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1733ERR_ExpressionExpected_02,The following statement contains a magic number: ParseAndValidate(test'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1003: Syntax error' ':' expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SyntaxError' "").WithArguments(":"' "").WithLocation(9' 36)'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1002: ; expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1733ERR_ExpressionExpected_02,The following statement contains a magic number: ParseAndValidate(test'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1003: Syntax error' ':' expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SyntaxError' "").WithArguments(":"' "").WithLocation(9' 36)'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1002: ; expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1733ERR_ExpressionExpected_02,The following statement contains a magic number: ParseAndValidate(test'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1003: Syntax error' ':' expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SyntaxError' "").WithArguments(":"' "").WithLocation(9' 36)'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1002: ; expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1733ERR_ExpressionExpected_02,The following statement contains a magic number: ParseAndValidate(test'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1003: Syntax error' ':' expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SyntaxError' "").WithArguments(":"' "").WithLocation(9' 36)'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1002: ; expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1733ERR_ExpressionExpected_02,The following statement contains a magic number: ParseAndValidate(test'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1003: Syntax error' ':' expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SyntaxError' "").WithArguments(":"' "").WithLocation(9' 36)'                  // (9'36): error CS1733: Expected expression                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_ExpressionExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1002: ; expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36)'                  // (9'36): error CS1513: } expected                  //         Console.WriteLine("Hello")?                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 36));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CS1960ERR_IllegalVarianceSyntax,The following statement contains a magic number: ParseAndValidate(test'                  // (3'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "in").WithLocation(3' 12)'                  // (4'12): error CS7002: Unexpected use of a generic name                  Diagnostic(ErrorCode.ERR_UnexpectedGenericName' "this").WithLocation(4' 12)'                  // (4'17): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(4' 17)'                  // (6'10): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(6' 10)'                  // (8'12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(8' 12)'                  // (11'9): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(11' 9)'                  // (13' 12): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(13' 12)'                  // (15' 14): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(15' 14)'                  // (17'13): error CS1960: Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.                  Diagnostic(ErrorCode.ERR_IllegalVarianceSyntax' "out").WithLocation(17' 13));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,ExceptionFilterBeforeVersionSix,The following statement contains a magic number: tree.GetDiagnostics().Verify(      // (6'23): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         try { } catch when (true) {}      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(6' 23)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,ExceptionFilterBeforeVersionSix,The following statement contains a magic number: tree.GetDiagnostics().Verify(      // (6'23): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         try { } catch when (true) {}      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(6' 23)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AttributeInMethodBody,The following statement contains a magic number: ParseAndValidate(test'                  // (4'27): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "[").WithLocation(4' 27)'                  // (4'35): error CS1519: Invalid token 'return' in class' struct' or interface member declaration                  Diagnostic(ErrorCode.ERR_InvalidMemberDecl' "return").WithArguments("return").WithLocation(4' 35)'                  // (4'35): error CS1519: Invalid token 'return' in class' struct' or interface member declaration                  Diagnostic(ErrorCode.ERR_InvalidMemberDecl' "return").WithArguments("return").WithLocation(4' 35)'                  // (5'1): error CS1022: Type or namespace definition' or end-of-file expected                  Diagnostic(ErrorCode.ERR_EOFExpected' "}").WithLocation(5' 1));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AttributeInMethodBody,The following statement contains a magic number: ParseAndValidate(test'                  // (4'27): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "[").WithLocation(4' 27)'                  // (4'35): error CS1519: Invalid token 'return' in class' struct' or interface member declaration                  Diagnostic(ErrorCode.ERR_InvalidMemberDecl' "return").WithArguments("return").WithLocation(4' 35)'                  // (4'35): error CS1519: Invalid token 'return' in class' struct' or interface member declaration                  Diagnostic(ErrorCode.ERR_InvalidMemberDecl' "return").WithArguments("return").WithLocation(4' 35)'                  // (5'1): error CS1022: Type or namespace definition' or end-of-file expected                  Diagnostic(ErrorCode.ERR_EOFExpected' "}").WithLocation(5' 1));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AttributeInMethodBody,The following statement contains a magic number: ParseAndValidate(test'                  // (4'27): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "[").WithLocation(4' 27)'                  // (4'35): error CS1519: Invalid token 'return' in class' struct' or interface member declaration                  Diagnostic(ErrorCode.ERR_InvalidMemberDecl' "return").WithArguments("return").WithLocation(4' 35)'                  // (4'35): error CS1519: Invalid token 'return' in class' struct' or interface member declaration                  Diagnostic(ErrorCode.ERR_InvalidMemberDecl' "return").WithArguments("return").WithLocation(4' 35)'                  // (5'1): error CS1022: Type or namespace definition' or end-of-file expected                  Diagnostic(ErrorCode.ERR_EOFExpected' "}").WithLocation(5' 1));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AttributeInMethodBody,The following statement contains a magic number: ParseAndValidate(test'                  // (4'27): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "[").WithLocation(4' 27)'                  // (4'35): error CS1519: Invalid token 'return' in class' struct' or interface member declaration                  Diagnostic(ErrorCode.ERR_InvalidMemberDecl' "return").WithArguments("return").WithLocation(4' 35)'                  // (4'35): error CS1519: Invalid token 'return' in class' struct' or interface member declaration                  Diagnostic(ErrorCode.ERR_InvalidMemberDecl' "return").WithArguments("return").WithLocation(4' 35)'                  // (5'1): error CS1022: Type or namespace definition' or end-of-file expected                  Diagnostic(ErrorCode.ERR_EOFExpected' "}").WithLocation(5' 1));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AttributeInMethodBody,The following statement contains a magic number: ParseAndValidate(test'                  // (4'27): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "[").WithLocation(4' 27)'                  // (4'35): error CS1519: Invalid token 'return' in class' struct' or interface member declaration                  Diagnostic(ErrorCode.ERR_InvalidMemberDecl' "return").WithArguments("return").WithLocation(4' 35)'                  // (4'35): error CS1519: Invalid token 'return' in class' struct' or interface member declaration                  Diagnostic(ErrorCode.ERR_InvalidMemberDecl' "return").WithArguments("return").WithLocation(4' 35)'                  // (5'1): error CS1022: Type or namespace definition' or end-of-file expected                  Diagnostic(ErrorCode.ERR_EOFExpected' "}").WithLocation(5' 1));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AttributeInMethodBody,The following statement contains a magic number: ParseAndValidate(test'                  // (4'27): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "[").WithLocation(4' 27)'                  // (4'35): error CS1519: Invalid token 'return' in class' struct' or interface member declaration                  Diagnostic(ErrorCode.ERR_InvalidMemberDecl' "return").WithArguments("return").WithLocation(4' 35)'                  // (4'35): error CS1519: Invalid token 'return' in class' struct' or interface member declaration                  Diagnostic(ErrorCode.ERR_InvalidMemberDecl' "return").WithArguments("return").WithLocation(4' 35)'                  // (5'1): error CS1022: Type or namespace definition' or end-of-file expected                  Diagnostic(ErrorCode.ERR_EOFExpected' "}").WithLocation(5' 1));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,AttributeInMethodBody,The following statement contains a magic number: ParseAndValidate(test'                  // (4'27): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "[").WithLocation(4' 27)'                  // (4'35): error CS1519: Invalid token 'return' in class' struct' or interface member declaration                  Diagnostic(ErrorCode.ERR_InvalidMemberDecl' "return").WithArguments("return").WithLocation(4' 35)'                  // (4'35): error CS1519: Invalid token 'return' in class' struct' or interface member declaration                  Diagnostic(ErrorCode.ERR_InvalidMemberDecl' "return").WithArguments("return").WithLocation(4' 35)'                  // (5'1): error CS1022: Type or namespace definition' or end-of-file expected                  Diagnostic(ErrorCode.ERR_EOFExpected' "}").WithLocation(5' 1));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,CSharp6Features,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source' options: CSharpParseOptions.Default.WithLanguageVersion(LanguageVersion.CSharp5)).GetDiagnostics().Verify(      // (3'20): error CS8026: Feature 'auto property initializer' is not available in C# 5.  Please use language version 6 or greater.      //     int L { get; } = 12; // auto property initializer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "= 12").WithArguments("auto property initializer"' "6").WithLocation(3' 20)'      // (5'13): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     int M() => 12; // expression-bodied method      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied method"' "6").WithLocation(5' 13)'      // (7'11): error CS8026: Feature 'expression-bodied property' is not available in C# 5.  Please use language version 6 or greater.      //     int N => 12; // expression-bodied property      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> 12").WithArguments("expression-bodied property"' "6").WithLocation(7' 11)'      // (9'21): error CS8026: Feature 'expression-bodied indexer' is not available in C# 5.  Please use language version 6 or greater.      //     int this[int a] => a + 1; // expression-bodied indexer      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> a + 1").WithArguments("expression-bodied indexer"' "6").WithLocation(9' 21)'      // (11'48): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static int operator +(Foo a' Foo b) => null; // expression-bodied operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> null").WithArguments("expression-bodied method"' "6").WithLocation(11' 48)'      // (13'49): error CS8026: Feature 'expression-bodied method' is not available in C# 5.  Please use language version 6 or greater.      //     public static explicit operator bool(Foo a) => false; // expression-bodied conversion operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "=> false").WithArguments("expression-bodied method"' "6").WithLocation(13' 49)'      // (18'32): error CS8026: Feature 'exception filter' is not available in C# 5.  Please use language version 6 or greater.      //         } catch (Exception ex) when (ex.ToString() == null) { // exception filter      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "when").WithArguments("exception filter"' "6").WithLocation(18' 32)'      // (21'17): error CS8026: Feature 'null propagating operator' is not available in C# 5.  Please use language version 6 or greater.      //         var s = o?.ToString(); // null propagating operator      Diagnostic(ErrorCode.ERR_FeatureNotAvailableInVersion5' "o?.ToString()").WithArguments("null propagating operator"' "6").WithLocation(21' 17)                  );
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,TooDeepObjectInitializer,The following statement contains a magic number: const int depth = 5000;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,TooDeepDelegateDeclaration,The following statement contains a magic number: const int depth = 10000;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParserErrorMessageTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParserErrorMessageTests.cs,MismatchedBracesAndDelegateDeclaration,The following statement contains a magic number: SyntaxFactory.ParseSyntaxTree(source).GetDiagnostics().Verify(                  // (7'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(7' 14)'                  // (7'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(7' 14)'                  // (7'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(7' 20)'                  // (7'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(7' 20)'                  // (7'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(7' 21)'                  // (7'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(7' 22)'                  // (8'14): error CS1514: { expected                  Diagnostic(ErrorCode.ERR_LbraceExpected' "int").WithLocation(8' 14)'                  // (8'14): error CS1002: ; expected                  Diagnostic(ErrorCode.ERR_SemicolonExpected' "int").WithLocation(8' 14)'                  // (8'20): error CS1528: Expected ; or = (cannot specify constructor arguments in declaration)                  Diagnostic(ErrorCode.ERR_BadVarDecl' "()").WithLocation(8' 20)'                  // (8'20): error CS1003: Syntax error' '[' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' "(").WithArguments("["' "(").WithLocation(8' 20)'                  // (8'21): error CS1525: Invalid expression term ')'                  Diagnostic(ErrorCode.ERR_InvalidExprTerm' ")").WithArguments(")").WithLocation(8' 21)'                  // (8'22): error CS1003: Syntax error' ']' expected                  Diagnostic(ErrorCode.ERR_SyntaxError' ";").WithArguments("]"' ";").WithLocation(8' 22)'                  // (9'2): error CS1513: } expected                  Diagnostic(ErrorCode.ERR_RbraceExpected' "").WithLocation(9' 2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeGarbageAfterLocation,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeGarbageAfterLocation,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeUsingAfterLocation,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeUsingAfterLocation,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_UsingAfterElements' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeExternAfterLocation,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeExternAfterLocation,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_ExternAfterElements' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeNamespaceAfterLocation,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeClassAfterLocation,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeAttributeAfterLocation,The following statement contains a magic number: Assert.Equal(2' file.AttributeLists.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeAttributeAfterLocation,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeEOFAfterLocation,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeGarbageAfterAttribute,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeGarbageAfterParameterStart,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeGarbageAfterParameterStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeGarbageAfterParameter,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeGarbageAfterParameter,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeMissingCommaBetweenParameters,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeWithGarbageBetweenParameters,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeWithGarbageBetweenParameters,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeWithGarbageBetweenAttributes,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeWithUsingAfterParameterStart,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeWithUsingAfterParameterStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_UsingAfterElements' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeWithExternAfterParameterStart,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeWithExternAfterParameterStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_ExternAfterElements' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeWithNamespaceAfterParameterStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGlobalAttributeWithClassAfterParameterStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MultipleSubsequentMisplacedCharactersSingleError2,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestIncompleteGlobalMembers,The following statement contains a magic number: Assert.Equal(3' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestIncompleteGlobalMembers,The following statement contains a magic number: Assert.Equal(SyntaxKind.IncompleteMember' file.Members[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithGarbageAfterStart,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithGarbageAfterStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithGarbageAfterName,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithClassAfterBracket,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithClassAfterParameterStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithClassAfterParameter,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithClassAfterParameterAndComma,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithClassAfterParameterAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithCommaAfterParameterStart,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithCommaAfterParameterStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithCommaAfterParameterStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithCommasAfterParameterStart,The following statement contains a magic number: Assert.Equal(5' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithCommasAfterParameterStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithCommasAfterParameterStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithCommasAfterParameterStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[4].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithMissingFirstParameter,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestAttributeWithMissingFirstParameter,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterStartOfBaseTypeList,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterStartOfBaseTypeList,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterStartOfBaseTypeList,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterBaseType,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterBaseType,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterBaseTypeAndComma,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterBaseTypeAndComma,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterBaseTypeAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterBaseTypesWithMissingComma,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterBaseTypesWithMissingComma,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterBaseTypesWithMissingComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterStartOfBaseTypeList,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterBaseTypeAndComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterBaseTypesWithMissingComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestOpenBraceAfterConstraintStart,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestOpenBraceAfterConstraintStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_TypeExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestOpenBraceAfterConstraintName,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestConstraintAfterConstraintStart,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestConstraintAfterConstraintStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_TypeExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestConstraintAfterConstraintName,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterConstraintStart,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterConstraintStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_TypeExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterConstraintStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterConstraintName,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterConstraintName,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterConstraintNameAndColon,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterConstraintNameColonTypeAndComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterGenericClassNameStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterGenericClassNameTypeAndComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestOpenBraceAfterGenericClassNameStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterGenericClassNameStart,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterGenericClassNameStart,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterGenericClassNameStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_LbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterGenericClassNameStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterGenericClassNameAndType,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterGenericClassNameAndType,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterGenericClassNameAndType,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterGenericClassNameTypeAndComma,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterGenericClassNameTypeAndComma,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterGenericClassNameTypeAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_LbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterGenericClassNameTypeAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestBaseTypeAfterGenericClassNameStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestBaseTypeAfterGenericClassNameTypeAndComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestConstraintAfterGenericClassNameStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestConstraintAfterGenericClassNameTypeAndComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestFieldAfterFieldStart,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestFieldAfterFieldTypeAndName,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestFieldAfterFieldTypeNameAndComma,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestFieldAfterFieldTypeNameAndComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterFieldStart,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterFieldStart,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterFieldStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_InvalidMemberDecl' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterFieldTypeAndName,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterFieldTypeAndName,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterFieldTypeNameAndComma,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterFieldTypeNameAndComma,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterFieldTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterFieldNameAndComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterMethodParameterStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterMethodParameterType,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterMethodParameterType,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterMethodParameterName,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterMethodParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterMethodParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterMethodParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterMethodParameterType,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterMethodParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterMethodParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterMethodParameterStart,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterMethodParameterStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterMethodParameterType,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterMethodParameterType,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterMethodParameterType,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterMethodParameterTypeAndName,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterMethodParameterTypeAndName,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterMethodParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterMethodParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterMethodParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterMethodParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterMethodParameterList,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterIndexerParameterStart,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterIndexerParameterStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_LbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterIndexerParameterStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterIndexerParameterType,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterIndexerParameterType,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_LbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterIndexerParameterType,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterIndexerParameterName,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterIndexerParameterName,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterIndexerParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal(5' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterIndexerParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterIndexerParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_LbraceExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterIndexerParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[4].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEndBraceAfterIndexerParameters,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterIndexerParameterStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterIndexerParameterType,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterIndexerParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterIndexerParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterStart,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterStart,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_LbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterType,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterType,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterType,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_LbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterType,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterTypeAndName,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterTypeAndName,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterTypeAndName,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal(5' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_LbraceExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[4].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterList,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterIndexerParameterList,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateStart,The following statement contains a magic number: Assert.Equal(5' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[4].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateType,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateType,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateType,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateName,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateName,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateParameterStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateParameterType,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateParameterType,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateParameterTypeName,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestEOFAfterDelegateParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateStart,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateStart,The following statement contains a magic number: Assert.Equal(5' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[4].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateType,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateType,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateType,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateType,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateName,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateName,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateName,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateParameterStart,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateParameterStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateParameterType,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateParameterType,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateParameterType,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateParameterTypeName,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateParameterTypeName,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateParameterList,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterDelegateParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterDelegateParameterType,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterDelegateParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterDelegateParameterTypeNameAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_UnexpectedCharacter' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageBetweenEnumNamesWithMissingComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAferEnumNameAndEquals,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterEnumStart,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterEnumName,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterEnumNameAndComma,The following statement contains a magic number: Assert.Equal(2' file.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterFixedFieldRankStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterFixedFieldRankSize,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterFixedFieldRankSize,The following statement contains a magic number: Assert.Equal(ErrorCode.ERR_ValueExpected' (ErrorCode)file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterFieldRankStart,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterFieldRankComma,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalDeclarationStart,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalDeclarationStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalRankStart,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalRankStart,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalRankStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalRankComma,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalRankComma,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalRankComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalDeclarationWithMissingSemicolon,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalDeclarationWithCommaAndMissingSemicolon,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalDeclarationWithCommaAndMissingSemicolon,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalDeclarationEquals,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalDeclarationEquals,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalDeclarationArrayInitializerStart,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalDeclarationArrayInitializerStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalDeclarationArrayInitializerExpression,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalDeclarationArrayInitializerExpression,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalDeclarationArrayInitializerExpressionAndComma,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLocalDeclarationArrayInitializerExpressionAndComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageBetweenLocalDeclarationArrayInitializerExpressionsWithMissingComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageBeforeMethodArgumentAndComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemiColonAfterMethodCallArgumentAndComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClosingBraceAfterMethodCallArgumentAndCommaWithWhitespace,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClosingBraceAfterMethodCallArgumentAndCommaWithWhitespace,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterMethodCallStart,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterMethodCallStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterMethodCallArgument,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterMethodCallArgument,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterMethodCallArgumentAndComma,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterMethodCallArgumentAndComma,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterMethodCallArgumentAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterMethodCallStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterMethodCallArgument,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterMethodCallArgumentAndComma,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterMethodCallArgumentAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageBeforeIndexerArgumentAndComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemiColonAfterIndexerArgumentAndComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterIndexerStart,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterIndexerStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterIndexerArgument,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterIndexerArgument,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterIndexerArgumentAndComma,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterIndexerArgumentAndComma,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterIndexerArgumentAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterIndexerStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterIndexerArgument,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterIndexerArgumentAndComma,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterIndexerArgumentAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemiColonAfterFixedStatementStart,The following statement contains a magic number: Assert.Equal(2' diags.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestFinallyAfterCatchStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCatchAfterCatchStart,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCatchAfterCatchStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_TooManyCatches' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestFinallyAfterCatchParameterStart,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestFinallyAfterCatchParameterStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCatchAfterCatchParameterStart,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCatchAfterCatchParameterStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterCatchParameterStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemiColonAfterDoWhileExpressionIndexer,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestOpenBraceAfterForStatementInitializerStart,The following statement contains a magic number: Assert.Equal(5' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestOpenBraceAfterForStatementInitializerStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestOpenBraceAfterForStatementInitializerStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestOpenBraceAfterForStatementInitializerStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[4].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterForStatementInitializerStart,The following statement contains a magic number: Assert.Equal(7' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterForStatementInitializerStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterForStatementInitializerStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterForStatementInitializerStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[4].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterForStatementInitializerStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm' file.Errors()[5].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterForStatementInitializerStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[6].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestOpenBraceAfterForStatementConditionStart,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestOpenBraceAfterForStatementConditionStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterForStatementConditionStart,The following statement contains a magic number: Assert.Equal(5' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterForStatementConditionStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterForStatementConditionStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterForStatementConditionStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[4].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestOpenBraceAfterForStatementIncrementerStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterForStatementIncrementerStart,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterForStatementIncrementerStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestCloseBraceAfterForStatementIncrementerStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemicolonAfterAnonymousTypeMemberEquals,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterAnonymousTypeStart,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterAnonymousTypeStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterAnonymousTypeMemberStart,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterAnonymousTypeMemberStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterAnonymousTypeMemberEquals,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterAnonymousTypeMemberEquals,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterAnonymousTypeMemberEquals,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterAnonymousTypeMember,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterAnonymousTypeMember,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterAnonymousTypeMemberComma,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterAnonymousTypeMemberComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterAnonymousTypeMemberEquals,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemicolonAfterObjectInitializerMemberEquals,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemicolonAfterObjectInitializerMemberComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterObjectInitializerStart,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterObjectInitializerStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterObjectInitializerMemberStart,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterObjectInitializerMemberStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterObjectInitializerMemberEquals,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterObjectInitializerMemberEquals,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterObjectInitializerMemberEquals,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterObjectInitializerMember,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterObjectInitializerMember,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterObjectInitializerMemberComma,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterObjectInitializerMemberComma,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterObjectInitializerMemberComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterObjectInitializerMemberEquals,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestGarbageAfterObjectInitializerMemberComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemicolonAfterLambdaParameter,The following statement contains a magic number: Assert.Equal(5' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemicolonAfterLambdaParameter,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemicolonAfterLambdaParameter,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemicolonAfterLambdaParameter,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm' file.Errors()[4].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemicolonAfterUntypedLambdaParameter,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemicolonAfterUntypedLambdaParameter,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemicolonAfterUntypedLambdaParameter,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLambdaParameter,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLambdaParameter,The following statement contains a magic number: Assert.Equal(6' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLambdaParameter,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_CloseParenExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLambdaParameter,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLambdaParameter,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm' file.Errors()[4].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterLambdaParameter,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[5].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterUntypedLambdaParameter,The following statement contains a magic number: Assert.Equal(2' ms.Body.Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterUntypedLambdaParameter,The following statement contains a magic number: Assert.Equal(5' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterUntypedLambdaParameter,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SyntaxError' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterUntypedLambdaParameter,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_InvalidExprTerm' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestStatementAfterUntypedLambdaParameter,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[4].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterPropertyStart,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterPropertyGet,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMethodAfterPropertyGet,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterPropertyGetBrace,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestClassAfterPropertyGetBrace,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestModifiedMemberAfterPropertyGetBrace,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestModifiedMemberAfterPropertyGetBrace,The following statement contains a magic number: Assert.Equal(2' pd.AccessorList.Accessors.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestModifiedMemberAfterPropertyGetBrace,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestModifiedMemberAfterPropertyGetBrace,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestPropertyAccessorsWithoutBodiesOrSemicolons,The following statement contains a magic number: Assert.Equal(2' accessorDecls.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestPropertyAccessorsWithoutBodiesOrSemicolons,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemicolonAfterOrderingStart,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemicolonAfterOrderingExpressionAndComma,The following statement contains a magic number: Assert.Equal(2' oc.Orderings.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestSemicolonAfterOrderingExpressionAndComma,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMemberAfterOrderingStart,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMemberAfterOrderingStart,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMemberAfterOrderingStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMemberAfterOrderingStart,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMemberAfterOrderingExpression,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMemberAfterOrderingExpression,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMemberAfterOrderingExpression,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMemberAfterOrderingExpressionAndComma,The following statement contains a magic number: Assert.Equal(2' agg.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMemberAfterOrderingExpressionAndComma,The following statement contains a magic number: Assert.Equal(2' oc.Orderings.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMemberAfterOrderingExpressionAndComma,The following statement contains a magic number: Assert.Equal(4' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMemberAfterOrderingExpressionAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestMemberAfterOrderingExpressionAndComma,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[3].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,PartialInVariableDecl,The following statement contains a magic number: Assert.Equal(2' item1.Members.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,PartialInVariableDecl,The following statement contains a magic number: Assert.Equal(2' decl.Declaration.Variables.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,PartialInVariableDecl,The following statement contains a magic number: Assert.Equal(3' subitem1.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,PartialInVariableDecl,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' subitem1.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,PartialInVariableDecl,The following statement contains a magic number: Assert.Equal(3' subitem2.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,PartialInVariableDecl,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_InvalidMemberDecl' subitem2.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestNamespaceDeclarationInUsingDirective,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,TestNamespaceDeclarationInUsingDirective,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_RbraceExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,ParseMethodWithConstructorInitializer,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,ParseMethodWithConstructorInitializer,The following statement contains a magic number: var methodDecl = classDecl.ChildNodesAndTokens()[3];
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,ParseMethodWithConstructorInitializer,The following statement contains a magic number: var methodBody = methodDecl.ChildNodesAndTokens()[3];
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,FromKeyword,The following statement contains a magic number: Assert.Equal(3' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,FromKeyword,The following statement contains a magic number: Assert.Equal((int)ErrorCode.ERR_SemicolonExpected' file.Errors()[2].Code);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,UnclosedGenericInExplicitInterfaceName,The following statement contains a magic number: Assert.Equal(2' file.Errors().Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,IncompleteForEachStatement,The following statement contains a magic number: Assert.Equal(3' foreachNode.ChildNodes().ToList().Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,ManySkippedTokens,The following statement contains a magic number: const int numTokens = 500000;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingOpenBraceForClass,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(20' 9)' classDecl.Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingOpenBraceForClass,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(20' 9)' classDecl.Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingOpenBraceForClass,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(16' 13)' classDecl.FullSpan);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingOpenBraceForClass,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(16' 13)' classDecl.FullSpan);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingOpenBraceForStruct,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(20' 14)' structDecl.Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingOpenBraceForStruct,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(20' 14)' structDecl.Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingOpenBraceForStruct,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(16' 18)' structDecl.FullSpan);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingOpenBraceForStruct,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(16' 18)' structDecl.FullSpan);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingNameForStruct,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(20' 24)' structDecl.Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingNameForStruct,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(20' 24)' structDecl.Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingNameForStruct,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(16' 30)' structDecl.FullSpan);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingNameForStruct,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(16' 30)' structDecl.FullSpan);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingNameForClass,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(20' 19)' classDecl.Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingNameForClass,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(20' 19)' classDecl.Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingNameForClass,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(16' 25)' classDecl.FullSpan);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingErrorRecoveryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingErrorRecoveryTests.cs,MissingNameForClass,The following statement contains a magic number: Assert.Equal(new Text.TextSpan(16' 25)' classDecl.FullSpan);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,ParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ParsingTests.cs,EnumerateNodes,The following statement contains a magic number: var stack = new Stack<ChildSyntaxList.Enumerator>(24);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,RoundTrippingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\RoundTrippingTests.cs,AutoPropInitializers,The following statement contains a magic number: ParseAndRoundTripping("class C { int GetInt { get;; } = 0;; }"' experimental' 2' 1);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,RoundTrippingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\RoundTrippingTests.cs,NullChar,The following statement contains a magic number: ParseAndRoundTripping("abc\0def"' 3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,RoundTrippingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\RoundTrippingTests.cs,NullChar,The following statement contains a magic number: ParseAndRoundTripping("\0abc"' 2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,RoundTrippingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\RoundTrippingTests.cs,TestNegBug879395,The following statement contains a magic number: ParseAndRoundTripping(text' 2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,RoundTrippingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\RoundTrippingTests.cs,RegressNegNotCheckNullRef,The following statement contains a magic number: ParseAndRoundTripping(text' 2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,RoundTrippingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\RoundTrippingTests.cs,IncompleteGlobalAlias,The following statement contains a magic number: ParseAndRoundTripping(text' errorCount: 3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestLocalDeclarationStatementWithMultipleVariables,The following statement contains a magic number: Assert.Equal(3' ds.Declaration.Variables.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestLocalDeclarationStatementWithMultipleVariables,The following statement contains a magic number: Assert.NotNull(ds.Declaration.Variables[2].Identifier);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestLocalDeclarationStatementWithMultipleVariables,The following statement contains a magic number: Assert.Equal("c"' ds.Declaration.Variables[2].Identifier.ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestLocalDeclarationStatementWithMultipleVariables,The following statement contains a magic number: Assert.Null(ds.Declaration.Variables[2].Initializer);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestLocalDeclarationStatementWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.Equal(3' ds.Declaration.Variables.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestLocalDeclarationStatementWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.NotNull(ds.Declaration.Variables[2].Identifier);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestLocalDeclarationStatementWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.Equal("c"' ds.Declaration.Variables[2].Identifier.ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestLocalDeclarationStatementWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.Null(ds.Declaration.Variables[2].ArgumentList);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestLocalDeclarationStatementWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.NotNull(ds.Declaration.Variables[2].Initializer.EqualsToken);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestLocalDeclarationStatementWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.False(ds.Declaration.Variables[2].Initializer.EqualsToken.IsMissing);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestLocalDeclarationStatementWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.NotNull(ds.Declaration.Variables[2].Initializer.Value);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestLocalDeclarationStatementWithMultipleVariablesAndInitializers,The following statement contains a magic number: Assert.Equal("vc"' ds.Declaration.Variables[2].Initializer.Value.ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestFixedStatementWithMultipleVariables,The following statement contains a magic number: Assert.Equal(2' fs.Declaration.Variables.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestTryCatchWithMultipleCatches,The following statement contains a magic number: Assert.Equal(3' ts.Catches.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestTryCatchWithMultipleCatches,The following statement contains a magic number: Assert.NotNull(ts.Catches[2].CatchKeyword);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestTryCatchWithMultipleCatches,The following statement contains a magic number: Assert.Null(ts.Catches[2].Declaration);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestTryCatchWithMultipleCatches,The following statement contains a magic number: Assert.NotNull(ts.Catches[2].Block);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestTryCatchWithMultipleCatchesAndFinally,The following statement contains a magic number: Assert.Equal(3' ts.Catches.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestTryCatchWithMultipleCatchesAndFinally,The following statement contains a magic number: Assert.NotNull(ts.Catches[2].CatchKeyword);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestTryCatchWithMultipleCatchesAndFinally,The following statement contains a magic number: Assert.Null(ts.Catches[2].Declaration);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestTryCatchWithMultipleCatchesAndFinally,The following statement contains a magic number: Assert.NotNull(ts.Catches[2].Block);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestForWithMultipleVariableDeclarations,The following statement contains a magic number: Assert.Equal(2' fs.Declaration.Variables.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestForWithMultipleVariableInitializers,The following statement contains a magic number: Assert.Equal(2' fs.Initializers.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestForWithMultipleIncrementors,The following statement contains a magic number: Assert.Equal(2' fs.Incrementors.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestSwitchWithMultipleCases,The following statement contains a magic number: Assert.Equal(2' ss.Sections.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestSwitchWithMultipleLabelsOnOneCase,The following statement contains a magic number: Assert.Equal(2' ss.Sections[0].Labels.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestSwitchWithMultipleStatementsOnOneCase,The following statement contains a magic number: Assert.Equal(2' ss.Sections[0].Statements.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,TestUsingWithDeclarationWithMultipleVariables,The following statement contains a magic number: Assert.Equal(2' us.Declaration.Variables.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,Bug684860_SkippedTokens,The following statement contains a magic number: const int n = 100000;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StatementParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\StatementParsingTests.cs,Bug684860_XmlText,The following statement contains a magic number: const int n = 100000;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(3' list.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal("C"' list[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: var elementC = list[2];
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' list.IndexOf(elementC));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: newList = list.Insert(2' nodeD);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: newList = list.Insert(3' nodeD);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: newList = list.InsertRange(2' new[] { nodeD' nodeE });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: newList = list.InsertRange(3' new[] { nodeD' nodeE });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(3' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(3' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(3' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,DoTestAddInsertRemoveOnEmptyList,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,DoTestAddInsertRemoveOnEmptyList,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SeparatedSyntaxListTests.cs,Extensions,The following statement contains a magic number: Assert.Equal(2' list.IndexOf(SyntaxKind.NumericLiteralExpression));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StructuredTriviaTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\StructuredTriviaTests.cs,TestStructuredTrivia,The following statement contains a magic number: var result = identExpr.FindToken(3' true);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StructuredTriviaTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\StructuredTriviaTests.cs,TestStructuredTrivia,The following statement contains a magic number: var trResult = identExpr.FindTrivia(6' SyntaxTrivia.Any);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StructuredTriviaTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\StructuredTriviaTests.cs,TestStructuredTrivia,The following statement contains a magic number: var resultList = identExpr.DescendantTokens(t => t.FullSpan.OverlapsWith(new TextSpan(3' 18)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StructuredTriviaTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\StructuredTriviaTests.cs,TestStructuredTrivia,The following statement contains a magic number: var resultList = identExpr.DescendantTokens(t => t.FullSpan.OverlapsWith(new TextSpan(3' 18)));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StructuredTriviaTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\StructuredTriviaTests.cs,ReferenceDirectives1,The following statement contains a magic number: Assert.Equal(3' directives.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StructuredTriviaTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\StructuredTriviaTests.cs,ReferenceDirectives1,The following statement contains a magic number: Assert.Equal("ref2"' directives[2].File.Value);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StructuredTriviaTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\StructuredTriviaTests.cs,ReferenceDirectives4,The following statement contains a magic number: Assert.Equal(3' directives.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,StructuredTriviaTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\StructuredTriviaTests.cs,ReferenceDirectives4,The following statement contains a magic number: Assert.Equal("a"' directives[2].File.Value);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxAnnotationTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxAnnotationTests.cs,TestMultipleAnnotationsOnAllNodesTokensAndTrivia,The following statement contains a magic number: var annotations = new List<SyntaxAnnotation>(Enumerable.Range(0' 3).Select(_ => new SyntaxAnnotation()));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxAnnotationTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxAnnotationTests.cs,TestCopyAnnotations,The following statement contains a magic number: var annotations = new List<SyntaxAnnotation>(Enumerable.Range(0' 10).Select(_ => new SyntaxAnnotation()));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxAnnotationTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxAnnotationTests.cs,TestManyRandomAnnotations,The following statement contains a magic number: i < 20
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxAnnotationTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxAnnotationTests.cs,TestRandomAnnotations,The following statement contains a magic number: var randomGenerator = new Random(100);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxAnnotationTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxAnnotationTests.cs,TestRandomAnnotations,The following statement contains a magic number: i < 20
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,InjectRandomAnnotationsRewriter,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxAnnotationTests.cs,InjectRandomAnnotationsRewriter,The following statement contains a magic number: _random = new Random(10);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithNameChanged,The following statement contains a magic number: Assert.Equal(new TextSpan(6' 1)' changes[0].Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffTwoClassesWithBothNamesChanged,The following statement contains a magic number: Assert.Equal(2' spans.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffTwoClassesWithBothNamesChanged,The following statement contains a magic number: Assert.Equal(2' changes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffTwoClassesWithBothNamesChanged,The following statement contains a magic number: Assert.Equal(new TextSpan(6' 1)' changes[0].Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffTwoClassesWithBothNamesChanged,The following statement contains a magic number: Assert.Equal(new TextSpan(18' 1)' changes[1].Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithNewClassStarted,The following statement contains a magic number: Assert.Equal(new TextSpan(0' 6)' spans[0]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithNewClassStarted2,The following statement contains a magic number: Assert.Equal(new TextSpan(0' 8)' spans[0]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithNewClassStarted3,The following statement contains a magic number: Assert.Equal(new TextSpan(11' 11)' spans[0]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithNewClassStarted3,The following statement contains a magic number: Assert.Equal(new TextSpan(11' 11)' spans[0]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithNewClassStarted3,The following statement contains a magic number: Assert.Equal(new TextSpan(11' 0)' changes[0].Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithNewClassStarted4,The following statement contains a magic number: Assert.Equal(new TextSpan(10' 12)' spans[0]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithNewClassStarted4,The following statement contains a magic number: Assert.Equal(new TextSpan(10' 12)' spans[0]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithNewClassStarted4,The following statement contains a magic number: Assert.Equal(new TextSpan(10' 0)' changes[0].Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithNewNamespaceEnclosing,The following statement contains a magic number: Assert.Equal(new TextSpan(0' 14)' spans[0]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithNewMemberInserted,The following statement contains a magic number: var newTree = oldTree.WithInsertAt(10' "int X; ");
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithNewMemberInserted,The following statement contains a magic number: Assert.Equal(new TextSpan(10' 7)' spans[0]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithNewMemberInserted,The following statement contains a magic number: Assert.Equal(new TextSpan(10' 7)' spans[0]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithNewMemberInserted,The following statement contains a magic number: Assert.Equal(new TextSpan(10' 0)' changes[0].Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithMemberRemoved,The following statement contains a magic number: var newTree = oldTree.WithRemoveAt(10' 7);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithMemberRemoved,The following statement contains a magic number: var newTree = oldTree.WithRemoveAt(10' 7);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithMemberRemoved,The following statement contains a magic number: Assert.Equal(new TextSpan(10' 7)' changes[0].Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithMemberRemoved,The following statement contains a magic number: Assert.Equal(new TextSpan(10' 7)' changes[0].Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithMemberRemovedDeep,The following statement contains a magic number: var newTree = oldTree.WithRemoveAt(24' 7);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithMemberRemovedDeep,The following statement contains a magic number: var newTree = oldTree.WithRemoveAt(24' 7);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithMemberRemovedDeep,The following statement contains a magic number: Assert.Equal(new TextSpan(24' 7)' changes[0].Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithMemberRemovedDeep,The following statement contains a magic number: Assert.Equal(new TextSpan(24' 7)' changes[0].Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithMemberNameRemoved,The following statement contains a magic number: var newTree = oldTree.WithRemoveAt(14' 1);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassWithMemberNameRemoved,The following statement contains a magic number: Assert.Equal(new TextSpan(14' 1)' changes[0].Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassChangedToStruct,The following statement contains a magic number: Assert.Equal(new TextSpan(14' 6)' spans[0]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassChangedToStruct,The following statement contains a magic number: Assert.Equal(new TextSpan(14' 6)' spans[0]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassChangedToStruct,The following statement contains a magic number: Assert.Equal(new TextSpan(14' 5)' changes[0].Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestDiffClassChangedToStruct,The following statement contains a magic number: Assert.Equal(new TextSpan(14' 5)' changes[0].Span);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxDiffingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxDiffingTests.cs,TestQualifyWithThisCore,The following statement contains a magic number: var span = new TextSpan(index' 4);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestConstructNamespaceWithNameOnly,The following statement contains a magic number: Assert.Equal(9' n.NamespaceKeyword.Width);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestConstructClassWithKindAndNameOnly,The following statement contains a magic number: Assert.Equal(5' c.Keyword.Width);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestSeparatedListFactory_DefaultSeparators,The following statement contains a magic number: Assert.Equal(3' list1.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestSeparatedListFactory_DefaultSeparators,The following statement contains a magic number: Assert.Equal(2' list1.SeparatorCount);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestSeparatedListFactory_DefaultSeparators,The following statement contains a magic number: Assert.Equal(3' list2.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestSeparatedListFactory_DefaultSeparators,The following statement contains a magic number: Assert.Equal(2' list2.SeparatorCount);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestLiteralDefaultStringValues,The following statement contains a magic number: CheckLiteralToString(0.012345F' @"0.012345F");
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestLiteralDefaultStringValues,The following statement contains a magic number: CheckLiteralToString(0.012345D' @"0.012345");
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestLiteralDefaultStringValues,The following statement contains a magic number: CheckLiteralToString(0.012345M' @"0.012345M");
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxFactoryTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxFactoryTests.cs,TestLiteralToStringDifferentCulture,The following statement contains a magic number: var literal = SyntaxFactory.Literal(3.14);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(3' list.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal("C"' list[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: var elementC = list[2];
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' list.IndexOf(elementC));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: newList = list.Insert(2' nodeD);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: newList = list.Insert(3' nodeD);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: newList = list.InsertRange(2' new[] { nodeD' nodeE });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: newList = list.InsertRange(3' new[] { nodeD' nodeE });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(3' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(3' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(3' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,DoTestAddInsertRemoveReplaceOnEmptyList,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,DoTestAddInsertRemoveReplaceOnEmptyList,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,Extensions,The following statement contains a magic number: Assert.Equal(2' list.IndexOf(SyntaxKind.NumericLiteralExpression));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,WithLotsOfChildrenTest,The following statement contains a magic number: string expectedArgName = ((char)('a' + (position / 2))).ToString();
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxListTests.cs,WithLotsOfChildrenTest,The following statement contains a magic number: position % 2 == 0
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestChildNodes,The following statement contains a magic number: Assert.Equal(2' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestAncestors,The following statement contains a magic number: Assert.Equal(7' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestAncestors,The following statement contains a magic number: Assert.Equal(SyntaxKind.MultiplyExpression' nodes[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestAncestors,The following statement contains a magic number: Assert.Equal(SyntaxKind.ParenthesizedExpression' nodes[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestAncestors,The following statement contains a magic number: Assert.Equal(SyntaxKind.SubtractExpression' nodes[4].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestAncestors,The following statement contains a magic number: Assert.Equal(SyntaxKind.ParenthesizedExpression' nodes[5].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestAncestors,The following statement contains a magic number: Assert.Equal(SyntaxKind.AddExpression' nodes[6].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestAncestorsAndSelf,The following statement contains a magic number: Assert.Equal(8' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestAncestorsAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.ParenthesizedExpression' nodes[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestAncestorsAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.MultiplyExpression' nodes[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestAncestorsAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.ParenthesizedExpression' nodes[4].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestAncestorsAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.SubtractExpression' nodes[5].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestAncestorsAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.ParenthesizedExpression' nodes[6].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestAncestorsAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.AddExpression' nodes[7].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodes,The following statement contains a magic number: Assert.Equal(3' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodes,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueLiteralExpression' nodes[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodes,The following statement contains a magic number: Assert.Equal(2' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodes,The following statement contains a magic number: Assert.Equal(3' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodes,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueLiteralExpression' nodes[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodes,The following statement contains a magic number: Assert.Equal(2' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndSelf,The following statement contains a magic number: Assert.Equal(2' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndSelf,The following statement contains a magic number: Assert.Equal(4' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueLiteralExpression' nodes[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueLiteralExpression' nodes[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndSelf,The following statement contains a magic number: Assert.Equal(2' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndSelf,The following statement contains a magic number: Assert.Equal(3' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueLiteralExpression' nodes[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndSelf,The following statement contains a magic number: Assert.Equal(2' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndSelf,The following statement contains a magic number: Assert.Equal(4' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueLiteralExpression' nodes[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueLiteralExpression' nodes[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndSelf,The following statement contains a magic number: Assert.Equal(2' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndSelf,The following statement contains a magic number: Assert.Equal(3' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueLiteralExpression' nodes[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokens,The following statement contains a magic number: Assert.Equal(4' nodesAndTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokens,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueKeyword' nodesAndTokens[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokens,The following statement contains a magic number: Assert.Equal(SyntaxKind.SemicolonToken' nodesAndTokens[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokens,The following statement contains a magic number: Assert.Equal(10' nodesAndTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokens,The following statement contains a magic number: Assert.Equal(SyntaxKind.IfKeyword' nodesAndTokens[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokens,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueLiteralExpression' nodesAndTokens[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokens,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueKeyword' nodesAndTokens[4].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokens,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndOfDirectiveToken' nodesAndTokens[5].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokens,The following statement contains a magic number: Assert.Equal(SyntaxKind.ReturnKeyword' nodesAndTokens[6].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokens,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueLiteralExpression' nodesAndTokens[7].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokens,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueKeyword' nodesAndTokens[8].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokens,The following statement contains a magic number: Assert.Equal(SyntaxKind.SemicolonToken' nodesAndTokens[9].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokens,The following statement contains a magic number: Assert.Equal(4' nodesAndTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokens,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueKeyword' nodesAndTokens[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokens,The following statement contains a magic number: Assert.Equal(SyntaxKind.SemicolonToken' nodesAndTokens[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(5' nodesAndTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueLiteralExpression' nodesAndTokens[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueKeyword' nodesAndTokens[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.SemicolonToken' nodesAndTokens[4].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(11' nodesAndTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.HashToken' nodesAndTokens[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.IfKeyword' nodesAndTokens[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueLiteralExpression' nodesAndTokens[4].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueKeyword' nodesAndTokens[5].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndOfDirectiveToken' nodesAndTokens[6].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.ReturnKeyword' nodesAndTokens[7].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueLiteralExpression' nodesAndTokens[8].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueKeyword' nodesAndTokens[9].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.SemicolonToken' nodesAndTokens[10].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(5' nodesAndTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueLiteralExpression' nodesAndTokens[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.TrueKeyword' nodesAndTokens[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelf,The following statement contains a magic number: Assert.Equal(SyntaxKind.SemicolonToken' nodesAndTokens[4].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelfForEmptyCompilationUnit,The following statement contains a magic number: Assert.Equal(2' nodesAndTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelfForDocumentationComment,The following statement contains a magic number: Assert.Equal(7' nodesAndTokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelfForDocumentationComment,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlText' nodesAndTokens[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelfForDocumentationComment,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlTextLiteralToken' nodesAndTokens[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelfForDocumentationComment,The following statement contains a magic number: Assert.Equal(SyntaxKind.XmlTextLiteralNewLineToken' nodesAndTokens[4].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelfForDocumentationComment,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndOfDocumentationCommentToken' nodesAndTokens[5].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantNodesAndTokensAndSelfForDocumentationComment,The following statement contains a magic number: Assert.Equal(SyntaxKind.IdentifierToken' nodesAndTokens[6].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokens,The following statement contains a magic number: Assert.Equal(4' tokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokens,The following statement contains a magic number: Assert.Equal(SyntaxKind.SemicolonToken' tokens[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokens,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndOfFileToken' tokens[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensWithExtraWhitespace,The following statement contains a magic number: Assert.Equal(4' tokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensWithExtraWhitespace,The following statement contains a magic number: Assert.Equal(SyntaxKind.SemicolonToken' tokens[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensWithExtraWhitespace,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndOfFileToken' tokens[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensEntireRange,The following statement contains a magic number: Assert.Equal(8' tokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensEntireRange,The following statement contains a magic number: Assert.Equal(SyntaxKind.IdentifierToken' tokens[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensEntireRange,The following statement contains a magic number: Assert.Equal(SyntaxKind.SemicolonToken' tokens[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensEntireRange,The following statement contains a magic number: Assert.Equal(SyntaxKind.UsingKeyword' tokens[4].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensEntireRange,The following statement contains a magic number: Assert.Equal(SyntaxKind.IdentifierToken' tokens[5].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensEntireRange,The following statement contains a magic number: Assert.Equal(SyntaxKind.SemicolonToken' tokens[6].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensEntireRange,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndOfFileToken' tokens[7].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverFullSpan,The following statement contains a magic number: var tokens = t1.GetCompilationUnitRoot().DescendantTokens(new TextSpan(0' 16)).ToList();
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverFullSpan,The following statement contains a magic number: Assert.Equal(3' tokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverFullSpan,The following statement contains a magic number: Assert.Equal(SyntaxKind.IdentifierToken' tokens[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverInsideSpan,The following statement contains a magic number: var tokens = t1.GetCompilationUnitRoot().DescendantTokens(new TextSpan(1' 14)).ToList();
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverInsideSpan,The following statement contains a magic number: Assert.Equal(3' tokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverInsideSpan,The following statement contains a magic number: Assert.Equal(SyntaxKind.IdentifierToken' tokens[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverFullSpanOffset,The following statement contains a magic number: var tokens = t1.GetCompilationUnitRoot().DescendantTokens(new TextSpan(7' 17)).ToList();
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverFullSpanOffset,The following statement contains a magic number: var tokens = t1.GetCompilationUnitRoot().DescendantTokens(new TextSpan(7' 17)).ToList();
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverFullSpanOffset,The following statement contains a magic number: Assert.Equal(4' tokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverFullSpanOffset,The following statement contains a magic number: Assert.Equal(SyntaxKind.SemicolonToken' tokens[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverFullSpanOffset,The following statement contains a magic number: Assert.Equal(SyntaxKind.UsingKeyword' tokens[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverInsideSpanOffset,The following statement contains a magic number: var tokens = t1.GetCompilationUnitRoot().DescendantTokens(new TextSpan(8' 15)).ToList();
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverInsideSpanOffset,The following statement contains a magic number: var tokens = t1.GetCompilationUnitRoot().DescendantTokens(new TextSpan(8' 15)).ToList();
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverInsideSpanOffset,The following statement contains a magic number: Assert.Equal(4' tokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverInsideSpanOffset,The following statement contains a magic number: Assert.Equal(SyntaxKind.SemicolonToken' tokens[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTokensOverInsideSpanOffset,The following statement contains a magic number: Assert.Equal(SyntaxKind.UsingKeyword' tokens[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTrivia,The following statement contains a magic number: Assert.Equal(4' list.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTrivia,The following statement contains a magic number: Assert.Equal(SyntaxKind.WhitespaceTrivia' list[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTrivia,The following statement contains a magic number: Assert.Equal(SyntaxKind.WhitespaceTrivia' list[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTriviaIntoStructuredTrivia,The following statement contains a magic number: Assert.Equal(7' list.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTriviaIntoStructuredTrivia,The following statement contains a magic number: Assert.Equal(SyntaxKind.DocumentationCommentExteriorTrivia' list[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTriviaIntoStructuredTrivia,The following statement contains a magic number: Assert.Equal(SyntaxKind.WhitespaceTrivia' list[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTriviaIntoStructuredTrivia,The following statement contains a magic number: Assert.Equal(SyntaxKind.DocumentationCommentExteriorTrivia' list[4].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTriviaIntoStructuredTrivia,The following statement contains a magic number: Assert.Equal(SyntaxKind.WhitespaceTrivia' list[5].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestDescendantTriviaIntoStructuredTrivia,The following statement contains a magic number: Assert.Equal(SyntaxKind.WhitespaceTrivia' list[6].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,Bug877223,The following statement contains a magic number: var node = t1.GetCompilationUnitRoot().DescendantTokens(new TextSpan(6' 3)).First();
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,Bug877223,The following statement contains a magic number: var node = t1.GetCompilationUnitRoot().DescendantTokens(new TextSpan(6' 3)).First();
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestFindNode,The following statement contains a magic number: var invalidSpan = new TextSpan(100' 100);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestFindNode,The following statement contains a magic number: var invalidSpan = new TextSpan(100' 100);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestFindNode,The following statement contains a magic number: invalidSpan = new TextSpan(root.FullSpan.End - 1' 2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestFindTriviaNoTriviaExistsAtPosition,The following statement contains a magic number: var position = tree.GetText().Lines[2].End - 1;
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetLastTokenIncludingZeroWidth,The following statement contains a magic number: Assert.Equal(26' last.FullSpan.Start);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestReverseChildSyntaxList,The following statement contains a magic number: TestReverse(root1.Members[2].ChildNodesAndTokens());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetNextTokenIncludingSkippedTokens,The following statement contains a magic number: Assert.Equal(6' tokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetNextTokenExcludingSkippedTokens,The following statement contains a magic number: Assert.Equal(6' tokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetPreviousTokenIncludingSkippedTokens,The following statement contains a magic number: Assert.Equal(6' tokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetPreviousTokenExcludingSkippedTokens,The following statement contains a magic number: Assert.Equal(6' tokens.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestSyntaxNodeOrTokenEquality,The following statement contains a magic number: var nameChild = member.ChildNodesAndTokens()[3];
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToIf,The following statement contains a magic number: Assert.Equal(4' related.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToIf,The following statement contains a magic number: Assert.Equal(SyntaxKind.ElseDirectiveTrivia' related[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToIf,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndIfDirectiveTrivia' related[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToIfElements,The following statement contains a magic number: Assert.Equal(4' related.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToIfElements,The following statement contains a magic number: Assert.Equal(SyntaxKind.ElseDirectiveTrivia' related[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToIfElements,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndIfDirectiveTrivia' related[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToIfElements,The following statement contains a magic number: var related3 = related[2].GetRelatedDirectives();
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToEndIf,The following statement contains a magic number: Assert.Equal(4' related.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToEndIf,The following statement contains a magic number: Assert.Equal(SyntaxKind.ElseDirectiveTrivia' related[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToEndIf,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndIfDirectiveTrivia' related[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToIfWithNestedIfEndIF,The following statement contains a magic number: Assert.Equal(4' related.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToIfWithNestedIfEndIF,The following statement contains a magic number: Assert.Equal(SyntaxKind.ElseDirectiveTrivia' related[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToIfWithNestedIfEndIF,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndIfDirectiveTrivia' related[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToIfWithNestedRegionEndRegion,The following statement contains a magic number: Assert.Equal(4' related.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToIfWithNestedRegionEndRegion,The following statement contains a magic number: Assert.Equal(SyntaxKind.ElseDirectiveTrivia' related[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToIfWithNestedRegionEndRegion,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndIfDirectiveTrivia' related[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToEndIfWithNestedIfEndIf,The following statement contains a magic number: Assert.Equal(4' related.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToEndIfWithNestedIfEndIf,The following statement contains a magic number: Assert.Equal(SyntaxKind.ElseDirectiveTrivia' related[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToEndIfWithNestedIfEndIf,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndIfDirectiveTrivia' related[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToEndIfWithNestedRegionEndRegion,The following statement contains a magic number: Assert.Equal(4' related.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToEndIfWithNestedRegionEndRegion,The following statement contains a magic number: Assert.Equal(SyntaxKind.ElseDirectiveTrivia' related[2].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToEndIfWithNestedRegionEndRegion,The following statement contains a magic number: Assert.Equal(SyntaxKind.EndIfDirectiveTrivia' related[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToRegion,The following statement contains a magic number: Assert.Equal(2' related.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetDirectivesRelatedToEndRegion,The following statement contains a magic number: Assert.Equal(2' related.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestTextAndSpanWithTrivia1,The following statement contains a magic number: Assert.Equal(53' rootNode.FullSpan.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestTextAndSpanWithTrivia1,The following statement contains a magic number: Assert.Equal(44' rootNode.Span.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestTextAndSpanWithTrivia2,The following statement contains a magic number: Assert.Equal(57' rootNode.FullSpan.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestTextAndSpanWithTrivia2,The following statement contains a magic number: Assert.Equal(46' rootNode.Span.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthTokensInParentAreUnique,The following statement contains a magic number: Assert.Equal(4' sizes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthTokensInParentAreUnique,The following statement contains a magic number: Assert.Equal(3' sizes.SeparatorCount);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthTokensInParentAreUnique,The following statement contains a magic number: Assert.NotEqual(sizes[0]' sizes[2]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthTokensInParentAreUnique,The following statement contains a magic number: Assert.NotEqual(sizes[0]' sizes[3]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthTokensInParentAreUnique,The following statement contains a magic number: Assert.NotEqual(sizes[1]' sizes[2]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthTokensInParentAreUnique,The following statement contains a magic number: Assert.NotEqual(sizes[1]' sizes[3]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthTokensInParentAreUnique,The following statement contains a magic number: Assert.NotEqual(sizes[2]' sizes[3]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthTokensInParentAreUnique,The following statement contains a magic number: Assert.NotEqual(sizes[2]' sizes[3]);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthTokensInParentAreUnique,The following statement contains a magic number: Assert.NotEqual(sizes.GetSeparator(0)' sizes.GetSeparator(2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthTokensInParentAreUnique,The following statement contains a magic number: Assert.NotEqual(sizes.GetSeparator(1)' sizes.GetSeparator(2));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthStructuredTrivia,The following statement contains a magic number: Assert.Equal(2' someNode.Identifier.TrailingTrivia.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ZeroWidthStructuredTriviaOnZeroWidthToken,The following statement contains a magic number: Assert.Equal(2' someNode.Identifier.TrailingTrivia.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestIncompleteDeclWithDotToken,The following statement contains a magic number: Assert.Equal(SyntaxKind.MethodDeclaration' tree.GetCompilationUnitRoot().ChildNodesAndTokens()[0].ChildNodesAndTokens()[3].Kind());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetLocation,The following statement contains a magic number: var textSpan = new TextSpan(5' 10);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestGetLocation,The following statement contains a magic number: var textSpan = new TextSpan(5' 10);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestReplaceSingleTriviaWithMultipleTriviaInNode,The following statement contains a magic number: Assert.Equal(2' leadingTrivia.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestInsertTriviaInNode,The following statement contains a magic number: Assert.Equal(2' leadingTrivia.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,SeparatorsOfSeparatedSyntaxLists,The following statement contains a magic number: var unused = list.GetSeparator(2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,SeparatorsOfSeparatedSyntaxLists,The following statement contains a magic number: new int[] { -1' 2 }
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,SeparatorsOfSeparatedSyntaxLists,The following statement contains a magic number: Assert.Equal(internalParameters.SeparatorCount' 2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,SeparatorsOfSeparatedSyntaxLists,The following statement contains a magic number: Assert.Equal(internalParameters.Count' 3);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,SeparatorsOfSeparatedSyntaxLists,The following statement contains a magic number: Assert.Equal(internalParameters[2].Identifier.ValueText' "c");
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,ThrowIfUnderlyingNodeIsNullForList,The following statement contains a magic number: new int[] { -1' 0' 23 }
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,GetDiagnosticsOnMissingToken3,The following statement contains a magic number: Assert.Equal(2' diag.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,GetDiagnosticsOnMissingToken4,The following statement contains a magic number: Assert.Equal(3' diag.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,AddMethodModifier,The following statement contains a magic number: Assert.Equal(2' newModifiers.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestSyntaxTree_Changes,The following statement contains a magic number: var ThirdUsingClause = root.Usings[2];
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestSyntaxTree_Changes,The following statement contains a magic number: Assert.Equal(2' ChangesFromTransform.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestSyntaxTree_Changes,The following statement contains a magic number: Assert.Equal(2' changes2UsingCommonSyntax.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestSyntaxTree_GetChangesInvalid,The following statement contains a magic number: var ThirdUsingClause = root.Usings[2];
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestSyntaxTree_GetChangedSpansInvalid,The following statement contains a magic number: var ThirdUsingClause = root.Usings[2];
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestTriviaExists,The following statement contains a magic number: Assert.Equal(2' idToken.TrailingTrivia.Span.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestTriviaExists,The following statement contains a magic number: Assert.Equal(2' namedNode.GetTrailingTrivia().Span.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestTriviaExists,The following statement contains a magic number: Assert.Equal(2' nodeOrToken.GetTrailingTrivia().Span.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeTests.cs,TestTriviaExists,The following statement contains a magic number: Assert.Equal(2' nodeOrToken.GetTrailingTrivia().Span.Length);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(3' list.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal("/*C*/"' list[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: var elementC = list[2];
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' list.IndexOf(elementC));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: newList = list.Insert(2' triviaD);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: newList = list.Insert(3' triviaD);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: newList = list.InsertRange(2' new[] { triviaD' triviaE });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: newList = list.InsertRange(3' new[] { triviaD' triviaE });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(3' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(3' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(3' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,DoTestAddInsertRemoveReplaceOnEmptyList,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,SyntaxTriviaListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTriviaListTests.cs,DoTestAddInsertRemoveReplaceOnEmptyList,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,TrackNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\TrackNodeTests.cs,TestGetCurrentNodeAfterAddingMultipleReturnsMultiple,The following statement contains a magic number: Assert.Equal(2' nodes.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,TrackNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\TrackNodeTests.cs,TestTrackNodesWithMultipleTracksAllNodes,The following statement contains a magic number: Assert.Equal(3' ids.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests,TrackNodeTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\TrackNodeTests.cs,TestTrackNodesWithNoNodesTracksNothing,The following statement contains a magic number: Assert.Equal(3' ids.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,GrammarAmbiguities,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\GrammarAmbiguities.cs,GenericMethodCallInArgumentList_ToComparisons1,The following statement contains a magic number: VerifyReplace(@"class C { void M() { F(G<A' B>"' "(7)"' ");} }"' "7"' expectedArgumentCount: 2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,GrammarAmbiguities,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\GrammarAmbiguities.cs,GenericMethodCallInArgumentList_ToComparisons2,The following statement contains a magic number: VerifyReplace(@"class C { void M() { F(G<A' B>"' "(7)"' ");} }"' "a"' expectedArgumentCount: 2);
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,TypeChanges,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\TypeChanges.cs,ConstructorToDestructor,The following statement contains a magic number: ParseAndVerify(oldText' validator: oldTree =>              {                  var newTree = oldTree.WithReplace(16' "construct"' "~construct");                  var classType = newTree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax;                  Assert.IsType(typeof(DestructorDeclarationSyntax)' classType.Members[0]);              });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,TypeChanges,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\TypeChanges.cs,MethodToConstructor,The following statement contains a magic number: ParseAndVerify(oldText' validator: oldTree =>              {                  var newTree = oldTree.WithReplace(16' "M"' "construct");                  var classType = newTree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax;                  Assert.IsType(typeof(ConstructorDeclarationSyntax)' classType.Members[0]);              });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,TypeChanges,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\TypeChanges.cs,ConstructorToMethod,The following statement contains a magic number: ParseAndVerify(oldText' validator: oldTree =>              {                  var newTree = oldTree.WithReplace(16' "construct"' "M");                  var classType = newTree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax;                  Assert.IsType(typeof(MethodDeclarationSyntax)' classType.Members[0]);              });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,TypeChanges,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\TypeChanges.cs,DestructorToConstructor,The following statement contains a magic number: ParseAndVerify(oldText' validator: oldTree =>              {                  var newTree = oldTree.WithReplace(16' "~construct"' "construct");                  var classType = newTree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax;                  Assert.IsType(typeof(ConstructorDeclarationSyntax)' classType.Members[0]);              });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,TypeChanges,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\TypeChanges.cs,SetToGet,The following statement contains a magic number: ParseAndVerify(oldText' validator: oldTree =>              {                  var newTree = oldTree.WithReplace(16' "get"' "set");                  var classType = newTree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax;                  var propertyType = classType.Members[0] as PropertyDeclarationSyntax;                  Assert.Equal(SyntaxKind.SetAccessorDeclaration' propertyType.AccessorList.Accessors[0].Kind());              });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,TypeChanges,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\TypeChanges.cs,GetToSet,The following statement contains a magic number: ParseAndVerify(oldText' validator: oldTree =>              {                  var newTree = oldTree.WithReplace(16' "set"' "get");                  var classType = newTree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax;                  var propertyType = classType.Members[0] as PropertyDeclarationSyntax;                  Assert.Equal(propertyType.AccessorList.Accessors[0].Kind()' SyntaxKind.GetAccessorDeclaration);              });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,TypeChanges,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\TypeChanges.cs,EventAddToRemove,The following statement contains a magic number: ParseAndVerify(oldText' validator: oldTree =>              {                  var newTree = oldTree.WithReplace(16' "add"' "remove");                  var classType = newTree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax;                  var propertyType = classType.Members[0] as EventDeclarationSyntax;                  Assert.Equal(propertyType.AccessorList.Accessors[0].Kind()' SyntaxKind.RemoveAccessorDeclaration);              });
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests.IncrementalParsing,TypeChanges,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\IncrementalParsing\TypeChanges.cs,EventRemoveToAdd,The following statement contains a magic number: ParseAndVerify(oldText' validator: oldTree =>              {                  var newTree = oldTree.WithReplace(16' "remove"' "add");                  var classType = newTree.GetCompilationUnitRoot().Members[0] as TypeDeclarationSyntax;                  var propertyType = classType.Members[0] as EventDeclarationSyntax;                  Assert.Equal(propertyType.AccessorList.Accessors[0].Kind()' SyntaxKind.AddAccessorDeclaration);              });
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(3' list.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal("C"' list[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: var elementC = list[2];
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' list.IndexOf(elementC));
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: newList = list.Insert(2' tokenD);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: newList = list.Insert(3' tokenD);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: newList = list.InsertRange(2' new[] { tokenD' nameE });
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: newList = list.InsertRange(3' new[] { tokenD' nameE });
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(3' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(3' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(3' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,TestAddInsertRemove,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,DoTestAddInsertRemoveReplaceOnEmptyList,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxNodeOrTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxNodeOrTokenListTests.cs,DoTestAddInsertRemoveReplaceOnEmptyList,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(3' list.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal("C"' list[2].ToString());
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: var elementC = list[2];
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' list.IndexOf(elementC));
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: newList = list.Insert(2' tokenD);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: newList = list.Insert(3' tokenD);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: newList = list.InsertRange(2' new[] { tokenD' tokenE });
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: newList = list.InsertRange(3' new[] { tokenD' tokenE });
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(5' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(3' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(3' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(3' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(4' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,TestAddInsertRemoveReplace,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,DoTestAddInsertRemoveReplaceOnEmptyList,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,DoTestAddInsertRemoveReplaceOnEmptyList,The following statement contains a magic number: Assert.Equal(2' newList.Count);
Magic Number,Microsoft.CodeAnalysis.CSharp,SyntaxTokenListTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Syntax\SyntaxTokenListTests.cs,Extensions,The following statement contains a magic number: Assert.Equal(2' list.IndexOf(SyntaxKind.DotToken));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,CSharpParseOptionsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\CSharpParseOptionsTests.cs,WithXxx,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => CSharpParseOptions.Default.WithLanguageVersion((LanguageVersion)1000));
Magic Number,Microsoft.CodeAnalysis.CSharp.UnitTests.Parsing,CSharpParseOptionsTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\CSharpParseOptionsTests.cs,ConstructorValidation,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new CSharpParseOptions(languageVersion: (LanguageVersion)1000));
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,InteractiveParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\InteractiveParsingTests.cs,ExternAlias,The method contains a code clone-set at the following line numbers (starting from the method definition): ((32' 51)' (51' 70))
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,TypeArguments,The method contains a code clone-set at the following line numbers (starting from the method definition): ((63' 98)' (101' 154))
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,TypeArguments,The method contains a code clone-set at the following line numbers (starting from the method definition): ((66' 85)' (104' 123)' (122' 141))
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,TypeArguments,The method contains a code clone-set at the following line numbers (starting from the method definition): ((104' 139)' (122' 157))
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,TypeArguments2,The method contains a code clone-set at the following line numbers (starting from the method definition): ((61' 98)' (94' 131))
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,ArrayRankSpecifiers,The method contains a code clone-set at the following line numbers (starting from the method definition): ((41' 64)' (89' 112)' (141' 164))
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,ArrayRankSpecifiers,The method contains a code clone-set at the following line numbers (starting from the method definition): ((89' 113)' (141' 165))
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,ArrayRankSpecifiers,The method contains a code clone-set at the following line numbers (starting from the method definition): ((42' 63)' (65' 86))
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,ArrayRankSpecifiers,The method contains a code clone-set at the following line numbers (starting from the method definition): ((42' 61)' (65' 84)' (90' 109)' (115' 134)' (142' 161)' (167' 186)' (192' 211))
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,ArrayRankSpecifiers,The method contains a code clone-set at the following line numbers (starting from the method definition): ((42' 63)' (115' 136)' (167' 188)' (65' 86)' (90' 111)' (142' 163)' (192' 213))
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,ArrayRankSpecifiers,The method contains a code clone-set at the following line numbers (starting from the method definition): ((42' 64)' (192' 214))
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,ArrayRankSpecifiers,The method contains a code clone-set at the following line numbers (starting from the method definition): ((65' 89)' (115' 139)' (90' 114)' (192' 216))
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,ArrayRankSpecifiers,The method contains a code clone-set at the following line numbers (starting from the method definition): ((142' 165)' (192' 215))
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,ArrayRankSpecifiers,The method contains a code clone-set at the following line numbers (starting from the method definition): ((64' 83)' (114' 133)' (191' 210))
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,ArrayRankSpecifiers,The method contains a code clone-set at the following line numbers (starting from the method definition): ((87' 107)' (139' 159))
Duplicate Code,Microsoft.CodeAnalysis.CSharp.UnitTests,SeparatedSyntaxListParsingTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\SeparatedSyntaxListParsingTests.cs,ArrayRankSpecifiers,The method contains a code clone-set at the following line numbers (starting from the method definition): ((113' 132)' (190' 209))
Missing Default,Microsoft.CodeAnalysis.CSharp.UnitTests,PreprocessorTests,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\LexicalAndXml\PreprocessorTests.cs,VerifyDirectivesSpecial,The following switch statement is missing a default case: switch (exp.Kind)                  {                      case SyntaxKind.DefineDirectiveTrivia:                          if (null != exp.Text)                          {                              Assert.Equal(exp.Text' ((DefineDirectiveTriviaSyntax)dt).Name.ValueText); // Text                          }                            break;                      case SyntaxKind.LineDirectiveTrivia:                          var ld = dt as LineDirectiveTriviaSyntax;                            // default number = 0 - no number                          if (exp.Number == -1)                          {                              Assert.Equal(SyntaxKind.LineKeyword' ld.LineKeyword.Kind());                              Assert.Equal(SyntaxKind.DefaultKeyword' ld.Line.Kind());                          }                          else if (exp.Number == -2)                          {                              Assert.Equal(SyntaxKind.LineKeyword' ld.LineKeyword.Kind());                              Assert.Equal(SyntaxKind.HiddenKeyword' ld.Line.Kind());                          }                          else if (exp.Number == 0)                          {                              Assert.Equal(String.Empty' ld.Line.Text);                          }                          else if (exp.Number > 0)                          {                              Assert.Equal(exp.Number' ld.Line.Value); // Number                              Assert.Equal(exp.Number' Int32.Parse(ld.Line.Text));                          }                            if (null == exp.Text)                          {                              Assert.Equal(SyntaxKind.None' ld.File.Kind());                          }                          else                          {                              Assert.NotEqual(SyntaxKind.None' ld.File.Kind());                              Assert.Equal(exp.Text' ld.File.Value);                          }                            break;                  }
Missing Default,Microsoft.CodeAnalysis.CSharp.UnitTests,ExpressionParsingTexts,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ExpressionParsingTests.cs,TestInstanceExpression,The following switch statement is missing a default case: switch (expr.Kind())              {                  case SyntaxKind.ThisExpression:                      token = ((ThisExpressionSyntax)expr).Token;                      Assert.NotNull(token);                      Assert.Equal(kind' token.Kind());                      break;                  case SyntaxKind.BaseExpression:                      token = ((BaseExpressionSyntax)expr).Token;                      Assert.NotNull(token);                      Assert.Equal(kind' token.Kind());                      break;              }
Missing Default,Microsoft.CodeAnalysis.CSharp.UnitTests,ExpressionParsingTexts,C:\research\architectureSmells\repos\mono_roslyn\src\Compilers\CSharp\Test\Syntax\Parsing\ExpressionParsingTests.cs,TestSingleParamFunctionalOperator,The following switch statement is missing a default case: switch (opKind)              {                  case SyntaxKind.MakeRefExpression:                      var makeRefSyntax = (MakeRefExpressionSyntax)expr;                      TestFunctionKeyword(kind' makeRefSyntax.Keyword);                      TestParenthesizedArgument(makeRefSyntax.OpenParenToken' makeRefSyntax.Expression' makeRefSyntax.CloseParenToken);                      break;                    case SyntaxKind.RefTypeExpression:                      var refTypeSyntax = (RefTypeExpressionSyntax)expr;                      TestFunctionKeyword(kind' refTypeSyntax.Keyword);                      TestParenthesizedArgument(refTypeSyntax.OpenParenToken' refTypeSyntax.Expression' refTypeSyntax.CloseParenToken);                      break;                    case SyntaxKind.CheckedExpression:                  case SyntaxKind.UncheckedExpression:                      var checkedSyntax = (CheckedExpressionSyntax)expr;                      TestFunctionKeyword(kind' checkedSyntax.Keyword);                      TestParenthesizedArgument(checkedSyntax.OpenParenToken' checkedSyntax.Expression' checkedSyntax.CloseParenToken);                      break;                    case SyntaxKind.TypeOfExpression:                      var typeOfSyntax = (TypeOfExpressionSyntax)expr;                      TestFunctionKeyword(kind' typeOfSyntax.Keyword);                      TestParenthesizedArgument(typeOfSyntax.OpenParenToken' typeOfSyntax.Type' typeOfSyntax.CloseParenToken);                      break;                    case SyntaxKind.SizeOfExpression:                      var sizeOfSyntax = (SizeOfExpressionSyntax)expr;                      TestFunctionKeyword(kind' sizeOfSyntax.Keyword);                      TestParenthesizedArgument(sizeOfSyntax.OpenParenToken' sizeOfSyntax.Type' sizeOfSyntax.CloseParenToken);                      break;                    case SyntaxKind.DefaultExpression:                      var defaultSyntax = (DefaultExpressionSyntax)expr;                      TestFunctionKeyword(kind' defaultSyntax.Keyword);                      TestParenthesizedArgument(defaultSyntax.OpenParenToken' defaultSyntax.Type' defaultSyntax.CloseParenToken);                      break;              }
