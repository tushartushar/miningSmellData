Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,MatchesScope,The method has 109 lines of code.
Long Method,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetMustImplement,The method has 106 lines of code.
Long Method,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,InsertAttributeListIntoContainer,The method has 116 lines of code.
Long Method,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CodeModelEventCollector,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CompareTypeDeclarations,The method has 106 lines of code.
Complex Method,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetMustImplement,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetOverrideKind,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,RemoveBase,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,AppendTypeNamePrototype,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CodeModelEventCollector,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CompareExpressions,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.VisualStudio.LanguageServices.CSharp.Debugging,CSharpProximityExpressionsService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Debugging\CSharpProximityExpressionsService.cs,AddSubExpressionTerms,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.VisualStudio.LanguageServices.CSharp.Debugging,DataTipInfoGetter,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Debugging\DataTipInfoGetter.cs,GetInfoAsync,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.VisualStudio.LanguageServices.CSharp.ObjectBrowser,DescriptionBuilder,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ObjectBrowser\DescriptionBuilder.cs,BuildMemberModifiers,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.VisualStudio.LanguageServices.CSharp.ObjectBrowser,DescriptionBuilder,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ObjectBrowser\DescriptionBuilder.cs,BuildConstraints,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.VisualStudio.LanguageServices.CSharp.ObjectBrowser,DescriptionBuilder,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ObjectBrowser\DescriptionBuilder.cs,BuildParameterList,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.VisualStudio.LanguageServices.CSharp.Options,CSharpSettingsManagerOptionSerializer,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\CSharpSettingsManagerOptionSerializer.cs,TryFetch,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpHelpContextService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpHelpContextService.cs,GetHelpTermAsync,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpHelpContextService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpHelpContextService.cs,TryGetTextForOperator,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.Debugging,CSharpProximityExpressionsService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Debugging\CSharpProximityExpressionsService.cs,AddBinaryExpressionTerms,The method has 5 parameters. Parameters: binaryExpression' left' right' terms' expressionType
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpDebuggerIntelliSenseContext,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpDebuggerIntelliSenseContext.cs,CSharpDebuggerIntelliSenseContext,The method has 7 parameters. Parameters: view' vsTextView' debuggerBuffer' contextBuffer' currentStatementSpan' componentModel' serviceProvider
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpDebuggerIntelliSenseContext,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpDebuggerIntelliSenseContext.cs,CSharpDebuggerIntelliSenseContext,The method has 5 parameters. Parameters: view' contextBuffer' currentStatementSpan' componentModel' immediateWindow
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpLanguageService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpLanguageService.cs,CreateContext,The method has 5 parameters. Parameters: view' vsTextView' debuggerBuffer' subjectBuffer' currentStatementSpan
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProject,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProject.cs,CSharpProject,The method has 8 parameters. Parameters: projectTracker' reportExternalErrorCreatorOpt' projectSystemName' hierarchy' serviceProvider' miscellaneousFilesWorkspaceOpt' visualStudioWorkspaceOpt' hostDiagnosticUpdateSourceOpt
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,CSharpProjectShim,The method has 9 parameters. Parameters: projectRoot' projectTracker' reportExternalErrorCreatorOpt' projectSystemName' hierarchy' serviceProvider' miscellaneousFilesWorkspaceOpt' visualStudioWorkspaceOpt' hostDiagnosticUpdateSourceOpt
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,GetOptionInfoAt,The method has 5 parameters. Parameters: index' optionID' switchName' switchDescription' flags
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,GetOptionInfoAtEx,The method has 7 parameters. Parameters: index' optionID' shortSwitchName' longSwitchName' descriptiveSwitchName' switchDescription' flags
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,OnAliasesChanged,The method has 6 parameters. Parameters: file' project' previousAliasesCount' previousAliases' currentAliasesCount' currentAliases
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,OnCodeDirectoryAliasesChanged,The method has 5 parameters. Parameters: project' previousAliasesCount' previousAliases' currentAliasesCount' currentAliases
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,NotifyDependentItemSaved,The method has 5 parameters. Parameters: hier' itemidParent' documentParentMoniker' itemidDpendent' documentDependentMoniker
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShimWithServices,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShimWithServices.CodeModel.cs,CSharpProjectShimWithServices,The method has 9 parameters. Parameters: projectRoot' projectTracker' reportExternalErrorCreatorOpt' projectSystemName' hierarchy' serviceProvider' miscellaneousFilesWorkspaceOpt' visualStudioWorkspaceOpt' hostDiagnosticUpdateSourceOpt
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,TempPECompilerService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\TempPECompilerService.cs,CompileTempPE,The method has 7 parameters. Parameters: pszOutputFileName' sourceCount' fileNames' fileContents' optionCount' optionNames' optionValues
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim.Interop,ICSCompilerConfig,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\Interop\ICSCompilerConfig.cs,GetOptionInfoAt,The method has 5 parameters. Parameters: index' optionID' switchName' switchDescription' flags
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim.Interop,ICSCompilerConfig,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\Interop\ICSCompilerConfig.cs,GetOptionInfoAtEx,The method has 7 parameters. Parameters: index' optionID' shortSwitchName' longSwitchName' descriptiveSwitchName' switchDescription' flags
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim.Interop,ICSharpProjectSite,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\Interop\ICSharpProjectSite.cs,OnAliasesChanged,The method has 6 parameters. Parameters: file' project' previousAliasesCount' previousAliases' currentAliasesCount' currentAliases
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim.Interop,ICSharpTempPECompilerService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\Interop\ICSharpTempPECompilerService.cs,CompileTempPE,The method has 7 parameters. Parameters: pszOutputFileName' sourceCount' fileNames' fileContents' optionCount' optionNames' optionValues
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim.Interop,ICSharpVenusProjectSite,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\Interop\ICSharpVenusProjectSite.cs,OnCodeDirectoryAliasesChanged,The method has 5 parameters. Parameters: project' previousAliasesCount' previousAliases' currentAliasesCount' currentAliases
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets.SnippetFunctions,SnippetFunctionClassName,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetFunctions\SnippetFunctionClassName.cs,GetContainingClassName,The method has 5 parameters. Parameters: document' fieldSpan' cancellationToken' value' hasDefaultValue
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets.SnippetFunctions,SnippetFunctionGenerateSwitchCases,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetFunctions\SnippetFunctionGenerateSwitchCases.cs,SnippetFunctionGenerateSwitchCases,The method has 5 parameters. Parameters: snippetExpansionClient' textView' subjectBuffer' caseGenerationLocationField' switchExpressionField
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets.SnippetFunctions,SnippetFunctionGenerateSwitchCases,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetFunctions\SnippetFunctionGenerateSwitchCases.cs,TryGetSimplifiedTypeNameInCaseContext,The method has 7 parameters. Parameters: document' fullyQualifiedTypeName' firstEnumMemberName' startPosition' endPosition' cancellationToken' simplifiedTypeName
Long Parameter List,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets.SnippetFunctions,SnippetFunctionSimpleTypeName,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetFunctions\SnippetFunctionSimpleTypeName.cs,SnippetFunctionSimpleTypeName,The method has 5 parameters. Parameters: snippetExpansionClient' textView' subjectBuffer' fieldName' fullyQualifiedName
Long Identifier,Microsoft.VisualStudio.LanguageServices.CSharp.ObjectBrowser,ListItemFactory,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ObjectBrowser\ListItemFactory.cs,,The length of the parameter s_memberWithContainingTypeDisplayFormat is 39.
Long Identifier,Microsoft.VisualStudio.LanguageServices.CSharp.Options,CSharpSettingsManagerOptionSerializer,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\CSharpSettingsManagerOptionSerializer.cs,TryFetch,The length of the parameter ignoreSpacesAroundBinaryObjectValue is 35.
Long Identifier,Microsoft.VisualStudio.LanguageServices.CSharp.Options,CSharpSettingsManagerOptionSerializer,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\CSharpSettingsManagerOptionSerializer.cs,TryFetch,The length of the parameter spaceAroundBinaryOperatorObjectValue is 36.
Long Identifier,Microsoft.VisualStudio.LanguageServices.CSharp.Options,CSharpSettingsManagerOptionSerializer,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\CSharpSettingsManagerOptionSerializer.cs,,The length of the parameter WrappingIgnoreSpacesAroundBinaryOperator is 40.
Long Identifier,Microsoft.VisualStudio.LanguageServices.CSharp.Options.Formatting,StyleViewModel,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\Formatting\StyleViewModel.cs,,The length of the parameter s_intrinsicPreviewDeclarationTrue is 33.
Long Identifier,Microsoft.VisualStudio.LanguageServices.CSharp.Options.Formatting,StyleViewModel,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\Formatting\StyleViewModel.cs,,The length of the parameter s_intrinsicPreviewDeclarationFalse is 34.
Long Identifier,Microsoft.VisualStudio.LanguageServices.CSharp.Options.Formatting,StyleViewModel,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\Formatting\StyleViewModel.cs,,The length of the parameter s_intrinsicPreviewMemberAccessTrue is 34.
Long Identifier,Microsoft.VisualStudio.LanguageServices.CSharp.Options.Formatting,StyleViewModel,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\Formatting\StyleViewModel.cs,,The length of the parameter s_intrinsicPreviewMemberAccessFalse is 35.
Long Identifier,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProject,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProject.cs,CSharpProject,The length of the parameter miscellaneousFilesWorkspaceOpt is 30.
Long Identifier,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,CSharpProjectShim,The length of the parameter miscellaneousFilesWorkspaceOpt is 30.
Long Identifier,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,CreateCompilationOptions,The length of the parameter ruleSetGeneralDiagnosticOption is 30.
Long Identifier,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShimWithServices,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShimWithServices.CodeModel.cs,CSharpProjectShimWithServices,The length of the parameter miscellaneousFilesWorkspaceOpt is 30.
Long Identifier,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets.SnippetFunctions,SnippetFunctionSimpleTypeName,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetFunctions\SnippetFunctionSimpleTypeName.cs,TryGetSimplifiedTypeName,The length of the parameter documentWithFullyQualifiedTypeName is 34.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CreateUnknownRootNamespaceCodeElement,The length of the statement  "            return (EnvDTE.CodeElement)CodeNamespace.CreateUnknown(state' fileCodeModel' (int)SyntaxKind.NamespaceDeclaration' string.Empty); " is 129.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,GetAccess,The length of the statement  "            else if (modifiers.Any(t => t.Kind() == SyntaxKind.ProtectedKeyword) && modifiers.Any(t => t.Kind() == SyntaxKind.InternalKeyword)) " is 131.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CreateAttributeNode,The length of the statement  "                    SyntaxFactory.Token(SyntaxTriviaList.Create(SyntaxFactory.ElasticMarker)' SyntaxKind.ColonToken' SyntaxFactory.TriviaList(SyntaxFactory.Space))) " is 144.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetMustImplement,The length of the statement  "                        member = method.WithBody(null).WithSemicolonToken(SyntaxFactory.Token(SyntaxTriviaList.Create(SyntaxFactory.ElasticMarker)' SyntaxKind.SemicolonToken' method.Body.CloseBraceToken.TrailingTrivia)); " is 196.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetMustImplement,The length of the statement  "                            var updatedAccessor = accessor.WithBody(null).WithSemicolonToken(SyntaxFactory.Token(SyntaxTriviaList.Create(SyntaxFactory.ElasticMarker)' SyntaxKind.SemicolonToken' accessor.Body.CloseBraceToken.TrailingTrivia)); " is 213.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetMustImplement,The length of the statement  "                        var updatedAccessorList = property.AccessorList.WithAccessors(SyntaxFactory.List<AccessorDeclarationSyntax>(updatedAccessors)); " is 127.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetMustImplement,The length of the statement  "                        newBody = newBody.WithCloseBraceToken(newBody.CloseBraceToken.WithTrailingTrivia(method.SemicolonToken.TrailingTrivia)); " is 120.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetMustImplement,The length of the statement  "                            newBody = newBody.WithCloseBraceToken(newBody.CloseBraceToken.WithTrailingTrivia(accessor.SemicolonToken.TrailingTrivia)); " is 122.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetMustImplement,The length of the statement  "                        var updatedAccessorList = property.AccessorList.WithAccessors(SyntaxFactory.List<AccessorDeclarationSyntax>(updatedAccessors)); " is 127.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetOverrideKind,The length of the statement  "            flags &= ~(ModifierFlags.Abstract | ModifierFlags.Virtual | ModifierFlags.Override | ModifierFlags.New | ModifierFlags.Sealed); " is 127.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetOverrideKind,The length of the statement  "                if ((kind & (EnvDTE80.vsCMOverrideKind.vsCMOverrideKindOverride | EnvDTE80.vsCMOverrideKind.vsCMOverrideKindSealed)) != 0) " is 122.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetOverrideKind,The length of the statement  "                else if ((kind & (EnvDTE80.vsCMOverrideKind.vsCMOverrideKindAbstract | EnvDTE80.vsCMOverrideKind.vsCMOverrideKindVirtual)) != 0) " is 128.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetOverrideKind,The length of the statement  "                    kind = kind & ~(EnvDTE80.vsCMOverrideKind.vsCMOverrideKindAbstract | EnvDTE80.vsCMOverrideKind.vsCMOverrideKindVirtual); " is 120.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,GetReadWrite,The length of the statement  "            var hasGetter = property.AccessorList != null && property.AccessorList.Accessors.Any(SyntaxKind.GetAccessorDeclaration); " is 120.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,GetReadWrite,The length of the statement  "            var hasSetter = property.AccessorList != null && property.AccessorList.Accessors.Any(SyntaxKind.SetAccessorDeclaration); " is 120.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,GetTypeSymbolFromPartialName,The length of the statement  "            return semanticModel.GetSpeculativeTypeInfo(position' parsedTypeName' SpeculativeBindingOption.BindAsTypeOrNamespace).Type; " is 123.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,GetTypeSymbolFromFullName,The length of the statement  "                typeSymbol = semanticModel.GetSpeculativeTypeInfo(0' parsedTypeName' SpeculativeBindingOption.BindAsTypeOrNamespace).Type; " is 122.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,InsertIntoBaseList,The length of the statement  "                ? typeDeclaration.BaseList.WithTypes(typeDeclaration.BaseList.Types.Insert(insertionIndex' SyntaxFactory.SimpleBaseType(typeName))) " is 131.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CodeModelEventCollector,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CompareExpressions,The length of the statement  "                    return CompareExpressions(((PrefixUnaryExpressionSyntax)oldExpression).Operand' ((PrefixUnaryExpressionSyntax)newExpression).Operand); " is 134.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CodeModelEventCollector,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CompareExpressions,The length of the statement  "                    return CompareExpressions(((AwaitExpressionSyntax)oldExpression).Expression' ((AwaitExpressionSyntax)newExpression).Expression); " is 128.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CodeModelEventCollector,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CompareExpressions,The length of the statement  "                    return CompareExpressions(((PostfixUnaryExpressionSyntax)oldExpression).Operand' ((PostfixUnaryExpressionSyntax)newExpression).Operand); " is 136.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CodeModelEventCollector,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CompareMemberDeclarations,The length of the statement  "                    return CompareMethodDeclarations((BaseMethodDeclarationSyntax)oldMember' (BaseMethodDeclarationSyntax)newMember' newNodeParent' eventQueue); " is 140.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CodeModelEventCollector,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CompareMemberDeclarations,The length of the statement  "                    return CompareFieldDeclarations((BaseFieldDeclarationSyntax)oldMember' (BaseFieldDeclarationSyntax)newMember' newNodeParent' eventQueue); " is 137.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CodeModelEventCollector,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CompareMemberDeclarations,The length of the statement  "                    return ComparePropertyDeclarations((BasePropertyDeclarationSyntax)oldMember' (BasePropertyDeclarationSyntax)newMember' newNodeParent' eventQueue); " is 146.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CodeModelEventCollector,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CompareMemberDeclarations,The length of the statement  "                    return CompareEnumMemberDeclarations((EnumMemberDeclarationSyntax)oldMember' (EnumMemberDeclarationSyntax)newMember' newNodeParent' eventQueue); " is 144.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CodeModelEventCollector,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CompareVariableDeclarators,The length of the statement  "                if (!StringComparer.Ordinal.Equals(CodeModelService.GetName(oldVariableDeclarator)' CodeModelService.GetName(newVariableDeclarator))) " is 133.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CodeModelEventCollector,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CompareTypeDeclarations,The length of the statement  "                        var change = CompareRenamedDeclarations(CompareMemberDeclarations' oldMembers' newMembers' oldType' newType' newNodeParent' eventQueue); " is 136.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CodeModelEventCollector,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CompareTypeDeclarations,The length of the statement  "                    same &= CompareChildren(CompareMemberDeclarations' oldMembers' newMembers' newType' CodeModelEventType.Unknown' eventQueue); " is 124.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CodeModelEventCollector,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CompareNamespacesOrTypes,The length of the statement  "                    return CompareNamespaceDeclarations((NamespaceDeclarationSyntax)oldNamespaceOrType' (NamespaceDeclarationSyntax)newNamespaceOrType' newNodeParent' eventQueue); " is 159.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,NodeLocator,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.NodeLocator.cs,GetStartPoint,The length of the statement  "                                return GetBodyStartPoint(text' firstAccessorNode.Body.OpenBraceToken' firstAccessorNode.Body.CloseBraceToken' indentation); " is 123.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Debugging,CSharpProximityExpressionsService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Debugging\CSharpProximityExpressionsService.cs,IsValidAsync,The length of the statement  "            var info = semanticModel.GetSpeculativeSymbolInfo(token.SpanStart' expression' SpeculativeBindingOption.BindAsExpression); " is 122.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Debugging,CSharpProximityExpressionsService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Debugging\CSharpProximityExpressionsService.cs,AddPrefixUnaryExpressionTerms,The length of the statement  "            if (prefixUnaryExpression.IsKind(SyntaxKind.LogicalNotExpression' SyntaxKind.BitwiseNotExpression' SyntaxKind.UnaryMinusExpression' SyntaxKind.UnaryPlusExpression)) " is 164.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Debugging,CSharpProximityExpressionsService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Debugging\CSharpProximityExpressionsService.cs,AddConditionalExpressionTerms,The length of the statement  "            ExpressionType conditionFlags = ExpressionType.Invalid' trueFlags = ExpressionType.Invalid' falseFlags = ExpressionType.Invalid; " is 128.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Debugging,Worker,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Debugging\CSharpProximityExpressionsService.Worker.cs,AddValueExpression,The length of the statement  "                if (_parentStatement.GetAncestorOrThis<AccessorDeclarationSyntax>().IsKind(SyntaxKind.SetAccessorDeclaration' SyntaxKind.AddAccessorDeclaration' SyntaxKind.RemoveAccessorDeclaration)) " is 183.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Debugging,Worker,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Debugging\CSharpProximityExpressionsService.Worker.cs,AddPrecedingRelevantExpressions,The length of the statement  "                    var statementAncestor = _parentStatement.Ancestors().OfType<StatementSyntax>().FirstOrDefault(node => !node.IsKind(SyntaxKind.Block)); " is 134.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Debugging,LocationInfoGetter,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Debugging\LocationInfoGetter.cs,GetInfoAsync,The length of the statement  "                SeparatedSyntaxList<VariableDeclaratorSyntax> variableDeclarators = ((BaseFieldDeclarationSyntax)memberDecl).Declaration.Variables; " is 131.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets,SnippetCommandHandler,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetCommandHandler.cs,GetSnippetExpansionClient,The length of the statement  "                expansionClient = new SnippetExpansionClient(Guids.CSharpLanguageServiceId' textView' subjectBuffer' EditorAdaptersFactoryService); " is 131.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets,SnippetExpansionClient,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetExpansionClient.cs,AddImports,The length of the statement  "            if (TryAddImportsToContainedDocument(document' newUsingDirectives.Where(u => u.Alias == null).Select(u => u.Name.ToString()))) " is 126.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets,SnippetExpansionClient,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetExpansionClient.cs,AddImports,The length of the statement  "            var formattedDocument = Formatter.FormatAsync(newDocument' Formatter.Annotation' cancellationToken: cancellationToken).WaitAndGetResult(cancellationToken); " is 155.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets,SnippetExpansionClient,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetExpansionClient.cs,GetUsingDirectivesToAdd,The length of the statement  "                var candidateUsing = SyntaxFactory.ParseCompilationUnit("using " + namespaceToImport + ";").DescendantNodes().OfType<UsingDirectiveSyntax>().FirstOrDefault(); " is 158.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets,SnippetExpansionClient,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetExpansionClient.cs,GetUsingDirectivesToAdd,The length of the statement  "                    newUsings.Add(candidateUsing.WithAdditionalAnnotations(Formatter.Annotation).WithAppendedTrailingTrivia(SyntaxFactory.CarriageReturnLineFeed)); " is 143.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets,SnippetExpansionClient,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetExpansionClient.cs,UsingsMatch,The length of the statement  "            return usingDirective1.Name.ToString() == usingDirective2.Name.ToString() && GetAliasName(usingDirective1) == GetAliasName(usingDirective2); " is 140.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets,SnippetExpansionClient,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetExpansionClient.cs,GetAliasName,The length of the statement  "            return (usingDirective.Alias == null || usingDirective.Alias.Name == null) ? null : usingDirective.Alias.Name.ToString(); " is 121.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Options,CSharpSettingsManagerOptionSerializer,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\CSharpSettingsManagerOptionSerializer.cs,CreateStorageKeyToOptionMap,The length of the statement  "                    new KeyValuePair<string' IOption>(GetStorageKeyForOption(CompletionOptions.IncludeKeywords)' CompletionOptions.IncludeKeywords)' " is 128.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Options,CSharpSettingsManagerOptionSerializer,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\CSharpSettingsManagerOptionSerializer.cs,CreateStorageKeyToOptionMap,The length of the statement  "                    new KeyValuePair<string' IOption>(GetStorageKeyForOption(CompletionOptions.TriggerOnTypingLetters)' CompletionOptions.TriggerOnTypingLetters)' " is 142.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Options,CSharpSettingsManagerOptionSerializer,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\CSharpSettingsManagerOptionSerializer.cs,CreateStorageKeyToOptionMap,The length of the statement  "                    new KeyValuePair<string' IOption>(GetStorageKeyForOption(FormattingOptions.UseTabOnlyForIndentation)' FormattingOptions.UseTabOnlyForIndentation) " is 145.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Options,CSharpSettingsManagerOptionSerializer,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\CSharpSettingsManagerOptionSerializer.cs,CreateStorageKeyToOptionMap,The length of the statement  "            result.AddRange(AbstractSettingsManagerOptionSerializer.GetOptionInfoFromTypeFields(types' bindingFlags' this.GetOptionInfo)); " is 126.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Options,CSharpSettingsManagerOptionSerializer,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\CSharpSettingsManagerOptionSerializer.cs,CreateStorageKeyToOptionMap,The length of the statement  "            result.AddRange(AbstractSettingsManagerOptionSerializer.GetOptionInfoFromTypeFields(types' bindingFlags' this.GetOptionInfoForOnOffOptions' this.ShouldIncludeOnOffOption)); " is 172.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Options,CSharpSettingsManagerOptionSerializer,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\CSharpSettingsManagerOptionSerializer.cs,TryFetch,The length of the statement  "                object ignoreSpacesAroundBinaryObjectValue = this.Manager.GetValueOrDefault(WrappingIgnoreSpacesAroundBinaryOperator' defaultValue: 0); " is 135.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Options,CSharpSettingsManagerOptionSerializer,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\CSharpSettingsManagerOptionSerializer.cs,TryFetch,The length of the statement  "                object spaceAroundBinaryOperatorObjectValue = this.Manager.GetValueOrDefault(SpaceAroundBinaryOperator' defaultValue: 1); " is 121.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpDebuggerIntelliSenseContext,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpDebuggerIntelliSenseContext.cs,GetPreviousStatementBufferAndSpan,The length of the statement  "            var previousTrackingSpan = ContextBuffer.CurrentSnapshot.CreateTrackingSpan(Span.FromBounds(0' contextPoint)' SpanTrackingMode.EdgeNegative); " is 141.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpEditorFactory,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpEditorFactory.cs,GetFormattedTextChanges,The length of the statement  "            var root = SyntaxFactory.ParseSyntaxTree(text' path: filePath' cancellationToken: cancellationToken).GetRoot(cancellationToken); " is 128.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpHelpContextService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpHelpContextService.cs,GetHelpTermAsync,The length of the statement  "            if (trivia.MatchesKind(SyntaxKind.MultiLineDocumentationCommentTrivia' SyntaxKind.SingleLineDocumentationCommentTrivia' SyntaxKind.SingleLineCommentTrivia' SyntaxKind.MultiLineCommentTrivia)) " is 191.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpHelpContextService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpHelpContextService.cs,TryGetTextForSymbol,The length of the statement  "                symbol = semanticModel.GetSymbolInfo(genericName' CancellationToken.None).Symbol ?? semanticModel.GetTypeInfo(genericName' CancellationToken.None).Type; " is 152.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpHelpContextService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpHelpContextService.cs,TryGetTextForSymbol,The length of the statement  "                var symbols = semanticModel.GetSymbols(token' document.Project.Solution.Workspace' bindLiteralsToUnderlyingType: true' cancellationToken: CancellationToken.None); " is 162.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpHelpContextService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpHelpContextService.cs,TryGetTextForSymbol,The length of the statement  "            if (symbol is ILocalSymbol && !symbol.DeclaringSyntaxReferences.Any(d => d.GetSyntax().DescendantTokens().Contains(token))) " is 123.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpHelpContextService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpHelpContextService.cs,TryGetTextForOperator,The length of the statement  "            if (syntaxFacts.IsOperator(token) || syntaxFacts.IsPredefinedOperator(token) || SyntaxFacts.IsAssignmentExpressionOperatorToken(token.Kind())) " is 142.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpHelpContextService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpHelpContextService.cs,TryGetTextForKeyword,The length of the statement  "                token.Parent.Parent is VariableDeclarationSyntax && token.Parent == ((VariableDeclarationSyntax)token.Parent.Parent).Type) " is 122.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpLanguageService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpLanguageService.cs,BindToProject,The length of the statement  "            var projectName = Path.GetFileName(projectRoot.GetFullProjectName()); // GetFullProjectName returns the path to the project file w/o the extension? " is 147.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.DesignerAttribute,CSharpDesignerAttributeIncrementalAnalyzerProvider,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\DesignerAttribute\CSharpDesignerAttributeIncrementalAnalyzerProvider.cs,CreatePerLanguageIncrementalAnalyzer,The length of the statement  "            return new DesignerAttributeIncrementalAnalyzer(_serviceProvider' optionService' _notificationService' _asyncListeners); " is 120.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.EventHookup,HACK_EventHookupDismissalOnBufferChangePreventerService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\EventCompletion\HACK_EventHookupDismissalOnBufferChangePreventerService.cs,HACK_SetShimQuickInfoSessionWorker,The length of the statement  "            var shimController = properties.Single(p => p.Value != null && p.Value.GetType().Name == "ShimQuickInfoController").Value; " is 122.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.EventHookup,HACK_EventHookupDismissalOnBufferChangePreventerService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\EventCompletion\HACK_EventHookupDismissalOnBufferChangePreventerService.cs,HACK_SetShimQuickInfoSessionWorker,The length of the statement  "            var sessionField = shimController.GetType().GetField("_session"' System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance); " is 149.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Options.Formatting,StyleViewModel,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\Formatting\StyleViewModel.cs,ShouldPersistOption,The length of the statement  "            return key.Option.Feature == CSharpCodeStyleOptions.FeatureName || key.Option.Feature == SimplificationOptions.PerLanguageFeatureName; " is 134.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,CreateCompilationOptions,The length of the statement  "                optimizationLevel: GetBooleanOption(CompilerOptions.OPTID_OPTIMIZATIONS) ? OptimizationLevel.Release : OptimizationLevel.Debug' " is 127.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,UpdateWarning,The length of the statement  "            Contract.ThrowIfFalse(compilerOptions == CompilerOptions.OPTID_NOWARNLIST || compilerOptions == CompilerOptions.OPTID_WARNASERRORLIST || compilerOptions == CompilerOptions.OPTID_WARNNOTASERRORLIST); " is 198.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,UpdateWarning,The length of the statement  "            foreach (var warning in GetStringOption(compilerOptions' defaultValue: "").Split(new[] { ' '' '''' ';' }' StringSplitOptions.RemoveEmptyEntries)) " is 145.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,CreateParseOptions,The length of the statement  "            var symbols = GetStringOption(CompilerOptions.OPTID_CCSYMBOLS' defaultValue: "").Split(new[] { ';' }' StringSplitOptions.RemoveEmptyEntries); " is 141.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,CreateParseOptions,The length of the statement  "            var languageVersion = CompilationOptionsConversion.GetLanguageVersion(GetStringOption(CompilerOptions.OPTID_COMPATIBILITY' defaultValue: "")) " is 141.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,OnImportAddedEx,The length of the statement  "            return AddMetadataReferenceAndTryConvertingToProjectReferenceIfPossible(filename' properties' hResultForMissingFile: VSConstants.E_FAIL); " is 137.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,GetValidStartupClasses,The length of the statement  "                var entryPointNames = entryPoints.Select(e => e.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat.WithGlobalNamespaceStyle(SymbolDisplayGlobalNamespaceStyle.Omitted))).ToArray(); " is 185.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,RemoveReferenceToCodeDirectory,The length of the statement  "                throw new ArgumentException("The finalProject reference is not currently referenced by this finalProject."' "finalProject"); " is 124.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,SetImageBase,The length of the statement  "            // This option is used only during emit. Since we no longer use our in-proc workspace to emit' we can ignore this value. " is 120.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,SetWin32Icon,The length of the statement  "            // This option is used only during emit. Since we no longer use our in-proc workspace to emit' we can ignore this value. " is 120.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,SetFileAlignment,The length of the statement  "            // This option is used only during emit. Since we no longer use our in-proc workspace to emit' we can ignore this value. " is 120.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,SetImageBase2,The length of the statement  "            // This option is used only during emit. Since we no longer use our in-proc workspace to emit' we can ignore this value. " is 120.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,SetPdbFileName,The length of the statement  "            // This option is used only during emit. Since we no longer use our in-proc workspace to emit' we can ignore this value. " is 120.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,SetWin32Manifest,The length of the statement  "            // This option is used only during emit. Since we no longer use our in-proc workspace to emit' we can ignore this value. " is 120.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets.SnippetFunctions,SnippetFunctionClassName,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetFunctions\SnippetFunctionClassName.cs,GetContainingClassName,The length of the statement  "            var type = syntaxTree.FindTokenOnLeftOfPosition(fieldSpan.Start.Position' cancellationToken).GetAncestor<TypeDeclarationSyntax>(); " is 130.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets.SnippetFunctions,SnippetFunctionGenerateSwitchCases,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetFunctions\SnippetFunctionGenerateSwitchCases.cs,TryGetEnumTypeSymbol,The length of the statement  "            if (snippetExpansionClient.ExpansionSession.GetFieldSpan(SwitchExpressionField' surfaceBufferFieldSpan) != VSConstants.S_OK) " is 124.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets.SnippetFunctions,SnippetFunctionGenerateSwitchCases,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetFunctions\SnippetFunctionGenerateSwitchCases.cs,TryGetSimplifiedTypeNameInCaseContext,The length of the statement  "            var textWithCaseAdded = document.GetTextAsync(cancellationToken).WaitAndGetResult(cancellationToken).WithChanges(textChange); " is 125.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets.SnippetFunctions,SnippetFunctionGenerateSwitchCases,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetFunctions\SnippetFunctionGenerateSwitchCases.cs,TryGetSimplifiedTypeNameInCaseContext,The length of the statement  "            var updatedRoot = syntaxRoot.ReplaceNode(nodeToReplace' nodeToReplace.WithAdditionalAnnotations(typeAnnotation' Simplifier.Annotation)); " is 136.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets.SnippetFunctions,SnippetFunctionGenerateSwitchCases,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetFunctions\SnippetFunctionGenerateSwitchCases.cs,TryGetSimplifiedTypeNameInCaseContext,The length of the statement  "            simplifiedTypeName = simplifiedDocument.GetCSharpSyntaxRootAsync(cancellationToken).WaitAndGetResult(cancellationToken).GetAnnotatedNodesAndTokens(typeAnnotation).Single().ToString(); " is 183.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets.SnippetFunctions,SnippetFunctionSimpleTypeName,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetFunctions\SnippetFunctionSimpleTypeName.cs,TryGetSimplifiedTypeName,The length of the statement  "            var syntaxRoot = documentWithFullyQualifiedTypeName.GetCSharpSyntaxRootAsync(cancellationToken).WaitAndGetResult(cancellationToken); " is 132.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets.SnippetFunctions,SnippetFunctionSimpleTypeName,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetFunctions\SnippetFunctionSimpleTypeName.cs,TryGetSimplifiedTypeName,The length of the statement  "            var updatedRoot = syntaxRoot.ReplaceNode(nodeToReplace' nodeToReplace.WithAdditionalAnnotations(typeAnnotation' Simplifier.Annotation)); " is 136.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets.SnippetFunctions,SnippetFunctionSimpleTypeName,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetFunctions\SnippetFunctionSimpleTypeName.cs,TryGetSimplifiedTypeName,The length of the statement  "            var simplifiedDocument = Simplifier.ReduceAsync(documentWithAnnotations' cancellationToken: cancellationToken).WaitAndGetResult(cancellationToken); " is 147.
Long Statement,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets.SnippetFunctions,SnippetFunctionSimpleTypeName,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetFunctions\SnippetFunctionSimpleTypeName.cs,TryGetSimplifiedTypeName,The length of the statement  "            simplifiedTypeName = simplifiedDocument.GetCSharpSyntaxRootAsync(cancellationToken).WaitAndGetResult(cancellationToken).GetAnnotatedNodesAndTokens(typeAnnotation).Single().ToString(); " is 183.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,GetTypeKindForCodeTypeRef,The conditional expression  "typeSymbol.TypeKind == TypeKind.Class ||                  typeSymbol.TypeKind == TypeKind.Interface ||                  typeSymbol.TypeKind == TypeKind.Enum ||                  typeSymbol.TypeKind == TypeKind.Struct ||                  typeSymbol.TypeKind == TypeKind.Delegate"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetAccess,The conditional expression  "!(member.Parent is BaseTypeDeclarationSyntax) &&                      (newAccess == EnvDTE.vsCMAccess.vsCMAccessPrivate ||                       newAccess == EnvDTE.vsCMAccess.vsCMAccessProtected ||                       newAccess == EnvDTE.vsCMAccess.vsCMAccessProjectOrProtected)"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetMustImplement,The conditional expression  "accessor.Body == null ||                                  accessor.Body.Statements.Count > 1 ||                                  (accessor.Body.Statements.Count == 1 && !accessor.Body.Statements[0].IsKind(SyntaxKind.ReturnStatement))"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,GetFunctionExtender,The conditional expression  "node == null || node.Kind() != SyntaxKind.MethodDeclaration ||                  symbol == null || symbol.Kind != SymbolKind.Method"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,GetPropertyExtender,The conditional expression  "node == null || node.Kind() != SyntaxKind.PropertyDeclaration ||                  symbol == null || symbol.Kind != SymbolKind.Property"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,GetVariablePrototype,The conditional expression  "(flags & PrototypeFlags.Initializer) != 0 &&                  node.Initializer != null &&                  node.Initializer.Value != null &&                  !node.Initializer.Value.IsMissing"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,GetVariablePrototype,The conditional expression  "(flags & PrototypeFlags.Initializer) != 0 &&                  node.EqualsValue != null &&                  node.EqualsValue.Value != null &&                  !node.EqualsValue.Value.IsMissing"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.Debugging,Worker,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Debugging\CSharpProximityExpressionsService.Worker.cs,AddIndexerParameters,The conditional expression  "block != null &&                      block.Parent is AccessorDeclarationSyntax &&                      block.Parent.Parent is AccessorListSyntax &&                      block.Parent.Parent.Parent is IndexerDeclarationSyntax"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.ObjectBrowser,DescriptionBuilder,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ObjectBrowser\DescriptionBuilder.cs,BuildTypeDeclaration,The conditional expression  "baseType.SpecialType != SpecialType.System_Object &&                          baseType.SpecialType != SpecialType.System_Delegate &&                          baseType.SpecialType != SpecialType.System_MulticastDelegate &&                          baseType.SpecialType != SpecialType.System_Enum &&                          baseType.SpecialType != SpecialType.System_ValueType"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.ObjectBrowser,DescriptionBuilder,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ObjectBrowser\DescriptionBuilder.cs,BuildTypeModifiers,The conditional expression  "typeSymbol.IsSealed &&                  typeSymbol.TypeKind != TypeKind.Struct &&                  typeSymbol.TypeKind != TypeKind.Enum &&                  typeSymbol.TypeKind != TypeKind.Delegate"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.ObjectBrowser,DescriptionBuilder,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ObjectBrowser\DescriptionBuilder.cs,BuildMethodDeclaration,The conditional expression  "methodSymbol.MethodKind != MethodKind.Constructor &&                  methodSymbol.MethodKind != MethodKind.Destructor &&                  methodSymbol.MethodKind != MethodKind.StaticConstructor &&                  methodSymbol.MethodKind != MethodKind.Conversion"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.ObjectBrowser,DescriptionBuilder,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ObjectBrowser\DescriptionBuilder.cs,BuildConstraints,The conditional expression  "typeParameterSymbol.ConstraintTypes.Length == 0 &&                  !typeParameterSymbol.HasConstructorConstraint &&                  !typeParameterSymbol.HasReferenceTypeConstraint &&                  !typeParameterSymbol.HasValueTypeConstraint"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.Options,CSharpSettingsManagerOptionSerializer,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\CSharpSettingsManagerOptionSerializer.cs,SupportsOption,The conditional expression  "option == OrganizerOptions.PlaceSystemNamespaceFirst ||                  option == OrganizerOptions.WarnOnBuildErrors ||                  option == CSharpCompletionOptions.AddNewLineOnEnterAfterFullyTypedWord ||                  option == CSharpCompletionOptions.IncludeSnippets ||                  option.Feature == CSharpCodeStyleOptions.FeatureName ||                  option.Feature == CSharpFormattingOptions.WrappingFeatureName ||                  option.Feature == CSharpFormattingOptions.IndentFeatureName ||                  option.Feature == CSharpFormattingOptions.SpacingFeatureName ||                  option.Feature == CSharpFormattingOptions.NewLineFormattingFeatureName"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.Options,CSharpSettingsManagerOptionSerializer,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\CSharpSettingsManagerOptionSerializer.cs,SupportsOption,The conditional expression  "option == CompletionOptions.IncludeKeywords ||                      option == CompletionOptions.TriggerOnTypingLetters ||                      option.Feature == SimplificationOptions.PerLanguageFeatureName ||                      option.Feature == ExtractMethodOptions.FeatureName ||                      option.Feature == ServiceFeatureOnOffOptions.OptionName ||                      option.Feature == FormattingOptions.InternalTabFeatureName"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpDebuggerIntelliSenseContext,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpDebuggerIntelliSenseContext.cs,GetAdjustedContextPoint,The conditional expression  "contextPoint > token.Span.End &&                  token.IsKindOrHasMatchingText(SyntaxKind.CloseBraceToken) &&                  token.Parent.IsKind(SyntaxKind.Block) &&                  token.Parent.Parent is MemberDeclarationSyntax"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpHelpContextService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpHelpContextService.cs,TryGetText,The conditional expression  "TryGetTextForContextualKeyword(token' document' syntaxFacts' out text) ||                 TryGetTextForKeyword(token' document' syntaxFacts' out text) ||                 TryGetTextForPreProcessor(token' document' syntaxFacts' out text) ||                 TryGetTextForSymbol(token' semanticModel' document' out text) ||                 TryGetTextForOperator(token' document' out text)"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpHelpContextService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpHelpContextService.cs,TryGetTextForKeyword,The conditional expression  "token.ValueText == "var" && token.IsKind(SyntaxKind.IdentifierToken) &&                  token.Parent.Parent is VariableDeclarationSyntax && token.Parent == ((VariableDeclarationSyntax)token.Parent.Parent).Type"  is complex.
Complex Conditional,Microsoft.VisualStudio.LanguageServices.CSharp.Progression,CSharpProgressionLanguageService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Progression\CSharpProgressionLanguageService.cs,GetTopLevelNodesFromDocument,The conditional expression  "node.Kind() == SyntaxKind.ClassDeclaration ||                              node.Kind() == SyntaxKind.DelegateDeclaration ||                              node.Kind() == SyntaxKind.EnumDeclaration ||                              node.Kind() == SyntaxKind.InterfaceDeclaration ||                              node.Kind() == SyntaxKind.StructDeclaration ||                              node.Kind() == SyntaxKind.VariableDeclarator ||                              node.Kind() == SyntaxKind.MethodDeclaration ||                              node.Kind() == SyntaxKind.PropertyDeclaration"  is complex.
Virtual Method Call from Constructor,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProject,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProject.cs,CSharpProject,The constructor "CSharpProject" calls a virtual method "InitializeOptions".
Empty Catch Block,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpPackage,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CSharpPackage.cs,Initialize,The method has an empty catch block.
Magic Number,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,GetDocComment,The following statement contains a magic number: for (int i = 1; i < lines.Length; i++)              {                  var line = lines[i].TrimStart();                  if (line.StartsWith("///"))                  {                      line = line.Substring(3);                  }                    if (line.Length > 0)                  {                      lengthToStrip = Math.Min(lengthToStrip' line.GetLeadingWhitespace().Length);                  }                    lines[i] = line;              }
Magic Number,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,NodeNameGenerator,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.NodeNameGenerator.cs,AppendOperatorName,The following statement contains a magic number: if (name.EndsWith("Keyword"))                  {                      name = name.Substring(0' name.Length - 7);                  }                  else if (name.EndsWith("Token"))                  {                      name = name.Substring(0' name.Length - 5);                  }
Magic Number,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,NodeNameGenerator,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.NodeNameGenerator.cs,AppendOperatorName,The following statement contains a magic number: if (name.EndsWith("Keyword"))                  {                      name = name.Substring(0' name.Length - 7);                  }                  else if (name.EndsWith("Token"))                  {                      name = name.Substring(0' name.Length - 5);                  }
Magic Number,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,EndRegionFormattingRule,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\EndRegionFormattingRule.cs,GetAdjustNewLinesOperation,The following statement contains a magic number: if (IsAfterEndRegionBeforeMethodDeclaration((SyntaxToken)previousToken' (SyntaxToken)currentToken))              {                  return FormattingOperations.CreateAdjustNewLinesOperation(2' AdjustNewLinesOption.ForceLines);              }
Magic Number,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel.MethodXml,MethodXmlBuilder,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\MethodXml\MethodXmlBuilder.cs,GenerateComments,The following statement contains a magic number: foreach (var trivia in triviaList)              {                  // Multi-line comment forms are ignored.                  if (trivia.Kind() == SyntaxKind.SingleLineCommentTrivia)                  {                      // In order to be valid' the comment must appear on its own line.                      var line = Text.Lines.GetLineFromPosition(trivia.SpanStart);                      var firstNonWhitespacePosition = line.GetFirstNonWhitespacePosition() ?? -1;                      if (firstNonWhitespacePosition == trivia.SpanStart)                      {                          using (var tag = CommentTag())                          {                              // Skip initial slashes                              var trimmedComment = trivia.ToString().Substring(2);                              EncodedText(trimmedComment);                          }                      }                  }              }
Magic Number,Microsoft.VisualStudio.LanguageServices.CSharp.Snippets,SnippetCommandHandler,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Snippets\SnippetCommandHandler.cs,InvokeInsertionUI,The following statement contains a magic number: expansionManager.InvokeInsertionUI(                  EditorAdaptersFactoryService.GetViewAdapter(textView)'                  GetSnippetExpansionClient(textView' subjectBuffer)'                  Guids.CSharpLanguageServiceId'                  bstrTypes: surroundWith ? new[] { "SurroundsWith" } : new[] { "Expansion"' "SurroundsWith" }'                  iCountTypes: surroundWith ? 1 : 2'                  fIncludeNULLType: 0'                  bstrKinds: null'                  iCountKinds: 0'                  fIncludeNULLKind: 0'                  bstrPrefixText: surroundWith ? CSharpVSResources.SurroundWith : CSharpVSResources.InsertSnippet'                  bstrCompletionChar: null);
Magic Number,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,CSharpProjectShim,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\CSharpProjectShim.cs,CreateCompilationOptions,The following statement contains a magic number: if (!int.TryParse(GetStringOption(CompilerOptions.OPTID_WARNINGLEVEL' defaultValue: "")' out warningLevel))              {                  warningLevel = 4;              }
Magic Number,Microsoft.VisualStudio.LanguageServices.CSharp.ProjectSystemShim,HACK_VariantStructure,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ProjectSystemShim\HACK_VariantStructure.cs,ConvertToObject,The following statement contains a magic number: if (_type == (short)VarEnum.VT_BOOL && _booleanValue == 4)              {                  return null;              }
Magic Number,Microsoft.VisualStudio.LanguageServices.CSharp.Utilities,BlankLineInGeneratedMethodFormattingRule,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Utilities\BlankLineInGeneratedMethodFormattingRule.cs,GetAdjustNewLinesOperation,The following statement contains a magic number: if (previousToken.Kind() == SyntaxKind.OpenBraceToken &&                  currentToken.Kind() == SyntaxKind.CloseBraceToken)              {                  if (currentToken.Parent.Kind() == SyntaxKind.Block &&                      currentToken.Parent.Parent.Kind() == SyntaxKind.MethodDeclaration)                  {                      return FormattingOperations.CreateAdjustNewLinesOperation(2' AdjustNewLinesOption.ForceLines);                  }              }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CreateInternalCodeElement,The following switch statement is missing a default case: switch (node.Kind())              {                  case SyntaxKind.Attribute:                      return (EnvDTE.CodeElement)CreateInternalCodeAttribute(state' fileCodeModel' node);                    case SyntaxKind.AttributeArgument:                      return (EnvDTE.CodeElement)CreateInternalCodeAttributeArgument(state' fileCodeModel' (AttributeArgumentSyntax)node);                    case SyntaxKind.Parameter:                      return (EnvDTE.CodeElement)CreateInternalCodeParameter(state' fileCodeModel' (ParameterSyntax)node);                    case SyntaxKind.UsingDirective:                      return (EnvDTE.CodeElement)CreateInternalCodeImport(state' fileCodeModel' (UsingDirectiveSyntax)node);              }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,GetTypeKindForCodeTypeRef,The following switch statement is missing a default case: switch (typeSymbol.SpecialType)                  {                      case SpecialType.System_Void:                          return EnvDTE.vsCMTypeRef.vsCMTypeRefVoid;                      case SpecialType.System_String:                          return EnvDTE.vsCMTypeRef.vsCMTypeRefString;                      case SpecialType.System_Object:                          return EnvDTE.vsCMTypeRef.vsCMTypeRefObject;                      case SpecialType.System_Char:                          return EnvDTE.vsCMTypeRef.vsCMTypeRefChar;                      case SpecialType.System_Byte:                          return EnvDTE.vsCMTypeRef.vsCMTypeRefByte;                      case SpecialType.System_Boolean:                          return EnvDTE.vsCMTypeRef.vsCMTypeRefBool;                      case SpecialType.System_Int16:                          return EnvDTE.vsCMTypeRef.vsCMTypeRefShort;                      case SpecialType.System_Int32:                          return EnvDTE.vsCMTypeRef.vsCMTypeRefInt;                      case SpecialType.System_Int64:                          return EnvDTE.vsCMTypeRef.vsCMTypeRefLong;                      case SpecialType.System_Single:                          return EnvDTE.vsCMTypeRef.vsCMTypeRefFloat;                      case SpecialType.System_Double:                          return EnvDTE.vsCMTypeRef.vsCMTypeRefDouble;                      case SpecialType.System_Decimal:                          return EnvDTE.vsCMTypeRef.vsCMTypeRefDecimal;                      case SpecialType.System_UInt16:                          return (EnvDTE.vsCMTypeRef)EnvDTE80.vsCMTypeRef2.vsCMTypeRefUnsignedShort;                      case SpecialType.System_UInt32:                          return (EnvDTE.vsCMTypeRef)EnvDTE80.vsCMTypeRef2.vsCMTypeRefUnsignedInt;                      case SpecialType.System_UInt64:                          return (EnvDTE.vsCMTypeRef)EnvDTE80.vsCMTypeRef2.vsCMTypeRefUnsignedLong;                      case SpecialType.System_SByte:                          return (EnvDTE.vsCMTypeRef)EnvDTE80.vsCMTypeRef2.vsCMTypeRefSByte;                  }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,IsAccessorNode,The following switch statement is missing a default case: switch (node.Kind())              {                  case SyntaxKind.GetAccessorDeclaration:                  case SyntaxKind.SetAccessorDeclaration:                  case SyntaxKind.AddAccessorDeclaration:                  case SyntaxKind.RemoveAccessorDeclaration:                      return true;              }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,SetConstKind,The following switch statement is missing a default case: switch (kind)              {                  case EnvDTE80.vsCMConstKind.vsCMConstKindConst:                      flags |= ModifierFlags.Const;                      break;                  case EnvDTE80.vsCMConstKind.vsCMConstKindReadOnly:                      flags |= ModifierFlags.ReadOnly;                      break;              }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,IsAutoImplementedProperty,The following switch statement is missing a default case: switch (accessor.Kind())                  {                      case SyntaxKind.GetAccessorDeclaration:                          if (getAccessor == null)                          {                              getAccessor = accessor;                          }                            break;                      case SyntaxKind.SetAccessorDeclaration:                          if (setAccessor == null)                          {                              setAccessor = accessor;                          }                            break;                  }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,GetPrototype,The following switch statement is missing a default case: switch (symbol.Kind)                  {                      case SymbolKind.Field:                          return GetVariablePrototype((IFieldSymbol)symbol' flags);                      case SymbolKind.Method:                          return GetFunctionPrototype((IMethodSymbol)symbol' flags);                      case SymbolKind.Property:                          return GetPropertyPrototype((IPropertySymbol)symbol' flags);                      case SymbolKind.Event:                          return GetEventPrototype((IEventSymbol)symbol' flags);                      case SymbolKind.NamedType:                          var namedType = (INamedTypeSymbol)symbol;                          if (namedType.TypeKind == TypeKind.Delegate)                          {                              return GetDelegatePrototype((INamedTypeSymbol)symbol' flags);                          }                            break;                  }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,AppendDelegatePrototype,The following switch statement is missing a default case: switch (flags & PrototypeFlags.NameMask)              {                  case PrototypeFlags.FullName:                      AppendTypeNamePrototype(builder' includeNamespaces: true' includeGenerics: false' symbol: symbol.ContainingSymbol);                      builder.Append('.');                      goto case PrototypeFlags.BaseName;                    case PrototypeFlags.TypeName:                      AppendTypeNamePrototype(builder' includeNamespaces: true' includeGenerics: true' symbol: symbol.ContainingSymbol);                      builder.Append('.');                      goto case PrototypeFlags.BaseName;                    case PrototypeFlags.BaseName:                      builder.Append(baseName);                      break;                    case PrototypeFlags.NoName:                      addSpace = false;                      break;              }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,AppendEventPrototype,The following switch statement is missing a default case: switch (flags & PrototypeFlags.NameMask)              {                  case PrototypeFlags.FullName:                      AppendTypeNamePrototype(builder' includeNamespaces: true' includeGenerics: false' symbol: symbol.ContainingSymbol);                      builder.Append('.');                      goto case PrototypeFlags.BaseName;                    case PrototypeFlags.TypeName:                      AppendTypeNamePrototype(builder' includeNamespaces: false' includeGenerics: true' symbol: symbol.ContainingSymbol);                      builder.Append('.');                      goto case PrototypeFlags.BaseName;                    case PrototypeFlags.BaseName:                      builder.Append(baseName);                      break;              }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,AppendFunctionPrototype,The following switch statement is missing a default case: switch (flags & PrototypeFlags.NameMask)              {                  case PrototypeFlags.FullName:                      AppendTypeNamePrototype(builder' includeNamespaces: true' includeGenerics: false' symbol: symbol.ContainingSymbol);                      builder.Append('.');                      goto case PrototypeFlags.BaseName;                    case PrototypeFlags.TypeName:                      AppendTypeNamePrototype(builder' includeNamespaces: false' includeGenerics: true' symbol: symbol.ContainingSymbol);                      builder.Append('.');                      goto case PrototypeFlags.BaseName;                    case PrototypeFlags.BaseName:                      builder.Append(baseName);                      break;                    case PrototypeFlags.NoName:                      addSpace = false;                      break;              }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,AppendPropertyPrototype,The following switch statement is missing a default case: switch (flags & PrototypeFlags.NameMask)              {                  case PrototypeFlags.FullName:                      AppendTypeNamePrototype(builder' includeNamespaces: true' includeGenerics: false' symbol: symbol.ContainingSymbol);                      builder.Append('.');                      goto case PrototypeFlags.BaseName;                    case PrototypeFlags.TypeName:                      AppendTypeNamePrototype(builder' includeNamespaces: false' includeGenerics: true' symbol: symbol.ContainingSymbol);                      builder.Append('.');                      goto case PrototypeFlags.BaseName;                    case PrototypeFlags.BaseName:                      if (symbol.IsIndexer)                      {                          builder.Append("this[");                          AppendParametersPrototype(builder' symbol.Parameters' PrototypeFlags.ParameterTypes | PrototypeFlags.ParameterNames);                          builder.Append("]");                      }                      else                      {                          builder.Append(baseName);                      }                        break;              }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CSharpCodeModelService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,AppendVariablePrototype,The following switch statement is missing a default case: switch (flags & PrototypeFlags.NameMask)              {                  case PrototypeFlags.FullName:                      AppendTypeNamePrototype(builder' includeNamespaces: true' includeGenerics: false' symbol: symbol.ContainingSymbol);                      builder.Append('.');                      goto case PrototypeFlags.BaseName;                    case PrototypeFlags.TypeName:                      AppendTypeNamePrototype(builder' includeNamespaces: false' includeGenerics: true' symbol: symbol.ContainingSymbol);                      builder.Append('.');                      goto case PrototypeFlags.BaseName;                    case PrototypeFlags.BaseName:                      builder.Append(baseName);                      break;              }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CodeModelEventCollector,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CompareNames,The following switch statement is missing a default case: switch (oldName.Kind())                  {                      case SyntaxKind.IdentifierName:                          var oldIdentifierName = (IdentifierNameSyntax)oldName;                          var newIdentifierName = (IdentifierNameSyntax)newName;                            return StringComparer.Ordinal.Equals(oldIdentifierName.Identifier.ToString()' newIdentifierName.Identifier.ToString());                        case SyntaxKind.QualifiedName:                          var oldQualifiedName = (QualifiedNameSyntax)oldName;                          var newQualifiedName = (QualifiedNameSyntax)newName;                            return CompareNames(oldQualifiedName.Left' newQualifiedName.Left)                              && CompareNames(oldQualifiedName.Right' oldQualifiedName.Right);                        case SyntaxKind.GenericName:                          var oldGenericName = (GenericNameSyntax)oldName;                          var newGenericName = (GenericNameSyntax)newName;                            if (!StringComparer.Ordinal.Equals(oldGenericName.Identifier.ToString()' newGenericName.Identifier.ToString()))                          {                              return false;                          }                            if (oldGenericName.Arity != newGenericName.Arity)                          {                              return false;                          }                            for (int i = 0; i < oldGenericName.Arity; i++)                          {                              if (!CompareTypes(oldGenericName.TypeArgumentList.Arguments[i]' newGenericName.TypeArgumentList.Arguments[i]))                              {                                  return false;                              }                          }                            return true;                        case SyntaxKind.AliasQualifiedName:                          var oldAliasQualifiedName = (AliasQualifiedNameSyntax)oldName;                          var newAliasQualifiedName = (AliasQualifiedNameSyntax)newName;                            return CompareNames(oldAliasQualifiedName.Alias' newAliasQualifiedName.Alias)                              && CompareNames(oldAliasQualifiedName.Name' newAliasQualifiedName.Name);                  }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,CodeModelEventCollector,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.CodeModelEventCollector.cs,CompareTypes,The following switch statement is missing a default case: switch (oldType.Kind())                  {                      case SyntaxKind.PredefinedType:                          var oldPredefinedType = (PredefinedTypeSyntax)oldType;                          var newPredefinedType = (PredefinedTypeSyntax)newType;                            return oldPredefinedType.Keyword.RawKind == newPredefinedType.Keyword.RawKind;                        case SyntaxKind.ArrayType:                          var oldArrayType = (ArrayTypeSyntax)oldType;                          var newArrayType = (ArrayTypeSyntax)newType;                            return (oldArrayType.RankSpecifiers.Count == newArrayType.RankSpecifiers.Count)                              && CompareTypes(oldArrayType.ElementType' newArrayType.ElementType);                        case SyntaxKind.PointerType:                          var oldPointerType = (PointerTypeSyntax)oldType;                          var newPointerType = (PointerTypeSyntax)newType;                            return CompareTypes(oldPointerType.ElementType' newPointerType.ElementType);                        case SyntaxKind.NullableType:                          var oldNullableType = (NullableTypeSyntax)oldType;                          var newNullableType = (NullableTypeSyntax)newType;                            return CompareTypes(oldNullableType.ElementType' newNullableType.ElementType);                        case SyntaxKind.IdentifierName:                      case SyntaxKind.QualifiedName:                      case SyntaxKind.AliasQualifiedName:                      case SyntaxKind.GenericName:                          var oldName = (NameSyntax)oldType;                          var newName = (NameSyntax)newType;                            return CompareNames(oldName' newName);                  }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,NodeNameGenerator,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.NodeNameGenerator.cs,AppendName,The following switch statement is missing a default case: switch (name.Kind())                  {                      case SyntaxKind.IdentifierName:                          AppendDotIfNeeded(builder);                          builder.Append(((IdentifierNameSyntax)name).Identifier.ValueText);                          break;                        case SyntaxKind.GenericName:                          var genericName = (GenericNameSyntax)name;                          AppendDotIfNeeded(builder);                          builder.Append(genericName.Identifier.ValueText);                          AppendArity(builder' genericName.Arity);                          break;                        case SyntaxKind.AliasQualifiedName:                          var aliasQualifiedName = (AliasQualifiedNameSyntax)name;                          AppendName(builder' aliasQualifiedName.Alias);                          builder.Append("::");                          AppendName(builder' aliasQualifiedName.Name);                          break;                        case SyntaxKind.QualifiedName:                          AppendName(builder' ((QualifiedNameSyntax)name).Right);                          break;                  }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,NodeNameGenerator,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.NodeNameGenerator.cs,AppendTypeName,The following switch statement is missing a default case: switch (type.Kind())                      {                          case SyntaxKind.PredefinedType:                              builder.Append(((PredefinedTypeSyntax)type).Keyword.ValueText);                              break;                            case SyntaxKind.ArrayType:                              var arrayType = (ArrayTypeSyntax)type;                              AppendTypeName(builder' arrayType.ElementType);                                var specifiers = arrayType.RankSpecifiers;                              for (int i = 0; i < specifiers.Count; i++)                              {                                  builder.Append('[');                                    var specifier = specifiers[i];                                  if (specifier.Rank > 1)                                  {                                      builder.Append('''' specifier.Rank - 1);                                  }                                    builder.Append(']');                              }                                break;                            case SyntaxKind.PointerType:                              AppendTypeName(builder' ((PointerTypeSyntax)type).ElementType);                              builder.Append('*');                              break;                            case SyntaxKind.NullableType:                              AppendTypeName(builder' ((NullableTypeSyntax)type).ElementType);                              builder.Append('?');                              break;                      }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,NodeNameGenerator,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\CSharpCodeModelService.NodeNameGenerator.cs,AppendNodeName,The following switch statement is missing a default case: switch (node.Kind())                  {                      case SyntaxKind.NamespaceDeclaration:                          var namespaceDeclaration = (NamespaceDeclarationSyntax)node;                          AppendName(builder' namespaceDeclaration.Name);                          break;                        case SyntaxKind.ClassDeclaration:                      case SyntaxKind.StructDeclaration:                      case SyntaxKind.InterfaceDeclaration:                          var typeDeclaration = (TypeDeclarationSyntax)node;                          builder.Append(typeDeclaration.Identifier.ValueText);                          AppendArity(builder' typeDeclaration.Arity);                          break;                        case SyntaxKind.EnumDeclaration:                          var enumDeclaration = (EnumDeclarationSyntax)node;                          builder.Append(enumDeclaration.Identifier.ValueText);                          break;                        case SyntaxKind.DelegateDeclaration:                          var delegateDeclaration = (DelegateDeclarationSyntax)node;                          builder.Append(delegateDeclaration.Identifier.ValueText);                          AppendArity(builder' delegateDeclaration.Arity);                          break;                        case SyntaxKind.EnumMemberDeclaration:                          var enumMemberDeclaration = (EnumMemberDeclarationSyntax)node;                          builder.Append(enumMemberDeclaration.Identifier.ValueText);                          break;                        case SyntaxKind.VariableDeclarator:                          var variableDeclarator = (VariableDeclaratorSyntax)node;                          builder.Append(variableDeclarator.Identifier.ValueText);                          break;                        case SyntaxKind.MethodDeclaration:                          var methodDeclaration = (MethodDeclarationSyntax)node;                          builder.Append(methodDeclaration.Identifier.ValueText);                          AppendArity(builder' methodDeclaration.Arity);                          AppendParameterList(builder' methodDeclaration.ParameterList);                          break;                        case SyntaxKind.OperatorDeclaration:                          var operatorDeclaration = (OperatorDeclarationSyntax)node;                          AppendOperatorName(builder' operatorDeclaration.OperatorToken.Kind());                          AppendParameterList(builder' operatorDeclaration.ParameterList);                          break;                        case SyntaxKind.ConversionOperatorDeclaration:                          var conversionOperatorDeclaration = (ConversionOperatorDeclarationSyntax)node;                          AppendOperatorName(builder' conversionOperatorDeclaration.ImplicitOrExplicitKeyword.Kind());                          builder.Append('_');                          AppendTypeName(builder' conversionOperatorDeclaration.Type);                          AppendParameterList(builder' conversionOperatorDeclaration.ParameterList);                          break;                        case SyntaxKind.ConstructorDeclaration:                          var constructorDeclaration = (ConstructorDeclarationSyntax)node;                          builder.Append(constructorDeclaration.Modifiers.Any(SyntaxKind.StaticKeyword) ? "#sctor" : "#ctor");                          AppendParameterList(builder' constructorDeclaration.ParameterList);                          break;                        case SyntaxKind.DestructorDeclaration:                          builder.Append("#dtor()");                          break;                        case SyntaxKind.IndexerDeclaration:                          var indexerDeclaration = (IndexerDeclarationSyntax)node;                          builder.Append("#this");                          AppendParameterList(builder' indexerDeclaration.ParameterList);                          break;                        case SyntaxKind.PropertyDeclaration:                          var propertyDeclaration = (PropertyDeclarationSyntax)node;                          builder.Append(propertyDeclaration.Identifier.ValueText);                          break;                        case SyntaxKind.EventDeclaration:                          var eventDeclaration = (EventDeclarationSyntax)node;                          builder.Append(eventDeclaration.Identifier.ValueText);                          break;                  }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,ModifierFlagsExtensions,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\ModifierFlagsExtensions.cs,GetModifierFlags,The following switch statement is missing a default case: switch (modifier.Kind())                  {                      case SyntaxKind.PublicKeyword:                          result |= ModifierFlags.Public;                          break;                      case SyntaxKind.ProtectedKeyword:                          result |= ModifierFlags.Protected;                          break;                      case SyntaxKind.InternalKeyword:                          result |= ModifierFlags.Internal;                          break;                      case SyntaxKind.PrivateKeyword:                          result |= ModifierFlags.Private;                          break;                      case SyntaxKind.VirtualKeyword:                          result |= ModifierFlags.Virtual;                          break;                      case SyntaxKind.AbstractKeyword:                          result |= ModifierFlags.Abstract;                          break;                      case SyntaxKind.NewKeyword:                          result |= ModifierFlags.New;                          break;                      case SyntaxKind.OverrideKeyword:                          result |= ModifierFlags.Override;                          break;                      case SyntaxKind.SealedKeyword:                          result |= ModifierFlags.Sealed;                          break;                      case SyntaxKind.StaticKeyword:                          result |= ModifierFlags.Static;                          break;                      case SyntaxKind.ExternKeyword:                          result |= ModifierFlags.Extern;                          break;                      case SyntaxKind.ReadOnlyKeyword:                          result |= ModifierFlags.ReadOnly;                          break;                      case SyntaxKind.ConstKeyword:                          result |= ModifierFlags.Const;                          break;                      case SyntaxKind.VolatileKeyword:                          result |= ModifierFlags.Volatile;                          break;                      case SyntaxKind.UnsafeKeyword:                          result |= ModifierFlags.Unsafe;                          break;                      case SyntaxKind.AsyncKeyword:                          result |= ModifierFlags.Async;                          break;                      case SyntaxKind.PartialKeyword:                          result |= ModifierFlags.Partial;                          break;                  }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel,ParameterFlagsExtensions,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\ParameterFlagsExtensions.cs,GetParameterFlags,The following switch statement is missing a default case: switch (modifier.Kind())                  {                      case SyntaxKind.RefKeyword:                          result |= ParameterFlags.Ref;                          break;                      case SyntaxKind.OutKeyword:                          result |= ParameterFlags.Out;                          break;                      case SyntaxKind.ParamsKeyword:                          result |= ParameterFlags.Params;                          break;                  }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel.MethodXml,MethodXmlBuilder,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\MethodXml\MethodXmlBuilder.cs,GenerateStatement,The following switch statement is missing a default case: switch (statement.Kind())              {                  case SyntaxKind.LocalDeclarationStatement:                      success = TryGenerateLocal((LocalDeclarationStatementSyntax)statement);                      break;                  case SyntaxKind.Block:                      success = true;                      GenerateBlock((BlockSyntax)statement);                      break;                  case SyntaxKind.ExpressionStatement:                      success = TryGenerateExpressionStatement((ExpressionStatementSyntax)statement);                      break;              }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel.MethodXml,MethodXmlBuilder,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\MethodXml\MethodXmlBuilder.cs,TryGenerateExpressionSansTag,The following switch statement is missing a default case: switch (expression.Kind())              {                  case SyntaxKind.CharacterLiteralExpression:                  case SyntaxKind.UnaryMinusExpression:                  case SyntaxKind.NumericLiteralExpression:                  case SyntaxKind.StringLiteralExpression:                  case SyntaxKind.TrueLiteralExpression:                  case SyntaxKind.FalseLiteralExpression:                      return TryGenerateLiteral(expression);                    case SyntaxKind.NullLiteralExpression:                      GenerateNullLiteral();                      return true;                    case SyntaxKind.ParenthesizedExpression:                      return TryGenerateParentheses((ParenthesizedExpressionSyntax)expression);                    case SyntaxKind.AddExpression:                  case SyntaxKind.BitwiseOrExpression:                  case SyntaxKind.BitwiseAndExpression:                      return TryGenerateBinaryOperation((BinaryExpressionSyntax)expression);                    case SyntaxKind.SimpleAssignmentExpression:                  case SyntaxKind.AddAssignmentExpression:                      return TryGenerateAssignment((AssignmentExpressionSyntax)expression);                    case SyntaxKind.CastExpression:                      return TryGenerateCast((CastExpressionSyntax)expression);                    case SyntaxKind.ObjectCreationExpression:                      return TryGenerateNewClass((ObjectCreationExpressionSyntax)expression);                    case SyntaxKind.ArrayCreationExpression:                      return TryGenerateNewArray((ArrayCreationExpressionSyntax)expression);                    case SyntaxKind.ArrayInitializerExpression:                      return TryGenerateArrayLiteral((InitializerExpressionSyntax)expression);                    case SyntaxKind.SimpleMemberAccessExpression:                      return TryGenerateNameRef((MemberAccessExpressionSyntax)expression);                    case SyntaxKind.IdentifierName:                      return TryGenerateNameRef((IdentifierNameSyntax)expression);                    case SyntaxKind.InvocationExpression:                      return GenerateMethodCall((InvocationExpressionSyntax)expression);                    case SyntaxKind.ElementAccessExpression:                      return TryGenerateArrayElementAccess((ElementAccessExpressionSyntax)expression);                    case SyntaxKind.TypeOfExpression:                      return TryGenerateTypeOfExpression((TypeOfExpressionSyntax)expression);                    case SyntaxKind.ThisExpression:                      GenerateThisReference();                      return true;                    case SyntaxKind.BaseExpression:                      GenerateBaseReference();                      return true;              }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel.MethodXml,MethodXmlBuilder,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\MethodXml\MethodXmlBuilder.cs,TryGenerateLiteral,The following switch statement is missing a default case: switch (expression.Kind())                  {                      case SyntaxKind.UnaryMinusExpression:                      case SyntaxKind.NumericLiteralExpression:                          GenerateNumber(constantValue.Value' type);                          return true;                        case SyntaxKind.CharacterLiteralExpression:                          GenerateChar((char)constantValue.Value);                          return true;                        case SyntaxKind.StringLiteralExpression:                          GenerateString((string)constantValue.Value);                          return true;                        case SyntaxKind.TrueLiteralExpression:                      case SyntaxKind.FalseLiteralExpression:                          GenerateBoolean((bool)constantValue.Value);                          return true;                  }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.CodeModel.MethodXml,MethodXmlBuilder,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\CodeModel\MethodXml\MethodXmlBuilder.cs,TryGenerateAssignment,The following switch statement is missing a default case: switch (binaryExpression.Kind())              {                  case SyntaxKind.AddAssignmentExpression:                      kind = BinaryOperatorKind.AddDelegate;                      break;              }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.Debugging,CSharpProximityExpressionsService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Debugging\CSharpProximityExpressionsService.cs,AddSubExpressionTerms,The following switch statement is missing a default case: switch (expression.Kind())              {                  case SyntaxKind.ThisExpression:                  case SyntaxKind.BaseExpression:                      // an op term is ok if it's a "this" or "base" op it allows us to see                      // "this.foo" in the autos window note: it's not a VALIDTERM since we don't                      // want "this" showing up in the auto's window twice.                      expressionType = ExpressionType.ValidExpression;                      return;                    case SyntaxKind.IdentifierName:                      // Name nodes are always valid terms                      expressionType = ExpressionType.ValidTerm;                      return;                    case SyntaxKind.CharacterLiteralExpression:                  case SyntaxKind.FalseLiteralExpression:                  case SyntaxKind.NullLiteralExpression:                  case SyntaxKind.NumericLiteralExpression:                  case SyntaxKind.StringLiteralExpression:                  case SyntaxKind.TrueLiteralExpression:                      // Constants can make up a valid term' but we don't consider them valid                      // terms themselves (since we don't want them to show up in the autos window                      // on their own).                      expressionType = ExpressionType.ValidExpression;                      return;                    case SyntaxKind.CastExpression:                      AddCastExpressionTerms((CastExpressionSyntax)expression' terms' ref expressionType);                      return;                    case SyntaxKind.SimpleMemberAccessExpression:                  case SyntaxKind.PointerMemberAccessExpression:                      AddMemberAccessExpressionTerms((MemberAccessExpressionSyntax)expression' terms' ref expressionType);                      return;                    case SyntaxKind.ObjectCreationExpression:                      AddObjectCreationExpressionTerms((ObjectCreationExpressionSyntax)expression' terms' ref expressionType);                      return;                    case SyntaxKind.ArrayCreationExpression:                      AddArrayCreationExpressionTerms((ArrayCreationExpressionSyntax)expression' terms' ref expressionType);                      return;                    case SyntaxKind.InvocationExpression:                      AddInvocationExpressionTerms((InvocationExpressionSyntax)expression' terms' ref expressionType);                      return;              }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.ObjectBrowser,DescriptionBuilder,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\ObjectBrowser\DescriptionBuilder.cs,BuildMethodDeclaration,The following switch statement is missing a default case: switch (methodSymbol.Name)                  {                      case WellKnownMemberNames.ImplicitConversionName:                          AddName("implicit operator ");                          break;                        case WellKnownMemberNames.ExplicitConversionName:                          AddName("explicit operator ");                          break;                  }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.Options,CSharpSettingsManagerOptionSerializer,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\CSharpSettingsManagerOptionSerializer.cs,TryPersist,The following switch statement is missing a default case: switch ((BinaryOperatorSpacingOptions)value)                  {                      case BinaryOperatorSpacingOptions.Remove:                          {                              this.Manager.SetValueAsync(WrappingIgnoreSpacesAroundBinaryOperator' value: 0' isMachineLocal: false);                              this.Manager.SetValueAsync(SpaceAroundBinaryOperator' 0' isMachineLocal: false);                              return true;                          }                        case BinaryOperatorSpacingOptions.Ignore:                          {                              this.Manager.SetValueAsync(SpaceAroundBinaryOperator' value: 1' isMachineLocal: false);                              this.Manager.SetValueAsync(WrappingIgnoreSpacesAroundBinaryOperator' 1' isMachineLocal: false);                              return true;                          }                        case BinaryOperatorSpacingOptions.Single:                          {                              this.Manager.SetValueAsync(SpaceAroundBinaryOperator' value: 1' isMachineLocal: false);                              this.Manager.SetValueAsync(WrappingIgnoreSpacesAroundBinaryOperator' value: 0' isMachineLocal: false);                              return true;                          }                  }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.Options,CSharpSettingsManagerOptionSerializer,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\Options\CSharpSettingsManagerOptionSerializer.cs,TryPersist,The following switch statement is missing a default case: switch ((LabelPositionOptions)value)                  {                      case LabelPositionOptions.LeftMost:                          {                              this.Manager.SetValueAsync(UnindentLabels' value: 1' isMachineLocal: false);                              this.Manager.SetValueAsync(FlushLabelsLeft' 1' isMachineLocal: false);                              return true;                          }                        case LabelPositionOptions.NoIndent:                          {                              this.Manager.SetValueAsync(FlushLabelsLeft' value: 0' isMachineLocal: false);                              this.Manager.SetValueAsync(UnindentLabels' 0' isMachineLocal: false);                              return true;                          }                        case LabelPositionOptions.OneLess:                          {                              this.Manager.SetValueAsync(FlushLabelsLeft' value: 0' isMachineLocal: false);                              this.Manager.SetValueAsync(UnindentLabels' value: 1' isMachineLocal: false);                              return true;                          }                  }
Missing Default,Microsoft.VisualStudio.LanguageServices.CSharp.LanguageService,CSharpHelpContextService,C:\repos\mono_roslyn\src\VisualStudio\CSharp\Impl\LanguageService\CSharpHelpContextService.cs,TryGetTextForContextualKeyword,The following switch statement is missing a default case: switch (token.Kind())                  {                      case SyntaxKind.PartialKeyword:                          if (token.Parent.GetAncestorOrThis<MethodDeclarationSyntax>() != null)                          {                              text = "partialmethod_CSharpKeyword";                              return true;                          }                          else if (token.Parent.GetAncestorOrThis<ClassDeclarationSyntax>() != null)                          {                              text = "partialtype_CSharpKeyword";                              return true;                          }                            break;                        case SyntaxKind.WhereKeyword:                          if (token.Parent.GetAncestorOrThis<TypeParameterConstraintClauseSyntax>() != null)                          {                              text = "whereconstraint_CSharpKeyword";                          }                          else                          {                              text = "whereclause_CSharpKeyword";                          }                            return true;                  }
