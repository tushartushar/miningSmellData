Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,RunCore,The method has 198 lines of code.
Complex Method,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,FlattenArgs,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,ParseResourceDescription,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,ExpandFileNamePattern,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,RunCore,Cyclomatic complexity of the method is 24
Complex Method,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,GenerateSqmData,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.CodeAnalysis,RuleSet,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\RuleSet\RuleSet.cs,GetEffectiveRuleSet,Cyclomatic complexity of the method is 12
Complex Method,Roslyn.Utilities,PathUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\PathUtilities.cs,GetPathKind,Cyclomatic complexity of the method is 10
Long Parameter List,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,ParseAndNormalizeFile,The method has 5 parameters. Parameters: unquoted' baseDirectory' outputFileName' outputDirectory' invalidPath
Long Parameter List,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,ParseOutputFile,The method has 5 parameters. Parameters: value' errors' baseDirectory' outputFileName' outputDirectory
Long Parameter List,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,FlattenArgs,The method has 6 parameters. Parameters: rawArguments' diagnostics' processedArgs' scriptArgs' baseDirectory' responsePaths
Long Parameter List,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,ParseResourceDescription,The method has 8 parameters. Parameters: resourceDescriptor' baseDirectory' skipLeadingSeparators' filePath' fullPath' fileName' resourceName' accessibility
Long Parameter List,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,CommonCompiler,The method has 6 parameters. Parameters: parser' responseFile' args' baseDirectory' additionalReferencePaths' tempPath
Long Parameter List,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,ResolveMetadataReferences,The method has 6 parameters. Parameters: externalReferenceResolver' metadataProvider' diagnostics' assemblyIdentityComparer' touchedFiles' referenceDirectiveResolver
Long Parameter List,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,ReadFileContent,The method has 5 parameters. Parameters: file' diagnostics' encoding' checksumAlgorithm' normalizedFilePath
Long Parameter List,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,OpenFile,The method has 5 parameters. Parameters: filePath' consoleOutput' mode' access' share
Long Parameter List,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,OpenStream,The method has 5 parameters. Parameters: messageProvider' path' baseDirectory' errorCode' errors
Long Parameter List,Microsoft.CodeAnalysis,ExistingReferencesResolver,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.ExistingReferencesResolver.cs,ExistingReferencesResolver,The method has 5 parameters. Parameters: availableReferences' referencePaths' baseDirectory' assemblyIdentityComparer' logger
Long Parameter List,Microsoft.CodeAnalysis,RuleSet,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\RuleSet\RuleSet.cs,GetDiagnosticOptionsFromRulesetFile,The method has 5 parameters. Parameters: diagnosticOptions' path' baseDirectory' diagnosticsOpt' messageProviderOpt
Long Parameter List,Microsoft.CodeAnalysis,FileSystemExtensions,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\FileSystemExtensions.cs,Emit,The method has 7 parameters. Parameters: compilation' outputPath' pdbPath' xmlDocPath' win32ResourcesPath' manifestResources' cancellationToken
Long Parameter List,Microsoft.CodeAnalysis,Value,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.Fx.cs,Value,The method has 6 parameters. Parameters: versionLow' versionHigh' newName' newPublicKeyToken' newVersion' isPortable
Long Parameter List,Microsoft.CodeAnalysis,FrameworkRetargetingDictionary,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.Fx.cs,Add,The method has 7 parameters. Parameters: name' publicKeyToken' versionLow' versionHightNull' newName' newPublicKeyToken' newVersion
Long Parameter List,Microsoft.CodeAnalysis,FrameworkRetargetingDictionary,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.Fx.cs,Add,The method has 8 parameters. Parameters: name' publicKeyToken' versionLow' versionHigh' newName' newPublicKeyToken' newVersion' isPortable
Long Parameter List,Microsoft.CodeAnalysis,MetadataFileReference,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\MetadataFileReference.cs,MetadataFileReference,The method has 5 parameters. Parameters: fullPath' kind' aliases' embedInteropTypes' documentation
Long Parameter List,Roslyn.Utilities,FileUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\FileUtilities.cs,ResolveRelativePath,The method has 5 parameters. Parameters: path' basePath' baseDirectory' searchPaths' fileExists
Long Parameter List,Microsoft.CodeAnalysis.Text,EncodedStringText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\EncodedStringText.cs,EncodedStringText,The method has 5 parameters. Parameters: source' encoding' checksum' checksumAlgorithm' throwIfBinary
Long Parameter List,Microsoft.CodeAnalysis.Interop,IClrStrongName,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\Interop\IClrStrongName.cs,GetHashFromAssemblyFile,The method has 5 parameters. Parameters: pszFilePath' piHashAlg' pbHash' cchHash' pchHash
Long Parameter List,Microsoft.CodeAnalysis.Interop,IClrStrongName,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\Interop\IClrStrongName.cs,GetHashFromAssemblyFileW,The method has 5 parameters. Parameters: pwzFilePath' piHashAlg' pbHash' cchHash' pchHash
Long Parameter List,Microsoft.CodeAnalysis.Interop,IClrStrongName,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\Interop\IClrStrongName.cs,GetHashFromBlob,The method has 6 parameters. Parameters: pbBlob' cchBlob' piHashAlg' pbHash' cchHash' pchHash
Long Parameter List,Microsoft.CodeAnalysis.Interop,IClrStrongName,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\Interop\IClrStrongName.cs,GetHashFromFile,The method has 5 parameters. Parameters: pszFilePath' piHashAlg' pbHash' cchHash' pchHash
Long Parameter List,Microsoft.CodeAnalysis.Interop,IClrStrongName,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\Interop\IClrStrongName.cs,GetHashFromFileW,The method has 5 parameters. Parameters: pwzFilePath' piHashAlg' pbHash' cchHash' pchHash
Long Parameter List,Microsoft.CodeAnalysis.Interop,IClrStrongName,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\Interop\IClrStrongName.cs,GetHashFromHandle,The method has 5 parameters. Parameters: hFile' piHashAlg' pbHash' cchHash' pchHash
Long Parameter List,Microsoft.CodeAnalysis.Interop,IClrStrongName,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\Interop\IClrStrongName.cs,StrongNameGetPublicKey,The method has 5 parameters. Parameters: pwzKeyContainer' pbKeyBlob' cbKeyBlob' ppbPublicKeyBlob' pcbPublicKeyBlob
Long Parameter List,Microsoft.CodeAnalysis.Interop,IClrStrongName,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\Interop\IClrStrongName.cs,StrongNameKeyGenEx,The method has 5 parameters. Parameters: pwzKeyContainer' dwFlags' dwKeySize' ppbKeyBlob' pcbKeyBlob
Long Parameter List,Microsoft.CodeAnalysis.Interop,IClrStrongName,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\Interop\IClrStrongName.cs,StrongNameSignatureGeneration,The method has 6 parameters. Parameters: pwzFilePath' pwzKeyContainer' pbKeyBlob' cbKeyBlob' ppbSignatureBlob' pcbSignatureBlob
Long Parameter List,Microsoft.CodeAnalysis.Interop,IClrStrongName,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\Interop\IClrStrongName.cs,StrongNameSignatureGenerationEx,The method has 7 parameters. Parameters: wszFilePath' wszKeyContainer' pbKeyBlob' cbKeyBlob' ppbSignatureBlob' pcbSignatureBlob' dwFlags
Long Parameter List,Microsoft.CodeAnalysis.Interop,IClrStrongName,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\Interop\IClrStrongName.cs,StrongNameTokenFromAssemblyEx,The method has 5 parameters. Parameters: pwzFilePath' ppbStrongNameToken' pcbStrongNameToken' ppbPublicKeyBlob' pcbPublicKeyBlob
Long Identifier,Microsoft.CodeAnalysis,AssemblyPortabilityPolicy,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AssemblyPortabilityPolicy.cs,AssemblyPortabilityPolicy,The length of the parameter suppressSilverlightPlatformAssembliesPortability is 48.
Long Identifier,Microsoft.CodeAnalysis,AssemblyPortabilityPolicy,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AssemblyPortabilityPolicy.cs,AssemblyPortabilityPolicy,The length of the parameter suppressSilverlightLibraryAssembliesPortability is 47.
Long Identifier,Microsoft.CodeAnalysis,AssemblyPortabilityPolicy,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AssemblyPortabilityPolicy.cs,,The length of the parameter SuppressSilverlightPlatformAssembliesPortability is 48.
Long Identifier,Microsoft.CodeAnalysis,AssemblyPortabilityPolicy,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AssemblyPortabilityPolicy.cs,,The length of the parameter SuppressSilverlightLibraryAssembliesPortability is 47.
Long Identifier,Microsoft.CodeAnalysis,RuleSetProcessor,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\RuleSet\RuleSetProcessor.cs,,The length of the parameter RuleSetDescriptionAttributeName is 31.
Long Identifier,Microsoft.CodeAnalysis,RuleSetProcessor,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\RuleSet\RuleSetProcessor.cs,,The length of the parameter RuleSetToolsVersionAttributeName is 32.
Long Identifier,Microsoft.CodeAnalysis,DesktopAssemblyIdentityComparer,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.cs,,The length of the parameter s_SILVERLIGHT_PLATFORM_PUBLICKEY_STR_L is 38.
Long Identifier,Microsoft.CodeAnalysis,DesktopAssemblyIdentityComparer,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.cs,,The length of the parameter s_VER_VS_COMPATIBILITY_ASSEMBLYVERSION_STR_L is 44.
Long Identifier,Microsoft.CodeAnalysis,DesktopAssemblyIdentityComparer,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.cs,,The length of the parameter s_VER_VS_ASSEMBLYVERSION_STR_L is 30.
Long Identifier,Microsoft.CodeAnalysis,DesktopAssemblyIdentityComparer,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.cs,,The length of the parameter s_VER_SQL_ASSEMBLYVERSION_STR_L is 31.
Long Identifier,Microsoft.CodeAnalysis,DesktopAssemblyIdentityComparer,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.cs,,The length of the parameter s_VER_LINQ_ASSEMBLYVERSION_STR_L is 32.
Long Identifier,Microsoft.CodeAnalysis,DesktopAssemblyIdentityComparer,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.cs,,The length of the parameter s_VER_LINQ_ASSEMBLYVERSION_STR_2_L is 34.
Long Identifier,Microsoft.CodeAnalysis,DesktopAssemblyIdentityComparer,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.cs,,The length of the parameter s_VER_SQL_ORCAS_ASSEMBLYVERSION_STR_L is 37.
Long Identifier,Microsoft.CodeAnalysis,DesktopAssemblyIdentityComparer,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.cs,,The length of the parameter s_VER_VC_STLCLR_ASSEMBLYVERSION_STR_L is 37.
Long Identifier,Microsoft.CodeAnalysis,DesktopStrongNameProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopStrongNameProvider.cs,,The length of the parameter TestStrongNameInterfaceFactory is 30.
Long Identifier,Microsoft.CodeAnalysis,SerializableCompilationOptions,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\SerializableCompilationOptions.cs,,The length of the parameter SpecificDiagnosticOptionsString is 31.
Long Identifier,Microsoft.CodeAnalysis,SerializableCompilationOptions,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\SerializableCompilationOptions.cs,,The length of the parameter ExtendedCustomDebugInformationString is 36.
Long Identifier,Microsoft.CodeAnalysis.Diagnostics,AnalyzerFileReference,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AnalyzerFileReference.InMemoryAssemblyLoader.cs,GetLanguageSpecificAnalyzers,The length of the parameter languageSpecificAnalyzerTypeNames is 33.
Long Identifier,Microsoft.VisualStudio.Shell.Interop,SqmServiceProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\SqmServiceProvider.cs,,The length of the parameter DATAID_SQM_ROSLYN_COMPILERTYPE is 30.
Long Identifier,Microsoft.VisualStudio.Shell.Interop,SqmServiceProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\SqmServiceProvider.cs,,The length of the parameter DATAID_SQM_ROSLYN_ERRORNUMBERS is 30.
Long Identifier,Microsoft.VisualStudio.Shell.Interop,SqmServiceProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\SqmServiceProvider.cs,,The length of the parameter DATAID_SQM_ROSLYN_WARNINGNUMBERS is 32.
Long Identifier,Microsoft.VisualStudio.Shell.Interop,SqmServiceProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\SqmServiceProvider.cs,,The length of the parameter DATAID_SQM_ROSLYN_WARNINGLEVEL is 30.
Long Identifier,Microsoft.VisualStudio.Shell.Interop,SqmServiceProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\SqmServiceProvider.cs,,The length of the parameter DATAID_SQM_ROSLYN_WARNINGASERRORS is 33.
Long Identifier,Microsoft.VisualStudio.Shell.Interop,SqmServiceProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\SqmServiceProvider.cs,,The length of the parameter DATAID_SQM_ROSLYN_SUPPRESSWARNINGNUMBERS is 40.
Long Identifier,Microsoft.VisualStudio.Shell.Interop,SqmServiceProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\SqmServiceProvider.cs,,The length of the parameter DATAID_SQM_ROSLYN_WARNASERRORS_NUMBERS is 38.
Long Identifier,Microsoft.VisualStudio.Shell.Interop,SqmServiceProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\SqmServiceProvider.cs,,The length of the parameter DATAID_SQM_ROSLYN_WARNASWARNINGS_NUMBERS is 40.
Long Identifier,Microsoft.VisualStudio.Shell.Interop,SqmServiceProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\SqmServiceProvider.cs,,The length of the parameter DATAID_SQM_ROSLYN_LANGUAGEVERSION is 33.
Long Statement,Microsoft.CodeAnalysis,AssemblyPortabilityPolicy,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AssemblyPortabilityPolicy.cs,LoadFromXml,The length of the statement  "            // Note: Unlike Fusion XML reader the XmlReader doesn't allow whitespace in front of <?xml version=""1.0"" encoding=""utf-8"" ?> " is 128.
Long Statement,Microsoft.CodeAnalysis,CommandLineArguments,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineArguments.cs,ResolveMetadataReference,The length of the statement  "                references = metadataResolver.ResolveReference(cmdReference.Reference' baseFilePath: null' properties: cmdReference.Properties); " is 128.
Long Statement,Microsoft.CodeAnalysis,CommandLineArguments,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineArguments.cs,ResolveMetadataReference,The length of the statement  "                var diagnostic = PortableExecutableReference.ExceptionToDiagnostic(e' messageProviderOpt' Location.None' cmdReference.Reference' cmdReference.Properties.Kind); " is 159.
Long Statement,Microsoft.CodeAnalysis,CommandLineArguments,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineArguments.cs,ResolveMetadataReference,The length of the statement  "                diagnosticsOpt.Add(new DiagnosticInfo(messageProviderOpt' messageProviderOpt.ERR_MetadataFileNotFound' cmdReference.Reference)); " is 128.
Long Statement,Microsoft.CodeAnalysis,CommandLineArguments,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineArguments.cs,ResolveAnalyzersFromArguments,The length of the statement  "                        diagnostic = new DiagnosticInfo(messageProvider' messageProvider.WRN_UnableToLoadAnalyzer' analyzerReference.FullPath' e.Exception.Message); " is 140.
Long Statement,Microsoft.CodeAnalysis,CommandLineArguments,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineArguments.cs,ResolveAnalyzersFromArguments,The length of the statement  "                        diagnostic = new DiagnosticInfo(messageProvider' messageProvider.WRN_AnalyzerCannotBeCreated' e.TypeName' analyzerReference.FullPath' e.Exception.Message); " is 155.
Long Statement,Microsoft.CodeAnalysis,CommandLineArguments,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineArguments.cs,ResolveAnalyzerReference,The length of the statement  "            string resolvedPath = FileUtilities.ResolveRelativePath(reference.FilePath' basePath: null' baseDirectory: BaseDirectory' searchPaths: ReferencePaths' fileExists: File.Exists); " is 176.
Long Statement,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,FlattenArgs,The length of the statement  "                            if (!string.Equals(newArg' "/noconfig"' StringComparison.OrdinalIgnoreCase) && !string.Equals(newArg' "-noconfig"' StringComparison.OrdinalIgnoreCase)) " is 151.
Long Statement,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,SplitCommandLineIntoArguments,The length of the statement  "            .TakeWhile(arg => (!removeHashComments || !arg.StartsWith("#"' StringComparison.Ordinal)))  // If removeHashComments is true' skip all arguments after one that starts with '#' " is 175.
Long Statement,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,SplitCommandLineIntoArguments,The length of the statement  "            .Select(arg => CondenseDoubledBackslashes(arg).Unquote())                                   // Remove quotes and handle backslashes. " is 132.
Long Statement,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,ParseSeparatedPaths,The length of the statement  "            return ParseSeparatedStrings(str' s_pathSeparators' StringSplitOptions.RemoveEmptyEntries).Select(path => RemoveAllQuotes(path)); " is 129.
Long Statement,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,ExpandFileNamePattern,The length of the statement  "            var resolvedDirectoryPath = (directory.Length == 0) ? baseDirectory : FileUtilities.ResolveRelativePath(directory' baseDirectory); " is 130.
Long Statement,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,GetDiagnosticOptionsFromRulesetFile,The length of the statement  "            return RuleSet.GetDiagnosticOptionsFromRulesetFile(diagnosticOptions' path' baseDirectory' diagnostics' _messageProvider); " is 122.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,ResolveMetadataReferences,The length of the statement  "                Arguments.ResolveMetadataReferences(new AssemblyReferenceResolver(externalReferenceResolver' metadataProvider)' diagnostics' this.MessageProvider' resolved); " is 157.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,ResolveMetadataReferences,The length of the statement  "                        resolved.Where(r => r.Properties.Kind == MetadataImageKind.Assembly).OfType<PortableExecutableReference>().AsImmutable()' " is 121.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,RunCore,The length of the statement  "            var analyzerOptions = new AnalyzerOptions(ImmutableArray.Create<AdditionalText' AdditionalTextFile>(additionalTextFiles)); " is 122.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,RunCore,The length of the statement  "                        xml = OpenFile(finalXmlFilePath' consoleOutput' FileMode.OpenOrCreate' FileAccess.Write' FileShare.ReadWrite | FileShare.Delete); " is 129.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,GenerateSqmData,The length of the statement  "                                        sqm.AddItemToStream(sqmSession' SqmServiceProvider.DATAID_SQM_ROSLYN_SUPPRESSWARNINGNUMBERS' code);      // Supress warning " is 123.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,GenerateSqmData,The length of the statement  "                                        sqm.AddItemToStream(sqmSession' SqmServiceProvider.DATAID_SQM_ROSLYN_WARNASERRORS_NUMBERS' code);       // Warning as errors " is 124.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,GenerateSqmData,The length of the statement  "                                        sqm.AddItemToStream(sqmSession' SqmServiceProvider.DATAID_SQM_ROSLYN_WARNASWARNINGS_NUMBERS' code);     // Warning as warnings " is 126.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,CreateTempFile,The length of the statement  "                    DiagnosticInfo diagnosticInfo = new DiagnosticInfo(MessageProvider' (int)MessageProvider.ERR_FailedToCreateTempFile' ex.Message); " is 129.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,OpenFile,The length of the statement  "                    DiagnosticInfo diagnosticInfo = new DiagnosticInfo(MessageProvider' (int)MessageProvider.ERR_OutputWriteFailed' filePath' e.Message); " is 133.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,TryDeleteFile,The length of the statement  "                    DiagnosticInfo diagnosticInfo = new DiagnosticInfo(MessageProvider' (int)MessageProvider.ERR_OutputWriteFailed' filePath' e.Message); " is 133.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,TryMoveFile,The length of the statement  "                    DiagnosticInfo diagnosticInfo = new DiagnosticInfo(MessageProvider' (int)MessageProvider.ERR_CantOpenFileWrite' destinationPath' e.Message); " is 140.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,GetWin32ResourcesInternal,The length of the statement  "                return OpenStream(messageProvider' arguments.Win32ResourceFile' arguments.BaseDirectory' messageProvider.ERR_CantOpenWin32Resource' errorList); " is 143.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,GetWin32ResourcesInternal,The length of the statement  "            using (Stream manifestStream = OpenManifestStream(messageProvider' compilation.Options.OutputKind' arguments' errorList)) " is 121.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,GetWin32ResourcesInternal,The length of the statement  "                using (Stream iconStream = OpenStream(messageProvider' arguments.Win32Icon' arguments.BaseDirectory' messageProvider.ERR_CantOpenWin32Icon' errorList)) " is 151.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,OpenManifestStream,The length of the statement  "                : OpenStream(messageProvider' arguments.Win32Manifest' arguments.BaseDirectory' messageProvider.ERR_CantOpenWin32Manifest' errorList); " is 134.
Long Statement,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,TryGetCompilerDiagnosticCode,The length of the statement  "            return diagnosticId.StartsWith(expectedPrefix) && uint.TryParse(diagnosticId.Substring(expectedPrefix.Length)' out code); " is 121.
Long Statement,Microsoft.CodeAnalysis,RuleSet,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\RuleSet\RuleSet.cs,GetEffectiveRuleSet,The length of the statement  "            return new RuleSet(_filePath' effectiveGeneralOption' effectiveSpecificOptions.ToImmutableDictionary()' ImmutableArray<RuleSetInclude>.Empty); " is 142.
Long Statement,Microsoft.CodeAnalysis,RuleSet,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\RuleSet\RuleSet.cs,IsStricterThan,The length of the statement  "                    return action1 == ReportDiagnostic.Warn || action1 == ReportDiagnostic.Error || action1 == ReportDiagnostic.Info || action1 == ReportDiagnostic.Hidden; " is 151.
Long Statement,Microsoft.CodeAnalysis,RuleSet,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\RuleSet\RuleSet.cs,GetDiagnosticOptionsFromRulesetFile,The length of the statement  "                    diagnosticsOpt.Add(Diagnostic.Create(messageProviderOpt' messageProviderOpt.ERR_CantReadRulesetFile' resolvedPath' e.Message)); " is 127.
Long Statement,Microsoft.CodeAnalysis,RuleSet,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\RuleSet\RuleSet.cs,GetDiagnosticOptionsFromRulesetFile,The length of the statement  "                        diagnosticsOpt.Add(Diagnostic.Create(messageProviderOpt' messageProviderOpt.ERR_CantReadRulesetFile' resolvedPath' new CodeAnalysisResourcesLocalizableErrorArgument(nameof(CodeAnalysisResources.FileNotFound)))); " is 211.
Long Statement,Microsoft.CodeAnalysis,RuleSet,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\RuleSet\RuleSet.cs,GetDiagnosticOptionsFromRulesetFile,The length of the statement  "                        diagnosticsOpt.Add(Diagnostic.Create(messageProviderOpt' messageProviderOpt.ERR_CantReadRulesetFile' resolvedPath' e.Message)); " is 127.
Long Statement,Microsoft.CodeAnalysis,RuleSetInclude,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\RuleSet\RuleSetInclude.cs,GetIncludePath,The length of the statement  "                throw new FileNotFoundException(string.Format(CodeAnalysisResources.FailedToResolveRuleSetName' _includePath)' _includePath); " is 125.
Long Statement,Microsoft.CodeAnalysis,RuleSetProcessor,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\RuleSet\RuleSetProcessor.cs,CreateRuleSetSchema,The length of the statement  "            using (XmlReader reader = XmlReader.Create(typeof(RuleSetProcessor).Assembly.GetManifestResourceStream(XsdResourceName))) " is 121.
Long Statement,Microsoft.CodeAnalysis,RuleSetProcessor,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\RuleSet\RuleSetProcessor.cs,ReadRuleSet,The length of the statement  "                                throw new InvalidRuleSetException(string.Format(CodeAnalysisResources.RuleSetHasDuplicateRules' ruleId' existingAction' action)); " is 129.
Long Statement,Microsoft.CodeAnalysis,FileSystemExtensions,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\FileSystemExtensions.cs,Emit,The length of the statement  "            using (var pdbStream = (pdbPath == null ? null : FileUtilities.CreateFileStreamChecked(File.Create' pdbPath' nameof(pdbPath)))) " is 127.
Long Statement,Microsoft.CodeAnalysis,FileSystemExtensions,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\FileSystemExtensions.cs,Emit,The length of the statement  "            using (var xmlDocStream = (xmlDocPath == null ? null : FileUtilities.CreateFileStreamChecked(File.Create' xmlDocPath' nameof(xmlDocPath)))) " is 139.
Long Statement,Microsoft.CodeAnalysis,FileSystemExtensions,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\FileSystemExtensions.cs,Emit,The length of the statement  "            using (var win32ResourcesStream = (win32ResourcesPath == null ? null : FileUtilities.CreateFileStreamChecked(File.OpenRead' win32ResourcesPath' nameof(win32ResourcesPath)))) " is 173.
Long Statement,Microsoft.CodeAnalysis,DesktopAssemblyIdentityComparer,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.cs,IsFrameworkAssembly,The length of the statement  "            //   PrepQueryMatchData(pName' wzName' &dwSizeName' wzVersion' &dwSizeVer' wzPublicKeyToken' &dwSizePKT' NULL' NULL' NULL);.  " is 124.
Long Statement,Microsoft.CodeAnalysis,DesktopStrongNameProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopStrongNameProvider.cs,ResolveStrongNameKeyFile,The length of the statement  "            // Dev11: key path is simply appended to the search paths' even if it starts with the current (parent) directory ("." or ".."). " is 127.
Long Statement,Microsoft.CodeAnalysis,DesktopStrongNameProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopStrongNameProvider.cs,CreateInputStream,The length of the statement  "            Func<string' FileStream> streamConstructor = lPath => new TempFileStream(lPath' FileMode.Create' FileAccess.ReadWrite' FileShare.ReadWrite); " is 140.
Long Statement,Microsoft.CodeAnalysis,MetadataFileReference,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\MetadataFileReference.cs,CreateDocumentationProvider,The length of the statement  "            //     protected internal override DocumentationComment GetDocumentationForSymbol(string documentationMemberID' CultureInfo preferredCulture' CancellationToken cancellationToken = default(CancellationToken)) " is 207.
Long Statement,Microsoft.CodeAnalysis,MetadataFileReference,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\MetadataFileReference.cs,GetMetadataImpl,The length of the statement  "                Interlocked.CompareExchange(ref _lazyMetadata' MetadataCache.GetOrCreateFromFile(FilePath' this.Properties.Kind)' null); " is 120.
Long Statement,Microsoft.CodeAnalysis,MetadataFileReferenceResolver,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\MetadataFileReferenceResolver.cs,ResolveReference,The length of the statement  "            string resolvedPath = FileUtilities.ResolveRelativePath(reference' baseFilePath' _baseDirectory' _searchPaths' FileExists); " is 123.
Long Statement,Microsoft.CodeAnalysis,MetadataFileReferenceResolver,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\MetadataFileReferenceResolver.cs,ResolveReferenceChecked,The length of the statement  "                //// throw new InvalidOperationException(string.Format(CodeAnalysisResources.PathReturnedByResolveMetadataFileMustBeAbsolute' GetType().FullName' fullPath)); " is 157.
Long Statement,Microsoft.CodeAnalysis,SerializableCompilationOptions,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\SerializableCompilationOptions.cs,CommonGetObjectData,The length of the statement  "            info.AddValue(SpecificDiagnosticOptionsString' new Dictionary<string' ReportDiagnostic>(options.SpecificDiagnosticOptions)); " is 124.
Long Statement,Microsoft.CodeAnalysis.Diagnostics,AnalyzerFileReference,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AnalyzerFileReference.InMemoryAssemblyLoader.cs,AddAnalyzers,The length of the statement  "            catch (Exception e) when (e is IOException || e is BadImageFormatException || e is SecurityException || e is ArgumentException) " is 127.
Long Statement,Microsoft.CodeAnalysis.Diagnostics,AnalyzerFileReference,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AnalyzerFileReference.InMemoryAssemblyLoader.cs,AddAnalyzers,The length of the statement  "                this.AnalyzerLoadFailed?.Invoke(this' new AnalyzerLoadFailureEventArgs(AnalyzerLoadFailureEventArgs.FailureErrorCode.UnableToLoadAnalyzer' e' null)); " is 149.
Long Statement,Microsoft.CodeAnalysis.Diagnostics,AnalyzerFileReference,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AnalyzerFileReference.InMemoryAssemblyLoader.cs,AddAnalyzers,The length of the statement  "                this.AnalyzerLoadFailed?.Invoke(this' new AnalyzerLoadFailureEventArgs(AnalyzerLoadFailureEventArgs.FailureErrorCode.NoAnalyzers' null' null)); " is 143.
Long Statement,Microsoft.CodeAnalysis.Diagnostics,AnalyzerFileReference,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AnalyzerFileReference.InMemoryAssemblyLoader.cs,AddAnalyzers,The length of the statement  "                    this.AnalyzerLoadFailed?.Invoke(this' new AnalyzerLoadFailureEventArgs(AnalyzerLoadFailureEventArgs.FailureErrorCode.NoAnalyzers' null' null)); " is 143.
Long Statement,Microsoft.CodeAnalysis.Diagnostics,AnalyzerFileReference,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AnalyzerFileReference.InMemoryAssemblyLoader.cs,AddAnalyzers,The length of the statement  "            catch (Exception e) when (e is IOException || e is BadImageFormatException || e is SecurityException || e is ArgumentException) " is 127.
Long Statement,Microsoft.CodeAnalysis.Diagnostics,AnalyzerFileReference,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AnalyzerFileReference.InMemoryAssemblyLoader.cs,AddAnalyzers,The length of the statement  "                this.AnalyzerLoadFailed?.Invoke(this' new AnalyzerLoadFailureEventArgs(AnalyzerLoadFailureEventArgs.FailureErrorCode.UnableToLoadAnalyzer' e' null)); " is 149.
Long Statement,Microsoft.CodeAnalysis.Diagnostics,AnalyzerFileReference,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AnalyzerFileReference.InMemoryAssemblyLoader.cs,AddAnalyzers,The length of the statement  "                this.AnalyzerLoadFailed?.Invoke(this' new AnalyzerLoadFailureEventArgs(AnalyzerLoadFailureEventArgs.FailureErrorCode.NoAnalyzers' null' null)); " is 143.
Long Statement,Microsoft.CodeAnalysis.Diagnostics,AnalyzerFileReference,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AnalyzerFileReference.InMemoryAssemblyLoader.cs,GetAnalyzersForTypeNames,The length of the statement  "                catch (Exception e) when (e is TypeLoadException || e is BadImageFormatException || e is FileNotFoundException || e is FileLoadException || " is 139.
Long Statement,Microsoft.CodeAnalysis.Diagnostics,AnalyzerFileReference,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AnalyzerFileReference.InMemoryAssemblyLoader.cs,GetAnalyzersForTypeNames,The length of the statement  "                    this.AnalyzerLoadFailed?.Invoke(this' new AnalyzerLoadFailureEventArgs(AnalyzerLoadFailureEventArgs.FailureErrorCode.UnableToCreateAnalyzer' e' typeName)); " is 155.
Long Statement,Microsoft.CodeAnalysis.Diagnostics,AnalyzerFileReference,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AnalyzerFileReference.InMemoryAssemblyLoader.cs,IsDiagnosticAnalyzerAttribute,The length of the statement  "            return peModule.IsTargetAttribute(customAttrHandle' s_diagnosticNamespaceName' nameof(DiagnosticAnalyzerAttribute)' out ctor); " is 126.
Long Statement,Roslyn.Utilities,FileUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\FileUtilities.cs,DeleteFileOnClose,The length of the statement  "            using (var stream = new FileStream(fullPath' FileMode.Open' FileAccess.ReadWrite' FileShare.Delete | FileShare.ReadWrite' 8' FileOptions.DeleteOnClose)) " is 152.
Long Statement,Microsoft.CodeAnalysis.Text,EncodedStringText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\EncodedStringText.cs,Decode,The length of the statement  "            using (var reader = new StreamReader(data' encoding' detectEncodingFromByteOrderMarks: true' bufferSize: Math.Min(4096' length)' leaveOpen: true)) " is 146.
Long Statement,Microsoft.CodeAnalysis.Text,LargeEncodedText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\LargeEncodedText.cs,Decode,The length of the statement  "            using (var reader = new StreamReader(stream' encoding' detectEncodingFromByteOrderMarks: true' bufferSize: Math.Min(length' 4096)' leaveOpen: true)) " is 148.
Long Statement,Microsoft.CodeAnalysis.Text,LargeEncodedText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\LargeEncodedText.cs,Decode,The length of the statement  "                return new LargeEncodedText(chunks.ToImmutableAndFree()' reader.CurrentEncoding' default(ImmutableArray<byte>)' checksumAlgorithm); " is 131.
Complex Conditional,Microsoft.CodeAnalysis,AssemblyPortabilityPolicy,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AssemblyPortabilityPolicy.cs,LoadFromXml,The conditional expression  "!ReadToChild(xml' 0' "configuration") ||                      !ReadToChild(xml' 1' "runtime") ||                      !ReadToChild(xml' 2' "assemblyBinding"' ns) ||                      !ReadToChild(xml' 3' "supportPortability"' ns)"  is complex.
Complex Conditional,Roslyn.Utilities,PathUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\PathUtilities.cs,GetPathKind,The conditional expression  "path.Length >= 2 && path[1] == VolumeSeparatorChar && (path.Length <= 2 || !IsDirectorySeparator(path[2]))"  is complex.
Virtual Method Call from Constructor,Microsoft.CodeAnalysis,CommonCompiler,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCompiler.cs,CommonCompiler,The constructor "CommonCompiler" calls a virtual method "SuppressDefaultResponseFile".
Empty Catch Block,Microsoft.CodeAnalysis,RuleSetInclude,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\RuleSet\RuleSetInclude.cs,LoadRuleSet,The method has an empty catch block.
Empty Catch Block,Microsoft.CodeAnalysis,TempFileStream,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopStrongNameProvider.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Microsoft.CodeAnalysis.Text,EncodedStringText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\EncodedStringText.cs,Create,The method has an empty catch block.
Magic Number,Microsoft.CodeAnalysis,AssemblyPortabilityPolicy,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AssemblyPortabilityPolicy.cs,GetHashCode,The following statement contains a magic number: return (this.SuppressSilverlightLibraryAssembliesPortability ? 1 : 0) |                     (this.SuppressSilverlightPlatformAssembliesPortability ? 2 : 0);
Magic Number,Microsoft.CodeAnalysis,AssemblyPortabilityPolicy,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AssemblyPortabilityPolicy.cs,LoadFromXml,The following statement contains a magic number: using (XmlReader xml = XmlReader.Create(input' s_xmlSettings))              {                  if (!ReadToChild(xml' 0' "configuration") ||                      !ReadToChild(xml' 1' "runtime") ||                      !ReadToChild(xml' 2' "assemblyBinding"' ns) ||                      !ReadToChild(xml' 3' "supportPortability"' ns))                  {                      return default(AssemblyPortabilityPolicy);                  }                    // 31bf3856ad364e35                  bool suppressLibrary = false;                    // 7cec85d7bea7798e                  bool suppressPlatform = false;                    do                  {                      // see CNodeFactory::ProcessSupportPortabilityTag in fusion\inc\nodefact.cpp for details                      //  - unrecognized attributes ignored.                      //  - syntax errors within tags causes this tag to be ignored (but not reject entire app.config)                      //  - multiple <supportPortability> tags ok (if two specify same PKT' all but (implementation defined) one ignored.)                      string pkt = xml.GetAttribute("PKT");                      string enableAttribute = xml.GetAttribute("enable");                        bool? enable =                          string.Equals(enableAttribute' "false"' StringComparison.OrdinalIgnoreCase) ? false :                          string.Equals(enableAttribute' "true"' StringComparison.OrdinalIgnoreCase) ? true :                          (bool?)null;                        if (enable != null)                      {                          if (string.Equals(pkt' "31bf3856ad364e35"' StringComparison.OrdinalIgnoreCase))                          {                              suppressLibrary = !enable.Value;                          }                          else if (string.Equals(pkt' "7cec85d7bea7798e"' StringComparison.OrdinalIgnoreCase))                          {                              suppressPlatform = !enable.Value;                          }                      }                  } while (xml.ReadToNextSibling("supportPortability"' ns));                    return new AssemblyPortabilityPolicy(suppressPlatform' suppressLibrary);              }
Magic Number,Microsoft.CodeAnalysis,AssemblyPortabilityPolicy,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AssemblyPortabilityPolicy.cs,LoadFromXml,The following statement contains a magic number: using (XmlReader xml = XmlReader.Create(input' s_xmlSettings))              {                  if (!ReadToChild(xml' 0' "configuration") ||                      !ReadToChild(xml' 1' "runtime") ||                      !ReadToChild(xml' 2' "assemblyBinding"' ns) ||                      !ReadToChild(xml' 3' "supportPortability"' ns))                  {                      return default(AssemblyPortabilityPolicy);                  }                    // 31bf3856ad364e35                  bool suppressLibrary = false;                    // 7cec85d7bea7798e                  bool suppressPlatform = false;                    do                  {                      // see CNodeFactory::ProcessSupportPortabilityTag in fusion\inc\nodefact.cpp for details                      //  - unrecognized attributes ignored.                      //  - syntax errors within tags causes this tag to be ignored (but not reject entire app.config)                      //  - multiple <supportPortability> tags ok (if two specify same PKT' all but (implementation defined) one ignored.)                      string pkt = xml.GetAttribute("PKT");                      string enableAttribute = xml.GetAttribute("enable");                        bool? enable =                          string.Equals(enableAttribute' "false"' StringComparison.OrdinalIgnoreCase) ? false :                          string.Equals(enableAttribute' "true"' StringComparison.OrdinalIgnoreCase) ? true :                          (bool?)null;                        if (enable != null)                      {                          if (string.Equals(pkt' "31bf3856ad364e35"' StringComparison.OrdinalIgnoreCase))                          {                              suppressLibrary = !enable.Value;                          }                          else if (string.Equals(pkt' "7cec85d7bea7798e"' StringComparison.OrdinalIgnoreCase))                          {                              suppressPlatform = !enable.Value;                          }                      }                  } while (xml.ReadToNextSibling("supportPortability"' ns));                    return new AssemblyPortabilityPolicy(suppressPlatform' suppressLibrary);              }
Magic Number,Microsoft.CodeAnalysis,AssemblyVersion,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AssemblyVersion.cs,ToInteger,The following statement contains a magic number: return ((ulong)_major << 48) | ((ulong)_minor << 32) | ((ulong)_build << 16) | _revision;
Magic Number,Microsoft.CodeAnalysis,AssemblyVersion,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AssemblyVersion.cs,ToInteger,The following statement contains a magic number: return ((ulong)_major << 48) | ((ulong)_minor << 32) | ((ulong)_build << 16) | _revision;
Magic Number,Microsoft.CodeAnalysis,AssemblyVersion,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AssemblyVersion.cs,ToInteger,The following statement contains a magic number: return ((ulong)_major << 48) | ((ulong)_minor << 32) | ((ulong)_build << 16) | _revision;
Magic Number,Microsoft.CodeAnalysis,AssemblyVersion,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AssemblyVersion.cs,GetHashCode,The following statement contains a magic number: return ((_major & 0x000f) << 28) | ((_minor & 0x00ff) << 20) | ((_build & 0x00ff) << 12) | (_revision & 0x0fff);
Magic Number,Microsoft.CodeAnalysis,AssemblyVersion,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AssemblyVersion.cs,GetHashCode,The following statement contains a magic number: return ((_major & 0x000f) << 28) | ((_minor & 0x00ff) << 20) | ((_build & 0x00ff) << 12) | (_revision & 0x0fff);
Magic Number,Microsoft.CodeAnalysis,AssemblyVersion,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AssemblyVersion.cs,GetHashCode,The following statement contains a magic number: return ((_major & 0x000f) << 28) | ((_minor & 0x00ff) << 20) | ((_build & 0x00ff) << 12) | (_revision & 0x0fff);
Magic Number,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,ParseResourceDescription,The following statement contains a magic number: if (length >= 2)              {                  resourceName = RemoveAllQuotes(parts[offset + 1]);              }
Magic Number,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,ParseResourceDescription,The following statement contains a magic number: if (length >= 3)              {                  accessibility = RemoveAllQuotes(parts[offset + 2]);              }
Magic Number,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,ParseResourceDescription,The following statement contains a magic number: if (length >= 3)              {                  accessibility = RemoveAllQuotes(parts[offset + 2]);              }
Magic Number,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,CondenseDoubledBackslashes,The following statement contains a magic number: do              {                  char c = input[i];                  if (c == '\\')                  {                      ++backslashCount;                  }                  else                  {                      // Add right amount of pending backslashes.                      if (c == '\"')                      {                          AddBackslashes(builder' backslashCount / 2);                      }                      else                      {                          AddBackslashes(builder' backslashCount);                      }                        builder.Append(c);                      backslashCount = 0;                  }              } while (++i < input.Length);
Magic Number,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,TryParseUInt64,The following statement contains a magic number: int numBase = 10;
Magic Number,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,TryParseUInt64,The following statement contains a magic number: if (value.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))              {                  numBase = 16;              }              else if (value.StartsWith("0"' StringComparison.OrdinalIgnoreCase))              {                  numBase = 8;              }
Magic Number,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,TryParseUInt64,The following statement contains a magic number: if (value.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))              {                  numBase = 16;              }              else if (value.StartsWith("0"' StringComparison.OrdinalIgnoreCase))              {                  numBase = 8;              }
Magic Number,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,TryParseUInt16,The following statement contains a magic number: int numBase = 10;
Magic Number,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,TryParseUInt16,The following statement contains a magic number: if (value.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))              {                  numBase = 16;              }              else if (value.StartsWith("0"' StringComparison.OrdinalIgnoreCase))              {                  numBase = 8;              }
Magic Number,Microsoft.CodeAnalysis,CommandLineParser,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\CommandLine\CommonCommandLineParser.cs,TryParseUInt16,The following statement contains a magic number: if (value.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))              {                  numBase = 16;              }              else if (value.StartsWith("0"' StringComparison.OrdinalIgnoreCase))              {                  numBase = 8;              }
Magic Number,Microsoft.CodeAnalysis,DesktopAssemblyIdentityComparer,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.cs,IsFrameworkAssembly,The following statement contains a magic number: uint thisVersion = ((uint)identity.Version.Major << 16) | (uint)identity.Version.Minor;
Magic Number,Microsoft.CodeAnalysis,DesktopAssemblyIdentityComparer,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.cs,IsFrameworkAssembly,The following statement contains a magic number: uint fxVersion = ((uint)value.Version.Major << 16) | (uint)value.Version.Minor;
Magic Number,Microsoft.CodeAnalysis,DesktopAssemblyIdentityComparer,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.cs,Port,The following statement contains a magic number: if (version >= new AssemblyVersion(2' 0' 0' 0) && version <= new AssemblyVersion(5' 9' 0' 0))              {                  if (identity.PublicKeyToken.SequenceEqual(s_SILVERLIGHT_PLATFORM_PUBLICKEY_STR_L))                  {                      if (!policy.SuppressSilverlightPlatformAssembliesPortability)                      {                          if (SimpleNameComparer.Equals(identity.Name' "System") ||                              SimpleNameComparer.Equals(identity.Name' "System.Core"))                          {                              newVersion = (Version)s_VER_ASSEMBLYVERSION_STR_L;                              newPublicKeyToken = s_ECMA_PUBLICKEY_STR_L;                          }                      }                  }                  else if (identity.PublicKeyToken.SequenceEqual(s_SILVERLIGHT_PUBLICKEY_STR_L))                  {                      if (!policy.SuppressSilverlightLibraryAssembliesPortability)                      {                          if (SimpleNameComparer.Equals(identity.Name' "Microsoft.VisualBasic"))                          {                              newVersion = new Version(10' 0' 0' 0);                              newPublicKeyToken = s_MICROSOFT_PUBLICKEY_STR_L;                          }                            if (SimpleNameComparer.Equals(identity.Name' "System.ComponentModel.Composition"))                          {                              newVersion = (Version)s_VER_ASSEMBLYVERSION_STR_L;                              newPublicKeyToken = s_ECMA_PUBLICKEY_STR_L;                          }                      }                  }              }
Magic Number,Microsoft.CodeAnalysis,DesktopAssemblyIdentityComparer,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.cs,Port,The following statement contains a magic number: if (version >= new AssemblyVersion(2' 0' 0' 0) && version <= new AssemblyVersion(5' 9' 0' 0))              {                  if (identity.PublicKeyToken.SequenceEqual(s_SILVERLIGHT_PLATFORM_PUBLICKEY_STR_L))                  {                      if (!policy.SuppressSilverlightPlatformAssembliesPortability)                      {                          if (SimpleNameComparer.Equals(identity.Name' "System") ||                              SimpleNameComparer.Equals(identity.Name' "System.Core"))                          {                              newVersion = (Version)s_VER_ASSEMBLYVERSION_STR_L;                              newPublicKeyToken = s_ECMA_PUBLICKEY_STR_L;                          }                      }                  }                  else if (identity.PublicKeyToken.SequenceEqual(s_SILVERLIGHT_PUBLICKEY_STR_L))                  {                      if (!policy.SuppressSilverlightLibraryAssembliesPortability)                      {                          if (SimpleNameComparer.Equals(identity.Name' "Microsoft.VisualBasic"))                          {                              newVersion = new Version(10' 0' 0' 0);                              newPublicKeyToken = s_MICROSOFT_PUBLICKEY_STR_L;                          }                            if (SimpleNameComparer.Equals(identity.Name' "System.ComponentModel.Composition"))                          {                              newVersion = (Version)s_VER_ASSEMBLYVERSION_STR_L;                              newPublicKeyToken = s_ECMA_PUBLICKEY_STR_L;                          }                      }                  }              }
Magic Number,Microsoft.CodeAnalysis,DesktopAssemblyIdentityComparer,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.cs,Port,The following statement contains a magic number: if (version >= new AssemblyVersion(2' 0' 0' 0) && version <= new AssemblyVersion(5' 9' 0' 0))              {                  if (identity.PublicKeyToken.SequenceEqual(s_SILVERLIGHT_PLATFORM_PUBLICKEY_STR_L))                  {                      if (!policy.SuppressSilverlightPlatformAssembliesPortability)                      {                          if (SimpleNameComparer.Equals(identity.Name' "System") ||                              SimpleNameComparer.Equals(identity.Name' "System.Core"))                          {                              newVersion = (Version)s_VER_ASSEMBLYVERSION_STR_L;                              newPublicKeyToken = s_ECMA_PUBLICKEY_STR_L;                          }                      }                  }                  else if (identity.PublicKeyToken.SequenceEqual(s_SILVERLIGHT_PUBLICKEY_STR_L))                  {                      if (!policy.SuppressSilverlightLibraryAssembliesPortability)                      {                          if (SimpleNameComparer.Equals(identity.Name' "Microsoft.VisualBasic"))                          {                              newVersion = new Version(10' 0' 0' 0);                              newPublicKeyToken = s_MICROSOFT_PUBLICKEY_STR_L;                          }                            if (SimpleNameComparer.Equals(identity.Name' "System.ComponentModel.Composition"))                          {                              newVersion = (Version)s_VER_ASSEMBLYVERSION_STR_L;                              newPublicKeyToken = s_ECMA_PUBLICKEY_STR_L;                          }                      }                  }              }
Magic Number,Microsoft.CodeAnalysis,DesktopAssemblyIdentityComparer,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopAssemblyIdentityComparer.cs,Port,The following statement contains a magic number: if (version >= new AssemblyVersion(2' 0' 0' 0) && version <= new AssemblyVersion(5' 9' 0' 0))              {                  if (identity.PublicKeyToken.SequenceEqual(s_SILVERLIGHT_PLATFORM_PUBLICKEY_STR_L))                  {                      if (!policy.SuppressSilverlightPlatformAssembliesPortability)                      {                          if (SimpleNameComparer.Equals(identity.Name' "System") ||                              SimpleNameComparer.Equals(identity.Name' "System.Core"))                          {                              newVersion = (Version)s_VER_ASSEMBLYVERSION_STR_L;                              newPublicKeyToken = s_ECMA_PUBLICKEY_STR_L;                          }                      }                  }                  else if (identity.PublicKeyToken.SequenceEqual(s_SILVERLIGHT_PUBLICKEY_STR_L))                  {                      if (!policy.SuppressSilverlightLibraryAssembliesPortability)                      {                          if (SimpleNameComparer.Equals(identity.Name' "Microsoft.VisualBasic"))                          {                              newVersion = new Version(10' 0' 0' 0);                              newPublicKeyToken = s_MICROSOFT_PUBLICKEY_STR_L;                          }                            if (SimpleNameComparer.Equals(identity.Name' "System.ComponentModel.Composition"))                          {                              newVersion = (Version)s_VER_ASSEMBLYVERSION_STR_L;                              newPublicKeyToken = s_ECMA_PUBLICKEY_STR_L;                          }                      }                  }              }
Magic Number,Microsoft.CodeAnalysis,DesktopStrongNameProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopStrongNameProvider.cs,GET_ALG_CLASS,The following statement contains a magic number: return x & (7 << 13);
Magic Number,Microsoft.CodeAnalysis,DesktopStrongNameProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopStrongNameProvider.cs,GET_ALG_CLASS,The following statement contains a magic number: return x & (7 << 13);
Magic Number,Microsoft.CodeAnalysis,DesktopStrongNameProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopStrongNameProvider.cs,IsPublicKeyBlob,The following statement contains a magic number: const uint ALG_CLASS_SIGNATURE = 1 << 13;
Magic Number,Microsoft.CodeAnalysis,DesktopStrongNameProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopStrongNameProvider.cs,IsPublicKeyBlob,The following statement contains a magic number: const uint ALG_CLASS_HASH = 4 << 13;
Magic Number,Microsoft.CodeAnalysis,DesktopStrongNameProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopStrongNameProvider.cs,IsPublicKeyBlob,The following statement contains a magic number: const uint ALG_CLASS_HASH = 4 << 13;
Magic Number,Microsoft.CodeAnalysis,DesktopStrongNameProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopStrongNameProvider.cs,IsPublicKeyBlob,The following statement contains a magic number: if (keyFileContents.Length < (4 * 3))              {                  return false;              }
Magic Number,Microsoft.CodeAnalysis,DesktopStrongNameProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopStrongNameProvider.cs,IsPublicKeyBlob,The following statement contains a magic number: if (keyFileContents.Length < (4 * 3))              {                  return false;              }
Magic Number,Microsoft.CodeAnalysis,DesktopStrongNameProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopStrongNameProvider.cs,IsPublicKeyBlob,The following statement contains a magic number: fixed (byte* p = keyFileContents)              {                  return (GET_ALG_CLASS((uint)Marshal.ReadInt32((IntPtr)p)) == ALG_CLASS_SIGNATURE) &&                      (GET_ALG_CLASS((uint)Marshal.ReadInt32((IntPtr)p' 4)) == ALG_CLASS_HASH) &&                      (Marshal.ReadInt32((IntPtr)p' 8) + (4 * 3) == keyFileContents.Length);              }
Magic Number,Microsoft.CodeAnalysis,DesktopStrongNameProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopStrongNameProvider.cs,IsPublicKeyBlob,The following statement contains a magic number: fixed (byte* p = keyFileContents)              {                  return (GET_ALG_CLASS((uint)Marshal.ReadInt32((IntPtr)p)) == ALG_CLASS_SIGNATURE) &&                      (GET_ALG_CLASS((uint)Marshal.ReadInt32((IntPtr)p' 4)) == ALG_CLASS_HASH) &&                      (Marshal.ReadInt32((IntPtr)p' 8) + (4 * 3) == keyFileContents.Length);              }
Magic Number,Microsoft.CodeAnalysis,DesktopStrongNameProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopStrongNameProvider.cs,IsPublicKeyBlob,The following statement contains a magic number: fixed (byte* p = keyFileContents)              {                  return (GET_ALG_CLASS((uint)Marshal.ReadInt32((IntPtr)p)) == ALG_CLASS_SIGNATURE) &&                      (GET_ALG_CLASS((uint)Marshal.ReadInt32((IntPtr)p' 4)) == ALG_CLASS_HASH) &&                      (Marshal.ReadInt32((IntPtr)p' 8) + (4 * 3) == keyFileContents.Length);              }
Magic Number,Microsoft.CodeAnalysis,DesktopStrongNameProvider,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\DesktopStrongNameProvider.cs,IsPublicKeyBlob,The following statement contains a magic number: fixed (byte* p = keyFileContents)              {                  return (GET_ALG_CLASS((uint)Marshal.ReadInt32((IntPtr)p)) == ALG_CLASS_SIGNATURE) &&                      (GET_ALG_CLASS((uint)Marshal.ReadInt32((IntPtr)p' 4)) == ALG_CLASS_HASH) &&                      (Marshal.ReadInt32((IntPtr)p' 8) + (4 * 3) == keyFileContents.Length);              }
Magic Number,Microsoft.CodeAnalysis,MetadataCache,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\MetadataCache.cs,TriggerCacheCompact,The following statement contains a magic number: if (Thread.VolatileRead(ref s_compactTimerIsOn) == yes)              {                  // If CompactCache procedure is in progress' wait for it to complete.                  // If the cache is locked by this thread' we might wait forever because                   // CompactCache might be deadlocked.                  while (Interlocked.CompareExchange(ref s_compactInProgress' yes' no) != no)                  {                      Thread.Sleep(10);                  }                    if (Thread.VolatileRead(ref s_compactTimerIsOn) == yes)                  {                      s_compactInProgress = 0;                        // Force the timer to fire now.                      s_compactTimer.Change(0' compactTimerPeriod);                  }                  else                  {                      // Timer was disabled while we were waiting for CompactCache to complete.                      // Do not enable it.                      s_compactInProgress = 0;                  }              }
Magic Number,Microsoft.CodeAnalysis.Diagnostics,AnalyzerFileReference,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\AnalyzerFileReference.InMemoryAssemblyLoader.cs,GetSupportedLanguages,The following statement contains a magic number: if (argsReader.Length > 4)              {                  // Arguments are present--check prologue.                  if (argsReader.ReadByte() == 1 && argsReader.ReadByte() == 0)                  {                      string firstLanguageName;                      if (!PEModule.CrackStringInAttributeValue(out firstLanguageName' ref argsReader))                      {                          return SpecializedCollections.EmptyEnumerable<string>();                      }                        ImmutableArray<string> additionalLanguageNames;                      if (PEModule.CrackStringArrayInAttributeValue(out additionalLanguageNames' ref argsReader))                      {                          if (additionalLanguageNames.Length == 0)                          {                              return SpecializedCollections.SingletonEnumerable(firstLanguageName);                          }                            return additionalLanguageNames.Insert(0' firstLanguageName);                      }                  }              }
Magic Number,Roslyn.Utilities,FileUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\FileUtilities.cs,ResolveRelativePath,The following statement contains a magic number: switch (kind)              {                  case PathKind.Empty:                      return null;                    case PathKind.Relative:                      baseDirectory = GetBaseDirectory(basePath' baseDirectory);                      if (baseDirectory == null)                      {                          return null;                      }                        // with no search paths relative paths are relative to the base directory:                      return PathUtilities.CombinePathsUnchecked(baseDirectory' path);                    case PathKind.RelativeToCurrentDirectory:                      baseDirectory = GetBaseDirectory(basePath' baseDirectory);                      if (baseDirectory == null)                      {                          return null;                      }                        if (path.Length == 1)                      {                          // "."                          return baseDirectory;                      }                      else                      {                          // ".\path"                          return PathUtilities.CombinePathsUnchecked(baseDirectory' path);                      }                    case PathKind.RelativeToCurrentParent:                      baseDirectory = GetBaseDirectory(basePath' baseDirectory);                      if (baseDirectory == null)                      {                          return null;                      }                        // ".."                      return PathUtilities.CombinePathsUnchecked(baseDirectory' path);                    case PathKind.RelativeToCurrentRoot:                      string baseRoot;                      if (basePath != null)                      {                          baseRoot = PathUtilities.GetPathRoot(basePath);                      }                      else if (baseDirectory != null)                      {                          baseRoot = PathUtilities.GetPathRoot(baseDirectory);                      }                      else                      {                          return null;                      }                        if (baseRoot == null)                      {                          return null;                      }                        Debug.Assert(PathUtilities.IsDirectorySeparator(path[0]));                      Debug.Assert(path.Length == 1 || !PathUtilities.IsDirectorySeparator(path[1]));                      Debug.Assert(baseRoot.Length >= 3);                      return PathUtilities.CombinePathsUnchecked(baseRoot' path.Substring(1));                    case PathKind.RelativeToDriveDirectory:                      // drive relative paths not supported' can't resolve:                      return null;                    case PathKind.Absolute:                      return path;                    default:                      // EDMAURER this is not using ExceptionUtilities.UnexpectedValue() because this file                      // is shared via linking with other code that doesn't have the ExceptionUtilities.                      throw new InvalidOperationException(string.Format("Unexpected PathKind {0}."' kind));              }
Magic Number,Roslyn.Utilities,FileUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\FileUtilities.cs,OpenAsyncRead,The following statement contains a magic number: try              {                  return new FileStream(fullPath' FileMode.Open' FileAccess.Read' FileShare.Read' 4096' FileOptions.Asynchronous);              }              catch (IOException)              {                  throw;              }              catch (Exception e)              {                  throw new IOException(e.Message' e);              }
Magic Number,Roslyn.Utilities,FileUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\FileUtilities.cs,DeleteFileOnClose,The following statement contains a magic number: using (var stream = new FileStream(fullPath' FileMode.Open' FileAccess.ReadWrite' FileShare.Delete | FileShare.ReadWrite' 8' FileOptions.DeleteOnClose))              {                  PrepareDeleteOnCloseStreamForDisposal(stream);              }
Magic Number,Roslyn.Utilities,PathUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\PathUtilities.cs,GetPathKind,The following statement contains a magic number: if (path.Length > 0 && path[0] == '.')              {                  if (path.Length == 1 || IsDirectorySeparator(path[1]))                  {                      return PathKind.RelativeToCurrentDirectory;                  }                    if (path[1] == '.')                  {                      if (path.Length == 2 || IsDirectorySeparator(path[2]))                      {                          return PathKind.RelativeToCurrentParent;                      }                  }              }
Magic Number,Roslyn.Utilities,PathUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\PathUtilities.cs,GetPathKind,The following statement contains a magic number: if (path.Length > 0 && path[0] == '.')              {                  if (path.Length == 1 || IsDirectorySeparator(path[1]))                  {                      return PathKind.RelativeToCurrentDirectory;                  }                    if (path[1] == '.')                  {                      if (path.Length == 2 || IsDirectorySeparator(path[2]))                      {                          return PathKind.RelativeToCurrentParent;                      }                  }              }
Magic Number,Roslyn.Utilities,PathUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\PathUtilities.cs,GetPathKind,The following statement contains a magic number: if (!IsUnixLikePlatform)              {                  // "\"                  // "\foo"                  if (path.Length >= 1 && IsDirectorySeparator(path[0]))                  {                      return PathKind.RelativeToCurrentRoot;                  }                    // "C:foo"                    if (path.Length >= 2 && path[1] == VolumeSeparatorChar && (path.Length <= 2 || !IsDirectorySeparator(path[2])))                  {                      return PathKind.RelativeToDriveDirectory;                  }              }
Magic Number,Roslyn.Utilities,PathUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\PathUtilities.cs,GetPathKind,The following statement contains a magic number: if (!IsUnixLikePlatform)              {                  // "\"                  // "\foo"                  if (path.Length >= 1 && IsDirectorySeparator(path[0]))                  {                      return PathKind.RelativeToCurrentRoot;                  }                    // "C:foo"                    if (path.Length >= 2 && path[1] == VolumeSeparatorChar && (path.Length <= 2 || !IsDirectorySeparator(path[2])))                  {                      return PathKind.RelativeToDriveDirectory;                  }              }
Magic Number,Roslyn.Utilities,PathUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\PathUtilities.cs,GetPathKind,The following statement contains a magic number: if (!IsUnixLikePlatform)              {                  // "\"                  // "\foo"                  if (path.Length >= 1 && IsDirectorySeparator(path[0]))                  {                      return PathKind.RelativeToCurrentRoot;                  }                    // "C:foo"                    if (path.Length >= 2 && path[1] == VolumeSeparatorChar && (path.Length <= 2 || !IsDirectorySeparator(path[2])))                  {                      return PathKind.RelativeToDriveDirectory;                  }              }
Magic Number,Roslyn.Utilities,PathUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\PathUtilities.cs,IsAbsolute,The following statement contains a magic number: return path.Length >= 2 &&                  IsDirectorySeparator(path[0]) &&                  IsDirectorySeparator(path[1]);
Magic Number,Roslyn.Utilities,PathUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\PathUtilities.cs,IsDriveRootedAbsolutePath,The following statement contains a magic number: return path.Length >= 3 && path[1] == VolumeSeparatorChar && IsDirectorySeparator(path[2]);
Magic Number,Roslyn.Utilities,PathUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\PathUtilities.cs,IsDriveRootedAbsolutePath,The following statement contains a magic number: return path.Length >= 3 && path[1] == VolumeSeparatorChar && IsDirectorySeparator(path[2]);
Magic Number,Roslyn.Utilities,PathUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\PathUtilities.cs,GetPathRootLength,The following statement contains a magic number: if (IsUnixLikePlatform)              {                  if (IsDirectorySeparator(path[0]))                  {                      //  "/*"                      return 1;                  }              }              else              {                  // "C:\"                  if (IsDriveRootedAbsolutePath(path))                  {                      return 3;                  }                    if (IsDirectorySeparator(path[0]))                  {                      // "\\machine\share"                      return GetUncPathRootLength(path);                  }              }
Magic Number,Roslyn.Utilities,PathUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\PathUtilities.cs,GetUncPathRootLength,The following statement contains a magic number: if (serverIndex < 2)              {                  return -1;              }
Magic Number,Microsoft.CodeAnalysis.Text,EncodedStringText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\EncodedStringText.cs,IsBinary,The following statement contains a magic number: for (int i = 1; i < text.Length;)              {                  if (text[i] == '\0')                  {                      if (text[i - 1] == '\0')                      {                          return true;                      }                        i += 1;                  }                  else                  {                      i += 2;                  }              }
Magic Number,Microsoft.CodeAnalysis.Text,EncodedStringText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\EncodedStringText.cs,Decode,The following statement contains a magic number: using (var reader = new StreamReader(data' encoding' detectEncodingFromByteOrderMarks: true' bufferSize: Math.Min(4096' length)' leaveOpen: true))              {                  string text = reader.ReadToEnd();                  actualEncoding = reader.CurrentEncoding;                  return text;              }
Magic Number,Microsoft.CodeAnalysis.Text,EncodedStringText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\EncodedStringText.cs,TryReadByteOrderMark,The following statement contains a magic number: if (length >= 2)              {                  switch (source[0])                  {                      case 0xFE:                          if (source[1] == 0xFF)                          {                              preambleLength = 2;                              return Encoding.BigEndianUnicode;                          }                            break;                        case 0xFF:                          if (source[1] == 0xFE)                          {                              preambleLength = 2;                              return Encoding.Unicode;                          }                            break;                        case 0xEF:                          if (source[1] == 0xBB && length >= 3 && source[2] == 0xBF)                          {                              preambleLength = 3;                              return Encoding.UTF8;                          }                            break;                  }              }
Magic Number,Microsoft.CodeAnalysis.Text,EncodedStringText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\EncodedStringText.cs,TryReadByteOrderMark,The following statement contains a magic number: if (length >= 2)              {                  switch (source[0])                  {                      case 0xFE:                          if (source[1] == 0xFF)                          {                              preambleLength = 2;                              return Encoding.BigEndianUnicode;                          }                            break;                        case 0xFF:                          if (source[1] == 0xFE)                          {                              preambleLength = 2;                              return Encoding.Unicode;                          }                            break;                        case 0xEF:                          if (source[1] == 0xBB && length >= 3 && source[2] == 0xBF)                          {                              preambleLength = 3;                              return Encoding.UTF8;                          }                            break;                  }              }
Magic Number,Microsoft.CodeAnalysis.Text,EncodedStringText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\EncodedStringText.cs,TryReadByteOrderMark,The following statement contains a magic number: if (length >= 2)              {                  switch (source[0])                  {                      case 0xFE:                          if (source[1] == 0xFF)                          {                              preambleLength = 2;                              return Encoding.BigEndianUnicode;                          }                            break;                        case 0xFF:                          if (source[1] == 0xFE)                          {                              preambleLength = 2;                              return Encoding.Unicode;                          }                            break;                        case 0xEF:                          if (source[1] == 0xBB && length >= 3 && source[2] == 0xBF)                          {                              preambleLength = 3;                              return Encoding.UTF8;                          }                            break;                  }              }
Magic Number,Microsoft.CodeAnalysis.Text,EncodedStringText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\EncodedStringText.cs,TryReadByteOrderMark,The following statement contains a magic number: if (length >= 2)              {                  switch (source[0])                  {                      case 0xFE:                          if (source[1] == 0xFF)                          {                              preambleLength = 2;                              return Encoding.BigEndianUnicode;                          }                            break;                        case 0xFF:                          if (source[1] == 0xFE)                          {                              preambleLength = 2;                              return Encoding.Unicode;                          }                            break;                        case 0xEF:                          if (source[1] == 0xBB && length >= 3 && source[2] == 0xBF)                          {                              preambleLength = 3;                              return Encoding.UTF8;                          }                            break;                  }              }
Magic Number,Microsoft.CodeAnalysis.Text,EncodedStringText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\EncodedStringText.cs,TryReadByteOrderMark,The following statement contains a magic number: if (length >= 2)              {                  switch (source[0])                  {                      case 0xFE:                          if (source[1] == 0xFF)                          {                              preambleLength = 2;                              return Encoding.BigEndianUnicode;                          }                            break;                        case 0xFF:                          if (source[1] == 0xFE)                          {                              preambleLength = 2;                              return Encoding.Unicode;                          }                            break;                        case 0xEF:                          if (source[1] == 0xBB && length >= 3 && source[2] == 0xBF)                          {                              preambleLength = 3;                              return Encoding.UTF8;                          }                            break;                  }              }
Magic Number,Microsoft.CodeAnalysis.Text,EncodedStringText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\EncodedStringText.cs,TryReadByteOrderMark,The following statement contains a magic number: if (length >= 2)              {                  switch (source[0])                  {                      case 0xFE:                          if (source[1] == 0xFF)                          {                              preambleLength = 2;                              return Encoding.BigEndianUnicode;                          }                            break;                        case 0xFF:                          if (source[1] == 0xFE)                          {                              preambleLength = 2;                              return Encoding.Unicode;                          }                            break;                        case 0xEF:                          if (source[1] == 0xBB && length >= 3 && source[2] == 0xBF)                          {                              preambleLength = 3;                              return Encoding.UTF8;                          }                            break;                  }              }
Magic Number,Microsoft.CodeAnalysis.Text,EncodedStringText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\EncodedStringText.cs,TryReadByteOrderMark,The following statement contains a magic number: if (data.Length < 2)              {                  // Not long enough for any valid BOM prefix                  return null;              }
Magic Number,Microsoft.CodeAnalysis.Text,EncodedStringText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\EncodedStringText.cs,TryReadByteOrderMark,The following statement contains a magic number: if (t_bomBytes == null)              {                  t_bomBytes = new byte[3];              }
Magic Number,Microsoft.CodeAnalysis.Text,LargeEncodedText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\LargeEncodedText.cs,Decode,The following statement contains a magic number: using (var reader = new StreamReader(stream' encoding' detectEncodingFromByteOrderMarks: true' bufferSize: Math.Min(length' 4096)' leaveOpen: true))              {                  ArrayBuilder<char[]> chunks = ArrayBuilder<char[]>.GetInstance(1 + length / ChunkSize);                  while (!reader.EndOfStream)                  {                      char[] chunk = new char[ChunkSize];                      int charsRead = reader.ReadBlock(chunk' 0' ChunkSize);                      if (charsRead == 0)                      {                          break;                      }                        if (charsRead < ChunkSize)                      {                          Array.Resize(ref chunk' charsRead);                      }                        // Check for binary files                      if (throwIfBinaryDetected && IsBinary(chunk))                      {                          throw new InvalidDataException();                      }                        chunks.Add(chunk);                  }                    return new LargeEncodedText(chunks.ToImmutableAndFree()' reader.CurrentEncoding' default(ImmutableArray<byte>)' checksumAlgorithm);              }
Magic Number,Microsoft.CodeAnalysis.Text,LargeEncodedText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\LargeEncodedText.cs,IsBinary,The following statement contains a magic number: for (int i = 1; i < chunk.Length;)              {                  if (chunk[i] == '\0')                  {                      if (chunk[i - 1] == '\0')                      {                          return true;                      }                        i += 1;                  }                  else                  {                      i += 2;                  }              }
Missing Default,Roslyn.Utilities,PathUtilities,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\PathUtilities.cs,CombinePossiblyRelativeAndRelativePaths,The following switch statement is missing a default case: switch (GetPathKind(relativePath))              {                  case PathKind.Empty:                      return rootOpt;                    case PathKind.Absolute:                  case PathKind.RelativeToCurrentRoot:                  case PathKind.RelativeToDriveDirectory:                      return null;              }
Missing Default,Microsoft.CodeAnalysis.Text,EncodedStringText,C:\repos\mono_roslyn\src\Compilers\Core\Desktop\EncodedStringText.cs,TryReadByteOrderMark,The following switch statement is missing a default case: switch (source[0])                  {                      case 0xFE:                          if (source[1] == 0xFF)                          {                              preambleLength = 2;                              return Encoding.BigEndianUnicode;                          }                            break;                        case 0xFF:                          if (source[1] == 0xFE)                          {                              preambleLength = 2;                              return Encoding.Unicode;                          }                            break;                        case 0xEF:                          if (source[1] == 0xBB && length >= 3 && source[2] == 0xBF)                          {                              preambleLength = 3;                              return Encoding.UTF8;                          }                            break;                  }
