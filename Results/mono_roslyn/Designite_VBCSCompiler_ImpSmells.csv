Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.CodeAnalysis.CompilerServer,CompilerRequestHandler,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\CompilerRequestHandler.cs,CSharpCompile,The method has 8 parameters. Parameters: currentDirectory' libDirectory' responseFileDirectory' tempPath' commandLineArguments' output' cancellationToken' utf8output
Long Parameter List,Microsoft.CodeAnalysis.CompilerServer,CompilerRequestHandler,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\CompilerRequestHandler.cs,BasicCompile,The method has 8 parameters. Parameters: responseFileDirectory' currentDirectory' libDirectory' tempPath' commandLineArguments' output' cancellationToken' utf8output
Long Parameter List,Microsoft.CodeAnalysis.CompilerServer,CSharpCompilerServer,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\CSharpCompilerServer.cs,CSharpCompilerServer,The method has 5 parameters. Parameters: responseFile' args' baseDirectory' libDirectory' tempPath
Long Parameter List,Microsoft.CodeAnalysis.CompilerServer,CSharpCompilerServer,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\CSharpCompilerServer.cs,RunCompiler,The method has 8 parameters. Parameters: responseFileDirectory' args' baseDirectory' libDirectory' tempPath' output' cancellationToken' utf8output
Long Parameter List,Microsoft.CodeAnalysis.CompilerServer,VisualBasicCompilerServer,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\VisualBasicCompilerServer.cs,VisualBasicCompilerServer,The method has 5 parameters. Parameters: responseFile' args' baseDirectory' libDirectory' tempPath
Long Parameter List,Microsoft.CodeAnalysis.CompilerServer,VisualBasicCompilerServer,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\VisualBasicCompilerServer.cs,RunCompiler,The method has 8 parameters. Parameters: responseFileDirectory' args' baseDirectory' libDirectory' tempPath' output' cancellationToken' utf8output
Long Statement,Microsoft.CodeAnalysis.CompilerServer,CompilerRequestHandler,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\CompilerRequestHandler.cs,HandleRequest,The length of the statement  "                        CompilerServerLogger.Log("Request argument '{0}[{1}]' = '{2}'"' req.Arguments[i].ArgumentId' req.Arguments[i].ArgumentIndex' req.Arguments[i].Value); " is 149.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,CompilerServerLogger,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\CompilerServerLogger.cs,GetLoggingPrefix,The length of the statement  "            return string.Format("{0} PID={1} TID={2} Ticks={3}: "' s_prefix' Process.GetCurrentProcess().Id' Thread.CurrentThread.ManagedThreadId' Environment.TickCount); " is 159.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,CSharpCompilerServer,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\CSharpCompilerServer.cs,Run,The length of the statement  "            CompilerServerLogger.Log("****C# Compilation complete.\r\n****Return code: {0}\r\n****Output:\r\n{1}\r\n"' returnCode' consoleOutput.ToString()); " is 145.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,CSharpCompilerServer,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\CSharpCompilerServer.cs,CompilerSpecificSqm,The length of the statement  "            sqm.SetDatapoint(sqmSession' SqmServiceProvider.DATAID_SQM_ROSLYN_COMPILERTYPE' (uint)SqmServiceProvider.CompilerType.CompilerServer); " is 134.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,CSharpCompilerServer,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\CSharpCompilerServer.cs,CompilerSpecificSqm,The length of the statement  "            sqm.SetDatapoint(sqmSession' SqmServiceProvider.DATAID_SQM_ROSLYN_LANGUAGEVERSION' (uint)Arguments.ParseOptions.LanguageVersion); " is 129.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,CSharpCompilerServer,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\CSharpCompilerServer.cs,CompilerSpecificSqm,The length of the statement  "            sqm.SetDatapoint(sqmSession' SqmServiceProvider.DATAID_SQM_ROSLYN_WARNINGLEVEL' (uint)Arguments.CompilationOptions.WarningLevel); " is 129.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,MetadataAndSymbolCache,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\MetadataCache.cs,GetAllModules,The length of the statement  "                var module = CreateModuleMetadata(PathUtilities.CombineAbsoluteAndRelativePaths(assemblyDir' moduleName)' prefetchEntireImage: false); " is 134.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,ServerDispatcher,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\ServerDispatcher.AnalyzerWatcher.cs,Main,The length of the statement  "            var dispatcher = new ServerDispatcher(new CompilerRequestHandler(responseFileDirectory)' new EmptyDiagnosticListener()); " is 120.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,ServerDispatcher,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\ServerDispatcher.AnalyzerWatcher.cs,ListenAndDispatchConnections,The length of the statement  "            Task analyzerTask = watchAnalyzerFiles ? AnalyzerWatcher.CreateWatchFilesTask() : new TaskCompletionSource<bool>().Task; " is 120.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,ServerDispatcher,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\ServerDispatcher.AnalyzerWatcher.cs,ListenAndDispatchConnections,The length of the statement  "                if ((timeoutTask != null && timeoutTask.IsCompleted) || analyzerTask.IsCompleted || cancellationToken.IsCancellationRequested) " is 126.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,ServerDispatcher,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\ServerDispatcher.AnalyzerWatcher.cs,ConstructPipe,The length of the statement  "            PipeAccessRule rule = new PipeAccessRule(identifier' PipeAccessRights.ReadWrite | PipeAccessRights.CreateNewInstance' AccessControlType.Allow); " is 143.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,VisualBasicCompilerServer,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\VisualBasicCompilerServer.cs,Run,The length of the statement  "            CompilerServerLogger.Log("****VB Compilation complete.\r\n****Return code: {0}\r\n****Output:\r\n{1}\r\n"' runResult' consoleOutput.ToString()); " is 144.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,VisualBasicCompilerServer,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\VisualBasicCompilerServer.cs,CompilerSpecificSqm,The length of the statement  "            sqm.SetDatapoint(sqmSession' SqmServiceProvider.DATAID_SQM_ROSLYN_COMPILERTYPE' (uint)SqmServiceProvider.CompilerType.CompilerServer); " is 134.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,VisualBasicCompilerServer,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\VisualBasicCompilerServer.cs,CompilerSpecificSqm,The length of the statement  "            sqm.SetDatapoint(sqmSession' SqmServiceProvider.DATAID_SQM_ROSLYN_WARNINGLEVEL' (uint)Arguments.CompilationOptions.WarningLevel); " is 129.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,VisualBasicCompilerServer,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\VisualBasicCompilerServer.cs,CompilerSpecificSqm,The length of the statement  "            sqm.SetDatapoint(sqmSession' SqmServiceProvider.DATAID_SQM_ROSLYN_LANGUAGEVERSION' (uint)Arguments.ParseOptions.LanguageVersion); " is 129.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,VisualBasicCompilerServer,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\VisualBasicCompilerServer.cs,CompilerSpecificSqm,The length of the statement  "            sqm.SetDatapoint(sqmSession' SqmServiceProvider.DATAID_SQM_ROSLYN_WARNINGLEVEL' Arguments.CompilationOptions.GeneralDiagnosticOption == ReportDiagnostic.Suppress ? 1u : 0u); " is 173.
Long Statement,Microsoft.CodeAnalysis.CompilerServer,VisualBasicCompilerServer,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\VisualBasicCompilerServer.cs,CompilerSpecificSqm,The length of the statement  "            sqm.SetDatapoint(sqmSession' SqmServiceProvider.DATAID_SQM_ROSLYN_EMBEDVBCORE' Arguments.CompilationOptions.EmbedVbCoreRuntime ? 1u : 0u); " is 138.
Complex Conditional,Microsoft.CodeAnalysis.CompilerServer,ServerDispatcher,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\ServerDispatcher.AnalyzerWatcher.cs,ListenAndDispatchConnections,The conditional expression  "(timeoutTask != null && timeoutTask.IsCompleted) || analyzerTask.IsCompleted || cancellationToken.IsCancellationRequested"  is complex.
Empty Catch Block,Microsoft.CodeAnalysis.CompilerServer,ServerDispatcher,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\ServerDispatcher.AnalyzerWatcher.cs,ListenAndDispatchConnections,The method has an empty catch block.
Empty Catch Block,Microsoft.CodeAnalysis.CompilerServer,ServerDispatcher,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\ServerDispatcher.AnalyzerWatcher.cs,WaitForAnyCompletion,The method has an empty catch block.
Empty Catch Block,Microsoft.CodeAnalysis.CompilerServer,ServerDispatcher,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\ServerDispatcher.AnalyzerWatcher.cs,CreateListenTask,The method has an empty catch block.
Empty Catch Block,Microsoft.CodeAnalysis.CompilerServer,ServerDispatcher,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\ServerDispatcher.AnalyzerWatcher.cs,CreateListenTask,The method has an empty catch block.
Magic Number,Microsoft.CodeAnalysis.CompilerServer,BuildRequest,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\BuildProtocol.cs,ReadAsync,The following statement contains a magic number: var lengthBuffer = new byte[4];
Magic Number,Microsoft.CodeAnalysis.CompilerServer,BuildRequest,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\BuildProtocol.cs,ReadAsync,The following statement contains a magic number: await BuildProtocolConstants.ReadAllAsync(inStream'                                                        lengthBuffer'                                                        4'                                                        cancellationToken).ConfigureAwait(false);
Magic Number,Microsoft.CodeAnalysis.CompilerServer,BuildRequest,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\BuildProtocol.cs,WriteAsync,The following statement contains a magic number: using (var writer = new BinaryWriter(new MemoryStream()' Encoding.Unicode))              {                  // Format the request.                  CompilerServerLogger.Log("Formatting request");                  writer.Write(this.ProtocolVersion);                  writer.Write((uint)this.Language);                  writer.Write(this.Arguments.Length);                  foreach (Argument arg in this.Arguments)                  {                      cancellationToken.ThrowIfCancellationRequested();                      arg.WriteToBinaryWriter(writer);                  }                  writer.Flush();                    cancellationToken.ThrowIfCancellationRequested();                      // Grab the MemoryStream and its internal buffer                  // to prevent making another copy.                  var stream = (MemoryStream)writer.BaseStream;                  // Write the length of the request                  int length = (int)stream.Length;                    // Back out if the request is > 1 MB                  if (stream.Length > 0x100000)                  {                      CompilerServerLogger.Log("Request is over 1MB in length' cancelling write");                      throw new ArgumentOutOfRangeException();                  }                    // Send the request to the server                  CompilerServerLogger.Log("Writing length of request.");                  await outStream.WriteAsync(BitConverter.GetBytes(length)' 0' 4'                                             cancellationToken).ConfigureAwait(false);                    CompilerServerLogger.Log("Writing request of size {0}"' length);                  // Write the request                  await outStream.WriteAsync(stream.GetBuffer()' 0' length'                                             cancellationToken).ConfigureAwait(false);              }
Magic Number,Microsoft.CodeAnalysis.CompilerServer,BuildResponse,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\BuildProtocol.cs,WriteAsync,The following statement contains a magic number: using (var writer = new BinaryWriter(new MemoryStream()' Encoding.Unicode))              {                  // Format the response                  CompilerServerLogger.Log("Formatting Response");                  writer.Write((int)this.Type);                    this.AddResponseBody(writer);                  writer.Flush();                    cancellationToken.ThrowIfCancellationRequested();                    // Send the response to the client                    // Grab the MemoryStream and its internal buffer to prevent                  // making another copy.                  var stream = (MemoryStream)writer.BaseStream;                  // Write the length of the response                  uint length = (uint)stream.Length;                  CompilerServerLogger.Log("Writing response length");                  // There is no way to know the number of bytes written to                  // the pipe stream. We just have to assume all of them are written.                  await outStream.WriteAsync(BitConverter.GetBytes(length)'                                             0'                                             4'                                             cancellationToken).ConfigureAwait(false);                    // Write the response                  CompilerServerLogger.Log("Writing response of size {0}"' length);                  // There is no way to know the number of bytes written to                  // the pipe stream. We just have to assume all of them are written.                  await outStream.WriteAsync(stream.GetBuffer()'                                             0'                                             (int)length'                                             cancellationToken).ConfigureAwait(false);              }
Magic Number,Microsoft.CodeAnalysis.CompilerServer,BuildResponse,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\BuildProtocol.cs,ReadAsync,The following statement contains a magic number: var lengthBuffer = new byte[4];
Magic Number,Microsoft.CodeAnalysis.CompilerServer,BuildResponse,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\BuildProtocol.cs,ReadAsync,The following statement contains a magic number: await BuildProtocolConstants.ReadAllAsync(stream' lengthBuffer' 4' cancellationToken).ConfigureAwait(false);
Magic Number,Microsoft.CodeAnalysis.CompilerServer,NamedPipeClientConnection,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\NamedPipeClientConnection.cs,CreateMonitorDisconnectTaskCore,The following statement contains a magic number: while (!cancellationToken.IsCancellationRequested && _pipeStream.IsConnected)              {                  // Wait a tenth of a second before trying again                  await Task.Delay(100' cancellationToken).ConfigureAwait(false);                    try                  {                      CompilerServerLogger.Log("Pipe {0}: Before poking pipe."' _loggingIdentifier);                      await _pipeStream.ReadAsync(buffer' 0' 0' cancellationToken).ConfigureAwait(false);                      CompilerServerLogger.Log("Pipe {0}: After poking pipe."' _loggingIdentifier);                  }                  catch (Exception e)                  {                      // It is okay for this call to fail.  Errors will be reflected in the                       // IsConnected property which will be read on the next iteration of the                       // loop                      var msg = string.Format("Pipe {0}: Error poking pipe."' _loggingIdentifier);                      CompilerServerLogger.LogException(e' msg);                  }              }
Magic Number,Microsoft.CodeAnalysis.CompilerServer,MemoryHelper,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\ServerDispatcher.MemoryHelper.cs,IsMemoryAvailable,The following statement contains a magic number: int shift = 20;
Magic Number,Microsoft.CodeAnalysis.CompilerServer,MemoryHelper,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\ServerDispatcher.MemoryHelper.cs,IsMemoryAvailable,The following statement contains a magic number: if (free >> shift == 0)                  {                      shift = 10;                      unit = "KB";                  }
Magic Number,Microsoft.CodeAnalysis.CompilerServer,MemoryHelper,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\ServerDispatcher.MemoryHelper.cs,IsMemoryAvailable,The following statement contains a magic number: return free >= 800 << 20;
Magic Number,Microsoft.CodeAnalysis.CompilerServer,MemoryHelper,C:\repos\mono_roslyn\src\Compilers\Core\VBCSCompiler\ServerDispatcher.MemoryHelper.cs,IsMemoryAvailable,The following statement contains a magic number: return free >= 800 << 20;
