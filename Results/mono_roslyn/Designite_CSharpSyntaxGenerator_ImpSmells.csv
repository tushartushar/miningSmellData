Implementation smell,Namespace,Class,File,Method,Description
Long Method,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteGreenType,The method has 170 lines of code.
Long Method,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteGreenFactory,The method has 126 lines of code.
Long Method,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedType,The method has 203 lines of code.
Long Method,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedFactory,The method has 110 lines of code.
Long Method,CSharpSyntaxGenerator,TestWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\TestWriter.cs,WriteNodeGenerator,The method has 106 lines of code.
Complex Method,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteGreenType,Cyclomatic complexity of the method is 8
Complex Method,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteGreenUpdateMethod,Cyclomatic complexity of the method is 10
Complex Method,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteGreenRewriter,Cyclomatic complexity of the method is 10
Complex Method,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteGreenFactory,Cyclomatic complexity of the method is 15
Complex Method,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedUpdateMethod,Cyclomatic complexity of the method is 10
Complex Method,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedRewriter,Cyclomatic complexity of the method is 10
Complex Method,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedFactory,Cyclomatic complexity of the method is 16
Complex Method,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedFactoryWithNoAutoCreatableTokens,Cyclomatic complexity of the method is 11
Complex Method,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedMinimalFactory,Cyclomatic complexity of the method is 15
Complex Method,CSharpSyntaxGenerator,TestWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\TestWriter.cs,WriteNodeGenerator,Cyclomatic complexity of the method is 8
Complex Method,CSharpSyntaxGenerator,TestWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\TestWriter.cs,WriteFactoryPropertyTest,Cyclomatic complexity of the method is 9
Long Identifier,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedFactoryWithNoAutoCreatableTokens,The length of the parameter factoryWithNoAutoCreatableTokenFields is 37.
Long Statement,CSharpSyntaxGenerator,AbstractFileWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\AbstractFileWriter.cs,IsNodeOrNodeList,The length of the statement  "            return IsNode(typeName) || IsNodeList(typeName) || IsSeparatedNodeList(typeName) || typeName == "SyntaxNodeOrTokenList"; " is 120.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteGreenType,The length of the statement  "                WriteLine("    internal {0}(SyntaxKind kind' DiagnosticInfo[] diagnostics' SyntaxAnnotation[] annotations)"' node.Name); " is 120.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteGreenType,The length of the statement  "                        WriteLine("    public {0}SyntaxList<CSharpSyntaxNode> {1} {{ get {{ return new SyntaxList<CSharpSyntaxNode>(this.{2}); }} }}"' " is 126.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteGreenAcceptMethods,The length of the statement  "            //WriteLine("    public override TResult Accept<TArgument' TResult>(SyntaxVisitor<TArgument' TResult> visitor' TArgument argument)"); " is 133.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteGreenVisitor,The length of the statement  "            WriteLine("  internal partial class CSharpSyntaxVisitor" + (withResult ? "<" + (withArgument ? "TArgument' " : "") + "TResult>" : "")); " is 135.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteGreenVisitor,The length of the statement  "                    WriteLine("    public virtual " + (withResult ? "TResult" : "void") + " Visit{0}({1} node{2})"' StripPost(node.Name' "Syntax")' node.Name' withArgument ? "' TArgument argument" : ""); " is 183.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteGreenUpdateMethod,The length of the statement  "                if (IsDerivedOrListOfDerived("SyntaxNode"' field.Type) || IsDerivedOrListOfDerived("SyntaxToken"' field.Type) || field.Type == "SyntaxNodeOrTokenList") " is 151.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedType,The length of the statement  "                WriteLine("    internal {0}(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CSharpSyntaxNode green' SyntaxNode parent' int position)"' node.Name); " is 150.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedType,The length of the statement  "                WriteLine("    internal {0}(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CSharpSyntaxNode green' SyntaxNode parent' int position)"' node.Name); " is 150.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedType,The length of the statement  "                            WriteLine("            var slot = ((Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.{0})this.Green).{1};"' node.Name' CamelCase(field.Name)); " is 145.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedType,The length of the statement  "                            WriteLine("      get {{ return new SyntaxToken(this' ((Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.{0})this.Green).{1}' {2}' {3}); }}"' node.Name' CamelCase(field.Name)' GetChildPosition(i)' GetChildIndex(i)); " is 217.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedType,The length of the statement  "                    WriteLine("    public {0}{1} {2} {{ get {{ return ((Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.{3})this.Green).{2}; }} }}"' " is 132.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedAcceptMethod,The length of the statement  "            WriteLine("    public override " + (genericResult ? "TResult" : "void") + " Accept" + genericArgs + "(CSharpSyntaxVisitor" + genericArgs + " visitor{0})"' genericArgument ? "' TArgument argument" : ""); " is 202.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedAcceptMethod,The length of the statement  "            WriteLine("        " + (genericResult ? "return " : "") + "visitor.Visit{0}(this{1});"' StripPost(node.Name' "Syntax")' genericArgument ? "' argument" : ""); " is 157.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedVisitor,The length of the statement  "                    WriteLine("    public virtual " + (genericResult ? "TResult" : "void") + " Visit{0}({1} node{2})"' StripPost(node.Name' "Syntax")' node.Name' genericArgument ? "' TArgument argument" : ""); " is 189.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedVisitor,The length of the statement  "                    WriteLine("      " + (genericResult ? "return " : "") + "this.DefaultVisit(node{0});"' genericArgument ? "' argument" : ""); " is 124.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedUpdateMethod,The length of the statement  "                if (IsDerivedOrListOfDerived("SyntaxNode"' field.Type) || IsDerivedOrListOfDerived("SyntaxToken"' field.Type) || field.Type == "SyntaxNodeOrTokenList") " is 151.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedNestedListHelperMethods,The length of the statement  "            WriteLine("    public {0} Add{1}{2}(params {3}[] items)"' node.Name' StripPost(field.Name' "Opt")' referencedNodeField.Name' argType); " is 134.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedNestedListHelperMethods,The length of the statement  "                WriteLine("        return this.With{0}({1}.With{2}({1}.{3}.AddRange(items)));"' StripPost(field.Name' "Opt")' varName' StripPost(referencedNodeField.Name' "Opt")' referencedNodeField.Name); " is 189.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedNestedListHelperMethods,The length of the statement  "                WriteLine("        return this.With{0}(this.{1}.With{2}(this.{1}.{3}.AddRange(items)));"' StripPost(field.Name' "Opt")' field.Name' StripPost(referencedNodeField.Name' "Opt")' referencedNodeField.Name); " is 202.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,IsAutoCreatableToken,The length of the statement  "                && ((field.Kinds.Count == 1 && field.Kinds[0].Name != "IdentifierToken" && !field.Kinds[0].Name.EndsWith("LiteralToken")) || (field.Kinds.Count > 1 && field.Kinds.Count == node.Kinds.Count)); " is 191.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedFactory,The length of the statement  "            Write("      return ({0})Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxFactory.{1}("' nd.Name' StripPost(nd.Name' "Syntax")); " is 137.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedFactory,The length of the statement  "                    Write("{0}.Node.ToGreenList<Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CSharpSyntaxNode>()"' CamelCase(field.Name)); " is 125.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedFactory,The length of the statement  "                    Write("{0}.Node.ToGreenList<Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.{1}>()"' CamelCase(field.Name)' GetElementType(field.Type)); " is 140.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedFactory,The length of the statement  "                    Write("{0}.Node.ToGreenSeparatedList<Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.{1}>()"' CamelCase(field.Name)' GetElementType(field.Type)); " is 149.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedFactory,The length of the statement  "                    Write("{0}.Node.ToGreenList<Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CSharpSyntaxNode>()"' CamelCase(field.Name)); " is 125.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedFactory,The length of the statement  "                    Write("{0} == null ? null : (Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.{1}){0}.Green"' CamelCase(field.Name)' field.Type); " is 132.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,GetDefaultValue,The length of the statement  "                    return string.Format("SyntaxFactory.Token(Get{0}{1}Kind(kind))"' StripPost(nd.Name' "Syntax")' StripPost(field.Name' "Opt")); " is 125.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteKindConverters,The length of the statement  "                    WriteLine("    private static SyntaxKind Get{0}{1}Kind(SyntaxKind kind)"' StripPost(nd.Name' "Syntax")' StripPost(field.Name' "Opt")); " is 134.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteRedMinimalFactory,The length of the statement  "            if (withStringNames && minimalFactoryfields.Count(f => IsRequiredFactoryField(nd' f) && CanAutoConvertFromString(f)) == 0) " is 122.
Long Statement,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,IsIdentifierToken,The length of the statement  "            return field.Type == "SyntaxToken" && field.Kinds != null && field.Kinds.Count == 1 && field.Kinds[0].Name == "IdentifierToken"; " is 128.
Complex Conditional,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteGreenFactory,The conditional expression  "nd.Name != "SkippedTokensTriviaSyntax" &&                  nd.Name != "DocumentationCommentTriviaSyntax" &&                  nd.Name != "IncompleteMemberSyntax" &&                  valueFields.Count + nodeFields.Count <= 3"  is complex.
Magic Number,CSharpSyntaxGenerator,AbstractFileWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\AbstractFileWriter.cs,StripNode,The following statement contains a magic number: return (_tree.Root.EndsWith("Node")) ? _tree.Root.Substring(0' _tree.Root.Length - 4) : _tree.Root;
Magic Number,CSharpSyntaxGenerator,Program,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\Program.cs,Main,The following statement contains a magic number: if (args.Length < 2 || args.Length > 3)              {                  WriteUsage();                  return;              }
Magic Number,CSharpSyntaxGenerator,Program,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\Program.cs,Main,The following statement contains a magic number: if (args.Length < 2 || args.Length > 3)              {                  WriteUsage();                  return;              }
Magic Number,CSharpSyntaxGenerator,Program,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\Program.cs,Main,The following statement contains a magic number: if (args.Length == 3)              {                  outputFile = args[1];                    if (args[2] == "/test")                  {                      writeTests = true;                      writeSource = false;                  }                  else                  {                      WriteUsage();                      return;                  }              }              else if (args.Length == 2)              {                  if (args[1] == "/sig")                  {                      writeSignatures = true;                  }                  else                  {                      outputFile = args[1];                  }              }
Magic Number,CSharpSyntaxGenerator,Program,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\Program.cs,Main,The following statement contains a magic number: if (args.Length == 3)              {                  outputFile = args[1];                    if (args[2] == "/test")                  {                      writeTests = true;                      writeSource = false;                  }                  else                  {                      WriteUsage();                      return;                  }              }              else if (args.Length == 2)              {                  if (args[1] == "/sig")                  {                      writeSignatures = true;                  }                  else                  {                      outputFile = args[1];                  }              }
Magic Number,CSharpSyntaxGenerator,Program,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\Program.cs,Main,The following statement contains a magic number: if (args.Length == 3)              {                  outputFile = args[1];                    if (args[2] == "/test")                  {                      writeTests = true;                      writeSource = false;                  }                  else                  {                      WriteUsage();                      return;                  }              }              else if (args.Length == 2)              {                  if (args[1] == "/sig")                  {                      writeSignatures = true;                  }                  else                  {                      outputFile = args[1];                  }              }
Magic Number,CSharpSyntaxGenerator,SourceWriter,C:\repos\mono_roslyn\src\Tools\Source\CompilerGeneratorTools\Source\CSharpSyntaxGenerator\SourceWriter.cs,WriteGreenFactory,The following statement contains a magic number: if (nd.Name != "SkippedTokensTriviaSyntax" &&                  nd.Name != "DocumentationCommentTriviaSyntax" &&                  nd.Name != "IncompleteMemberSyntax" &&                  valueFields.Count + nodeFields.Count <= 3)              {                  //int hash;                  //var cached = SyntaxNodeCache.TryGetNode((int)SyntaxKind.IdentifierName' identifier' this.context' out hash);                  //if (cached != null) return (IdentifierNameSyntax)cached;                    //var result = new IdentifierNameSyntax(SyntaxKind.IdentifierName' identifier' this.context);                  //if (hash >= 0)                  //{                  //    SyntaxNodeCache.AddNode(result' hash);                  //}                    //return result;                    WriteLine();                  //int hash;                  WriteLine("      int hash;");                  //SyntaxNode cached = SyntaxNodeCache.TryGetNode(SyntaxKind.IdentifierName' identifier' this.context' out hash);                  Write("      var cached = SyntaxNodeCache.TryGetNode((int)");                  WriteCtorArgList(nd' withSyntaxFactoryContext' valueFields' nodeFields);                  WriteLine("' out hash);");                  //    if (cached != null) return (IdentifierNameSyntax)cached;                  WriteLine("      if (cached != null) return ({0})cached;"' nd.Name);                  WriteLine();                    //var result = new IdentifierNameSyntax(SyntaxKind.IdentifierName' identifier);                  Write("      var result = new {0}("' nd.Name);                  WriteCtorArgList(nd' withSyntaxFactoryContext' valueFields' nodeFields);                  WriteLine(");");                  //if (hash >= 0)                  WriteLine("      if (hash >= 0)");                  //{                  WriteLine("      {");                  //    SyntaxNodeCache.AddNode(result' hash);                  WriteLine("          SyntaxNodeCache.AddNode(result' hash);");                  //}                  WriteLine("      }");                  WriteLine();                    //return result;                  WriteLine("      return result;");              }              else              {                  WriteLine();                  Write("      return new {0}("' nd.Name);                  WriteCtorArgList(nd' withSyntaxFactoryContext' valueFields' nodeFields);                  WriteLine(");");              }
