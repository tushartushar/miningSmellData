Implementation smell,Namespace,Class,File,Method,Description
Long Method,Roslyn.UnitTestFramework,MarkupTestFile,C:\research\architectureSmells\repos\mono_roslyn\src\Samples\Shared\UnitTestFramework\MarkupTestFile.cs,Parse,The method has 109 lines of code.
Complex Method,Roslyn.UnitTestFramework,MarkupTestFile,C:\research\architectureSmells\repos\mono_roslyn\src\Samples\Shared\UnitTestFramework\MarkupTestFile.cs,Parse,Cyclomatic complexity of the method is 17
Long Statement,Roslyn.UnitTestFramework,CodeActionProviderTestFixture,C:\research\architectureSmells\repos\mono_roslyn\src\Samples\Shared\UnitTestFramework\CodeActionProviderTestFixture.cs,Format,The length of the statement  "            return Formatter.FormatAsync(Simplifier.ReduceAsync(updatedDocument' Simplifier.Annotation).Result' Formatter.Annotation).Result.GetSyntaxRootAsync().Result; " is 157.
Long Statement,Roslyn.UnitTestFramework,MarkupTestFile,C:\research\architectureSmells\repos\mono_roslyn\src\Samples\Shared\UnitTestFramework\MarkupTestFile.cs,Parse,The length of the statement  "                    if ((matches[0].Item2 == SpanStartString && matches[1].Item2 == SpanEndString && spanStartStack.Peek().Item2 == string.Empty) || " is 128.
Long Statement,Roslyn.UnitTestFramework,MarkupTestFile,C:\research\architectureSmells\repos\mono_roslyn\src\Samples\Shared\UnitTestFramework\MarkupTestFile.cs,Parse,The length of the statement  "                        (matches[0].Item2 == SpanStartString && matches[1].Item2 == NamedSpanEndString && spanStartStack.Peek().Item2 != string.Empty)) " is 127.
Complex Conditional,Roslyn.UnitTestFramework,MarkupTestFile,C:\research\architectureSmells\repos\mono_roslyn\src\Samples\Shared\UnitTestFramework\MarkupTestFile.cs,Parse,The conditional expression  "(matches[0].Item2 == SpanStartString && matches[1].Item2 == SpanEndString && spanStartStack.Peek().Item2 == string.Empty) ||                          (matches[0].Item2 == SpanStartString && matches[1].Item2 == NamedSpanEndString && spanStartStack.Peek().Item2 != string.Empty)"  is complex.
Magic Number,Roslyn.UnitTestFramework,MarkupTestFile,C:\research\architectureSmells\repos\mono_roslyn\src\Samples\Shared\UnitTestFramework\MarkupTestFile.cs,Parse,The following statement contains a magic number: orderedMatches.Count >= 2 &&                      spanStartStack.Count > 0 &&                      matches[0].Item1 == matches[1].Item1 - 1
Magic Number,Roslyn.UnitTestFramework,MarkupTestFile,C:\research\architectureSmells\repos\mono_roslyn\src\Samples\Shared\UnitTestFramework\MarkupTestFile.cs,Parse,The following statement contains a magic number: switch (matchString.Substring(0' 2))                  {                      case PositionString:                          if (position.HasValue)                          {                              throw new ArgumentException(string.Format("Saw multiple occurrences of {0}"' PositionString));                          }                            position = matchIndexInOutput;                          break;                        case SpanStartString:                          spanStartStack.Push(Tuple.Create(matchIndexInOutput' string.Empty));                          break;                        case SpanEndString:                          if (spanStartStack.Count == 0)                          {                              throw new ArgumentException(string.Format("Saw {0} without matching {1}"' SpanEndString' SpanStartString));                          }                            if (spanStartStack.Peek().Item2.Length > 0)                          {                              throw new ArgumentException(string.Format("Saw {0} without matching {1}"' NamedSpanStartString' NamedSpanEndString));                          }                            PopSpan(spanStartStack' spans' matchIndexInOutput);                          break;                        case NamedSpanStartString:                          var name = namedSpanStartMatch.Groups[1].Value;                          spanStartStack.Push(Tuple.Create(matchIndexInOutput' name));                          break;                        case NamedSpanEndString:                          if (spanStartStack.Count == 0)                          {                              throw new ArgumentException(string.Format("Saw {0} without matching {1}"' NamedSpanEndString' NamedSpanStartString));                          }                            if (spanStartStack.Peek().Item2.Length == 0)                          {                              throw new ArgumentException(string.Format("Saw {0} without matching {1}"' SpanStartString' SpanEndString));                          }                            PopSpan(spanStartStack' spans' matchIndexInOutput);                          break;                        default:                          throw new InvalidOperationException();                  }
