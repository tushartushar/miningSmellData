Implementation smell,Namespace,Class,File,Method,Description
Long Method,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The method has 111 lines of code.
Complex Method,Emgu.CV.UI,MatrixBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\MatrixBox.cs,VisualizerChannel,Cyclomatic complexity of the method is 26
Complex Method,Emgu.CV.UI,Operation,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\Operation.cs,ToCode,Cyclomatic complexity of the method is 10
Complex Method,Emgu.CV.UI,OperationsView,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\OperationsView.cs,GetOperationCode,Cyclomatic complexity of the method is 12
Complex Method,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,Cyclomatic complexity of the method is 9
Long Statement,Emgu.CV.UI,HistogramBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\HistogramBox.cs,AddHistogram,The length of the statement  "	PointPairList pointList = new PointPairList (bin' Array.ConvertAll<float' double> ((float[])histogram.MatND.ManagedArray' System.Convert.ToDouble)); " is 148.
Long Statement,Emgu.CV.UI,ImageBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageBox.cs,ImageBox_MouseMove,The length of the statement  "		ImagePropertyPanel.SetMousePositionOnImage (new Point (offsetX + horizontalScrollBarValue' offsetY + verticalScrollBarValue)); " is 126.
Long Statement,Emgu.CV.UI,ImageBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageBox.cs,BuildOperationTree,The length of the statement  "	SortedDictionary<String' List<KeyValuePair<String' MethodInfo>>> catelogDic = new SortedDictionary<string' List<KeyValuePair<String' MethodInfo>>> (); " is 150.
Long Statement,Emgu.CV.UI,ImageBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageBox.cs,BuildOperationTree,The length of the statement  "		String genericArgString = genericArgs.Length > 0 ? String.Format ("<{0}>"' String.Join ("'"' Array.ConvertAll<Type' String> (genericArgs' System.Convert.ToString))) : string.Empty; " is 180.
Long Statement,Emgu.CV.UI,ImageBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageBox.cs,BuildOperationTree,The length of the statement  "		operationMenuItem.Text = String.Format ("{0}{1}({2})"' mi.Name.Substring (0' 1).Equals ("_") ? mi.Name.Substring (1' mi.Name.Length - 1) : mi.Name' //remove leading underscore " is 175.
Long Statement,Emgu.CV.UI,ImageBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageBox.cs,BuildOperationTree,The length of the statement  "		genericArgString' String.Join ("'"' System.Array.ConvertAll<ParameterInfo' String> (mi.GetParameters ()' delegate (ParameterInfo pi) { " is 134.
Long Statement,Emgu.CV.UI,ImageBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageBox.cs,BuildOperationTree,The length of the statement  "		//http://decav.com/blogs/andre/archive/2007/11/18/wtf-quot-problems-quot-with-anonymous-delegates-linq-lambdas-and-quot-foreach-quot-or-quot-for-quot-loops.aspx " is 160.
Long Statement,Emgu.CV.UI,ImageBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageBox.cs,BuildOperationMenuItem,The length of the statement  "		_typeToToolStripMenuItemsDictionary.Add (typeOfImage' BuildOperationTree (Reflection.ReflectIImage.GetImageMethods (image))); " is 125.
Long Statement,Emgu.CV.UI,ImageProperty,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageProperty.cs,HandleFunctionalModeChange,The length of the statement  "	bool zoom = (_imageBox.FunctionalMode & ImageBox.FunctionalModeOption.PanAndZoom) == ImageBox.FunctionalModeOption.PanAndZoom; " is 126.
Long Statement,Emgu.CV.UI,Operation,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\Operation.cs,ToString,The length of the statement  "	return String.Format (System.Globalization.CultureInfo.CurrentCulture' "{0}({1})"' Method.Name' String.Join ("' "' System.Array.ConvertAll<Object' String> (Parameters' System.Convert.ToString))); " is 195.
Long Statement,Emgu.CV.UI,Operation,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\Operation.cs,ToCode,The length of the statement  "	String genericArgString = genericArguments.Length > 0 ? String.Join ("'"' Array.ConvertAll<Object' String> (genericParameters' delegate (Object t) { " is 148.
Long Statement,Emgu.CV.UI,Operation,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\Operation.cs,ToCode,The length of the statement  "		res = String.Format ("{0}.{1}{2}({3})"' "{instance}"' Method.Name' genericArgString' String.Join ("' "' System.Array.ConvertAll<Object' String> (nonGenericParameters' delegate (Object p) { " is 188.
Long Statement,Emgu.CV.UI,Operation,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\Operation.cs,ToCode,The length of the statement  "		res = String.Format ("{0}->{1}{2}({3})"' "{instance}"' Method.Name' genericArgString' String.Join ("' "' System.Array.ConvertAll<Object' String> (nonGenericParameters' delegate (Object p) { " is 189.
Long Statement,Emgu.CV.UI,OperationsView,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\OperationsView.cs,ImageTypeToString,The length of the statement  "	String genericParamString = String.Join ("'"' Array.ConvertAll<Type' String> (genericParameterTypes' delegate (Type t) { " is 120.
Long Statement,Emgu.CV.UI,OperationsView,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\OperationsView.cs,GetOperationCode,The length of the statement  "		ops.Add (String.Format ("public static IImage Function({0} image{1}){{"' ImageTypeToString (imageType)' currentInstanceIndex)); " is 127.
Long Statement,Emgu.CV.UI,OperationsView,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\OperationsView.cs,GetOperationCode,The length of the statement  "		ops.Add (String.Format ("public static IImage Function({0} image{1}){{"' ImageTypeToString (imageType)' currentInstanceIndex)); " is 127.
Long Statement,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnMouseUp,The length of the statement  "			int h = Math.Min (horizontalScrollBar.Maximum' horizontalScrollBar.Value + (int)(selectedRectangle.Location.X / _zoomScale)); " is 125.
Long Statement,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnMouseUp,The length of the statement  "			int v = Math.Min (verticalScrollBar.Maximum' verticalScrollBar.Value + (int)(selectedRectangle.Location.Y / _zoomScale)); " is 121.
Long Statement,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnPaint,The length of the statement  "	(_zoomScale != 1.0f || (horizontalScrollBar.Visible && horizontalScrollBar.Value != 0) || (verticalScrollBar.Visible && verticalScrollBar.Value != 0))) { " is 153.
Long Statement,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnPaint,The length of the statement  "			transform.Translate (horizontalScrollBar.Visible ? -horizontalScrollBar.Value : 0' verticalScrollBar.Visible ? -verticalScrollBar.Value : 0); " is 141.
Long Statement,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,SetScrollBarVisibilityAndMaxMin,The length of the statement  "		horizontalScrollBar.Maximum = Image.Size.Width - (int)(Math.Max (0' ClientSize.Width - (verticalScrollBar.Visible ? verticalScrollBar.Width : 0)) / _zoomScale); " is 160.
Long Statement,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,SetScrollBarVisibilityAndMaxMin,The length of the statement  "		verticalScrollBar.Maximum = Image.Size.Height - (int)(Math.Max (0' ClientSize.Height - (horizontalScrollBar.Visible ? horizontalScrollBar.Height : 0)) / _zoomScale); " is 165.
Long Statement,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnMouseMove,The length of the statement  "		horizontalScrollBar.Value = Math.Max (Math.Min (horizontalScrollBar.Value - horizontalShift' horizontalScrollBar.Maximum)' horizontalScrollBar.Minimum); " is 152.
Long Statement,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnMouseMove,The length of the statement  "		verticalScrollBar.Value = Math.Max (Math.Min (verticalScrollBar.Value - verticalShift' verticalScrollBar.Maximum)' verticalScrollBar.Minimum); " is 142.
Long Statement,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,GetViewSize,The length of the statement  "	return new Size (ClientSize.Width - (verticalScrollBar.Visible ? verticalScrollBar.Width : 0)' ClientSize.Height - (horizontalScrollBar.Visible ? horizontalScrollBar.Height : 0)); " is 179.
Long Statement,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,SetZoomScale,The length of the statement  "	!(zoomScale < _zoomScale && (Image.Size.Width * zoomScale < 2.0 || Image.Size.Height * zoomScale < 2.0)) && //and' the scale is not too big " is 139.
Long Statement,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The length of the statement  "			return new GenericParameter (p.AvailableTypes [Array.FindIndex<String> (options' combo.Text.ToString ().Equals)]' p.AvailableTypes); " is 132.
Long Statement,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,GetParams,The length of the statement  "		ExposableMethodAttribute att = (method.GetCustomAttributes (typeof(ExposableMethodAttribute)' false) [0] as ExposableMethodAttribute); " is 134.
Complex Conditional,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnPaint,The conditional expression  "Image != null //image is set  && //either pan or zoom  (_zoomScale != 1.0f || (horizontalScrollBar.Visible && horizontalScrollBar.Value != 0) || (verticalScrollBar.Visible && verticalScrollBar.Value != 0))"  is complex.
Complex Conditional,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,SetZoomScale,The conditional expression  "Image != null && _zoomScale != zoomScale //the scale has been changed  && //and' the scale is not too small  !(zoomScale < _zoomScale && (Image.Size.Width * zoomScale < 2.0 || Image.Size.Height * zoomScale < 2.0)) && //and' the scale is not too big  !(zoomScale > _zoomScale && (GetViewSize ().Width < zoomScale * 2 || GetViewSize ().Height < zoomScale * 2))"  is complex.
Magic Number,Emgu.CV.UI,HistogramBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\HistogramBox.cs,HistogramBox,The following statement contains a magic number: master.Margin.All = 10;  
Magic Number,Emgu.CV.UI,HistogramBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\HistogramBox.cs,SetSize,The following statement contains a magic number: zedGraphControl1.Location = new Point (10' 10);  
Magic Number,Emgu.CV.UI,HistogramBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\HistogramBox.cs,SetSize,The following statement contains a magic number: zedGraphControl1.Location = new Point (10' 10);  
Magic Number,Emgu.CV.UI,HistogramBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\HistogramBox.cs,SetSize,The following statement contains a magic number: zedGraphControl1.Size = new Size (ClientRectangle.Width - 20' ClientRectangle.Height - 20);  
Magic Number,Emgu.CV.UI,HistogramBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\HistogramBox.cs,SetSize,The following statement contains a magic number: zedGraphControl1.Size = new Size (ClientRectangle.Width - 20' ClientRectangle.Height - 20);  
Magic Number,Emgu.CV.UI,HistogramViewer,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\HistogramViewer.cs,Show,The following statement contains a magic number: Show (image' 256);  
Magic Number,Emgu.CV.UI,ImageBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageBox.cs,BuildOperationTree,The following statement contains a magic number: foreach (MethodInfo mi in operationItem.Values) {  	ToolStripMenuItem operationMenuItem = new ToolStripMenuItem ();  	operationMenuItem.Size = new Size (152' 22);  	Type[] genericArgs = mi.GetGenericArguments ();  	String genericArgString = genericArgs.Length > 0 ? String.Format ("<{0}>"' String.Join ("'"' Array.ConvertAll<Type' String> (genericArgs' System.Convert.ToString))) : string.Empty;  	operationMenuItem.Text = String.Format ("{0}{1}({2})"' mi.Name.Substring (0' 1).Equals ("_") ? mi.Name.Substring (1' mi.Name.Length - 1) : mi.Name' //remove leading underscore  	genericArgString' String.Join ("'"' System.Array.ConvertAll<ParameterInfo' String> (mi.GetParameters ()' delegate (ParameterInfo pi) {  		return pi.Name;  	})));  	//This is necessary to handle delegate with a loop  	//Cause me lots of headache before reading the article on  	//http://decav.com/blogs/andre/archive/2007/11/18/wtf-quot-problems-quot-with-anonymous-delegates-linq-lambdas-and-quot-foreach-quot-or-quot-for-quot-loops.aspx  	//I wishes MSFT handle this better  	MethodInfo methodInfoRef = mi;  	operationMenuItem.Click += delegate {  		Object[] paramList = null;  		while (true) {  			//Get the parameters for the method  			//this pop up an input dialog and ask for user input  			paramList = ParameterInputDialog.GetParams (methodInfoRef' paramList);  			if (paramList == null)  				break;  			//user click cancel on the input dialog  			//create an operation from the specific methodInfo and parameterlist  			Operation operation = new Operation (methodInfoRef' paramList);  			try {  				PushOperation (operation);  				break;  			}  			catch (Exception expt) {  				MessageBox.Show ((expt.InnerException ?? expt).Message);  				//special case' then there is no parameter and the method throw an exception  				//break the loop  				if (methodInfoRef.GetParameters ().Length == 0)  					break;  			}  		}  	};  	res.Add (operationMenuItem);  }  
Magic Number,Emgu.CV.UI,ImageBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageBox.cs,BuildOperationTree,The following statement contains a magic number: foreach (MethodInfo mi in operationItem.Values) {  	ToolStripMenuItem operationMenuItem = new ToolStripMenuItem ();  	operationMenuItem.Size = new Size (152' 22);  	Type[] genericArgs = mi.GetGenericArguments ();  	String genericArgString = genericArgs.Length > 0 ? String.Format ("<{0}>"' String.Join ("'"' Array.ConvertAll<Type' String> (genericArgs' System.Convert.ToString))) : string.Empty;  	operationMenuItem.Text = String.Format ("{0}{1}({2})"' mi.Name.Substring (0' 1).Equals ("_") ? mi.Name.Substring (1' mi.Name.Length - 1) : mi.Name' //remove leading underscore  	genericArgString' String.Join ("'"' System.Array.ConvertAll<ParameterInfo' String> (mi.GetParameters ()' delegate (ParameterInfo pi) {  		return pi.Name;  	})));  	//This is necessary to handle delegate with a loop  	//Cause me lots of headache before reading the article on  	//http://decav.com/blogs/andre/archive/2007/11/18/wtf-quot-problems-quot-with-anonymous-delegates-linq-lambdas-and-quot-foreach-quot-or-quot-for-quot-loops.aspx  	//I wishes MSFT handle this better  	MethodInfo methodInfoRef = mi;  	operationMenuItem.Click += delegate {  		Object[] paramList = null;  		while (true) {  			//Get the parameters for the method  			//this pop up an input dialog and ask for user input  			paramList = ParameterInputDialog.GetParams (methodInfoRef' paramList);  			if (paramList == null)  				break;  			//user click cancel on the input dialog  			//create an operation from the specific methodInfo and parameterlist  			Operation operation = new Operation (methodInfoRef' paramList);  			try {  				PushOperation (operation);  				break;  			}  			catch (Exception expt) {  				MessageBox.Show ((expt.InnerException ?? expt).Message);  				//special case' then there is no parameter and the method throw an exception  				//break the loop  				if (methodInfoRef.GetParameters ().Length == 0)  					break;  			}  		}  	};  	res.Add (operationMenuItem);  }  
Magic Number,Emgu.CV.UI,ImageBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageBox.cs,BuildOperationTree,The following statement contains a magic number: operationMenuItem.Size = new Size (152' 22);  
Magic Number,Emgu.CV.UI,ImageBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageBox.cs,BuildOperationTree,The following statement contains a magic number: operationMenuItem.Size = new Size (152' 22);  
Magic Number,Emgu.CV.UI,ImageBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageBox.cs,zoomInToolStripMenuItem_Click,The following statement contains a magic number: if (Image != null) {  	SetZoomScale (ZoomScale * 2.0' new Point ());  }  
Magic Number,Emgu.CV.UI,ImageBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageBox.cs,zoomInToolStripMenuItem_Click,The following statement contains a magic number: SetZoomScale (ZoomScale * 2.0' new Point ());  
Magic Number,Emgu.CV.UI,ImageBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageBox.cs,zoomOutToolStripMenuItem_Click,The following statement contains a magic number: if (Image != null) {  	SetZoomScale (ZoomScale / 2.0' new Point ());  }  
Magic Number,Emgu.CV.UI,ImageBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageBox.cs,zoomOutToolStripMenuItem_Click,The following statement contains a magic number: SetZoomScale (ZoomScale / 2.0' new Point ());  
Magic Number,Emgu.CV.UI,ImageProperty,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageProperty.cs,ImageProperty,The following statement contains a magic number: for (int i = 0; i < ImageBox.ZoomLevels.Length; i++) {  	zoomLevelComboBox.Items.Add (String.Format ("{0}%"' (int)(ImageBox.ZoomLevels [i] * 100)));  }  
Magic Number,Emgu.CV.UI,ImageProperty,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageProperty.cs,ImageProperty,The following statement contains a magic number: zoomLevelComboBox.Items.Add (String.Format ("{0}%"' (int)(ImageBox.ZoomLevels [i] * 100)));  
Magic Number,Emgu.CV.UI,ImageProperty,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageProperty.cs,SetMousePositionOnImage,The following statement contains a magic number: _buffer [2] = scalar.v2;  
Magic Number,Emgu.CV.UI,ImageProperty,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageProperty.cs,SetMousePositionOnImage,The following statement contains a magic number: _buffer [3] = scalar.v3;  
Magic Number,Emgu.CV.UI,ImageProperty,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageProperty.cs,UpdateZoomScale,The following statement contains a magic number: zoomLevelComboBox.Text = String.Format ("{0}%"' ImageBox.ZoomScale * 100);  
Magic Number,Emgu.CV.UI,ImageProperty,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageProperty.cs,UpdateHistogram,The following statement contains a magic number: if (_histogramViewer != null && _histogramViewer.Visible) {  	IImage image = _imageBox.DisplayedImage;  	if (image != null) {  		_histogramViewer.HistogramCtrl.ClearHistogram ();  		_histogramViewer.HistogramCtrl.GenerateHistograms (image' 256);  		_histogramViewer.HistogramCtrl.Refresh ();  	}  }  
Magic Number,Emgu.CV.UI,ImageProperty,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageProperty.cs,UpdateHistogram,The following statement contains a magic number: if (image != null) {  	_histogramViewer.HistogramCtrl.ClearHistogram ();  	_histogramViewer.HistogramCtrl.GenerateHistograms (image' 256);  	_histogramViewer.HistogramCtrl.Refresh ();  }  
Magic Number,Emgu.CV.UI,ImageProperty,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageProperty.cs,UpdateHistogram,The following statement contains a magic number: _histogramViewer.HistogramCtrl.GenerateHistograms (image' 256);  
Magic Number,Emgu.CV.UI,ImageViewer,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageViewer.cs,ImageViewer,The following statement contains a magic number: if (image != null) {  	Size size = image.Size;  	size.Width += 12;  	size.Height += 38;  	if (!Size.Equals (size))  		Size = size;  }  
Magic Number,Emgu.CV.UI,ImageViewer,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageViewer.cs,ImageViewer,The following statement contains a magic number: if (image != null) {  	Size size = image.Size;  	size.Width += 12;  	size.Height += 38;  	if (!Size.Equals (size))  		Size = size;  }  
Magic Number,Emgu.CV.UI,ImageViewer,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageViewer.cs,ImageViewer,The following statement contains a magic number: size.Width += 12;  
Magic Number,Emgu.CV.UI,ImageViewer,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ImageViewer.cs,ImageViewer,The following statement contains a magic number: size.Height += 38;  
Magic Number,Emgu.CV.UI,MatrixBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\MatrixBox.cs,VisualizerChannel,The following statement contains a magic number: if (channelToBeDisplayed == 0)  #region Display all channels   {  	switch (numberOfChannels) {  	case 1:  		for (int i = 0; i < size.Height; i++) {  			dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  			for (int j = 0; j < size.Width; j++)  				dataGridView1 [j' i].Value = CvInvoke.cvGet2D (_matrix.Ptr' i' j).v0;  		}  		break;  	case 2:  		for (int i = 0; i < size.Height; i++) {  			dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  			for (int j = 0; j < size.Width; j++) {  				MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  				dataGridView1 [j' i].Value = String.Format ("[{0}'{1}]"' scalar.v0' scalar.v1);  			}  		}  		break;  	case 3:  		for (int i = 0; i < size.Height; i++) {  			dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  			for (int j = 0; j < size.Width; j++) {  				MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  				dataGridView1 [j' i].Value = String.Format ("[{0}'{1}'{2}]"' scalar.v0' scalar.v1' scalar.v2);  			}  		}  		break;  	case 4:  	default:  		for (int i = 0; i < size.Height; i++) {  			dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  			for (int j = 0; j < size.Width; j++) {  				MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  				dataGridView1 [j' i].Value = String.Format ("[{0}'{1}'{2}'{3}]"' scalar.v0' scalar.v1' scalar.v2' scalar.v3);  			}  		}  		break;  	}  }  #endregion  else  #region Display a specific channel   {  	for (int i = 0; i < size.Height; i++) {  		dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  		for (int j = 0; j < size.Width; j++)  			dataGridView1 [j' i].Value = CvInvoke.cvGet2D (_matrix.Ptr' i' j).ToArray () [channelToBeDisplayed - 1];  	}  }  
Magic Number,Emgu.CV.UI,MatrixBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\MatrixBox.cs,VisualizerChannel,The following statement contains a magic number: if (channelToBeDisplayed == 0)  #region Display all channels   {  	switch (numberOfChannels) {  	case 1:  		for (int i = 0; i < size.Height; i++) {  			dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  			for (int j = 0; j < size.Width; j++)  				dataGridView1 [j' i].Value = CvInvoke.cvGet2D (_matrix.Ptr' i' j).v0;  		}  		break;  	case 2:  		for (int i = 0; i < size.Height; i++) {  			dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  			for (int j = 0; j < size.Width; j++) {  				MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  				dataGridView1 [j' i].Value = String.Format ("[{0}'{1}]"' scalar.v0' scalar.v1);  			}  		}  		break;  	case 3:  		for (int i = 0; i < size.Height; i++) {  			dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  			for (int j = 0; j < size.Width; j++) {  				MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  				dataGridView1 [j' i].Value = String.Format ("[{0}'{1}'{2}]"' scalar.v0' scalar.v1' scalar.v2);  			}  		}  		break;  	case 4:  	default:  		for (int i = 0; i < size.Height; i++) {  			dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  			for (int j = 0; j < size.Width; j++) {  				MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  				dataGridView1 [j' i].Value = String.Format ("[{0}'{1}'{2}'{3}]"' scalar.v0' scalar.v1' scalar.v2' scalar.v3);  			}  		}  		break;  	}  }  #endregion  else  #region Display a specific channel   {  	for (int i = 0; i < size.Height; i++) {  		dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  		for (int j = 0; j < size.Width; j++)  			dataGridView1 [j' i].Value = CvInvoke.cvGet2D (_matrix.Ptr' i' j).ToArray () [channelToBeDisplayed - 1];  	}  }  
Magic Number,Emgu.CV.UI,MatrixBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\MatrixBox.cs,VisualizerChannel,The following statement contains a magic number: if (channelToBeDisplayed == 0)  #region Display all channels   {  	switch (numberOfChannels) {  	case 1:  		for (int i = 0; i < size.Height; i++) {  			dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  			for (int j = 0; j < size.Width; j++)  				dataGridView1 [j' i].Value = CvInvoke.cvGet2D (_matrix.Ptr' i' j).v0;  		}  		break;  	case 2:  		for (int i = 0; i < size.Height; i++) {  			dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  			for (int j = 0; j < size.Width; j++) {  				MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  				dataGridView1 [j' i].Value = String.Format ("[{0}'{1}]"' scalar.v0' scalar.v1);  			}  		}  		break;  	case 3:  		for (int i = 0; i < size.Height; i++) {  			dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  			for (int j = 0; j < size.Width; j++) {  				MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  				dataGridView1 [j' i].Value = String.Format ("[{0}'{1}'{2}]"' scalar.v0' scalar.v1' scalar.v2);  			}  		}  		break;  	case 4:  	default:  		for (int i = 0; i < size.Height; i++) {  			dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  			for (int j = 0; j < size.Width; j++) {  				MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  				dataGridView1 [j' i].Value = String.Format ("[{0}'{1}'{2}'{3}]"' scalar.v0' scalar.v1' scalar.v2' scalar.v3);  			}  		}  		break;  	}  }  #endregion  else  #region Display a specific channel   {  	for (int i = 0; i < size.Height; i++) {  		dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  		for (int j = 0; j < size.Width; j++)  			dataGridView1 [j' i].Value = CvInvoke.cvGet2D (_matrix.Ptr' i' j).ToArray () [channelToBeDisplayed - 1];  	}  }  
Magic Number,Emgu.CV.UI,MatrixBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\MatrixBox.cs,VisualizerChannel,The following statement contains a magic number: switch (numberOfChannels) {  case 1:  	for (int i = 0; i < size.Height; i++) {  		dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  		for (int j = 0; j < size.Width; j++)  			dataGridView1 [j' i].Value = CvInvoke.cvGet2D (_matrix.Ptr' i' j).v0;  	}  	break;  case 2:  	for (int i = 0; i < size.Height; i++) {  		dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  		for (int j = 0; j < size.Width; j++) {  			MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  			dataGridView1 [j' i].Value = String.Format ("[{0}'{1}]"' scalar.v0' scalar.v1);  		}  	}  	break;  case 3:  	for (int i = 0; i < size.Height; i++) {  		dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  		for (int j = 0; j < size.Width; j++) {  			MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  			dataGridView1 [j' i].Value = String.Format ("[{0}'{1}'{2}]"' scalar.v0' scalar.v1' scalar.v2);  		}  	}  	break;  case 4:  default:  	for (int i = 0; i < size.Height; i++) {  		dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  		for (int j = 0; j < size.Width; j++) {  			MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  			dataGridView1 [j' i].Value = String.Format ("[{0}'{1}'{2}'{3}]"' scalar.v0' scalar.v1' scalar.v2' scalar.v3);  		}  	}  	break;  }  
Magic Number,Emgu.CV.UI,MatrixBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\MatrixBox.cs,VisualizerChannel,The following statement contains a magic number: switch (numberOfChannels) {  case 1:  	for (int i = 0; i < size.Height; i++) {  		dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  		for (int j = 0; j < size.Width; j++)  			dataGridView1 [j' i].Value = CvInvoke.cvGet2D (_matrix.Ptr' i' j).v0;  	}  	break;  case 2:  	for (int i = 0; i < size.Height; i++) {  		dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  		for (int j = 0; j < size.Width; j++) {  			MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  			dataGridView1 [j' i].Value = String.Format ("[{0}'{1}]"' scalar.v0' scalar.v1);  		}  	}  	break;  case 3:  	for (int i = 0; i < size.Height; i++) {  		dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  		for (int j = 0; j < size.Width; j++) {  			MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  			dataGridView1 [j' i].Value = String.Format ("[{0}'{1}'{2}]"' scalar.v0' scalar.v1' scalar.v2);  		}  	}  	break;  case 4:  default:  	for (int i = 0; i < size.Height; i++) {  		dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  		for (int j = 0; j < size.Width; j++) {  			MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  			dataGridView1 [j' i].Value = String.Format ("[{0}'{1}'{2}'{3}]"' scalar.v0' scalar.v1' scalar.v2' scalar.v3);  		}  	}  	break;  }  
Magic Number,Emgu.CV.UI,MatrixBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\MatrixBox.cs,VisualizerChannel,The following statement contains a magic number: switch (numberOfChannels) {  case 1:  	for (int i = 0; i < size.Height; i++) {  		dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  		for (int j = 0; j < size.Width; j++)  			dataGridView1 [j' i].Value = CvInvoke.cvGet2D (_matrix.Ptr' i' j).v0;  	}  	break;  case 2:  	for (int i = 0; i < size.Height; i++) {  		dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  		for (int j = 0; j < size.Width; j++) {  			MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  			dataGridView1 [j' i].Value = String.Format ("[{0}'{1}]"' scalar.v0' scalar.v1);  		}  	}  	break;  case 3:  	for (int i = 0; i < size.Height; i++) {  		dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  		for (int j = 0; j < size.Width; j++) {  			MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  			dataGridView1 [j' i].Value = String.Format ("[{0}'{1}'{2}]"' scalar.v0' scalar.v1' scalar.v2);  		}  	}  	break;  case 4:  default:  	for (int i = 0; i < size.Height; i++) {  		dataGridView1.Rows [i].HeaderCell.Value = String.Format ("Row {0}"' i);  		for (int j = 0; j < size.Width; j++) {  			MCvScalar scalar = CvInvoke.cvGet2D (_matrix.Ptr' i' j);  			dataGridView1 [j' i].Value = String.Format ("[{0}'{1}'{2}'{3}]"' scalar.v0' scalar.v1' scalar.v2' scalar.v3);  		}  	}  	break;  }  
Magic Number,Emgu.CV.UI,OperationsView,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\OperationsView.cs,OperationsView,The following statement contains a magic number: _codeColumn.Width = 300;  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnMouseUp,The following statement contains a magic number: if (e.Button == MouseButtons.Left && _mouseDownButton == MouseButtons.Left) {  	ReverseRectangle ();  	Size size = Min (GetViewSize ()' GetImageSize ());  	Rectangle imageRegion = new Rectangle (Point.Empty' size);  	if (!imageRegion.Contains (_mouseDownPosition))  		return;  	Rectangle selectedRectangle = GetSelectedRectangle (e.Location' _mouseDownPosition);  	if ((selectedRectangle.Width / _zoomScale) > 2 && (selectedRectangle.Height / _zoomScale) > 2) {  		int h = Math.Min (horizontalScrollBar.Maximum' horizontalScrollBar.Value + (int)(selectedRectangle.Location.X / _zoomScale));  		int v = Math.Min (verticalScrollBar.Maximum' verticalScrollBar.Value + (int)(selectedRectangle.Location.Y / _zoomScale));  		_zoomScale = _zoomScale * size.Width / selectedRectangle.Width;  		SetScrollBarVisibilityAndMaxMin ();  		horizontalScrollBar.Value = h;  		verticalScrollBar.Value = v;  		Invalidate ();  	}  }  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnMouseUp,The following statement contains a magic number: if (e.Button == MouseButtons.Left && _mouseDownButton == MouseButtons.Left) {  	ReverseRectangle ();  	Size size = Min (GetViewSize ()' GetImageSize ());  	Rectangle imageRegion = new Rectangle (Point.Empty' size);  	if (!imageRegion.Contains (_mouseDownPosition))  		return;  	Rectangle selectedRectangle = GetSelectedRectangle (e.Location' _mouseDownPosition);  	if ((selectedRectangle.Width / _zoomScale) > 2 && (selectedRectangle.Height / _zoomScale) > 2) {  		int h = Math.Min (horizontalScrollBar.Maximum' horizontalScrollBar.Value + (int)(selectedRectangle.Location.X / _zoomScale));  		int v = Math.Min (verticalScrollBar.Maximum' verticalScrollBar.Value + (int)(selectedRectangle.Location.Y / _zoomScale));  		_zoomScale = _zoomScale * size.Width / selectedRectangle.Width;  		SetScrollBarVisibilityAndMaxMin ();  		horizontalScrollBar.Value = h;  		verticalScrollBar.Value = v;  		Invalidate ();  	}  }  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnMouseUp,The following statement contains a magic number: if ((selectedRectangle.Width / _zoomScale) > 2 && (selectedRectangle.Height / _zoomScale) > 2) {  	int h = Math.Min (horizontalScrollBar.Maximum' horizontalScrollBar.Value + (int)(selectedRectangle.Location.X / _zoomScale));  	int v = Math.Min (verticalScrollBar.Maximum' verticalScrollBar.Value + (int)(selectedRectangle.Location.Y / _zoomScale));  	_zoomScale = _zoomScale * size.Width / selectedRectangle.Width;  	SetScrollBarVisibilityAndMaxMin ();  	horizontalScrollBar.Value = h;  	verticalScrollBar.Value = v;  	Invalidate ();  }  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnMouseUp,The following statement contains a magic number: if ((selectedRectangle.Width / _zoomScale) > 2 && (selectedRectangle.Height / _zoomScale) > 2) {  	int h = Math.Min (horizontalScrollBar.Maximum' horizontalScrollBar.Value + (int)(selectedRectangle.Location.X / _zoomScale));  	int v = Math.Min (verticalScrollBar.Maximum' verticalScrollBar.Value + (int)(selectedRectangle.Location.Y / _zoomScale));  	_zoomScale = _zoomScale * size.Width / selectedRectangle.Width;  	SetScrollBarVisibilityAndMaxMin ();  	horizontalScrollBar.Value = h;  	verticalScrollBar.Value = v;  	Invalidate ();  }  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnMouseWheel,The following statement contains a magic number: if (e.Delta > 0) {  	scale = 2.0;  }  else if (e.Delta < 0) {  	scale = 0.5;  }  else  	return;  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnMouseWheel,The following statement contains a magic number: if (e.Delta > 0) {  	scale = 2.0;  }  else if (e.Delta < 0) {  	scale = 0.5;  }  else  	return;  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnMouseWheel,The following statement contains a magic number: scale = 2.0;  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnMouseWheel,The following statement contains a magic number: if (e.Delta < 0) {  	scale = 0.5;  }  else  	return;  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,OnMouseWheel,The following statement contains a magic number: scale = 0.5;  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,SetScrollBarVisibilityAndMaxMin,The following statement contains a magic number: horizontalScrollBar.LargeChange = (int)Math.Max (horizontalScrollBar.Maximum / 10' 1);  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,SetScrollBarVisibilityAndMaxMin,The following statement contains a magic number: horizontalScrollBar.SmallChange = (int)Math.Max (horizontalScrollBar.Maximum / 20' 1);  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,SetScrollBarVisibilityAndMaxMin,The following statement contains a magic number: verticalScrollBar.LargeChange = (int)Math.Max (verticalScrollBar.Maximum / 10' 1);  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,SetScrollBarVisibilityAndMaxMin,The following statement contains a magic number: verticalScrollBar.SmallChange = (int)Math.Max (verticalScrollBar.Maximum / 20' 1);  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,SetZoomScale,The following statement contains a magic number: if (Image != null && _zoomScale != zoomScale //the scale has been changed  && //and' the scale is not too small  !(zoomScale < _zoomScale && (Image.Size.Width * zoomScale < 2.0 || Image.Size.Height * zoomScale < 2.0)) && //and' the scale is not too big  !(zoomScale > _zoomScale && (GetViewSize ().Width < zoomScale * 2 || GetViewSize ().Height < zoomScale * 2))) {  	//constrain the coordinate to be within valide range  	fixPoint.X = Math.Min (fixPoint.X' (int)(Image.Size.Width * _zoomScale));  	fixPoint.Y = Math.Min (fixPoint.Y' (int)(Image.Size.Height * _zoomScale));  	int shiftX = (int)(fixPoint.X * (zoomScale - _zoomScale) / zoomScale / _zoomScale);  	int shiftY = (int)(fixPoint.Y * (zoomScale - _zoomScale) / zoomScale / _zoomScale);  	_zoomScale = zoomScale;  	int h = (int)(horizontalScrollBar.Value + shiftX);  	int v = (int)(verticalScrollBar.Value + shiftY);  	SetScrollBarVisibilityAndMaxMin ();  	horizontalScrollBar.Value = Math.Min (Math.Max (horizontalScrollBar.Minimum' h)' horizontalScrollBar.Maximum);  	;  	verticalScrollBar.Value = Math.Min (Math.Max (verticalScrollBar.Minimum' v)' verticalScrollBar.Maximum);  	Invalidate ();  	if (OnZoomScaleChange != null)  		OnZoomScaleChange (this' new EventArgs ());  }  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,SetZoomScale,The following statement contains a magic number: if (Image != null && _zoomScale != zoomScale //the scale has been changed  && //and' the scale is not too small  !(zoomScale < _zoomScale && (Image.Size.Width * zoomScale < 2.0 || Image.Size.Height * zoomScale < 2.0)) && //and' the scale is not too big  !(zoomScale > _zoomScale && (GetViewSize ().Width < zoomScale * 2 || GetViewSize ().Height < zoomScale * 2))) {  	//constrain the coordinate to be within valide range  	fixPoint.X = Math.Min (fixPoint.X' (int)(Image.Size.Width * _zoomScale));  	fixPoint.Y = Math.Min (fixPoint.Y' (int)(Image.Size.Height * _zoomScale));  	int shiftX = (int)(fixPoint.X * (zoomScale - _zoomScale) / zoomScale / _zoomScale);  	int shiftY = (int)(fixPoint.Y * (zoomScale - _zoomScale) / zoomScale / _zoomScale);  	_zoomScale = zoomScale;  	int h = (int)(horizontalScrollBar.Value + shiftX);  	int v = (int)(verticalScrollBar.Value + shiftY);  	SetScrollBarVisibilityAndMaxMin ();  	horizontalScrollBar.Value = Math.Min (Math.Max (horizontalScrollBar.Minimum' h)' horizontalScrollBar.Maximum);  	;  	verticalScrollBar.Value = Math.Min (Math.Max (verticalScrollBar.Minimum' v)' verticalScrollBar.Maximum);  	Invalidate ();  	if (OnZoomScaleChange != null)  		OnZoomScaleChange (this' new EventArgs ());  }  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,SetZoomScale,The following statement contains a magic number: if (Image != null && _zoomScale != zoomScale //the scale has been changed  && //and' the scale is not too small  !(zoomScale < _zoomScale && (Image.Size.Width * zoomScale < 2.0 || Image.Size.Height * zoomScale < 2.0)) && //and' the scale is not too big  !(zoomScale > _zoomScale && (GetViewSize ().Width < zoomScale * 2 || GetViewSize ().Height < zoomScale * 2))) {  	//constrain the coordinate to be within valide range  	fixPoint.X = Math.Min (fixPoint.X' (int)(Image.Size.Width * _zoomScale));  	fixPoint.Y = Math.Min (fixPoint.Y' (int)(Image.Size.Height * _zoomScale));  	int shiftX = (int)(fixPoint.X * (zoomScale - _zoomScale) / zoomScale / _zoomScale);  	int shiftY = (int)(fixPoint.Y * (zoomScale - _zoomScale) / zoomScale / _zoomScale);  	_zoomScale = zoomScale;  	int h = (int)(horizontalScrollBar.Value + shiftX);  	int v = (int)(verticalScrollBar.Value + shiftY);  	SetScrollBarVisibilityAndMaxMin ();  	horizontalScrollBar.Value = Math.Min (Math.Max (horizontalScrollBar.Minimum' h)' horizontalScrollBar.Maximum);  	;  	verticalScrollBar.Value = Math.Min (Math.Max (verticalScrollBar.Minimum' v)' verticalScrollBar.Maximum);  	Invalidate ();  	if (OnZoomScaleChange != null)  		OnZoomScaleChange (this' new EventArgs ());  }  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,SetZoomScale,The following statement contains a magic number: if (Image != null && _zoomScale != zoomScale //the scale has been changed  && //and' the scale is not too small  !(zoomScale < _zoomScale && (Image.Size.Width * zoomScale < 2.0 || Image.Size.Height * zoomScale < 2.0)) && //and' the scale is not too big  !(zoomScale > _zoomScale && (GetViewSize ().Width < zoomScale * 2 || GetViewSize ().Height < zoomScale * 2))) {  	//constrain the coordinate to be within valide range  	fixPoint.X = Math.Min (fixPoint.X' (int)(Image.Size.Width * _zoomScale));  	fixPoint.Y = Math.Min (fixPoint.Y' (int)(Image.Size.Height * _zoomScale));  	int shiftX = (int)(fixPoint.X * (zoomScale - _zoomScale) / zoomScale / _zoomScale);  	int shiftY = (int)(fixPoint.Y * (zoomScale - _zoomScale) / zoomScale / _zoomScale);  	_zoomScale = zoomScale;  	int h = (int)(horizontalScrollBar.Value + shiftX);  	int v = (int)(verticalScrollBar.Value + shiftY);  	SetScrollBarVisibilityAndMaxMin ();  	horizontalScrollBar.Value = Math.Min (Math.Max (horizontalScrollBar.Minimum' h)' horizontalScrollBar.Maximum);  	;  	verticalScrollBar.Value = Math.Min (Math.Max (verticalScrollBar.Minimum' v)' verticalScrollBar.Maximum);  	Invalidate ();  	if (OnZoomScaleChange != null)  		OnZoomScaleChange (this' new EventArgs ());  }  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,InitializeComponent,The following statement contains a magic number: this.horizontalScrollBar.Size = new System.Drawing.Size (80' 17);  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,InitializeComponent,The following statement contains a magic number: this.horizontalScrollBar.Size = new System.Drawing.Size (80' 17);  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,InitializeComponent,The following statement contains a magic number: this.horizontalScrollBar.TabIndex = 2;  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,InitializeComponent,The following statement contains a magic number: this.verticalScrollBar.Size = new System.Drawing.Size (17' 80);  
Magic Number,Emgu.CV.UI,PanAndZoomPictureBox,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\PanAndZoomPictureBox.cs,InitializeComponent,The following statement contains a magic number: this.verticalScrollBar.Size = new System.Drawing.Size (17' 80);  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,ParameterInputDialog,The following statement contains a magic number: Height = panelsHeight + 100;  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: panel.Height = 50;  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: panel.Width = 400;  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: paramNameLabel.Location = new Point (10' textBoxStart.Y);  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (param == null) {  	// a generic parameter  	GenericParameter p = defaultValue as GenericParameter;  	paramNameLabel.Text = "";  	String[] options = Array.ConvertAll<Type' String> (p.AvailableTypes' delegate (Type t) {  		return t.Name;  	});  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (options);  	combo.SelectedIndex = Array.FindIndex<String> (options' p.SelectedType.ToString ().Equals);  	panel.GetParamFunction = delegate () {  		return new GenericParameter (p.AvailableTypes [Array.FindIndex<String> (options' combo.Text.ToString ().Equals)]' p.AvailableTypes);  	};  }  else {  	Type paramType = param.ParameterType;  	paramNameLabel.Text = String.Format ("{0}:"' ParseParameterName (param));  	if (paramType.IsEnum) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (Enum.GetNames (paramType));  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate {  			return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  		};  	}  	else if (paramType == typeof(bool)) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (new String[] {  			"True"'  			"False"  		});  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate () {  			return combo.SelectedItem.ToString ().Equals ("True");  		};  	}  	else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  		//Create inpout box for the int paramater  		TextBox inputTextBox = new TextBox ();  		panel.Controls.Add (inputTextBox);  		inputTextBox.Location = textBoxStart;  		inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  		panel.GetParamFunction = delegate () {  			return Convert.ChangeType (inputTextBox.Text' paramType);  		};  	}  	else if (paramType == typeof(MCvScalar)) {  		TextBox[] inputBoxes = new TextBox[4];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		};  	}  	else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  		IColor t = Activator.CreateInstance (paramType) as IColor;  		//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  		TextBox[] inputBoxes = new TextBox[t.Dimension];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			IColor color = Activator.CreateInstance (paramType) as IColor;  			color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  			return color;  		};  	}  	else {  		throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  	}  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (param == null) {  	// a generic parameter  	GenericParameter p = defaultValue as GenericParameter;  	paramNameLabel.Text = "";  	String[] options = Array.ConvertAll<Type' String> (p.AvailableTypes' delegate (Type t) {  		return t.Name;  	});  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (options);  	combo.SelectedIndex = Array.FindIndex<String> (options' p.SelectedType.ToString ().Equals);  	panel.GetParamFunction = delegate () {  		return new GenericParameter (p.AvailableTypes [Array.FindIndex<String> (options' combo.Text.ToString ().Equals)]' p.AvailableTypes);  	};  }  else {  	Type paramType = param.ParameterType;  	paramNameLabel.Text = String.Format ("{0}:"' ParseParameterName (param));  	if (paramType.IsEnum) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (Enum.GetNames (paramType));  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate {  			return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  		};  	}  	else if (paramType == typeof(bool)) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (new String[] {  			"True"'  			"False"  		});  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate () {  			return combo.SelectedItem.ToString ().Equals ("True");  		};  	}  	else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  		//Create inpout box for the int paramater  		TextBox inputTextBox = new TextBox ();  		panel.Controls.Add (inputTextBox);  		inputTextBox.Location = textBoxStart;  		inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  		panel.GetParamFunction = delegate () {  			return Convert.ChangeType (inputTextBox.Text' paramType);  		};  	}  	else if (paramType == typeof(MCvScalar)) {  		TextBox[] inputBoxes = new TextBox[4];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		};  	}  	else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  		IColor t = Activator.CreateInstance (paramType) as IColor;  		//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  		TextBox[] inputBoxes = new TextBox[t.Dimension];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			IColor color = Activator.CreateInstance (paramType) as IColor;  			color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  			return color;  		};  	}  	else {  		throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  	}  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (param == null) {  	// a generic parameter  	GenericParameter p = defaultValue as GenericParameter;  	paramNameLabel.Text = "";  	String[] options = Array.ConvertAll<Type' String> (p.AvailableTypes' delegate (Type t) {  		return t.Name;  	});  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (options);  	combo.SelectedIndex = Array.FindIndex<String> (options' p.SelectedType.ToString ().Equals);  	panel.GetParamFunction = delegate () {  		return new GenericParameter (p.AvailableTypes [Array.FindIndex<String> (options' combo.Text.ToString ().Equals)]' p.AvailableTypes);  	};  }  else {  	Type paramType = param.ParameterType;  	paramNameLabel.Text = String.Format ("{0}:"' ParseParameterName (param));  	if (paramType.IsEnum) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (Enum.GetNames (paramType));  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate {  			return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  		};  	}  	else if (paramType == typeof(bool)) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (new String[] {  			"True"'  			"False"  		});  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate () {  			return combo.SelectedItem.ToString ().Equals ("True");  		};  	}  	else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  		//Create inpout box for the int paramater  		TextBox inputTextBox = new TextBox ();  		panel.Controls.Add (inputTextBox);  		inputTextBox.Location = textBoxStart;  		inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  		panel.GetParamFunction = delegate () {  			return Convert.ChangeType (inputTextBox.Text' paramType);  		};  	}  	else if (paramType == typeof(MCvScalar)) {  		TextBox[] inputBoxes = new TextBox[4];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		};  	}  	else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  		IColor t = Activator.CreateInstance (paramType) as IColor;  		//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  		TextBox[] inputBoxes = new TextBox[t.Dimension];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			IColor color = Activator.CreateInstance (paramType) as IColor;  			color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  			return color;  		};  	}  	else {  		throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  	}  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (param == null) {  	// a generic parameter  	GenericParameter p = defaultValue as GenericParameter;  	paramNameLabel.Text = "";  	String[] options = Array.ConvertAll<Type' String> (p.AvailableTypes' delegate (Type t) {  		return t.Name;  	});  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (options);  	combo.SelectedIndex = Array.FindIndex<String> (options' p.SelectedType.ToString ().Equals);  	panel.GetParamFunction = delegate () {  		return new GenericParameter (p.AvailableTypes [Array.FindIndex<String> (options' combo.Text.ToString ().Equals)]' p.AvailableTypes);  	};  }  else {  	Type paramType = param.ParameterType;  	paramNameLabel.Text = String.Format ("{0}:"' ParseParameterName (param));  	if (paramType.IsEnum) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (Enum.GetNames (paramType));  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate {  			return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  		};  	}  	else if (paramType == typeof(bool)) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (new String[] {  			"True"'  			"False"  		});  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate () {  			return combo.SelectedItem.ToString ().Equals ("True");  		};  	}  	else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  		//Create inpout box for the int paramater  		TextBox inputTextBox = new TextBox ();  		panel.Controls.Add (inputTextBox);  		inputTextBox.Location = textBoxStart;  		inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  		panel.GetParamFunction = delegate () {  			return Convert.ChangeType (inputTextBox.Text' paramType);  		};  	}  	else if (paramType == typeof(MCvScalar)) {  		TextBox[] inputBoxes = new TextBox[4];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		};  	}  	else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  		IColor t = Activator.CreateInstance (paramType) as IColor;  		//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  		TextBox[] inputBoxes = new TextBox[t.Dimension];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			IColor color = Activator.CreateInstance (paramType) as IColor;  			color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  			return color;  		};  	}  	else {  		throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  	}  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (param == null) {  	// a generic parameter  	GenericParameter p = defaultValue as GenericParameter;  	paramNameLabel.Text = "";  	String[] options = Array.ConvertAll<Type' String> (p.AvailableTypes' delegate (Type t) {  		return t.Name;  	});  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (options);  	combo.SelectedIndex = Array.FindIndex<String> (options' p.SelectedType.ToString ().Equals);  	panel.GetParamFunction = delegate () {  		return new GenericParameter (p.AvailableTypes [Array.FindIndex<String> (options' combo.Text.ToString ().Equals)]' p.AvailableTypes);  	};  }  else {  	Type paramType = param.ParameterType;  	paramNameLabel.Text = String.Format ("{0}:"' ParseParameterName (param));  	if (paramType.IsEnum) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (Enum.GetNames (paramType));  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate {  			return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  		};  	}  	else if (paramType == typeof(bool)) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (new String[] {  			"True"'  			"False"  		});  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate () {  			return combo.SelectedItem.ToString ().Equals ("True");  		};  	}  	else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  		//Create inpout box for the int paramater  		TextBox inputTextBox = new TextBox ();  		panel.Controls.Add (inputTextBox);  		inputTextBox.Location = textBoxStart;  		inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  		panel.GetParamFunction = delegate () {  			return Convert.ChangeType (inputTextBox.Text' paramType);  		};  	}  	else if (paramType == typeof(MCvScalar)) {  		TextBox[] inputBoxes = new TextBox[4];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		};  	}  	else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  		IColor t = Activator.CreateInstance (paramType) as IColor;  		//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  		TextBox[] inputBoxes = new TextBox[t.Dimension];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			IColor color = Activator.CreateInstance (paramType) as IColor;  			color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  			return color;  		};  	}  	else {  		throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  	}  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (param == null) {  	// a generic parameter  	GenericParameter p = defaultValue as GenericParameter;  	paramNameLabel.Text = "";  	String[] options = Array.ConvertAll<Type' String> (p.AvailableTypes' delegate (Type t) {  		return t.Name;  	});  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (options);  	combo.SelectedIndex = Array.FindIndex<String> (options' p.SelectedType.ToString ().Equals);  	panel.GetParamFunction = delegate () {  		return new GenericParameter (p.AvailableTypes [Array.FindIndex<String> (options' combo.Text.ToString ().Equals)]' p.AvailableTypes);  	};  }  else {  	Type paramType = param.ParameterType;  	paramNameLabel.Text = String.Format ("{0}:"' ParseParameterName (param));  	if (paramType.IsEnum) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (Enum.GetNames (paramType));  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate {  			return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  		};  	}  	else if (paramType == typeof(bool)) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (new String[] {  			"True"'  			"False"  		});  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate () {  			return combo.SelectedItem.ToString ().Equals ("True");  		};  	}  	else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  		//Create inpout box for the int paramater  		TextBox inputTextBox = new TextBox ();  		panel.Controls.Add (inputTextBox);  		inputTextBox.Location = textBoxStart;  		inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  		panel.GetParamFunction = delegate () {  			return Convert.ChangeType (inputTextBox.Text' paramType);  		};  	}  	else if (paramType == typeof(MCvScalar)) {  		TextBox[] inputBoxes = new TextBox[4];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		};  	}  	else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  		IColor t = Activator.CreateInstance (paramType) as IColor;  		//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  		TextBox[] inputBoxes = new TextBox[t.Dimension];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			IColor color = Activator.CreateInstance (paramType) as IColor;  			color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  			return color;  		};  	}  	else {  		throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  	}  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (param == null) {  	// a generic parameter  	GenericParameter p = defaultValue as GenericParameter;  	paramNameLabel.Text = "";  	String[] options = Array.ConvertAll<Type' String> (p.AvailableTypes' delegate (Type t) {  		return t.Name;  	});  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (options);  	combo.SelectedIndex = Array.FindIndex<String> (options' p.SelectedType.ToString ().Equals);  	panel.GetParamFunction = delegate () {  		return new GenericParameter (p.AvailableTypes [Array.FindIndex<String> (options' combo.Text.ToString ().Equals)]' p.AvailableTypes);  	};  }  else {  	Type paramType = param.ParameterType;  	paramNameLabel.Text = String.Format ("{0}:"' ParseParameterName (param));  	if (paramType.IsEnum) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (Enum.GetNames (paramType));  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate {  			return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  		};  	}  	else if (paramType == typeof(bool)) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (new String[] {  			"True"'  			"False"  		});  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate () {  			return combo.SelectedItem.ToString ().Equals ("True");  		};  	}  	else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  		//Create inpout box for the int paramater  		TextBox inputTextBox = new TextBox ();  		panel.Controls.Add (inputTextBox);  		inputTextBox.Location = textBoxStart;  		inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  		panel.GetParamFunction = delegate () {  			return Convert.ChangeType (inputTextBox.Text' paramType);  		};  	}  	else if (paramType == typeof(MCvScalar)) {  		TextBox[] inputBoxes = new TextBox[4];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		};  	}  	else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  		IColor t = Activator.CreateInstance (paramType) as IColor;  		//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  		TextBox[] inputBoxes = new TextBox[t.Dimension];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			IColor color = Activator.CreateInstance (paramType) as IColor;  			color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  			return color;  		};  	}  	else {  		throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  	}  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (param == null) {  	// a generic parameter  	GenericParameter p = defaultValue as GenericParameter;  	paramNameLabel.Text = "";  	String[] options = Array.ConvertAll<Type' String> (p.AvailableTypes' delegate (Type t) {  		return t.Name;  	});  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (options);  	combo.SelectedIndex = Array.FindIndex<String> (options' p.SelectedType.ToString ().Equals);  	panel.GetParamFunction = delegate () {  		return new GenericParameter (p.AvailableTypes [Array.FindIndex<String> (options' combo.Text.ToString ().Equals)]' p.AvailableTypes);  	};  }  else {  	Type paramType = param.ParameterType;  	paramNameLabel.Text = String.Format ("{0}:"' ParseParameterName (param));  	if (paramType.IsEnum) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (Enum.GetNames (paramType));  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate {  			return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  		};  	}  	else if (paramType == typeof(bool)) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (new String[] {  			"True"'  			"False"  		});  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate () {  			return combo.SelectedItem.ToString ().Equals ("True");  		};  	}  	else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  		//Create inpout box for the int paramater  		TextBox inputTextBox = new TextBox ();  		panel.Controls.Add (inputTextBox);  		inputTextBox.Location = textBoxStart;  		inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  		panel.GetParamFunction = delegate () {  			return Convert.ChangeType (inputTextBox.Text' paramType);  		};  	}  	else if (paramType == typeof(MCvScalar)) {  		TextBox[] inputBoxes = new TextBox[4];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		};  	}  	else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  		IColor t = Activator.CreateInstance (paramType) as IColor;  		//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  		TextBox[] inputBoxes = new TextBox[t.Dimension];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			IColor color = Activator.CreateInstance (paramType) as IColor;  			color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  			return color;  		};  	}  	else {  		throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  	}  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (param == null) {  	// a generic parameter  	GenericParameter p = defaultValue as GenericParameter;  	paramNameLabel.Text = "";  	String[] options = Array.ConvertAll<Type' String> (p.AvailableTypes' delegate (Type t) {  		return t.Name;  	});  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (options);  	combo.SelectedIndex = Array.FindIndex<String> (options' p.SelectedType.ToString ().Equals);  	panel.GetParamFunction = delegate () {  		return new GenericParameter (p.AvailableTypes [Array.FindIndex<String> (options' combo.Text.ToString ().Equals)]' p.AvailableTypes);  	};  }  else {  	Type paramType = param.ParameterType;  	paramNameLabel.Text = String.Format ("{0}:"' ParseParameterName (param));  	if (paramType.IsEnum) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (Enum.GetNames (paramType));  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate {  			return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  		};  	}  	else if (paramType == typeof(bool)) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (new String[] {  			"True"'  			"False"  		});  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate () {  			return combo.SelectedItem.ToString ().Equals ("True");  		};  	}  	else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  		//Create inpout box for the int paramater  		TextBox inputTextBox = new TextBox ();  		panel.Controls.Add (inputTextBox);  		inputTextBox.Location = textBoxStart;  		inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  		panel.GetParamFunction = delegate () {  			return Convert.ChangeType (inputTextBox.Text' paramType);  		};  	}  	else if (paramType == typeof(MCvScalar)) {  		TextBox[] inputBoxes = new TextBox[4];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		};  	}  	else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  		IColor t = Activator.CreateInstance (paramType) as IColor;  		//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  		TextBox[] inputBoxes = new TextBox[t.Dimension];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			IColor color = Activator.CreateInstance (paramType) as IColor;  			color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  			return color;  		};  	}  	else {  		throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  	}  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (param == null) {  	// a generic parameter  	GenericParameter p = defaultValue as GenericParameter;  	paramNameLabel.Text = "";  	String[] options = Array.ConvertAll<Type' String> (p.AvailableTypes' delegate (Type t) {  		return t.Name;  	});  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (options);  	combo.SelectedIndex = Array.FindIndex<String> (options' p.SelectedType.ToString ().Equals);  	panel.GetParamFunction = delegate () {  		return new GenericParameter (p.AvailableTypes [Array.FindIndex<String> (options' combo.Text.ToString ().Equals)]' p.AvailableTypes);  	};  }  else {  	Type paramType = param.ParameterType;  	paramNameLabel.Text = String.Format ("{0}:"' ParseParameterName (param));  	if (paramType.IsEnum) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (Enum.GetNames (paramType));  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate {  			return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  		};  	}  	else if (paramType == typeof(bool)) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (new String[] {  			"True"'  			"False"  		});  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate () {  			return combo.SelectedItem.ToString ().Equals ("True");  		};  	}  	else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  		//Create inpout box for the int paramater  		TextBox inputTextBox = new TextBox ();  		panel.Controls.Add (inputTextBox);  		inputTextBox.Location = textBoxStart;  		inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  		panel.GetParamFunction = delegate () {  			return Convert.ChangeType (inputTextBox.Text' paramType);  		};  	}  	else if (paramType == typeof(MCvScalar)) {  		TextBox[] inputBoxes = new TextBox[4];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		};  	}  	else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  		IColor t = Activator.CreateInstance (paramType) as IColor;  		//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  		TextBox[] inputBoxes = new TextBox[t.Dimension];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			IColor color = Activator.CreateInstance (paramType) as IColor;  			color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  			return color;  		};  	}  	else {  		throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  	}  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (param == null) {  	// a generic parameter  	GenericParameter p = defaultValue as GenericParameter;  	paramNameLabel.Text = "";  	String[] options = Array.ConvertAll<Type' String> (p.AvailableTypes' delegate (Type t) {  		return t.Name;  	});  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (options);  	combo.SelectedIndex = Array.FindIndex<String> (options' p.SelectedType.ToString ().Equals);  	panel.GetParamFunction = delegate () {  		return new GenericParameter (p.AvailableTypes [Array.FindIndex<String> (options' combo.Text.ToString ().Equals)]' p.AvailableTypes);  	};  }  else {  	Type paramType = param.ParameterType;  	paramNameLabel.Text = String.Format ("{0}:"' ParseParameterName (param));  	if (paramType.IsEnum) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (Enum.GetNames (paramType));  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate {  			return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  		};  	}  	else if (paramType == typeof(bool)) {  		ComboBox combo = new ComboBox ();  		panel.Controls.Add (combo);  		combo.Location = textBoxStart;  		combo.Items.AddRange (new String[] {  			"True"'  			"False"  		});  		combo.SelectedIndex = 0;  		panel.GetParamFunction = delegate () {  			return combo.SelectedItem.ToString ().Equals ("True");  		};  	}  	else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  		//Create inpout box for the int paramater  		TextBox inputTextBox = new TextBox ();  		panel.Controls.Add (inputTextBox);  		inputTextBox.Location = textBoxStart;  		inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  		panel.GetParamFunction = delegate () {  			return Convert.ChangeType (inputTextBox.Text' paramType);  		};  	}  	else if (paramType == typeof(MCvScalar)) {  		TextBox[] inputBoxes = new TextBox[4];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		};  	}  	else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  		IColor t = Activator.CreateInstance (paramType) as IColor;  		//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  		TextBox[] inputBoxes = new TextBox[t.Dimension];  		int boxWidth = 40;  		//Create input boxes for the scalar value  		for (int i = 0; i < inputBoxes.Length; i++) {  			inputBoxes [i] = new TextBox ();  			panel.Controls.Add (inputBoxes [i]);  			inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  			inputBoxes [i].Width = boxWidth;  			inputBoxes [i].Text = "0.0";  		}  		panel.GetParamFunction = delegate () {  			double[] values = new double[4];  			for (int i = 0; i < inputBoxes.Length; i++) {  				values [i] = Convert.ToDouble (inputBoxes [i].Text);  			}  			IColor color = Activator.CreateInstance (paramType) as IColor;  			color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  			return color;  		};  	}  	else {  		throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  	}  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.IsEnum) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (Enum.GetNames (paramType));  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate {  		return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  	};  }  else if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.IsEnum) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (Enum.GetNames (paramType));  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate {  		return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  	};  }  else if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.IsEnum) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (Enum.GetNames (paramType));  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate {  		return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  	};  }  else if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.IsEnum) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (Enum.GetNames (paramType));  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate {  		return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  	};  }  else if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.IsEnum) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (Enum.GetNames (paramType));  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate {  		return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  	};  }  else if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.IsEnum) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (Enum.GetNames (paramType));  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate {  		return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  	};  }  else if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.IsEnum) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (Enum.GetNames (paramType));  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate {  		return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  	};  }  else if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.IsEnum) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (Enum.GetNames (paramType));  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate {  		return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  	};  }  else if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.IsEnum) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (Enum.GetNames (paramType));  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate {  		return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  	};  }  else if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.IsEnum) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (Enum.GetNames (paramType));  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate {  		return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  	};  }  else if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.IsEnum) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (Enum.GetNames (paramType));  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate {  		return Enum.Parse (paramType' combo.SelectedItem.ToString ()' true);  	};  }  else if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(bool)) {  	ComboBox combo = new ComboBox ();  	panel.Controls.Add (combo);  	combo.Location = textBoxStart;  	combo.Items.AddRange (new String[] {  		"True"'  		"False"  	});  	combo.SelectedIndex = 0;  	panel.GetParamFunction = delegate () {  		return combo.SelectedItem.ToString ().Equals ("True");  	};  }  else if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(UInt64) || paramType == typeof(int) || paramType == typeof(double)) {  	//Create inpout box for the int paramater  	TextBox inputTextBox = new TextBox ();  	panel.Controls.Add (inputTextBox);  	inputTextBox.Location = textBoxStart;  	inputTextBox.Text = defaultValue == null ? "0" : defaultValue.ToString ();  	panel.GetParamFunction = delegate () {  		return Convert.ChangeType (inputTextBox.Text' paramType);  	};  }  else if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType == typeof(MCvScalar)) {  	TextBox[] inputBoxes = new TextBox[4];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	};  }  else if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: for (int i = 0; i < inputBoxes.Length; i++) {  	inputBoxes [i] = new TextBox ();  	panel.Controls.Add (inputBoxes [i]);  	inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  	inputBoxes [i].Width = boxWidth;  	inputBoxes [i].Text = "0.0";  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: panel.GetParamFunction = delegate () {  	double[] values = new double[4];  	for (int i = 0; i < inputBoxes.Length; i++) {  		values [i] = Convert.ToDouble (inputBoxes [i].Text);  	}  	return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  };  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: panel.GetParamFunction = delegate () {  	double[] values = new double[4];  	for (int i = 0; i < inputBoxes.Length; i++) {  		values [i] = Convert.ToDouble (inputBoxes [i].Text);  	}  	return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  };  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: panel.GetParamFunction = delegate () {  	double[] values = new double[4];  	for (int i = 0; i < inputBoxes.Length; i++) {  		values [i] = Convert.ToDouble (inputBoxes [i].Text);  	}  	return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  };  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: return new MCvScalar (values [0]' values [1]' values [2]' values [3]);  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: if (paramType.GetInterface ("IColor") == typeof(IColor)) {  	IColor t = Activator.CreateInstance (paramType) as IColor;  	//string[] channelNames = ReflectColorType.GetNamesOfChannels(t);  	TextBox[] inputBoxes = new TextBox[t.Dimension];  	int boxWidth = 40;  	//Create input boxes for the scalar value  	for (int i = 0; i < inputBoxes.Length; i++) {  		inputBoxes [i] = new TextBox ();  		panel.Controls.Add (inputBoxes [i]);  		inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  		inputBoxes [i].Width = boxWidth;  		inputBoxes [i].Text = "0.0";  	}  	panel.GetParamFunction = delegate () {  		double[] values = new double[4];  		for (int i = 0; i < inputBoxes.Length; i++) {  			values [i] = Convert.ToDouble (inputBoxes [i].Text);  		}  		IColor color = Activator.CreateInstance (paramType) as IColor;  		color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  		return color;  	};  }  else {  	throw new NotSupportedException (String.Format (Properties.StringTable.ParameterTypeIsNotSupported' paramType.Name));  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: for (int i = 0; i < inputBoxes.Length; i++) {  	inputBoxes [i] = new TextBox ();  	panel.Controls.Add (inputBoxes [i]);  	inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  	inputBoxes [i].Width = boxWidth;  	inputBoxes [i].Text = "0.0";  }  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: inputBoxes [i].Location = new Point (textBoxStart.X + i * (boxWidth + 5)' textBoxStart.Y);  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: panel.GetParamFunction = delegate () {  	double[] values = new double[4];  	for (int i = 0; i < inputBoxes.Length; i++) {  		values [i] = Convert.ToDouble (inputBoxes [i].Text);  	}  	IColor color = Activator.CreateInstance (paramType) as IColor;  	color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	return color;  };  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: panel.GetParamFunction = delegate () {  	double[] values = new double[4];  	for (int i = 0; i < inputBoxes.Length; i++) {  		values [i] = Convert.ToDouble (inputBoxes [i].Text);  	}  	IColor color = Activator.CreateInstance (paramType) as IColor;  	color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	return color;  };  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: panel.GetParamFunction = delegate () {  	double[] values = new double[4];  	for (int i = 0; i < inputBoxes.Length; i++) {  		values [i] = Convert.ToDouble (inputBoxes [i].Text);  	}  	IColor color = Activator.CreateInstance (paramType) as IColor;  	color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  	return color;  };  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  
Magic Number,Emgu.CV.UI,ParameterInputDialog,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\ParameterInputDialog.cs,CreatePanelForParameter,The following statement contains a magic number: color.MCvScalar = new MCvScalar (values [0]' values [1]' values [2]' values [3]);  
Missing Default,Emgu.CV.UI,Operation,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\Operation.cs,ToCode,The following switch statement is missing a default case: switch (language) {  case ProgrammingLanguage.CSharp:  	if (genericArguments.Length > 0)  		genericArgString = String.Format ("<{0}>"' genericArgString);  	res = String.Format ("{0}.{1}{2}({3})"' "{instance}"' Method.Name' genericArgString' String.Join ("' "' System.Array.ConvertAll<Object' String> (nonGenericParameters' delegate (Object p) {  		return ParameterToCode (p' language);  	})));  	break;  case ProgrammingLanguage.CPlusPlus:  	if (genericArguments.Length > 0)  		genericArgString = String.Format ("<{0}>"' genericArgString);  	res = String.Format ("{0}->{1}{2}({3})"' "{instance}"' Method.Name' genericArgString' String.Join ("' "' System.Array.ConvertAll<Object' String> (nonGenericParameters' delegate (Object p) {  		return ParameterToCode (p' language);  	})));  	break;  }  
Missing Default,Emgu.CV.UI,OperationsView,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\OperationsView.cs,ImageTypeToString,The following switch statement is missing a default case: switch (_language) {  case ProgrammingLanguage.CSharp:  	return "IImage";  case ProgrammingLanguage.CPlusPlus:  	return "IImage^";  }  
Missing Default,Emgu.CV.UI,OperationsView,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\OperationsView.cs,GetOperationCode,The following switch statement is missing a default case: switch (_language) {  case ProgrammingLanguage.CSharp:  	ops.Add (String.Format ("public static IImage Function({0} image{1}){{"' ImageTypeToString (imageType)' currentInstanceIndex));  	break;  case ProgrammingLanguage.CPlusPlus:  	ops.Add (String.Format ("public static IImage Function({0} image{1}){{"' ImageTypeToString (imageType)' currentInstanceIndex));  	break;  }  
Missing Default,Emgu.CV.UI,OperationsView,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.UI\OperationsView.cs,GetOperationCode,The following switch statement is missing a default case: switch (_language) {  case ProgrammingLanguage.CSharp:  case ProgrammingLanguage.CPlusPlus:  	ops.Add ("}");  	break;  }  
