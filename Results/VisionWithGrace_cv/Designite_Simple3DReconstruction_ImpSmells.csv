Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Simple3DReconstruction,Cyclomatic complexity of the method is 9
Long Statement,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,ConvertImage,The length of the statement  "	res.setImage (image.Width' image.Height' image.NumberOfChannels' Gl.GL_RGB' Gl.GL_RGB' Gl.GL_UNSIGNED_BYTE' ptr' Osg.Image.AllocationMode.USE_NEW_DELETE); " is 154.
Magic Number,Simlpe3DReconstruction,OsgControl,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\OsgControl.cs,ConvertMouse,The following statement contains a magic number: switch (button) {  case MouseButtons.Left:  	return 1;  case MouseButtons.Middle:  	return 2;  case MouseButtons.Right:  	return 3;  }  
Magic Number,Simlpe3DReconstruction,OsgControl,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\OsgControl.cs,ConvertMouse,The following statement contains a magic number: switch (button) {  case MouseButtons.Left:  	return 1;  case MouseButtons.Middle:  	return 2;  case MouseButtons.Right:  	return 3;  }  
Magic Number,Simlpe3DReconstruction,OsgControl,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\OsgControl.cs,ConvertMouse,The following statement contains a magic number: return 2;  
Magic Number,Simlpe3DReconstruction,OsgControl,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\OsgControl.cs,ConvertMouse,The following statement contains a magic number: return 3;  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Simple3DReconstruction,The following statement contains a magic number: for (int i = 0; i < _points.Length; i++) {  	if (Math.Abs (_points [i].z) >= 1000)  		_points [i].z = 0;  }  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Simple3DReconstruction,The following statement contains a magic number: if (Math.Abs (_points [i].z) >= 1000)  	_points [i].z = 0;  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (Image<Gray' Int16> leftDisparity = new Image<Gray' Int16> (size))  	using (Image<Gray' Int16> rightDisparity = new Image<Gray' Int16> (size))  		//using (StereoSGBM stereoSolver = new StereoSGBM(5' 64' 0' 0' 0' 0' 0' 0' 0' 0' false))  		using (StereoGC stereoSolver = new StereoGC (16' 2)) {  			stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  			//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  			leftDisparityMap = leftDisparity * (-16);  			//leftDisparityMap = leftDisparity.Clone();  			//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  			using (Matrix<double> q = new Matrix<double> (new double['] {  				{  					1.0'  					0.0'  					0.0'  					-size.Width / 2  				}'  				//shift the x origin to image center  				{  					0.0'  					1.0'  					0.0'  					-size.Height / 2  				}'  				//shift the y origin to image center  				{  					0.0'  					0.0'  					-16.0'  					0.0  				}'  				//Multiply the z value by -16'   				{  					0.0'  					0.0'  					0.0'  					1.0  				}  			}))  				points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  		}  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (Image<Gray' Int16> leftDisparity = new Image<Gray' Int16> (size))  	using (Image<Gray' Int16> rightDisparity = new Image<Gray' Int16> (size))  		//using (StereoSGBM stereoSolver = new StereoSGBM(5' 64' 0' 0' 0' 0' 0' 0' 0' 0' false))  		using (StereoGC stereoSolver = new StereoGC (16' 2)) {  			stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  			//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  			leftDisparityMap = leftDisparity * (-16);  			//leftDisparityMap = leftDisparity.Clone();  			//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  			using (Matrix<double> q = new Matrix<double> (new double['] {  				{  					1.0'  					0.0'  					0.0'  					-size.Width / 2  				}'  				//shift the x origin to image center  				{  					0.0'  					1.0'  					0.0'  					-size.Height / 2  				}'  				//shift the y origin to image center  				{  					0.0'  					0.0'  					-16.0'  					0.0  				}'  				//Multiply the z value by -16'   				{  					0.0'  					0.0'  					0.0'  					1.0  				}  			}))  				points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  		}  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (Image<Gray' Int16> leftDisparity = new Image<Gray' Int16> (size))  	using (Image<Gray' Int16> rightDisparity = new Image<Gray' Int16> (size))  		//using (StereoSGBM stereoSolver = new StereoSGBM(5' 64' 0' 0' 0' 0' 0' 0' 0' 0' false))  		using (StereoGC stereoSolver = new StereoGC (16' 2)) {  			stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  			//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  			leftDisparityMap = leftDisparity * (-16);  			//leftDisparityMap = leftDisparity.Clone();  			//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  			using (Matrix<double> q = new Matrix<double> (new double['] {  				{  					1.0'  					0.0'  					0.0'  					-size.Width / 2  				}'  				//shift the x origin to image center  				{  					0.0'  					1.0'  					0.0'  					-size.Height / 2  				}'  				//shift the y origin to image center  				{  					0.0'  					0.0'  					-16.0'  					0.0  				}'  				//Multiply the z value by -16'   				{  					0.0'  					0.0'  					0.0'  					1.0  				}  			}))  				points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  		}  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (Image<Gray' Int16> leftDisparity = new Image<Gray' Int16> (size))  	using (Image<Gray' Int16> rightDisparity = new Image<Gray' Int16> (size))  		//using (StereoSGBM stereoSolver = new StereoSGBM(5' 64' 0' 0' 0' 0' 0' 0' 0' 0' false))  		using (StereoGC stereoSolver = new StereoGC (16' 2)) {  			stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  			//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  			leftDisparityMap = leftDisparity * (-16);  			//leftDisparityMap = leftDisparity.Clone();  			//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  			using (Matrix<double> q = new Matrix<double> (new double['] {  				{  					1.0'  					0.0'  					0.0'  					-size.Width / 2  				}'  				//shift the x origin to image center  				{  					0.0'  					1.0'  					0.0'  					-size.Height / 2  				}'  				//shift the y origin to image center  				{  					0.0'  					0.0'  					-16.0'  					0.0  				}'  				//Multiply the z value by -16'   				{  					0.0'  					0.0'  					0.0'  					1.0  				}  			}))  				points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  		}  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (Image<Gray' Int16> leftDisparity = new Image<Gray' Int16> (size))  	using (Image<Gray' Int16> rightDisparity = new Image<Gray' Int16> (size))  		//using (StereoSGBM stereoSolver = new StereoSGBM(5' 64' 0' 0' 0' 0' 0' 0' 0' 0' false))  		using (StereoGC stereoSolver = new StereoGC (16' 2)) {  			stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  			//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  			leftDisparityMap = leftDisparity * (-16);  			//leftDisparityMap = leftDisparity.Clone();  			//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  			using (Matrix<double> q = new Matrix<double> (new double['] {  				{  					1.0'  					0.0'  					0.0'  					-size.Width / 2  				}'  				//shift the x origin to image center  				{  					0.0'  					1.0'  					0.0'  					-size.Height / 2  				}'  				//shift the y origin to image center  				{  					0.0'  					0.0'  					-16.0'  					0.0  				}'  				//Multiply the z value by -16'   				{  					0.0'  					0.0'  					0.0'  					1.0  				}  			}))  				points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  		}  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (Image<Gray' Int16> leftDisparity = new Image<Gray' Int16> (size))  	using (Image<Gray' Int16> rightDisparity = new Image<Gray' Int16> (size))  		//using (StereoSGBM stereoSolver = new StereoSGBM(5' 64' 0' 0' 0' 0' 0' 0' 0' 0' false))  		using (StereoGC stereoSolver = new StereoGC (16' 2)) {  			stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  			//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  			leftDisparityMap = leftDisparity * (-16);  			//leftDisparityMap = leftDisparity.Clone();  			//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  			using (Matrix<double> q = new Matrix<double> (new double['] {  				{  					1.0'  					0.0'  					0.0'  					-size.Width / 2  				}'  				//shift the x origin to image center  				{  					0.0'  					1.0'  					0.0'  					-size.Height / 2  				}'  				//shift the y origin to image center  				{  					0.0'  					0.0'  					-16.0'  					0.0  				}'  				//Multiply the z value by -16'   				{  					0.0'  					0.0'  					0.0'  					1.0  				}  			}))  				points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  		}  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (Image<Gray' Int16> rightDisparity = new Image<Gray' Int16> (size))  	//using (StereoSGBM stereoSolver = new StereoSGBM(5' 64' 0' 0' 0' 0' 0' 0' 0' 0' false))  	using (StereoGC stereoSolver = new StereoGC (16' 2)) {  		stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  		//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  		leftDisparityMap = leftDisparity * (-16);  		//leftDisparityMap = leftDisparity.Clone();  		//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  		using (Matrix<double> q = new Matrix<double> (new double['] {  			{  				1.0'  				0.0'  				0.0'  				-size.Width / 2  			}'  			//shift the x origin to image center  			{  				0.0'  				1.0'  				0.0'  				-size.Height / 2  			}'  			//shift the y origin to image center  			{  				0.0'  				0.0'  				-16.0'  				0.0  			}'  			//Multiply the z value by -16'   			{  				0.0'  				0.0'  				0.0'  				1.0  			}  		}))  			points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  	}  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (Image<Gray' Int16> rightDisparity = new Image<Gray' Int16> (size))  	//using (StereoSGBM stereoSolver = new StereoSGBM(5' 64' 0' 0' 0' 0' 0' 0' 0' 0' false))  	using (StereoGC stereoSolver = new StereoGC (16' 2)) {  		stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  		//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  		leftDisparityMap = leftDisparity * (-16);  		//leftDisparityMap = leftDisparity.Clone();  		//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  		using (Matrix<double> q = new Matrix<double> (new double['] {  			{  				1.0'  				0.0'  				0.0'  				-size.Width / 2  			}'  			//shift the x origin to image center  			{  				0.0'  				1.0'  				0.0'  				-size.Height / 2  			}'  			//shift the y origin to image center  			{  				0.0'  				0.0'  				-16.0'  				0.0  			}'  			//Multiply the z value by -16'   			{  				0.0'  				0.0'  				0.0'  				1.0  			}  		}))  			points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  	}  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (Image<Gray' Int16> rightDisparity = new Image<Gray' Int16> (size))  	//using (StereoSGBM stereoSolver = new StereoSGBM(5' 64' 0' 0' 0' 0' 0' 0' 0' 0' false))  	using (StereoGC stereoSolver = new StereoGC (16' 2)) {  		stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  		//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  		leftDisparityMap = leftDisparity * (-16);  		//leftDisparityMap = leftDisparity.Clone();  		//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  		using (Matrix<double> q = new Matrix<double> (new double['] {  			{  				1.0'  				0.0'  				0.0'  				-size.Width / 2  			}'  			//shift the x origin to image center  			{  				0.0'  				1.0'  				0.0'  				-size.Height / 2  			}'  			//shift the y origin to image center  			{  				0.0'  				0.0'  				-16.0'  				0.0  			}'  			//Multiply the z value by -16'   			{  				0.0'  				0.0'  				0.0'  				1.0  			}  		}))  			points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  	}  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (Image<Gray' Int16> rightDisparity = new Image<Gray' Int16> (size))  	//using (StereoSGBM stereoSolver = new StereoSGBM(5' 64' 0' 0' 0' 0' 0' 0' 0' 0' false))  	using (StereoGC stereoSolver = new StereoGC (16' 2)) {  		stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  		//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  		leftDisparityMap = leftDisparity * (-16);  		//leftDisparityMap = leftDisparity.Clone();  		//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  		using (Matrix<double> q = new Matrix<double> (new double['] {  			{  				1.0'  				0.0'  				0.0'  				-size.Width / 2  			}'  			//shift the x origin to image center  			{  				0.0'  				1.0'  				0.0'  				-size.Height / 2  			}'  			//shift the y origin to image center  			{  				0.0'  				0.0'  				-16.0'  				0.0  			}'  			//Multiply the z value by -16'   			{  				0.0'  				0.0'  				0.0'  				1.0  			}  		}))  			points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  	}  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (Image<Gray' Int16> rightDisparity = new Image<Gray' Int16> (size))  	//using (StereoSGBM stereoSolver = new StereoSGBM(5' 64' 0' 0' 0' 0' 0' 0' 0' 0' false))  	using (StereoGC stereoSolver = new StereoGC (16' 2)) {  		stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  		//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  		leftDisparityMap = leftDisparity * (-16);  		//leftDisparityMap = leftDisparity.Clone();  		//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  		using (Matrix<double> q = new Matrix<double> (new double['] {  			{  				1.0'  				0.0'  				0.0'  				-size.Width / 2  			}'  			//shift the x origin to image center  			{  				0.0'  				1.0'  				0.0'  				-size.Height / 2  			}'  			//shift the y origin to image center  			{  				0.0'  				0.0'  				-16.0'  				0.0  			}'  			//Multiply the z value by -16'   			{  				0.0'  				0.0'  				0.0'  				1.0  			}  		}))  			points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  	}  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (Image<Gray' Int16> rightDisparity = new Image<Gray' Int16> (size))  	//using (StereoSGBM stereoSolver = new StereoSGBM(5' 64' 0' 0' 0' 0' 0' 0' 0' 0' false))  	using (StereoGC stereoSolver = new StereoGC (16' 2)) {  		stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  		//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  		leftDisparityMap = leftDisparity * (-16);  		//leftDisparityMap = leftDisparity.Clone();  		//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  		using (Matrix<double> q = new Matrix<double> (new double['] {  			{  				1.0'  				0.0'  				0.0'  				-size.Width / 2  			}'  			//shift the x origin to image center  			{  				0.0'  				1.0'  				0.0'  				-size.Height / 2  			}'  			//shift the y origin to image center  			{  				0.0'  				0.0'  				-16.0'  				0.0  			}'  			//Multiply the z value by -16'   			{  				0.0'  				0.0'  				0.0'  				1.0  			}  		}))  			points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  	}  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (StereoGC stereoSolver = new StereoGC (16' 2)) {  	stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  	//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  	leftDisparityMap = leftDisparity * (-16);  	//leftDisparityMap = leftDisparity.Clone();  	//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  	using (Matrix<double> q = new Matrix<double> (new double['] {  		{  			1.0'  			0.0'  			0.0'  			-size.Width / 2  		}'  		//shift the x origin to image center  		{  			0.0'  			1.0'  			0.0'  			-size.Height / 2  		}'  		//shift the y origin to image center  		{  			0.0'  			0.0'  			-16.0'  			0.0  		}'  		//Multiply the z value by -16'   		{  			0.0'  			0.0'  			0.0'  			1.0  		}  	}))  		points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  }  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (StereoGC stereoSolver = new StereoGC (16' 2)) {  	stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  	//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  	leftDisparityMap = leftDisparity * (-16);  	//leftDisparityMap = leftDisparity.Clone();  	//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  	using (Matrix<double> q = new Matrix<double> (new double['] {  		{  			1.0'  			0.0'  			0.0'  			-size.Width / 2  		}'  		//shift the x origin to image center  		{  			0.0'  			1.0'  			0.0'  			-size.Height / 2  		}'  		//shift the y origin to image center  		{  			0.0'  			0.0'  			-16.0'  			0.0  		}'  		//Multiply the z value by -16'   		{  			0.0'  			0.0'  			0.0'  			1.0  		}  	}))  		points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  }  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (StereoGC stereoSolver = new StereoGC (16' 2)) {  	stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  	//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  	leftDisparityMap = leftDisparity * (-16);  	//leftDisparityMap = leftDisparity.Clone();  	//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  	using (Matrix<double> q = new Matrix<double> (new double['] {  		{  			1.0'  			0.0'  			0.0'  			-size.Width / 2  		}'  		//shift the x origin to image center  		{  			0.0'  			1.0'  			0.0'  			-size.Height / 2  		}'  		//shift the y origin to image center  		{  			0.0'  			0.0'  			-16.0'  			0.0  		}'  		//Multiply the z value by -16'   		{  			0.0'  			0.0'  			0.0'  			1.0  		}  	}))  		points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  }  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (StereoGC stereoSolver = new StereoGC (16' 2)) {  	stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  	//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  	leftDisparityMap = leftDisparity * (-16);  	//leftDisparityMap = leftDisparity.Clone();  	//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  	using (Matrix<double> q = new Matrix<double> (new double['] {  		{  			1.0'  			0.0'  			0.0'  			-size.Width / 2  		}'  		//shift the x origin to image center  		{  			0.0'  			1.0'  			0.0'  			-size.Height / 2  		}'  		//shift the y origin to image center  		{  			0.0'  			0.0'  			-16.0'  			0.0  		}'  		//Multiply the z value by -16'   		{  			0.0'  			0.0'  			0.0'  			1.0  		}  	}))  		points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  }  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (StereoGC stereoSolver = new StereoGC (16' 2)) {  	stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  	//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  	leftDisparityMap = leftDisparity * (-16);  	//leftDisparityMap = leftDisparity.Clone();  	//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  	using (Matrix<double> q = new Matrix<double> (new double['] {  		{  			1.0'  			0.0'  			0.0'  			-size.Width / 2  		}'  		//shift the x origin to image center  		{  			0.0'  			1.0'  			0.0'  			-size.Height / 2  		}'  		//shift the y origin to image center  		{  			0.0'  			0.0'  			-16.0'  			0.0  		}'  		//Multiply the z value by -16'   		{  			0.0'  			0.0'  			0.0'  			1.0  		}  	}))  		points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  }  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (StereoGC stereoSolver = new StereoGC (16' 2)) {  	stereoSolver.FindStereoCorrespondence (left' right' leftDisparity' rightDisparity);  	//stereoSolver.FindStereoCorrespondence(left' right' leftDisparity);  	leftDisparityMap = leftDisparity * (-16);  	//leftDisparityMap = leftDisparity.Clone();  	//Construct a simple Q matrix' if you have a matrix from cvStereoRectify' you should use that instead  	using (Matrix<double> q = new Matrix<double> (new double['] {  		{  			1.0'  			0.0'  			0.0'  			-size.Width / 2  		}'  		//shift the x origin to image center  		{  			0.0'  			1.0'  			0.0'  			-size.Height / 2  		}'  		//shift the y origin to image center  		{  			0.0'  			0.0'  			-16.0'  			0.0  		}'  		//Multiply the z value by -16'   		{  			0.0'  			0.0'  			0.0'  			1.0  		}  	}))  		points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  }  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: leftDisparityMap = leftDisparity * (-16);  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (Matrix<double> q = new Matrix<double> (new double['] {  	{  		1.0'  		0.0'  		0.0'  		-size.Width / 2  	}'  	//shift the x origin to image center  	{  		0.0'  		1.0'  		0.0'  		-size.Height / 2  	}'  	//shift the y origin to image center  	{  		0.0'  		0.0'  		-16.0'  		0.0  	}'  	//Multiply the z value by -16'   	{  		0.0'  		0.0'  		0.0'  		1.0  	}  }))  	points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (Matrix<double> q = new Matrix<double> (new double['] {  	{  		1.0'  		0.0'  		0.0'  		-size.Width / 2  	}'  	//shift the x origin to image center  	{  		0.0'  		1.0'  		0.0'  		-size.Height / 2  	}'  	//shift the y origin to image center  	{  		0.0'  		0.0'  		-16.0'  		0.0  	}'  	//Multiply the z value by -16'   	{  		0.0'  		0.0'  		0.0'  		1.0  	}  }))  	points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  
Magic Number,Simlpe3DReconstruction,Simple3DReconstruction,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\Simple3DReconstruction.cs,Computer3DPointsFromImages,The following statement contains a magic number: using (Matrix<double> q = new Matrix<double> (new double['] {  	{  		1.0'  		0.0'  		0.0'  		-size.Width / 2  	}'  	//shift the x origin to image center  	{  		0.0'  		1.0'  		0.0'  		-size.Height / 2  	}'  	//shift the y origin to image center  	{  		0.0'  		0.0'  		-16.0'  		0.0  	}'  	//Multiply the z value by -16'   	{  		0.0'  		0.0'  		0.0'  		1.0  	}  }))  	points = PointCollection.ReprojectImageTo3D (leftDisparity' q);  
Missing Default,Simlpe3DReconstruction,OsgControl,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\Simple3DReconstruction\OsgControl.cs,ConvertMouse,The following switch statement is missing a default case: switch (button) {  case MouseButtons.Left:  	return 1;  case MouseButtons.Middle:  	return 2;  case MouseButtons.Right:  	return 3;  }  
