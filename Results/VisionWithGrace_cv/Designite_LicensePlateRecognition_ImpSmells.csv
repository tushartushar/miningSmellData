Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,Cyclomatic complexity of the method is 10
Long Parameter List,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The method has 7 parameters.
Long Identifier,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The length of the parameter filteredLicensePlateImagesList is 30.
Long Identifier,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The length of the parameter detectedLicensePlateRegionList is 30.
Long Identifier,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The length of the parameter filteredLicensePlateImagesList is 30.
Long Identifier,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The length of the parameter detectedLicensePlateRegionList is 30.
Long Identifier,LicensePlateRecognition,LicensePlateRecognitionForm,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateRecognitionForm.cs,ProcessImage,The length of the parameter filteredLicensePlateImagesList is 30.
Long Statement,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The length of the statement  "				Contour<Point> contours = canny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_TREE' stor); " is 150.
Long Statement,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The length of the statement  "				FindLicensePlate (contours' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses); " is 139.
Long Statement,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The length of the statement  "				FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses); " is 145.
Long Statement,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The length of the statement  "					FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses); " is 136.
Long Statement,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The length of the statement  "				for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) { " is 211.
Long Statement,LicensePlateRecognition,LicensePlateRecognitionForm,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateRecognitionForm.cs,ProcessImage,The length of the statement  "	List<List<Word>> words = _licensePlateDetector.DetectLicensePlate (image' licensePlateImagesList' filteredLicensePlateImagesList' licenseBoxList); " is 146.
Long Statement,LicensePlateRecognition,LicensePlateRecognitionForm,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateRecognitionForm.cs,ProcessImage,The length of the statement  "	processTimeLabel.Text = String.Format ("License Plate Recognition time: {0} milli-seconds"' watch.Elapsed.TotalMilliseconds); " is 125.
Long Statement,LicensePlateRecognition,LicensePlateRecognitionForm,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateRecognitionForm.cs,ProcessImage,The length of the statement  "		AddLabelAndImage (ref startPoint' String.Format ("License: {0}"' String.Join (" "' words [i].ConvertAll<String> (delegate (Word w) { " is 132.
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The following statement contains a magic number: using (Image<Gray' byte> gray = img.Convert<Gray' Byte> ())  	using (Image<Gray' Byte> canny = new Image<Gray' byte> (gray.Size))  		using (MemStorage stor = new MemStorage ()) {  			CvInvoke.cvCanny (gray' canny' 100' 50' 3);  			Contour<Point> contours = canny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_TREE' stor);  			FindLicensePlate (contours' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The following statement contains a magic number: using (Image<Gray' byte> gray = img.Convert<Gray' Byte> ())  	using (Image<Gray' Byte> canny = new Image<Gray' byte> (gray.Size))  		using (MemStorage stor = new MemStorage ()) {  			CvInvoke.cvCanny (gray' canny' 100' 50' 3);  			Contour<Point> contours = canny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_TREE' stor);  			FindLicensePlate (contours' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The following statement contains a magic number: using (Image<Gray' byte> gray = img.Convert<Gray' Byte> ())  	using (Image<Gray' Byte> canny = new Image<Gray' byte> (gray.Size))  		using (MemStorage stor = new MemStorage ()) {  			CvInvoke.cvCanny (gray' canny' 100' 50' 3);  			Contour<Point> contours = canny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_TREE' stor);  			FindLicensePlate (contours' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The following statement contains a magic number: using (Image<Gray' Byte> canny = new Image<Gray' byte> (gray.Size))  	using (MemStorage stor = new MemStorage ()) {  		CvInvoke.cvCanny (gray' canny' 100' 50' 3);  		Contour<Point> contours = canny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_TREE' stor);  		FindLicensePlate (contours' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  	}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The following statement contains a magic number: using (Image<Gray' Byte> canny = new Image<Gray' byte> (gray.Size))  	using (MemStorage stor = new MemStorage ()) {  		CvInvoke.cvCanny (gray' canny' 100' 50' 3);  		Contour<Point> contours = canny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_TREE' stor);  		FindLicensePlate (contours' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  	}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The following statement contains a magic number: using (Image<Gray' Byte> canny = new Image<Gray' byte> (gray.Size))  	using (MemStorage stor = new MemStorage ()) {  		CvInvoke.cvCanny (gray' canny' 100' 50' 3);  		Contour<Point> contours = canny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_TREE' stor);  		FindLicensePlate (contours' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  	}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The following statement contains a magic number: using (MemStorage stor = new MemStorage ()) {  	CvInvoke.cvCanny (gray' canny' 100' 50' 3);  	Contour<Point> contours = canny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_TREE' stor);  	FindLicensePlate (contours' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The following statement contains a magic number: using (MemStorage stor = new MemStorage ()) {  	CvInvoke.cvCanny (gray' canny' 100' 50' 3);  	Contour<Point> contours = canny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_TREE' stor);  	FindLicensePlate (contours' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The following statement contains a magic number: using (MemStorage stor = new MemStorage ()) {  	CvInvoke.cvCanny (gray' canny' 100' 50' 3);  	Contour<Point> contours = canny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_TREE' stor);  	FindLicensePlate (contours' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The following statement contains a magic number: CvInvoke.cvCanny (gray' canny' 100' 50' 3);  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The following statement contains a magic number: CvInvoke.cvCanny (gray' canny' 100' 50' 3);  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,DetectLicensePlate,The following statement contains a magic number: CvInvoke.cvCanny (gray' canny' 100' 50' 3);  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: for (; contours != null; contours = contours.HNext) {  	int numberOfChildren = GetNumberOfChildren (contours);  	//if it does not contains any children (charactor)' it is not a license plate region  	if (numberOfChildren == 0)  		continue;  	if (contours.Area > 400) {  		if (numberOfChildren < 3) {  			//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  			//However we should search the children of this contour to see if any of them is a license plate  			FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		MCvBox2D box = contours.GetMinAreaRect ();  		if (box.angle < -45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle += 90.0f;  		}  		else if (box.angle > 45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle -= 90.0f;  		}  		double whRatio = (double)box.size.Width / box.size.Height;  		if (!(3.0 < whRatio && whRatio < 10.0)) {  			//if the width height ratio is not in the specific range'it is not a license plate   			//However we should search the children of this contour to see if any of them is a license plate  			Contour<Point> child = contours.VNext;  			if (child != null)  				FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		box.size.Width -= 2;  		box.size.Height -= 2;  		Image<Gray' Byte> plate = gray.Copy (box);  		Image<Gray' Byte> filteredPlate = FilterPlate (plate);  		List<Word> words;  		using (Bitmap bmp = filteredPlate.Bitmap)  			words = _ocr.DoOCR (bmp' filteredPlate.ROI);  		licenses.Add (words);  		licensePlateImagesList.Add (plate);  		filteredLicensePlateImagesList.Add (filteredPlate);  		detectedLicensePlateRegionList.Add (box);  	}  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: for (; contours != null; contours = contours.HNext) {  	int numberOfChildren = GetNumberOfChildren (contours);  	//if it does not contains any children (charactor)' it is not a license plate region  	if (numberOfChildren == 0)  		continue;  	if (contours.Area > 400) {  		if (numberOfChildren < 3) {  			//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  			//However we should search the children of this contour to see if any of them is a license plate  			FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		MCvBox2D box = contours.GetMinAreaRect ();  		if (box.angle < -45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle += 90.0f;  		}  		else if (box.angle > 45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle -= 90.0f;  		}  		double whRatio = (double)box.size.Width / box.size.Height;  		if (!(3.0 < whRatio && whRatio < 10.0)) {  			//if the width height ratio is not in the specific range'it is not a license plate   			//However we should search the children of this contour to see if any of them is a license plate  			Contour<Point> child = contours.VNext;  			if (child != null)  				FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		box.size.Width -= 2;  		box.size.Height -= 2;  		Image<Gray' Byte> plate = gray.Copy (box);  		Image<Gray' Byte> filteredPlate = FilterPlate (plate);  		List<Word> words;  		using (Bitmap bmp = filteredPlate.Bitmap)  			words = _ocr.DoOCR (bmp' filteredPlate.ROI);  		licenses.Add (words);  		licensePlateImagesList.Add (plate);  		filteredLicensePlateImagesList.Add (filteredPlate);  		detectedLicensePlateRegionList.Add (box);  	}  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: for (; contours != null; contours = contours.HNext) {  	int numberOfChildren = GetNumberOfChildren (contours);  	//if it does not contains any children (charactor)' it is not a license plate region  	if (numberOfChildren == 0)  		continue;  	if (contours.Area > 400) {  		if (numberOfChildren < 3) {  			//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  			//However we should search the children of this contour to see if any of them is a license plate  			FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		MCvBox2D box = contours.GetMinAreaRect ();  		if (box.angle < -45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle += 90.0f;  		}  		else if (box.angle > 45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle -= 90.0f;  		}  		double whRatio = (double)box.size.Width / box.size.Height;  		if (!(3.0 < whRatio && whRatio < 10.0)) {  			//if the width height ratio is not in the specific range'it is not a license plate   			//However we should search the children of this contour to see if any of them is a license plate  			Contour<Point> child = contours.VNext;  			if (child != null)  				FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		box.size.Width -= 2;  		box.size.Height -= 2;  		Image<Gray' Byte> plate = gray.Copy (box);  		Image<Gray' Byte> filteredPlate = FilterPlate (plate);  		List<Word> words;  		using (Bitmap bmp = filteredPlate.Bitmap)  			words = _ocr.DoOCR (bmp' filteredPlate.ROI);  		licenses.Add (words);  		licensePlateImagesList.Add (plate);  		filteredLicensePlateImagesList.Add (filteredPlate);  		detectedLicensePlateRegionList.Add (box);  	}  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: for (; contours != null; contours = contours.HNext) {  	int numberOfChildren = GetNumberOfChildren (contours);  	//if it does not contains any children (charactor)' it is not a license plate region  	if (numberOfChildren == 0)  		continue;  	if (contours.Area > 400) {  		if (numberOfChildren < 3) {  			//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  			//However we should search the children of this contour to see if any of them is a license plate  			FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		MCvBox2D box = contours.GetMinAreaRect ();  		if (box.angle < -45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle += 90.0f;  		}  		else if (box.angle > 45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle -= 90.0f;  		}  		double whRatio = (double)box.size.Width / box.size.Height;  		if (!(3.0 < whRatio && whRatio < 10.0)) {  			//if the width height ratio is not in the specific range'it is not a license plate   			//However we should search the children of this contour to see if any of them is a license plate  			Contour<Point> child = contours.VNext;  			if (child != null)  				FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		box.size.Width -= 2;  		box.size.Height -= 2;  		Image<Gray' Byte> plate = gray.Copy (box);  		Image<Gray' Byte> filteredPlate = FilterPlate (plate);  		List<Word> words;  		using (Bitmap bmp = filteredPlate.Bitmap)  			words = _ocr.DoOCR (bmp' filteredPlate.ROI);  		licenses.Add (words);  		licensePlateImagesList.Add (plate);  		filteredLicensePlateImagesList.Add (filteredPlate);  		detectedLicensePlateRegionList.Add (box);  	}  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: for (; contours != null; contours = contours.HNext) {  	int numberOfChildren = GetNumberOfChildren (contours);  	//if it does not contains any children (charactor)' it is not a license plate region  	if (numberOfChildren == 0)  		continue;  	if (contours.Area > 400) {  		if (numberOfChildren < 3) {  			//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  			//However we should search the children of this contour to see if any of them is a license plate  			FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		MCvBox2D box = contours.GetMinAreaRect ();  		if (box.angle < -45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle += 90.0f;  		}  		else if (box.angle > 45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle -= 90.0f;  		}  		double whRatio = (double)box.size.Width / box.size.Height;  		if (!(3.0 < whRatio && whRatio < 10.0)) {  			//if the width height ratio is not in the specific range'it is not a license plate   			//However we should search the children of this contour to see if any of them is a license plate  			Contour<Point> child = contours.VNext;  			if (child != null)  				FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		box.size.Width -= 2;  		box.size.Height -= 2;  		Image<Gray' Byte> plate = gray.Copy (box);  		Image<Gray' Byte> filteredPlate = FilterPlate (plate);  		List<Word> words;  		using (Bitmap bmp = filteredPlate.Bitmap)  			words = _ocr.DoOCR (bmp' filteredPlate.ROI);  		licenses.Add (words);  		licensePlateImagesList.Add (plate);  		filteredLicensePlateImagesList.Add (filteredPlate);  		detectedLicensePlateRegionList.Add (box);  	}  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: for (; contours != null; contours = contours.HNext) {  	int numberOfChildren = GetNumberOfChildren (contours);  	//if it does not contains any children (charactor)' it is not a license plate region  	if (numberOfChildren == 0)  		continue;  	if (contours.Area > 400) {  		if (numberOfChildren < 3) {  			//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  			//However we should search the children of this contour to see if any of them is a license plate  			FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		MCvBox2D box = contours.GetMinAreaRect ();  		if (box.angle < -45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle += 90.0f;  		}  		else if (box.angle > 45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle -= 90.0f;  		}  		double whRatio = (double)box.size.Width / box.size.Height;  		if (!(3.0 < whRatio && whRatio < 10.0)) {  			//if the width height ratio is not in the specific range'it is not a license plate   			//However we should search the children of this contour to see if any of them is a license plate  			Contour<Point> child = contours.VNext;  			if (child != null)  				FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		box.size.Width -= 2;  		box.size.Height -= 2;  		Image<Gray' Byte> plate = gray.Copy (box);  		Image<Gray' Byte> filteredPlate = FilterPlate (plate);  		List<Word> words;  		using (Bitmap bmp = filteredPlate.Bitmap)  			words = _ocr.DoOCR (bmp' filteredPlate.ROI);  		licenses.Add (words);  		licensePlateImagesList.Add (plate);  		filteredLicensePlateImagesList.Add (filteredPlate);  		detectedLicensePlateRegionList.Add (box);  	}  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: for (; contours != null; contours = contours.HNext) {  	int numberOfChildren = GetNumberOfChildren (contours);  	//if it does not contains any children (charactor)' it is not a license plate region  	if (numberOfChildren == 0)  		continue;  	if (contours.Area > 400) {  		if (numberOfChildren < 3) {  			//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  			//However we should search the children of this contour to see if any of them is a license plate  			FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		MCvBox2D box = contours.GetMinAreaRect ();  		if (box.angle < -45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle += 90.0f;  		}  		else if (box.angle > 45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle -= 90.0f;  		}  		double whRatio = (double)box.size.Width / box.size.Height;  		if (!(3.0 < whRatio && whRatio < 10.0)) {  			//if the width height ratio is not in the specific range'it is not a license plate   			//However we should search the children of this contour to see if any of them is a license plate  			Contour<Point> child = contours.VNext;  			if (child != null)  				FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		box.size.Width -= 2;  		box.size.Height -= 2;  		Image<Gray' Byte> plate = gray.Copy (box);  		Image<Gray' Byte> filteredPlate = FilterPlate (plate);  		List<Word> words;  		using (Bitmap bmp = filteredPlate.Bitmap)  			words = _ocr.DoOCR (bmp' filteredPlate.ROI);  		licenses.Add (words);  		licensePlateImagesList.Add (plate);  		filteredLicensePlateImagesList.Add (filteredPlate);  		detectedLicensePlateRegionList.Add (box);  	}  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: for (; contours != null; contours = contours.HNext) {  	int numberOfChildren = GetNumberOfChildren (contours);  	//if it does not contains any children (charactor)' it is not a license plate region  	if (numberOfChildren == 0)  		continue;  	if (contours.Area > 400) {  		if (numberOfChildren < 3) {  			//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  			//However we should search the children of this contour to see if any of them is a license plate  			FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		MCvBox2D box = contours.GetMinAreaRect ();  		if (box.angle < -45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle += 90.0f;  		}  		else if (box.angle > 45.0) {  			float tmp = box.size.Width;  			box.size.Width = box.size.Height;  			box.size.Height = tmp;  			box.angle -= 90.0f;  		}  		double whRatio = (double)box.size.Width / box.size.Height;  		if (!(3.0 < whRatio && whRatio < 10.0)) {  			//if the width height ratio is not in the specific range'it is not a license plate   			//However we should search the children of this contour to see if any of them is a license plate  			Contour<Point> child = contours.VNext;  			if (child != null)  				FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  			continue;  		}  		box.size.Width -= 2;  		box.size.Height -= 2;  		Image<Gray' Byte> plate = gray.Copy (box);  		Image<Gray' Byte> filteredPlate = FilterPlate (plate);  		List<Word> words;  		using (Bitmap bmp = filteredPlate.Bitmap)  			words = _ocr.DoOCR (bmp' filteredPlate.ROI);  		licenses.Add (words);  		licensePlateImagesList.Add (plate);  		filteredLicensePlateImagesList.Add (filteredPlate);  		detectedLicensePlateRegionList.Add (box);  	}  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: if (contours.Area > 400) {  	if (numberOfChildren < 3) {  		//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  		//However we should search the children of this contour to see if any of them is a license plate  		FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	MCvBox2D box = contours.GetMinAreaRect ();  	if (box.angle < -45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle += 90.0f;  	}  	else if (box.angle > 45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle -= 90.0f;  	}  	double whRatio = (double)box.size.Width / box.size.Height;  	if (!(3.0 < whRatio && whRatio < 10.0)) {  		//if the width height ratio is not in the specific range'it is not a license plate   		//However we should search the children of this contour to see if any of them is a license plate  		Contour<Point> child = contours.VNext;  		if (child != null)  			FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	box.size.Width -= 2;  	box.size.Height -= 2;  	Image<Gray' Byte> plate = gray.Copy (box);  	Image<Gray' Byte> filteredPlate = FilterPlate (plate);  	List<Word> words;  	using (Bitmap bmp = filteredPlate.Bitmap)  		words = _ocr.DoOCR (bmp' filteredPlate.ROI);  	licenses.Add (words);  	licensePlateImagesList.Add (plate);  	filteredLicensePlateImagesList.Add (filteredPlate);  	detectedLicensePlateRegionList.Add (box);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: if (contours.Area > 400) {  	if (numberOfChildren < 3) {  		//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  		//However we should search the children of this contour to see if any of them is a license plate  		FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	MCvBox2D box = contours.GetMinAreaRect ();  	if (box.angle < -45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle += 90.0f;  	}  	else if (box.angle > 45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle -= 90.0f;  	}  	double whRatio = (double)box.size.Width / box.size.Height;  	if (!(3.0 < whRatio && whRatio < 10.0)) {  		//if the width height ratio is not in the specific range'it is not a license plate   		//However we should search the children of this contour to see if any of them is a license plate  		Contour<Point> child = contours.VNext;  		if (child != null)  			FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	box.size.Width -= 2;  	box.size.Height -= 2;  	Image<Gray' Byte> plate = gray.Copy (box);  	Image<Gray' Byte> filteredPlate = FilterPlate (plate);  	List<Word> words;  	using (Bitmap bmp = filteredPlate.Bitmap)  		words = _ocr.DoOCR (bmp' filteredPlate.ROI);  	licenses.Add (words);  	licensePlateImagesList.Add (plate);  	filteredLicensePlateImagesList.Add (filteredPlate);  	detectedLicensePlateRegionList.Add (box);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: if (contours.Area > 400) {  	if (numberOfChildren < 3) {  		//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  		//However we should search the children of this contour to see if any of them is a license plate  		FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	MCvBox2D box = contours.GetMinAreaRect ();  	if (box.angle < -45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle += 90.0f;  	}  	else if (box.angle > 45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle -= 90.0f;  	}  	double whRatio = (double)box.size.Width / box.size.Height;  	if (!(3.0 < whRatio && whRatio < 10.0)) {  		//if the width height ratio is not in the specific range'it is not a license plate   		//However we should search the children of this contour to see if any of them is a license plate  		Contour<Point> child = contours.VNext;  		if (child != null)  			FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	box.size.Width -= 2;  	box.size.Height -= 2;  	Image<Gray' Byte> plate = gray.Copy (box);  	Image<Gray' Byte> filteredPlate = FilterPlate (plate);  	List<Word> words;  	using (Bitmap bmp = filteredPlate.Bitmap)  		words = _ocr.DoOCR (bmp' filteredPlate.ROI);  	licenses.Add (words);  	licensePlateImagesList.Add (plate);  	filteredLicensePlateImagesList.Add (filteredPlate);  	detectedLicensePlateRegionList.Add (box);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: if (contours.Area > 400) {  	if (numberOfChildren < 3) {  		//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  		//However we should search the children of this contour to see if any of them is a license plate  		FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	MCvBox2D box = contours.GetMinAreaRect ();  	if (box.angle < -45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle += 90.0f;  	}  	else if (box.angle > 45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle -= 90.0f;  	}  	double whRatio = (double)box.size.Width / box.size.Height;  	if (!(3.0 < whRatio && whRatio < 10.0)) {  		//if the width height ratio is not in the specific range'it is not a license plate   		//However we should search the children of this contour to see if any of them is a license plate  		Contour<Point> child = contours.VNext;  		if (child != null)  			FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	box.size.Width -= 2;  	box.size.Height -= 2;  	Image<Gray' Byte> plate = gray.Copy (box);  	Image<Gray' Byte> filteredPlate = FilterPlate (plate);  	List<Word> words;  	using (Bitmap bmp = filteredPlate.Bitmap)  		words = _ocr.DoOCR (bmp' filteredPlate.ROI);  	licenses.Add (words);  	licensePlateImagesList.Add (plate);  	filteredLicensePlateImagesList.Add (filteredPlate);  	detectedLicensePlateRegionList.Add (box);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: if (contours.Area > 400) {  	if (numberOfChildren < 3) {  		//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  		//However we should search the children of this contour to see if any of them is a license plate  		FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	MCvBox2D box = contours.GetMinAreaRect ();  	if (box.angle < -45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle += 90.0f;  	}  	else if (box.angle > 45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle -= 90.0f;  	}  	double whRatio = (double)box.size.Width / box.size.Height;  	if (!(3.0 < whRatio && whRatio < 10.0)) {  		//if the width height ratio is not in the specific range'it is not a license plate   		//However we should search the children of this contour to see if any of them is a license plate  		Contour<Point> child = contours.VNext;  		if (child != null)  			FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	box.size.Width -= 2;  	box.size.Height -= 2;  	Image<Gray' Byte> plate = gray.Copy (box);  	Image<Gray' Byte> filteredPlate = FilterPlate (plate);  	List<Word> words;  	using (Bitmap bmp = filteredPlate.Bitmap)  		words = _ocr.DoOCR (bmp' filteredPlate.ROI);  	licenses.Add (words);  	licensePlateImagesList.Add (plate);  	filteredLicensePlateImagesList.Add (filteredPlate);  	detectedLicensePlateRegionList.Add (box);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: if (contours.Area > 400) {  	if (numberOfChildren < 3) {  		//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  		//However we should search the children of this contour to see if any of them is a license plate  		FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	MCvBox2D box = contours.GetMinAreaRect ();  	if (box.angle < -45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle += 90.0f;  	}  	else if (box.angle > 45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle -= 90.0f;  	}  	double whRatio = (double)box.size.Width / box.size.Height;  	if (!(3.0 < whRatio && whRatio < 10.0)) {  		//if the width height ratio is not in the specific range'it is not a license plate   		//However we should search the children of this contour to see if any of them is a license plate  		Contour<Point> child = contours.VNext;  		if (child != null)  			FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	box.size.Width -= 2;  	box.size.Height -= 2;  	Image<Gray' Byte> plate = gray.Copy (box);  	Image<Gray' Byte> filteredPlate = FilterPlate (plate);  	List<Word> words;  	using (Bitmap bmp = filteredPlate.Bitmap)  		words = _ocr.DoOCR (bmp' filteredPlate.ROI);  	licenses.Add (words);  	licensePlateImagesList.Add (plate);  	filteredLicensePlateImagesList.Add (filteredPlate);  	detectedLicensePlateRegionList.Add (box);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: if (contours.Area > 400) {  	if (numberOfChildren < 3) {  		//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  		//However we should search the children of this contour to see if any of them is a license plate  		FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	MCvBox2D box = contours.GetMinAreaRect ();  	if (box.angle < -45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle += 90.0f;  	}  	else if (box.angle > 45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle -= 90.0f;  	}  	double whRatio = (double)box.size.Width / box.size.Height;  	if (!(3.0 < whRatio && whRatio < 10.0)) {  		//if the width height ratio is not in the specific range'it is not a license plate   		//However we should search the children of this contour to see if any of them is a license plate  		Contour<Point> child = contours.VNext;  		if (child != null)  			FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	box.size.Width -= 2;  	box.size.Height -= 2;  	Image<Gray' Byte> plate = gray.Copy (box);  	Image<Gray' Byte> filteredPlate = FilterPlate (plate);  	List<Word> words;  	using (Bitmap bmp = filteredPlate.Bitmap)  		words = _ocr.DoOCR (bmp' filteredPlate.ROI);  	licenses.Add (words);  	licensePlateImagesList.Add (plate);  	filteredLicensePlateImagesList.Add (filteredPlate);  	detectedLicensePlateRegionList.Add (box);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: if (contours.Area > 400) {  	if (numberOfChildren < 3) {  		//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  		//However we should search the children of this contour to see if any of them is a license plate  		FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	MCvBox2D box = contours.GetMinAreaRect ();  	if (box.angle < -45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle += 90.0f;  	}  	else if (box.angle > 45.0) {  		float tmp = box.size.Width;  		box.size.Width = box.size.Height;  		box.size.Height = tmp;  		box.angle -= 90.0f;  	}  	double whRatio = (double)box.size.Width / box.size.Height;  	if (!(3.0 < whRatio && whRatio < 10.0)) {  		//if the width height ratio is not in the specific range'it is not a license plate   		//However we should search the children of this contour to see if any of them is a license plate  		Contour<Point> child = contours.VNext;  		if (child != null)  			FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  		continue;  	}  	box.size.Width -= 2;  	box.size.Height -= 2;  	Image<Gray' Byte> plate = gray.Copy (box);  	Image<Gray' Byte> filteredPlate = FilterPlate (plate);  	List<Word> words;  	using (Bitmap bmp = filteredPlate.Bitmap)  		words = _ocr.DoOCR (bmp' filteredPlate.ROI);  	licenses.Add (words);  	licensePlateImagesList.Add (plate);  	filteredLicensePlateImagesList.Add (filteredPlate);  	detectedLicensePlateRegionList.Add (box);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: if (numberOfChildren < 3) {  	//If the contour has less than 3 children' it is not a license plate (assuming license plate has at least 3 charactor)  	//However we should search the children of this contour to see if any of them is a license plate  	FindLicensePlate (contours.VNext' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  	continue;  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: if (box.angle < -45.0) {  	float tmp = box.size.Width;  	box.size.Width = box.size.Height;  	box.size.Height = tmp;  	box.angle += 90.0f;  }  else if (box.angle > 45.0) {  	float tmp = box.size.Width;  	box.size.Width = box.size.Height;  	box.size.Height = tmp;  	box.angle -= 90.0f;  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: if (box.angle < -45.0) {  	float tmp = box.size.Width;  	box.size.Width = box.size.Height;  	box.size.Height = tmp;  	box.angle += 90.0f;  }  else if (box.angle > 45.0) {  	float tmp = box.size.Width;  	box.size.Width = box.size.Height;  	box.size.Height = tmp;  	box.angle -= 90.0f;  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: if (box.angle > 45.0) {  	float tmp = box.size.Width;  	box.size.Width = box.size.Height;  	box.size.Height = tmp;  	box.angle -= 90.0f;  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: if (!(3.0 < whRatio && whRatio < 10.0)) {  	//if the width height ratio is not in the specific range'it is not a license plate   	//However we should search the children of this contour to see if any of them is a license plate  	Contour<Point> child = contours.VNext;  	if (child != null)  		FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  	continue;  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: if (!(3.0 < whRatio && whRatio < 10.0)) {  	//if the width height ratio is not in the specific range'it is not a license plate   	//However we should search the children of this contour to see if any of them is a license plate  	Contour<Point> child = contours.VNext;  	if (child != null)  		FindLicensePlate (child' gray' canny' licensePlateImagesList' filteredLicensePlateImagesList' detectedLicensePlateRegionList' licenses);  	continue;  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: box.size.Width -= 2;  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FindLicensePlate,The following statement contains a magic number: box.size.Height -= 2;  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: using (Image<Gray' Byte> plateMask = new Image<Gray' byte> (plate.Size))  	using (Image<Gray' Byte> plateCanny = plate.Canny (new Gray (100)' new Gray (50)))  		using (MemStorage stor = new MemStorage ()) {  			plateMask.SetValue (255.0);  			for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) {  				Rectangle rect = contours.BoundingRectangle;  				if (rect.Height > (plate.Height >> 1)) {  					rect.X -= 1;  					rect.Y -= 1;  					rect.Width += 2;  					rect.Height += 2;  					rect.Intersect (plate.ROI);  					plateMask.Draw (rect' new Gray (0.0)' -1);  				}  			}  			thresh.SetValue (0' plateMask);  		}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: using (Image<Gray' Byte> plateMask = new Image<Gray' byte> (plate.Size))  	using (Image<Gray' Byte> plateCanny = plate.Canny (new Gray (100)' new Gray (50)))  		using (MemStorage stor = new MemStorage ()) {  			plateMask.SetValue (255.0);  			for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) {  				Rectangle rect = contours.BoundingRectangle;  				if (rect.Height > (plate.Height >> 1)) {  					rect.X -= 1;  					rect.Y -= 1;  					rect.Width += 2;  					rect.Height += 2;  					rect.Intersect (plate.ROI);  					plateMask.Draw (rect' new Gray (0.0)' -1);  				}  			}  			thresh.SetValue (0' plateMask);  		}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: using (Image<Gray' Byte> plateMask = new Image<Gray' byte> (plate.Size))  	using (Image<Gray' Byte> plateCanny = plate.Canny (new Gray (100)' new Gray (50)))  		using (MemStorage stor = new MemStorage ()) {  			plateMask.SetValue (255.0);  			for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) {  				Rectangle rect = contours.BoundingRectangle;  				if (rect.Height > (plate.Height >> 1)) {  					rect.X -= 1;  					rect.Y -= 1;  					rect.Width += 2;  					rect.Height += 2;  					rect.Intersect (plate.ROI);  					plateMask.Draw (rect' new Gray (0.0)' -1);  				}  			}  			thresh.SetValue (0' plateMask);  		}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: using (Image<Gray' Byte> plateMask = new Image<Gray' byte> (plate.Size))  	using (Image<Gray' Byte> plateCanny = plate.Canny (new Gray (100)' new Gray (50)))  		using (MemStorage stor = new MemStorage ()) {  			plateMask.SetValue (255.0);  			for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) {  				Rectangle rect = contours.BoundingRectangle;  				if (rect.Height > (plate.Height >> 1)) {  					rect.X -= 1;  					rect.Y -= 1;  					rect.Width += 2;  					rect.Height += 2;  					rect.Intersect (plate.ROI);  					plateMask.Draw (rect' new Gray (0.0)' -1);  				}  			}  			thresh.SetValue (0' plateMask);  		}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: using (Image<Gray' Byte> plateMask = new Image<Gray' byte> (plate.Size))  	using (Image<Gray' Byte> plateCanny = plate.Canny (new Gray (100)' new Gray (50)))  		using (MemStorage stor = new MemStorage ()) {  			plateMask.SetValue (255.0);  			for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) {  				Rectangle rect = contours.BoundingRectangle;  				if (rect.Height > (plate.Height >> 1)) {  					rect.X -= 1;  					rect.Y -= 1;  					rect.Width += 2;  					rect.Height += 2;  					rect.Intersect (plate.ROI);  					plateMask.Draw (rect' new Gray (0.0)' -1);  				}  			}  			thresh.SetValue (0' plateMask);  		}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: using (Image<Gray' Byte> plateCanny = plate.Canny (new Gray (100)' new Gray (50)))  	using (MemStorage stor = new MemStorage ()) {  		plateMask.SetValue (255.0);  		for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) {  			Rectangle rect = contours.BoundingRectangle;  			if (rect.Height > (plate.Height >> 1)) {  				rect.X -= 1;  				rect.Y -= 1;  				rect.Width += 2;  				rect.Height += 2;  				rect.Intersect (plate.ROI);  				plateMask.Draw (rect' new Gray (0.0)' -1);  			}  		}  		thresh.SetValue (0' plateMask);  	}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: using (Image<Gray' Byte> plateCanny = plate.Canny (new Gray (100)' new Gray (50)))  	using (MemStorage stor = new MemStorage ()) {  		plateMask.SetValue (255.0);  		for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) {  			Rectangle rect = contours.BoundingRectangle;  			if (rect.Height > (plate.Height >> 1)) {  				rect.X -= 1;  				rect.Y -= 1;  				rect.Width += 2;  				rect.Height += 2;  				rect.Intersect (plate.ROI);  				plateMask.Draw (rect' new Gray (0.0)' -1);  			}  		}  		thresh.SetValue (0' plateMask);  	}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: using (Image<Gray' Byte> plateCanny = plate.Canny (new Gray (100)' new Gray (50)))  	using (MemStorage stor = new MemStorage ()) {  		plateMask.SetValue (255.0);  		for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) {  			Rectangle rect = contours.BoundingRectangle;  			if (rect.Height > (plate.Height >> 1)) {  				rect.X -= 1;  				rect.Y -= 1;  				rect.Width += 2;  				rect.Height += 2;  				rect.Intersect (plate.ROI);  				plateMask.Draw (rect' new Gray (0.0)' -1);  			}  		}  		thresh.SetValue (0' plateMask);  	}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: using (Image<Gray' Byte> plateCanny = plate.Canny (new Gray (100)' new Gray (50)))  	using (MemStorage stor = new MemStorage ()) {  		plateMask.SetValue (255.0);  		for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) {  			Rectangle rect = contours.BoundingRectangle;  			if (rect.Height > (plate.Height >> 1)) {  				rect.X -= 1;  				rect.Y -= 1;  				rect.Width += 2;  				rect.Height += 2;  				rect.Intersect (plate.ROI);  				plateMask.Draw (rect' new Gray (0.0)' -1);  			}  		}  		thresh.SetValue (0' plateMask);  	}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: using (Image<Gray' Byte> plateCanny = plate.Canny (new Gray (100)' new Gray (50)))  	using (MemStorage stor = new MemStorage ()) {  		plateMask.SetValue (255.0);  		for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) {  			Rectangle rect = contours.BoundingRectangle;  			if (rect.Height > (plate.Height >> 1)) {  				rect.X -= 1;  				rect.Y -= 1;  				rect.Width += 2;  				rect.Height += 2;  				rect.Intersect (plate.ROI);  				plateMask.Draw (rect' new Gray (0.0)' -1);  			}  		}  		thresh.SetValue (0' plateMask);  	}  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: using (MemStorage stor = new MemStorage ()) {  	plateMask.SetValue (255.0);  	for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) {  		Rectangle rect = contours.BoundingRectangle;  		if (rect.Height > (plate.Height >> 1)) {  			rect.X -= 1;  			rect.Y -= 1;  			rect.Width += 2;  			rect.Height += 2;  			rect.Intersect (plate.ROI);  			plateMask.Draw (rect' new Gray (0.0)' -1);  		}  	}  	thresh.SetValue (0' plateMask);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: using (MemStorage stor = new MemStorage ()) {  	plateMask.SetValue (255.0);  	for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) {  		Rectangle rect = contours.BoundingRectangle;  		if (rect.Height > (plate.Height >> 1)) {  			rect.X -= 1;  			rect.Y -= 1;  			rect.Width += 2;  			rect.Height += 2;  			rect.Intersect (plate.ROI);  			plateMask.Draw (rect' new Gray (0.0)' -1);  		}  	}  	thresh.SetValue (0' plateMask);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: using (MemStorage stor = new MemStorage ()) {  	plateMask.SetValue (255.0);  	for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) {  		Rectangle rect = contours.BoundingRectangle;  		if (rect.Height > (plate.Height >> 1)) {  			rect.X -= 1;  			rect.Y -= 1;  			rect.Width += 2;  			rect.Height += 2;  			rect.Intersect (plate.ROI);  			plateMask.Draw (rect' new Gray (0.0)' -1);  		}  	}  	thresh.SetValue (0' plateMask);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: plateMask.SetValue (255.0);  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) {  	Rectangle rect = contours.BoundingRectangle;  	if (rect.Height > (plate.Height >> 1)) {  		rect.X -= 1;  		rect.Y -= 1;  		rect.Width += 2;  		rect.Height += 2;  		rect.Intersect (plate.ROI);  		plateMask.Draw (rect' new Gray (0.0)' -1);  	}  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: for (Contour<Point> contours = plateCanny.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_EXTERNAL' stor); contours != null; contours = contours.HNext) {  	Rectangle rect = contours.BoundingRectangle;  	if (rect.Height > (plate.Height >> 1)) {  		rect.X -= 1;  		rect.Y -= 1;  		rect.Width += 2;  		rect.Height += 2;  		rect.Intersect (plate.ROI);  		plateMask.Draw (rect' new Gray (0.0)' -1);  	}  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: if (rect.Height > (plate.Height >> 1)) {  	rect.X -= 1;  	rect.Y -= 1;  	rect.Width += 2;  	rect.Height += 2;  	rect.Intersect (plate.ROI);  	plateMask.Draw (rect' new Gray (0.0)' -1);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: if (rect.Height > (plate.Height >> 1)) {  	rect.X -= 1;  	rect.Y -= 1;  	rect.Width += 2;  	rect.Height += 2;  	rect.Intersect (plate.ROI);  	plateMask.Draw (rect' new Gray (0.0)' -1);  }  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: rect.Width += 2;  
Magic Number,LicensePlateRecognition,LicensePlateDetector,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateDetector.cs,FilterPlate,The following statement contains a magic number: rect.Height += 2;  
Magic Number,LicensePlateRecognition,LicensePlateRecognitionForm,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateRecognitionForm.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < words.Count; i++) {  	AddLabelAndImage (ref startPoint' String.Format ("License: {0}"' String.Join (" "' words [i].ConvertAll<String> (delegate (Word w) {  		return w.Text;  	}).ToArray ()))' licensePlateImagesList [i].ConcateVertical (filteredLicensePlateImagesList [i]));  	image.Draw (licenseBoxList [i]' new Bgr (Color.Red)' 2);  }  
Magic Number,LicensePlateRecognition,LicensePlateRecognitionForm,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateRecognitionForm.cs,ProcessImage,The following statement contains a magic number: image.Draw (licenseBoxList [i]' new Bgr (Color.Red)' 2);  
Magic Number,LicensePlateRecognition,LicensePlateRecognitionForm,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateRecognitionForm.cs,AddLabelAndImage,The following statement contains a magic number: label.Width = 100;  
Magic Number,LicensePlateRecognition,LicensePlateRecognitionForm,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateRecognitionForm.cs,AddLabelAndImage,The following statement contains a magic number: label.Height = 30;  
Magic Number,LicensePlateRecognition,LicensePlateRecognitionForm,C:\repos\VisionWithGrace_cv\libemgucv-2.2.0.1010-win64\Emgu.CV.Example\LicensePlateRecognition\LicensePlateRecognitionForm.cs,AddLabelAndImage,The following statement contains a magic number: startPoint.Y += box.Height + 10;  
