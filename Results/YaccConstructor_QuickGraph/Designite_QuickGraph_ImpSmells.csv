Implementation smell,Namespace,Class,File,Method,Description
Long Method,QuickGraph.Algorithms,EulerianTrailAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\EulerianTrailAlgorithm.cs,AddTemporaryEdges,The method has 65 lines of code.
Long Method,QuickGraph.Algorithms,EulerianTrailAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\EulerianTrailAlgorithm.cs,Trails,The method has 62 lines of code.
Long Method,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,DoStep,The method has 67 lines of code.
Long Method,QuickGraph.Algorithms.Search,BestFirstFrontierSearchAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\Search\BestFirstFrontierSearchAlgorithm.cs,InternalCompute,The method has 72 lines of code.
Long Method,QuickGraph.Collections,FibonacciHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\FibonacciHeap.cs,ChangeKeyInternal,The method has 62 lines of code.
Complex Method,QuickGraph,AdjacencyGraph,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\AdjacencyGraph.cs,RemoveVertex,Cyclomatic complexity of the method is 9
Complex Method,QuickGraph,EqualityExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\EqualityExtensions.cs,Equals1,Cyclomatic complexity of the method is 7
Complex Method,QuickGraph,EqualityExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\EqualityExtensions.cs,Equals1,Cyclomatic complexity of the method is 7
Complex Method,QuickGraph,EqualityExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\EqualityExtensions.cs,Equals1,Cyclomatic complexity of the method is 8
Complex Method,QuickGraph,BidirectionalGraph,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\BidirectionalGraph.cs,RemoveVertex,Cyclomatic complexity of the method is 7
Complex Method,QuickGraph.Algorithms,AlgorithmExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AlgorithmExtensions.cs,GetVertexIdentity,Cyclomatic complexity of the method is 14
Complex Method,QuickGraph.Algorithms,LengauerTarjanDominatorAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\LengauerTarjanDominatorAlgorithm.cs,InternalCompute,Cyclomatic complexity of the method is 11
Complex Method,QuickGraph.Algorithms,EulerianTrailAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\EulerianTrailAlgorithm.cs,AddTemporaryEdges,Cyclomatic complexity of the method is 13
Complex Method,QuickGraph.Algorithms,EulerianTrailAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\EulerianTrailAlgorithm.cs,Trails,Cyclomatic complexity of the method is 15
Complex Method,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,DoStep,Cyclomatic complexity of the method is 21
Complex Method,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,ConvertPath,Cyclomatic complexity of the method is 7
Complex Method,QuickGraph.Algorithms.MaximumFlow,EdmondsKarpMaximumFlowAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumFlow\EdmondsKarpMaximumFlowAlgorithm.cs,InternalCompute,Cyclomatic complexity of the method is 12
Complex Method,QuickGraph.Algorithms.MaximumFlow,GraphBalancerAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumFlow\GraphBalancingAlgorithm.cs,Balance,Cyclomatic complexity of the method is 9
Complex Method,QuickGraph.Algorithms.MaximumFlow,ReversedEdgeAugmentorAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumFlow\ReverseEdgeAugmentorAlgorithm.cs,AddReversedEdges,Cyclomatic complexity of the method is 10
Complex Method,QuickGraph.Algorithms.MinimumSpanningTree,KruskalMinimumSpanningTreeAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MinimumSpanningTree\KruskalMinimumSpanningTreeAlgorithm.cs,InternalCompute,Cyclomatic complexity of the method is 7
Complex Method,QuickGraph.Algorithms.MinimumSpanningTree,PrimMinimumSpanningTreeAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MinimumSpanningTree\PrimMinimumSpanningTreeAlgorithm.cs,InternalCompute,Cyclomatic complexity of the method is 13
Complex Method,QuickGraph.Algorithms.ShortestPath.Yen,YenShortestPathsAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ShortestPath\Yen\YenShortestPathsAlgorithm.cs,Execute,Cyclomatic complexity of the method is 7
Complex Method,QuickGraph.Algorithms.TSP,Task,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\TSP\Task.cs,reduce,Cyclomatic complexity of the method is 8
Complex Method,QuickGraph.Algorithms.GraphColoring.VertexColoring,VertexColoringAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\VertexColoringProblem\VertexColoringAlgorithm.cs,Compute,Cyclomatic complexity of the method is 11
Complex Method,QuickGraph.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithm.cs,InternalCompute,Cyclomatic complexity of the method is 8
Complex Method,QuickGraph.Algorithms.Search,BestFirstFrontierSearchAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\Search\BestFirstFrontierSearchAlgorithm.cs,InternalCompute,Cyclomatic complexity of the method is 15
Complex Method,QuickGraph.Algorithms.Search,UndirectedDepthFirstSearchAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\Search\UndirectedDepthFirstSearchAlgorithm.cs,Visit,Cyclomatic complexity of the method is 18
Complex Method,QuickGraph.Algorithms.Search,DepthFirstSearchAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\Search\DepthFirstSearchAlgorithm.cs,Visit,Cyclomatic complexity of the method is 20
Complex Method,QuickGraph.Algorithms.Exploration,CloneableVertexGraphExplorerAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\Exploration\CloneableVertexGraphExplorerAlgorithm.cs,InternalCompute,Cyclomatic complexity of the method is 7
Complex Method,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithm.cs,InternalCompute,Cyclomatic complexity of the method is 10
Complex Method,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithm.cs,Attempt,Cyclomatic complexity of the method is 11
Complex Method,QuickGraph.Algorithms.ShortestPath,BellmanFordShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ShortestPath\BellmanFordShortestPathAlgorithm.cs,InternalCompute,Cyclomatic complexity of the method is 8
Complex Method,QuickGraph.Algorithms.ShortestPath,FloydWarshallAllShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ShortestPath\FloydWarshallAllShortestPathAlgorithm.cs,InternalCompute,Cyclomatic complexity of the method is 15
Complex Method,QuickGraph.Algorithms.TopologicalSort,UndirectedFirstTopologicalSortAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\TopologicalSort\UndirectedFirstTopologicalSortAlgorithm.cs,InternalCompute,Cyclomatic complexity of the method is 7
Complex Method,QuickGraph.Collections,FibonacciHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\FibonacciHeap.cs,ChangeKeyInternal,Cyclomatic complexity of the method is 12
Complex Method,QuickGraph.Collections,SoftHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\SoftHeap.cs,Shift,Cyclomatic complexity of the method is 9
Complex Method,QuickGraph.Collections,SoftHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\SoftHeap.cs,DeleteMin,Cyclomatic complexity of the method is 8
Complex Method,QuickGraph.Serialization,SerializationExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\SerializationExtensions.cs,DeserializeFromXml,Cyclomatic complexity of the method is 10
Long Parameter List,QuickGraph,AdjacencyGraph,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\AdjacencyGraph.cs,AdjacencyGraph,The method has 4 parameters.
Long Parameter List,QuickGraph,AdjacencyGraph,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\AdjacencyGraph.cs,AdjacencyGraph,The method has 4 parameters.
Long Parameter List,QuickGraph,DotParserAdapter,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\DotParserAdapter.cs,LoadDot,The method has 4 parameters.
Long Parameter List,QuickGraph,EquatableTermEdge,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\EquatableTermEdge.cs,EquatableTermEdge,The method has 4 parameters.
Long Parameter List,QuickGraph,TermEdge,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\TermEdge.cs,TermEdge,The method has 4 parameters.
Long Parameter List,QuickGraph,EquateGraphs,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\EquateGraphs.cs,Equate,The method has 4 parameters.
Long Parameter List,QuickGraph,HashCodeHelper,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\HashCodeHelper.cs,Combine,The method has 4 parameters.
Long Parameter List,QuickGraph,BidirectionalGraph,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\BidirectionalGraph.cs,BidirectionalGraph,The method has 5 parameters.
Long Parameter List,QuickGraph,UndirectedGraph,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\UndirectedGraph.cs,UndirectedGraph,The method has 5 parameters.
Long Parameter List,QuickGraph.Algorithms,AlgorithmExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AlgorithmExtensions.cs,ShortestPathsAStar,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms,AlgorithmExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AlgorithmExtensions.cs,RankedShortestPathHoffmanPavley,The method has 5 parameters.
Long Parameter List,QuickGraph.Algorithms,AlgorithmExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AlgorithmExtensions.cs,Clone,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms,AlgorithmExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AlgorithmExtensions.cs,MaximumFlowEdmondsKarp,The method has 6 parameters.
Long Parameter List,QuickGraph.Algorithms,IsHamiltonianGraphAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\IsHamiltonianGraphAlgorithm.cs,GetPermutations,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms,MaximumBipartiteMatchingAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumBipartiteMatchingAlgorithm.cs,MaximumBipartiteMatchingAlgorithm,The method has 5 parameters.
Long Parameter List,QuickGraph.Algorithms,RandomGraphFactory,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RandomGraphFactory.cs,Create,The method has 7 parameters.
Long Parameter List,QuickGraph.Algorithms,RandomGraphFactory,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RandomGraphFactory.cs,Create,The method has 7 parameters.
Long Parameter List,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,RunStep1,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,RunStep2,The method has 7 parameters.
Long Parameter List,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,RunStep3,The method has 7 parameters.
Long Parameter List,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,RunStep4,The method has 5 parameters.
Long Parameter List,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,FindZero,The method has 5 parameters.
Long Parameter List,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,FindMinimum,The method has 5 parameters.
Long Parameter List,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,ClearCovers,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.KernighanLinAlgoritm,KernighanLinAlgoritm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\GraphPartition\KernighanLinAlgoritm.cs,swapVertices,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.MaximumFlow,BipartiteToMaximumFlowGraphAugmentorAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumFlow\BipartiteToMaximumFlowGraphAugmentorAlgorithm.cs,BipartiteToMaximumFlowGraphAugmentorAlgorithm,The method has 5 parameters.
Long Parameter List,QuickGraph.Algorithms.MaximumFlow,BipartiteToMaximumFlowGraphAugmentorAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumFlow\BipartiteToMaximumFlowGraphAugmentorAlgorithm.cs,BipartiteToMaximumFlowGraphAugmentorAlgorithm,The method has 6 parameters.
Long Parameter List,QuickGraph.Algorithms.MaximumFlow,AllVerticesGraphAugmentorAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumFlow\AllVerticesGraphAugmentorAlgorithm.cs,AllVerticesGraphAugmentorAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.MaximumFlow,EdmondsKarpMaximumFlowAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumFlow\EdmondsKarpMaximumFlowAlgorithm.cs,EdmondsKarpMaximumFlowAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.MaximumFlow,GraphAugmentorAlgorithmBase,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumFlow\GraphAugmentorAlgorithmBase.cs,GraphAugmentorAlgorithmBase,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.MaximumFlow,GraphBalancerAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumFlow\GraphBalancingAlgorithm.cs,GraphBalancerAlgorithm,The method has 5 parameters.
Long Parameter List,QuickGraph.Algorithms.MaximumFlow,GraphBalancerAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumFlow\GraphBalancingAlgorithm.cs,GraphBalancerAlgorithm,The method has 6 parameters.
Long Parameter List,QuickGraph.Algorithms.MaximumFlow,MaximumFlowAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumFlow\MaximumFlowAlgorithmBase.cs,MaximumFlowAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.MaximumFlow,MultiSourceSinkGraphAugmentorAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumFlow\MultiSourceSinkGraphAugmentorAlgorithm.cs,MultiSourceSinkGraphAugmentorAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.ShortestPath.Yen,YenShortestPathsAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ShortestPath\Yen\YenShortestPathsAlgorithm.cs,YenShortestPathsAlgorithm,The method has 6 parameters.
Long Parameter List,QuickGraph.Algorithms.TSP,Task,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\TSP\Task.cs,Task,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.TSP,Task,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\TSP\Task.cs,Task,The method has 5 parameters.
Long Parameter List,QuickGraph.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithm.cs,HoffmanPavleyRankedShortestPathAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithm.cs,EnqueueFirstShortestPath,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithm.cs,EnqueueDeviationPaths,The method has 6 parameters.
Long Parameter List,QuickGraph.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithm.cs,EnqueueDeviationPaths,The method has 7 parameters.
Long Parameter List,QuickGraph.Algorithms.Search,BestFirstFrontierSearchAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\Search\BestFirstFrontierSearchAlgorithm.cs,BestFirstFrontierSearchAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.Search,UndirectedDepthFirstSearchAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\Search\UndirectedDepthFirstSearchAlgorithm.cs,UndirectedDepthFirstSearchAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.Search,BreadthFirstSearchAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\Search\BreadthFirstSearchAlgorithm.cs,BreadthFirstSearchAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.Search,BreadthFirstSearchAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\Search\BreadthFirstSearchAlgorithm.cs,BreadthFirstSearchAlgorithm,The method has 5 parameters.
Long Parameter List,QuickGraph.Algorithms.Search,DepthFirstSearchAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\Search\DepthFirstSearchAlgorithm.cs,DepthFirstSearchAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.Search,UndirectedBreadthFirstSearchAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\Search\UndirectedBreathFirstSearchAlgorithm.cs,UndirectedBreadthFirstSearchAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.RandomWalks,WeightedMarkovEdgeChainBase,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RandomWalks\WeightedMarkovEdgeChainBase.cs,TryGetSuccessor,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.ShortestPath,AStarShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ShortestPath\AStartShortestPathAlgorithm.cs,AStarShortestPathAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.ShortestPath,AStarShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ShortestPath\AStartShortestPathAlgorithm.cs,AStarShortestPathAlgorithm,The method has 5 parameters.
Long Parameter List,QuickGraph.Algorithms.ShortestPath,BellmanFordShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ShortestPath\BellmanFordShortestPathAlgorithm.cs,BellmanFordShortestPathAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.ShortestPath,UndirectedShortestPathAlgorithmBase,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ShortestPath\UndirectedShortestPathAlgorithmBase.cs,UndirectedShortestPathAlgorithmBase,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.ShortestPath,DagShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ShortestPath\DagShortestPathAlgorithm.cs,DagShortestPathAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ShortestPath\DijkstraShortestPathAlgorithm.cs,DijkstraShortestPathAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.ShortestPath,FloydWarshallAllShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ShortestPath\FloydWarshallAllShortestPathAlgorithm.cs,FloydWarshallAllShortestPathAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.ShortestPath,ShortestPathAlgorithmBase,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ShortestPath\ShortestPathAlgorithmBase.cs,ShortestPathAlgorithmBase,The method has 4 parameters.
Long Parameter List,QuickGraph.Algorithms.ShortestPath,UndirectedDijkstraShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ShortestPath\UndirectedDijkstraShortestPathAlgorithm.cs,UndirectedDijkstraShortestPathAlgorithm,The method has 4 parameters.
Long Parameter List,QuickGraph.Collections,FibonacciQueue,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\FibonacciQueue.cs,FibonacciQueue,The method has 4 parameters.
Long Parameter List,QuickGraph.Serialization,DirectedGraphMLExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\DirectedGraphMLExtensions.cs,ToDirectedGraphML,The method has 5 parameters.
Long Parameter List,QuickGraph.Serialization,XmlReaderExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\GraphMLDeserializer.cs,ReadElementContentAsArray,The method has 4 parameters.
Long Parameter List,QuickGraph.Serialization,GraphMLDeserializer,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\GraphMLDeserializer.cs,Deserialize,The method has 4 parameters.
Long Parameter List,QuickGraph.Serialization,SerializationExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\SerializationExtensions.cs,DeserializeFromXml,The method has 7 parameters.
Long Parameter List,QuickGraph.Serialization,SerializationExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\SerializationExtensions.cs,DeserializeFromXml,The method has 7 parameters.
Long Parameter List,QuickGraph.Serialization,SerializationExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\SerializationExtensions.cs,DeserializeFromXml,The method has 8 parameters.
Long Parameter List,QuickGraph.Serialization,SerializationExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\SerializationExtensions.cs,SerializeToXml,The method has 8 parameters.
Long Parameter List,QuickGraph.Serialization,SerializationExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\SerializationExtensions.cs,SerializeToXml,The method has 11 parameters.
Long Parameter List,QuickGraph.Serialization,GraphMLExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\GraphMLExtensions.cs,SerializeToGraphML,The method has 4 parameters.
Long Parameter List,QuickGraph.Serialization,GraphMLExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\GraphMLExtensions.cs,SerializeToGraphML,The method has 4 parameters.
Long Parameter List,QuickGraph.Serialization,GraphMLExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\GraphMLExtensions.cs,DeserializeFromGraphML,The method has 4 parameters.
Long Parameter List,QuickGraph.Serialization,GraphMLExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\GraphMLExtensions.cs,DeserializeFromGraphML,The method has 4 parameters.
Long Parameter List,QuickGraph.Serialization,GraphMLExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\GraphMLExtensions.cs,DeserializeFromGraphML,The method has 4 parameters.
Long Parameter List,QuickGraph.Serialization,GraphMLExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\GraphMLExtensions.cs,DeserializeAndValidateFromGraphML,The method has 4 parameters.
Long Parameter List,QuickGraph.Serialization,GraphMLSerializer,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\GraphMLSerializer.cs,Serialize,The method has 4 parameters.
Long Statement,QuickGraph,AdjacencyGraph,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\AdjacencyGraph.cs,LoadDot,The length of the statement  "	Func<bool' IMutableVertexAndEdgeSet<TVertex' TEdge>> createGraph = allowParallelEdges => new AdjacencyGraph<TVertex' TEdge> (allowParallelEdges); " is 145.
Long Statement,QuickGraph,AdjacencyGraph,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\AdjacencyGraph.cs,Clone,The length of the statement  "	return new AdjacencyGraph<TVertex' TEdge> (this.vertexEdges.Clone ()' this.edgeCount' this.edgeCapacity' this.allowParallelEdges); " is 130.
Long Statement,QuickGraph,EquatableTermEdge,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\EquatableTermEdge.cs,Equals,The length of the statement  "	return (object)other != null && this.Source.Equals (other.Source) && this.Target.Equals (other.Target) && this.SourceTerminal.Equals (other.SourceTerminal) && this.TargetTerminal.Equals (other.TargetTerminal) && true; " is 217.
Long Statement,QuickGraph,EquatableTermEdge,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\EquatableTermEdge.cs,GetHashCode,The length of the statement  "	return HashCodeHelper.Combine (this.Source.GetHashCode ()' this.Target.GetHashCode ()' this.SourceTerminal.GetHashCode ()' this.TargetTerminal.GetHashCode ()); " is 159.
Long Statement,QuickGraph,SEquatableUndirectedEdge,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\SEquatableUndirectedEdge.cs,Equals,The length of the statement  "	Contract.Ensures (Contract.Result<bool> () == (this.Source.Equals (other.Source) && this.Target.Equals (other.Target))); " is 120.
Long Statement,QuickGraph,STaggedEquatableEdge,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\STaggedEquatableEdge.cs,Equals,The length of the statement  "	Contract.Ensures (Contract.Result<bool> () == (this.Source.Equals (other.Source) && this.Target.Equals (other.Target))); " is 120.
Long Statement,QuickGraph,SEquatableEdge,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\SEquatableEdge.cs,Equals,The length of the statement  "	Contract.Ensures (Contract.Result<bool> () == (this.Source.Equals (other.Source) && this.Target.Equals (other.Target))); " is 120.
Long Statement,QuickGraph,EdgeExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\EdgeExtensions.cs,TryGetPath,The length of the statement  "	Contract.Ensures (!Contract.Result<bool> () || (Contract.ValueAtReturn<IEnumerable<TEdge>> (out result) != null && (typeof(TEdge).IsValueType || Enumerable.All (Contract.ValueAtReturn<IEnumerable<TEdge>> (out result)' e => e != null)))); " is 237.
Long Statement,QuickGraph,EdgeExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\EdgeExtensions.cs,UndirectedVertexEquality,The length of the statement  "	return (edge.Source.Equals (source) && edge.Target.Equals (target)) || (edge.Target.Equals (source) && edge.Source.Equals (target)); " is 132.
Long Statement,QuickGraph,GraphExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\GraphExtensions.cs,ToVertexAndEdgeListGraph,The length of the statement  "	return new DelegateVertexAndEdgeListGraph<TVertex' TEdge> (dictionary.Keys' delegate (TVertex key' out IEnumerable<TEdge> edges) { " is 130.
Long Statement,QuickGraph,GraphExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\GraphExtensions.cs,ToDelegateUndirectedGraph,The length of the statement  "	return new DelegateVertexAndEdgeListGraph<TVertex' TEdge> (dictionary.Keys' delegate (TVertex key' out IEnumerable<TEdge> edges) { " is 130.
Long Statement,QuickGraph,HashCodeHelper,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\HashCodeHelper.cs,Fold,The length of the statement  "	return Fold (Fold (Fold (Fold (hash' (byte)value)' (byte)(((UInt32)value) >> 8))' (byte)(((UInt32)value) >> 16))' (byte)(((UInt32)value) >> 24)); " is 145.
Long Statement,QuickGraph,BidirectionalGraph,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\BidirectionalGraph.cs,LoadDot,The length of the statement  "	Func<bool' IMutableVertexAndEdgeSet<TVertex' TEdge>> createGraph = allowParallelEdges => new BidirectionalGraph<TVertex' TEdge> (allowParallelEdges); " is 149.
Long Statement,QuickGraph,QuickGraphResourceManager,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\QuickGraphResourceManager.cs,GetImage,The length of the statement  "	using (Stream stream = typeof(QuickGraphResourceManager).Assembly.GetManifestResourceStream (String.Format ("QuickGraph.{0}.png"' name))) " is 137.
Long Statement,QuickGraph,UndirectedGraph,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\UndirectedGraph.cs,LoadDot,The length of the statement  "	Func<bool' IMutableVertexAndEdgeSet<TVertex' TEdge>> createGraph = allowParallelEdges => new UndirectedGraph<TVertex' TEdge> (allowParallelEdges); " is 146.
Long Statement,QuickGraph,UndirectedGraph,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\UndirectedGraph.cs,AddAndReturnEdges,The length of the statement  "		this.adjacentEdges [v] = edges = this.EdgeCapacity < 0 ? new EdgeList<TVertex' TEdge> () : new EdgeList<TVertex' TEdge> (this.EdgeCapacity); " is 140.
Long Statement,QuickGraph,UndirectedGraph,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\UndirectedGraph.cs,Clone,The length of the statement  "	return new UndirectedGraph<TVertex' TEdge> (this.adjacentEdges.Clone ()' this.edgeEqualityComparer' this.edgeCount' this.edgeCapacity' this.allowParallelEdges); " is 160.
Long Statement,QuickGraph.Algorithms,IsHamiltonianGraphAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\IsHamiltonianGraphAlgorithm.cs,satisfiesDiracsTheorem,The length of the statement  "	// Using Dirac's theorem: if |vertices| >= 3 and for any vertex deg(vertex) >= (|vertices| / 2) then graph is Hamiltonian  " is 121.
Long Statement,QuickGraph.Algorithms,IsHamiltonianGraphAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\IsHamiltonianGraphAlgorithm.cs,IsHamiltonian,The length of the statement  "	return n == 1 || (n >= 3 && graph.Vertices.All<TVertex> (satisfiesDiracsTheorem)) || GetPermutations ().Any<List<TVertex>> (existsInGraph); " is 139.
Long Statement,QuickGraph.Algorithms,MaximumBipartiteMatchingAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumBipartiteMatchingAlgorithm.cs,InternalCompute,The length of the statement  "		augmentor = new BipartiteToMaximumFlowGraphAugmentorAlgorithm<TVertex' TEdge> (this' this.VisitedGraph' this.VertexSetA' this.VertexSetB' this.VertexFactory' this.EdgeFactory); " is 176.
Long Statement,QuickGraph.Algorithms,MaximumBipartiteMatchingAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumBipartiteMatchingAlgorithm.cs,InternalCompute,The length of the statement  "				if (edge.Source.Equals (augmentor.SuperSource) || edge.Source.Equals (augmentor.SuperSource) || edge.Target.Equals (augmentor.SuperSink) || edge.Target.Equals (augmentor.SuperSink)) { " is 183.
Long Statement,QuickGraph.Algorithms,RandomGraphFactory,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RandomGraphFactory.cs,Create,The length of the statement  "	Contract.Requires (!(!g.AllowParallelEdges && !selfEdges) || edgeCount <= vertexCount * (vertexCount - 1)// directed graph " is 122.
Long Statement,QuickGraph.Algorithms,TarjanOfflineLeastCommonAncestorAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\TarjanOfflineLeastCommonAncestorAlgorithm.cs,InternalCompute,The length of the statement  "	var dfs = new DepthFirstSearchAlgorithm<TVertex' TEdge> (this' this.VisitedGraph' new Dictionary<TVertex' GraphColor> (this.VisitedGraph.VertexCount)); " is 151.
Long Statement,QuickGraph.Algorithms,TarjanOfflineLeastCommonAncestorAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\TarjanOfflineLeastCommonAncestorAlgorithm.cs,InternalCompute,The length of the statement  "				this.ancestors [EdgeExtensions.ToVertexPair<TVertex' SEquatableEdge<TVertex>> (e)] = vancestors [disjointSet.FindSet (e.Target)]; " is 129.
Long Statement,QuickGraph.Algorithms.ConnectedComponents,ConnectedComponentsAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ConnectedComponents\ConnectedComponentsAlgorithm.cs,InternalCompute,The length of the statement  "		dfs = new UndirectedDepthFirstSearchAlgorithm<TVertex' TEdge> (this' this.VisitedGraph' new Dictionary<TVertex' GraphColor> (this.VisitedGraph.VertexCount)); " is 157.
Long Statement,QuickGraph.Algorithms.ConnectedComponents,IncrementalConnectedComponentsAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ConnectedComponents\IncrementalConnectedComponentsAlgorithm.cs,GetComponents,The length of the statement  "	Contract.Ensures (Contract.Result<KeyValuePair<int' IDictionary<TVertex' int>>> ().Value.Count == this.VisitedGraph.VertexCount); " is 129.
Long Statement,QuickGraph.Algorithms.ConnectedComponents,WeaklyConnectedComponentsAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ConnectedComponents\WeaklyConnectedComponentsAlgorithm.cs,InternalCompute,The length of the statement  "	Contract.Ensures (Enumerable.All (this.VisitedGraph.Vertices' v => 0 <= this.Components [v] && this.Components [v] < this.ComponentCount)); " is 139.
Long Statement,QuickGraph.Algorithms.ConnectedComponents,StronglyConnectedComponentsAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ConnectedComponents\StronglyConnectedComponentAlgorithm.cs,MinDiscoverTime,The length of the statement  "	Contract.Ensures (this.DiscoverTimes [u] < this.DiscoverTimes [v] ? Contract.Result<TVertex> ().Equals (u) : Contract.Result<TVertex> ().Equals (v)); " is 149.
Long Statement,QuickGraph.Algorithms.ConnectedComponents,StronglyConnectedComponentsAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ConnectedComponents\StronglyConnectedComponentAlgorithm.cs,InternalCompute,The length of the statement  "		dfs = new DepthFirstSearchAlgorithm<TVertex' TEdge> (this' VisitedGraph' new Dictionary<TVertex' GraphColor> (this.VisitedGraph.VertexCount)); " is 142.
Long Statement,QuickGraph.Algorithms.TSP,Task,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\TSP\Task.cs,chooseEdgeForSplit,The length of the statement  "			maxCandidate = row.Where (e => !e.Target.Equals (v2)).DefaultIfEmpty (null).Min (e => e == null ? Double.PositiveInfinity : _weight [e]) + column.Where (e => !e.Source.Equals (v1)).DefaultIfEmpty (null).Min (e => e == null ? Double.PositiveInfinity : _weight [e]); " is 264.
Long Statement,QuickGraph.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithm.cs,ComputeMinimumTree,The length of the statement  "	var distancesObserser = new VertexDistanceRecorderObserver<TVertex' SReversedEdge<TVertex' TEdge>> (reversedEdgeWeight); " is 120.
Long Statement,QuickGraph.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithm.cs,ComputeMinimumTree,The length of the statement  "	var shortestpath = new DijkstraShortestPathAlgorithm<TVertex' SReversedEdge<TVertex' TEdge>> (this' reversedGraph' reversedEdgeWeight' this.DistanceRelaxer); " is 157.
Long Statement,QuickGraph.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithm.cs,EnqueueDeviationPaths,The length of the statement  "			var deviationWeight = this.DistanceRelaxer.Combine (previousWeight' this.DistanceRelaxer.Combine (this.edgeWeights (deviationEdge)' adistance)); " is 144.
Long Statement,QuickGraph.Algorithms.Ranking,PageRankAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\PageRankAlgorithm.cs,InternalCompute,The length of the statement  "	FilteredBidirectionalGraph<TVertex' TEdge' IBidirectionalGraph<TVertex' TEdge>> fg = new FilteredBidirectionalGraph<TVertex' TEdge' IBidirectionalGraph<TVertex' TEdge>> (this.VisitedGraph' new InDictionaryVertexPredicate<TVertex' double> (this.ranks).Test' e => true); " is 268.
Long Statement,QuickGraph.Algorithms.ShortestPath,UndirectedShortestPathAlgorithmBase,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ShortestPath\UndirectedShortestPathAlgorithmBase.cs,Relax,The length of the statement  "	Contract.Requires ((e.Source.Equals (source) && e.Target.Equals (target)) || (e.Source.Equals (target) && e.Target.Equals (source))); " is 133.
Long Statement,QuickGraph.Algorithms.ShortestPath,UndirectedDijkstraShortestPathAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\ShortestPath\UndirectedDijkstraShortestPathAlgorithm.cs,ComputeNoInit,The length of the statement  "		bfs = new UndirectedBreadthFirstSearchAlgorithm<TVertex' TEdge> (this' this.VisitedGraph' this.vertexQueue' VertexColors); " is 122.
Long Statement,QuickGraph.Algorithms.TopologicalSort,SourceFirstBidirectionalTopologicalSortAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\TopologicalSort\SourceFirstBidirectionalTopologicalSortAlgorithm.cs,InternalCompute,The length of the statement  "		var succEdges = (this.direction == TopologicalSortDirection.Forward) ? this.VisitedGraph.OutEdges (v) : this.VisitedGraph.InEdges (v); " is 134.
Long Statement,QuickGraph.Algorithms.TopologicalSort,TopologicalSortAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\TopologicalSort\TopologicalSortAlgorithm.cs,InternalCompute,The length of the statement  "		dfs = new DepthFirstSearchAlgorithm<TVertex' TEdge> (this' this.VisitedGraph' new Dictionary<TVertex' GraphColor> (this.VisitedGraph.VertexCount)); " is 147.
Long Statement,QuickGraph.Algorithms.TopologicalSort,UndirectedTopologicalSortAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\TopologicalSort\UndirectedTopologicalSortAlgorithm.cs,InternalCompute,The length of the statement  "		dfs = new UndirectedDepthFirstSearchAlgorithm<TVertex' TEdge> (this' VisitedGraph' new Dictionary<TVertex' GraphColor> (this.VisitedGraph.VertexCount)); " is 152.
Long Statement,QuickGraph.Collections,ForestDisjointSet,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\ForestDisjointSet.cs,Union,The length of the statement  "	Contract.Ensures (Contract.Result<bool> () ? Contract.OldValue (this.SetCount) - 1 == this.SetCount : Contract.OldValue (this.SetCount) == this.SetCount); " is 154.
Long Statement,QuickGraph.Collections,FibonacciHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\FibonacciHeap.cs,ChangeKeyInternal,The length of the statement  "		if (parentNode != null && ((priorityComparsion (NewKey' node.Parent.Priority) * DirectionMultiplier) < 0 || deletingNode)) { " is 124.
Long Statement,QuickGraph.Contracts,IBidirectionalIncidenceGraphContract,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Contracts\IBidirectionalIncidenceGraphContract.cs,InEdges,The length of the statement  "	Contract.Ensures (Enumerable.All (Contract.Result<IEnumerable<TEdge>> ()' edge => edge != null && edge.Target.Equals (v))); " is 123.
Long Statement,QuickGraph.Contracts,IBidirectionalIncidenceGraphContract,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Contracts\IBidirectionalIncidenceGraphContract.cs,TryGetInEdges,The length of the statement  "	Contract.Ensures (!Contract.Result<bool> () || Enumerable.All (Contract.ValueAtReturn<IEnumerable<TEdge>> (out edges)' edge => edge != null && edge.Target.Equals (v))); " is 168.
Long Statement,QuickGraph.Contracts,IImplicitUndirectedGraphContract,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Contracts\IImplicitUndirectedGraphContract.cs,AdjacentEdges,The length of the statement  "	Contract.Ensures (Enumerable.All (Contract.Result<IEnumerable<TEdge>> ()' edge => edge != null && ithis.ContainsEdge (edge.Source' edge.Target) && (edge.Source.Equals (v) || edge.Target.Equals (v)))); " is 200.
Long Statement,QuickGraph.Contracts,IImplicitUndirectedGraphContract,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Contracts\IImplicitUndirectedGraphContract.cs,ContainsEdge,The length of the statement  "	Contract.Ensures (Contract.Result<bool> () == Enumerable.Any (ithis.AdjacentEdges (source)' e => e.Target.Equals (target) || e.Source.Equals (target))); " is 152.
Long Statement,QuickGraph.Contracts,IImplicitGraphContract,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Contracts\IImplicitGraphContract.cs,TryGetOutEdges,The length of the statement  "	Contract.Ensures (!Contract.Result<bool> () || (Contract.ValueAtReturn (out edges) != null && Enumerable.All (Contract.ValueAtReturn (out edges)' e => e.Source.Equals (v)))); " is 174.
Long Statement,QuickGraph.Contracts,IMutableBidirectionalGraphContract,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Contracts\IMutableBidirectionalGraphContract.cs,RemoveInEdgeIf,The length of the statement  "	Contract.Ensures (Contract.Result<int> () == Contract.OldValue (Enumerable.Count (ithis.InEdges (v)' e => predicate (e)))); " is 123.
Long Statement,QuickGraph.Contracts,IMutableEdgeListGraphContract,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Contracts\IMutableEdgeListGraphContract.cs,AddEdgeRange,The length of the statement  "	Contract.Requires (Enumerable.All (edges' edge => ithis.ContainsVertex (edge.Source) && ithis.ContainsVertex (edge.Target))); " is 125.
Long Statement,QuickGraph.Contracts,IMutableEdgeListGraphContract,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Contracts\IMutableEdgeListGraphContract.cs,AddEdgeRange,The length of the statement  "	Contract.Ensures (Enumerable.All (edges' edge => ithis.ContainsEdge (edge))' "all edge from edges belong to the graph"); " is 120.
Long Statement,QuickGraph.Contracts,IMutableEdgeListGraphContract,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Contracts\IMutableEdgeListGraphContract.cs,AddEdgeRange,The length of the statement  "	Contract.Ensures (Contract.Result<int> () == Contract.OldValue (Enumerable.Count (edges' edge => !ithis.ContainsEdge (edge)))); " is 127.
Long Statement,QuickGraph.Contracts,IMutableIncidenceGraphContract,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Contracts\IMutableIncidenceGraphContract.cs,RemoveOutEdgeIf,The length of the statement  "	Contract.Ensures (Contract.Result<int> () == Contract.OldValue (Enumerable.Count (ithis.OutEdges (v)' ve => predicate (ve)))); " is 126.
Long Statement,QuickGraph.Contracts,IMutableUndirectedGraphContract,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Contracts\IMutableUndirectedGraphContract.cs,RemoveAdjacentEdgeIf,The length of the statement  "	Contract.Ensures (Contract.Result<int> () == Contract.OldValue (Enumerable.Count (ithis.AdjacentEdges (vertex)' e => predicate (e)))); " is 134.
Long Statement,QuickGraph.Contracts,IMutableVertexAndEdgeSetContract,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Contracts\IMutableVertexAndEdgeSetContract.cs,AddVerticesAndEdge,The length of the statement  "	Contract.Ensures (ithis.AllowParallelEdges || Contract.Result<bool> () == Contract.OldValue (!ithis.ContainsEdge (edge))); " is 122.
Long Statement,QuickGraph.Serialization,DirectedGraphMLExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\DirectedGraphMLExtensions.cs,ToDirectedGraphML,The length of the statement  "	return ToDirectedGraphML<TVertex' TEdge> (visitedGraph' AlgorithmExtensions.GetVertexIdentity<TVertex> (visitedGraph)' AlgorithmExtensions.GetEdgeIdentity<TVertex' TEdge> (visitedGraph)); " is 187.
Long Statement,QuickGraph.Serialization,DirectedGraphMLExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\DirectedGraphMLExtensions.cs,ToDirectedGraphML,The length of the statement  "	return ToDirectedGraphML<TVertex' TEdge> (visitedGraph' AlgorithmExtensions.GetVertexIdentity<TVertex> (visitedGraph)' AlgorithmExtensions.GetEdgeIdentity<TVertex' TEdge> (visitedGraph)' (v' n) => { " is 198.
Long Statement,QuickGraph.Serialization,SerializationExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\SerializationExtensions.cs,DeserializeFromXml,The length of the statement  "	return DeserializeFromXml (reader' r => r.Name == graphElementName && r.NamespaceURI == namespaceUri' r => r.Name == vertexElementName && r.NamespaceURI == namespaceUri' r => r.Name == edgeElementName && r.NamespaceURI == namespaceUri' graphFactory' vertexFactory' edgeFactory); " is 278.
Long Statement,QuickGraph.Serialization,SerializationExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\SerializationExtensions.cs,SerializeToXml,The length of the statement  "	SerializeToXml (graph' writer' vertexIdentity' edgeIdentity' graphElementName' vertexElementName' edgeElementName' namespaceUri' null' null' null); " is 147.
Long Statement,QuickGraph.Serialization,GraphMLExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\GraphMLExtensions.cs,AddGraphMLSchema,The length of the statement  "	using (var xsdStream = typeof(GraphMLExtensions).Assembly.GetManifestResourceStream (typeof(GraphMLExtensions)' "graphml.xsd")) " is 127.
Long Statement,QuickGraph.Serialization,GraphMLSerializer,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\GraphMLSerializer.cs,MoveNextData,The length of the statement  "	return reader.NodeType == XmlNodeType.Element && reader.Name == "data" && reader.NamespaceURI == GraphMLXmlResolver.GraphMLNamespace; " is 133.
Long Statement,QuickGraph.Predicates,FilteredIncidenceGraph,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Predicates\FilteredIncidenceGraph.cs,TryGetEdge,The length of the statement  "	if (this.VertexPredicate (source) && this.VertexPredicate (target) && this.BaseGraph.TryGetEdges (source' target' out unfilteredEdges)) { " is 137.
Complex Conditional,QuickGraph.Algorithms,MaximumBipartiteMatchingAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\MaximumBipartiteMatchingAlgorithm.cs,InternalCompute,The conditional expression  "edge.Source.Equals (augmentor.SuperSource) || edge.Source.Equals (augmentor.SuperSource) || edge.Target.Equals (augmentor.SuperSink) || edge.Target.Equals (augmentor.SuperSink)"  is complex.
Complex Conditional,QuickGraph.Algorithms.KernighanLinAlgoritm,KernighanLinAlgoritm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\GraphPartition\KernighanLinAlgoritm.cs,swapVertices,The conditional expression  "!a.Contains (vertA) || a.Contains (vertB) || !b.Contains (vertB) || b.Contains (vertA)"  is complex.
Magic Number,QuickGraph,GraphExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\GraphExtensions.cs,ToAdjacencyGraph,The following statement contains a magic number: Contract.Requires (edges.Length == 2);  
Magic Number,QuickGraph,HashCodeHelper,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\HashCodeHelper.cs,GetHashCode,The following statement contains a magic number: return Combine ((Int32)x' (Int32)(((UInt64)x) >> 32));  
Magic Number,QuickGraph,HashCodeHelper,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\HashCodeHelper.cs,Fold,The following statement contains a magic number: return Fold (Fold (Fold (Fold (hash' (byte)value)' (byte)(((UInt32)value) >> 8))' (byte)(((UInt32)value) >> 16))' (byte)(((UInt32)value) >> 24));  
Magic Number,QuickGraph,HashCodeHelper,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\HashCodeHelper.cs,Fold,The following statement contains a magic number: return Fold (Fold (Fold (Fold (hash' (byte)value)' (byte)(((UInt32)value) >> 8))' (byte)(((UInt32)value) >> 16))' (byte)(((UInt32)value) >> 24));  
Magic Number,QuickGraph,HashCodeHelper,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\HashCodeHelper.cs,Fold,The following statement contains a magic number: return Fold (Fold (Fold (Fold (hash' (byte)value)' (byte)(((UInt32)value) >> 8))' (byte)(((UInt32)value) >> 16))' (byte)(((UInt32)value) >> 24));  
Magic Number,QuickGraph,SReversedEdge,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\SReversedEdge.cs,GetHashCode,The following statement contains a magic number: return this.OriginalEdge.GetHashCode () ^ 16777619;  
Magic Number,QuickGraph.Algorithms,AlgorithmExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AlgorithmExtensions.cs,OddVertices,The following statement contains a magic number: foreach (var de in counts) {  	if (de.Value % 2 != 0)  		odds.Add (de.Key);  }  
Magic Number,QuickGraph.Algorithms,AlgorithmExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AlgorithmExtensions.cs,OddVertices,The following statement contains a magic number: if (de.Value % 2 != 0)  	odds.Add (de.Key);  
Magic Number,QuickGraph.Algorithms,IsEulerianGraphAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\IsEulerianGraphAlgorithm.cs,satisfiesEulerianCondition,The following statement contains a magic number: return graph.AdjacentEdges (vertex).Count () % 2 == 0;  
Magic Number,QuickGraph.Algorithms,IsHamiltonianGraphAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\IsHamiltonianGraphAlgorithm.cs,IsHamiltonianGraphAlgorithm,The following statement contains a magic number: threshold = newGraph.VertexCount / 2.0;  
Magic Number,QuickGraph.Algorithms,IsHamiltonianGraphAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\IsHamiltonianGraphAlgorithm.cs,IsHamiltonian,The following statement contains a magic number: return n == 1 || (n >= 3 && graph.Vertices.All<TVertex> (satisfiesDiracsTheorem)) || GetPermutations ().Any<List<TVertex>> (existsInGraph);  
Magic Number,QuickGraph.Algorithms,EulerianTrailAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\EulerianTrailAlgorithm.cs,ComputeEulerianPathCount,The following statement contains a magic number: if (odd == 0)  	return 1;  else if (odd % 2 != 0)  	return 0;  else  	return odd / 2;  
Magic Number,QuickGraph.Algorithms,EulerianTrailAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\EulerianTrailAlgorithm.cs,ComputeEulerianPathCount,The following statement contains a magic number: if (odd == 0)  	return 1;  else if (odd % 2 != 0)  	return 0;  else  	return odd / 2;  
Magic Number,QuickGraph.Algorithms,EulerianTrailAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\EulerianTrailAlgorithm.cs,ComputeEulerianPathCount,The following statement contains a magic number: if (odd % 2 != 0)  	return 0;  else  	return odd / 2;  
Magic Number,QuickGraph.Algorithms,EulerianTrailAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\EulerianTrailAlgorithm.cs,ComputeEulerianPathCount,The following statement contains a magic number: if (odd % 2 != 0)  	return 0;  else  	return odd / 2;  
Magic Number,QuickGraph.Algorithms,EulerianTrailAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\EulerianTrailAlgorithm.cs,ComputeEulerianPathCount,The following statement contains a magic number: return odd / 2;  
Magic Number,QuickGraph.Algorithms,EulerianTrailAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\EulerianTrailAlgorithm.cs,AddTemporaryEdges,The following statement contains a magic number: if (oddVertices.Count % 2 != 0)  	throw new Exception ("number of odd vertices in not even!");  
Magic Number,QuickGraph.Algorithms,EulerianTrailAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\EulerianTrailAlgorithm.cs,AddTemporaryEdges,The following statement contains a magic number: while (oddVertices.Count > 0) {  	TVertex u = oddVertices [0];  	// find adjacent odd vertex.  	found = false;  	foundadjacent = false;  	foreach (var e in this.VisitedGraph.OutEdges (u)) {  		TVertex v = e.Target;  		if (!v.Equals (u) && oddVertices.Contains (v)) {  			foundadjacent = true;  			// check that v does not have an out-edge towards u  			foundbe = false;  			foreach (var be in this.VisitedGraph.OutEdges (v)) {  				if (be.Target.Equals (u)) {  					foundbe = true;  					break;  				}  			}  			if (foundbe)  				continue;  			// add temporary edge  			TEdge tempEdge = edgeFactory (v' u);  			if (!this.VisitedGraph.AddEdge (tempEdge))  				throw new InvalidOperationException ();  			// add to collection  			temporaryEdges.Add (tempEdge);  			// remove u'v from oddVertices  			oddVertices.Remove (u);  			oddVertices.Remove (v);  			// set u to null  			found = true;  			break;  		}  	}  	if (!foundadjacent) {  		// pick another vertex  		if (oddVertices.Count < 2)  			throw new Exception ("Eulerian trail failure");  		TVertex v = oddVertices [1];  		TEdge tempEdge = edgeFactory (u' v);  		if (!this.VisitedGraph.AddEdge (tempEdge))  			throw new InvalidOperationException ();  		// add to collection  		temporaryEdges.Add (tempEdge);  		// remove u'v from oddVertices  		oddVertices.Remove (u);  		oddVertices.Remove (v);  		// set u to null  		found = true;  	}  	if (!found) {  		oddVertices.Remove (u);  		oddVertices.Add (u);  	}  }  
Magic Number,QuickGraph.Algorithms,EulerianTrailAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\EulerianTrailAlgorithm.cs,AddTemporaryEdges,The following statement contains a magic number: if (!foundadjacent) {  	// pick another vertex  	if (oddVertices.Count < 2)  		throw new Exception ("Eulerian trail failure");  	TVertex v = oddVertices [1];  	TEdge tempEdge = edgeFactory (u' v);  	if (!this.VisitedGraph.AddEdge (tempEdge))  		throw new InvalidOperationException ();  	// add to collection  	temporaryEdges.Add (tempEdge);  	// remove u'v from oddVertices  	oddVertices.Remove (u);  	oddVertices.Remove (v);  	// set u to null  	found = true;  }  
Magic Number,QuickGraph.Algorithms,EulerianTrailAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\EulerianTrailAlgorithm.cs,AddTemporaryEdges,The following statement contains a magic number: if (oddVertices.Count < 2)  	throw new Exception ("Eulerian trail failure");  
Magic Number,QuickGraph.Algorithms,RandomGraphFactory,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RandomGraphFactory.cs,Create,The following statement contains a magic number: Contract.Requires (!(!g.AllowParallelEdges && !selfEdges) || edgeCount <= vertexCount * (vertexCount - 1) / 2);  
Magic Number,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,RunStep2,The following statement contains a magic number: masks [loc.Row' loc.Column] = 2;  
Magic Number,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,ConvertPath,The following statement contains a magic number: for (var i = 0; i < pathLength; i++) {  	switch (masks [path [i].Row' path [i].Column]) {  	case 1:  		masks [path [i].Row' path [i].Column] = 0;  		break;  	case 2:  		masks [path [i].Row' path [i].Column] = 1;  		break;  	}  }  
Magic Number,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,ConvertPath,The following statement contains a magic number: switch (masks [path [i].Row' path [i].Column]) {  case 1:  	masks [path [i].Row' path [i].Column] = 0;  	break;  case 2:  	masks [path [i].Row' path [i].Column] = 1;  	break;  }  
Magic Number,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,FindPrimeInRow,The following statement contains a magic number: for (var j = 0; j < w; j++) {  	if (masks [row' j] == 2)  		return j;  }  
Magic Number,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,FindPrimeInRow,The following statement contains a magic number: if (masks [row' j] == 2)  	return j;  
Magic Number,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,ClearPrimes,The following statement contains a magic number: for (var i = 0; i < h; i++) {  	for (var j = 0; j < w; j++) {  		if (masks [i' j] == 2)  			masks [i' j] = 0;  	}  }  
Magic Number,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,ClearPrimes,The following statement contains a magic number: for (var j = 0; j < w; j++) {  	if (masks [i' j] == 2)  		masks [i' j] = 0;  }  
Magic Number,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,ClearPrimes,The following statement contains a magic number: if (masks [i' j] == 2)  	masks [i' j] = 0;  
Magic Number,QuickGraph.Algorithms.KernighanLinAlgoritm,KernighanLinAlgoritm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\GraphPartition\KernighanLinAlgoritm.cs,KernighanLinAlgoritm,The following statement contains a magic number: this.partitionSize = g.Vertices.Count () / 2;  
Magic Number,QuickGraph.Algorithms.KernighanLinAlgoritm,KernighanLinAlgoritm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\GraphPartition\KernighanLinAlgoritm.cs,doSingleSwap,The following statement contains a magic number: foreach (TVertex vertFromA in unswappedA)  	foreach (TVertex vertFromB in unswappedB) {  		TEdge edge = findEdge (vertFromA' vertFromB);  		double edgeCost;  		if (edge != null)  			edgeCost = edge.Tag;  		else  			edgeCost = 0.0;  		double gain = getVertexCost (vertFromA) + getVertexCost (vertFromB) - 2 * edgeCost;  		if (gain > maxGain) {  			maxPair = new Tuple<TVertex' TVertex> (vertFromA' vertFromB);  			maxGain = gain;  		}  	}  
Magic Number,QuickGraph.Algorithms.KernighanLinAlgoritm,KernighanLinAlgoritm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\GraphPartition\KernighanLinAlgoritm.cs,doSingleSwap,The following statement contains a magic number: foreach (TVertex vertFromB in unswappedB) {  	TEdge edge = findEdge (vertFromA' vertFromB);  	double edgeCost;  	if (edge != null)  		edgeCost = edge.Tag;  	else  		edgeCost = 0.0;  	double gain = getVertexCost (vertFromA) + getVertexCost (vertFromB) - 2 * edgeCost;  	if (gain > maxGain) {  		maxPair = new Tuple<TVertex' TVertex> (vertFromA' vertFromB);  		maxGain = gain;  	}  }  
Magic Number,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithm.cs,RandomTree,The following statement contains a magic number: do {  	if (cancelManager.IsCancelling)  		break;  	eps /= 2;  	success = Attempt (eps);  } while (!success);  
Magic Number,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithm.cs,RandomTree,The following statement contains a magic number: eps /= 2;  
Magic Number,QuickGraph.Algorithms.RandomWalks,RandomWalkAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\RandomWalks\RandomWalkAlgorithm.cs,Generate,The following statement contains a magic number: Generate (root' 100);  
Magic Number,QuickGraph.Collections,BinaryHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\BinaryHeap.cs,MinHeapifyDown,The following statement contains a magic number: while (current > 0 && this.Less (current' parent)) {  	this.Swap (current' parent);  	current = parent;  	parent = (current - 1) / 2;  }  
Magic Number,QuickGraph.Collections,BinaryHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\BinaryHeap.cs,MinHeapifyDown,The following statement contains a magic number: parent = (current - 1) / 2;  
Magic Number,QuickGraph.Collections,BinaryHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\BinaryHeap.cs,IsConsistent,The following statement contains a magic number: for (int i = 0; i < this.count; i++) {  	var l = 2 * i + 1;  	var r = 2 * i + 2;  	if (l < this.count && !this.LessOrEqual (i' l))  		wrong = i;  	if (r < this.count && !this.LessOrEqual (i' r))  		wrong = i;  }  
Magic Number,QuickGraph.Collections,BinaryHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\BinaryHeap.cs,IsConsistent,The following statement contains a magic number: for (int i = 0; i < this.count; i++) {  	var l = 2 * i + 1;  	var r = 2 * i + 2;  	if (l < this.count && !this.LessOrEqual (i' l))  		wrong = i;  	if (r < this.count && !this.LessOrEqual (i' r))  		wrong = i;  }  
Magic Number,QuickGraph.Collections,BinaryHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\BinaryHeap.cs,IsConsistent,The following statement contains a magic number: for (int i = 0; i < this.count; i++) {  	var l = 2 * i + 1;  	var r = 2 * i + 2;  	if (l < this.count && !this.LessOrEqual (i' l))  		wrong = i;  	if (r < this.count && !this.LessOrEqual (i' r))  		wrong = i;  }  
Magic Number,QuickGraph.Collections,BinaryHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\BinaryHeap.cs,ToStringTree,The following statement contains a magic number: for (int i = 0; i < this.count; i++) {  	var l = 2 * i + 1;  	var r = 2 * i + 2;  	var s = "index";  	s += i.ToString ();  	s += ": ";  	s += EntryToString (i);  	s += " -> ";  	s += EntryToString (l);  	s += " and ";  	s += EntryToString (r);  	str += "\r\n" + s;  }  
Magic Number,QuickGraph.Collections,BinaryHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\BinaryHeap.cs,ToStringTree,The following statement contains a magic number: for (int i = 0; i < this.count; i++) {  	var l = 2 * i + 1;  	var r = 2 * i + 2;  	var s = "index";  	s += i.ToString ();  	s += ": ";  	s += EntryToString (i);  	s += " -> ";  	s += EntryToString (l);  	s += " and ";  	s += EntryToString (r);  	str += "\r\n" + s;  }  
Magic Number,QuickGraph.Collections,BinaryHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\BinaryHeap.cs,ToStringTree,The following statement contains a magic number: for (int i = 0; i < this.count; i++) {  	var l = 2 * i + 1;  	var r = 2 * i + 2;  	var s = "index";  	s += i.ToString ();  	s += ": ";  	s += EntryToString (i);  	s += " -> ";  	s += EntryToString (l);  	s += " and ";  	s += EntryToString (r);  	str += "\r\n" + s;  }  
Magic Number,QuickGraph.Collections,BinaryHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\BinaryHeap.cs,ResizeArray,The following statement contains a magic number: if (this.count == this.items.Length) {  	var newItems = new KeyValuePair<TPriority' TValue>[this.count * 2 + 1];  	Array.Copy (this.items' newItems' this.count);  	this.items = newItems;  }  
Magic Number,QuickGraph.Collections,BinaryHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\BinaryHeap.cs,MinHeapifyUp,The following statement contains a magic number: while (true) {  	var left = 2 * index + 1;  	var right = 2 * index + 2;  	var smallest = index;  	if (left < this.count && this.Less (left' smallest))  		smallest = left;  	if (right < this.count && this.Less (right' smallest))  		smallest = right;  	if (smallest == index)  		break;  	this.Swap (smallest' index);  	index = smallest;  }  
Magic Number,QuickGraph.Collections,BinaryHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\BinaryHeap.cs,MinHeapifyUp,The following statement contains a magic number: while (true) {  	var left = 2 * index + 1;  	var right = 2 * index + 2;  	var smallest = index;  	if (left < this.count && this.Less (left' smallest))  		smallest = left;  	if (right < this.count && this.Less (right' smallest))  		smallest = right;  	if (smallest == index)  		break;  	this.Swap (smallest' index);  	index = smallest;  }  
Magic Number,QuickGraph.Collections,BinaryHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\BinaryHeap.cs,MinHeapifyUp,The following statement contains a magic number: while (true) {  	var left = 2 * index + 1;  	var right = 2 * index + 2;  	var smallest = index;  	if (left < this.count && this.Less (left' smallest))  		smallest = left;  	if (right < this.count && this.Less (right' smallest))  		smallest = right;  	if (smallest == index)  		break;  	this.Swap (smallest' index);  	index = smallest;  }  
Magic Number,QuickGraph.Collections,SoftHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\SoftHeap.cs,SoftHeap,The following statement contains a magic number: Contract.Requires (0 < maximumErrorRate && maximumErrorRate <= 0.5);  
Magic Number,QuickGraph.Collections,SoftHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\SoftHeap.cs,SoftHeap,The following statement contains a magic number: this.r = 2 + 2 * (int)Math.Ceiling (Math.Log (1.0 / this.errorRate' 2.0));  
Magic Number,QuickGraph.Collections,SoftHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\SoftHeap.cs,SoftHeap,The following statement contains a magic number: this.r = 2 + 2 * (int)Math.Ceiling (Math.Log (1.0 / this.errorRate' 2.0));  
Magic Number,QuickGraph.Collections,SoftHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\SoftHeap.cs,SoftHeap,The following statement contains a magic number: this.r = 2 + 2 * (int)Math.Ceiling (Math.Log (1.0 / this.errorRate' 2.0));  
Magic Number,QuickGraph.Collections,SoftHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\SoftHeap.cs,Shift,The following statement contains a magic number: if (v.Rank > this.r && (v.Rank % 2 == 1 || v.Child.Rank < v.Rank - 1)) {  	v.Next = Shift (v.Next);  	// restore heap ordering that might be broken by shifting  	if (this.comparison (v.Next.CKey' v.Child.CKey) > 0) {  		var tmp = v.Child;  		v.Child = v.Next;  		v.Next = tmp;  	}  	if (this.comparison (v.Next.CKey' this.keyMaxValue) != 0 && v.Next.IL != null) {  		v.Next.ILTail.Next = v.IL;  		v.IL = v.Next.IL;  		if (v.ILTail == null)  			v.ILTail = v.Next.ILTail;  		v.CKey = v.Next.CKey;  	}  }  
Magic Number,QuickGraph.Collections,SoftHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\SoftHeap.cs,DeleteMin,The following statement contains a magic number: while (h.Queue.IL == null) {  	var tmp = h.Queue;  	int childCount = 0;  	while (tmp.Next != null) {  		tmp = tmp.Next;  		childCount++;  	}  	if (childCount < h.Rank / 2) {  		h.Prev.Next = h.Next;  		h.Next.Prev = h.Prev;  		FixMinLinst (h.Prev);  		tmp = h.Queue;  		while (tmp.Next != null) {  			Meld (tmp.Child);  			tmp = tmp.Next;  		}  	} else {  		h.Queue = Shift (h.Queue);  		if (this.comparison (h.Queue.CKey' this.keyMaxValue) == 0) {  			h.Prev.Next = h.Next;  			h.Next.Prev = h.Prev;  			h = h.Prev;  		}  	}  	h = header.Next.SuffixMin;  }  
Magic Number,QuickGraph.Collections,SoftHeap,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Collections\SoftHeap.cs,DeleteMin,The following statement contains a magic number: if (childCount < h.Rank / 2) {  	h.Prev.Next = h.Next;  	h.Next.Prev = h.Prev;  	FixMinLinst (h.Prev);  	tmp = h.Queue;  	while (tmp.Next != null) {  		Meld (tmp.Child);  		tmp = tmp.Next;  	}  } else {  	h.Queue = Shift (h.Queue);  	if (this.comparison (h.Queue.CKey' this.keyMaxValue) == 0) {  		h.Prev.Next = h.Next;  		h.Next.Prev = h.Prev;  		h = h.Prev;  	}  }  
Missing Default,QuickGraph.Algorithms,AlgorithmExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AlgorithmExtensions.cs,GetVertexIdentity,The following switch statement is missing a default case: switch (Type.GetTypeCode (typeof(TVertex))) {  case TypeCode.String:  case TypeCode.Boolean:  case TypeCode.Byte:  case TypeCode.Char:  case TypeCode.Decimal:  case TypeCode.Double:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.SByte:  case TypeCode.Single:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return v => v.ToString ();  }  
Missing Default,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,DoStep,The following switch statement is missing a default case: switch (_step) {  case Steps.Step1: {  	Steps currentStep = _step;  	_step = RunStep1 (_masks' _colsCovered' _width' _height);  	return currentStep;  }  case Steps.Step2: {  	Steps currentStep = _step;  	_step = RunStep2 (_costs' _masks' _rowsCovered' _colsCovered' _width' _height' ref _pathStart);  	return currentStep;  }  case Steps.Step3: {  	Steps currentStep = _step;  	_step = RunStep3 (_masks' _rowsCovered' _colsCovered' _width' _height' _path' _pathStart);  	return currentStep;  }  case Steps.Step4: {  	Steps currentStep = _step;  	_step = RunStep4 (_costs' _rowsCovered' _colsCovered' _width' _height);  	return currentStep;  }  }  
Missing Default,QuickGraph.Algorithms.AssigmentProblem,HungarianAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\AssigmentProblem\HungarianAlgorithm.cs,ConvertPath,The following switch statement is missing a default case: switch (masks [path [i].Row' path [i].Column]) {  case 1:  	masks [path [i].Row' path [i].Column] = 0;  	break;  case 2:  	masks [path [i].Row' path [i].Column] = 1;  	break;  }  
Missing Default,QuickGraph.Algorithms.Search,UndirectedDepthFirstSearchAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\Search\UndirectedDepthFirstSearchAlgorithm.cs,Visit,The following switch statement is missing a default case: switch (c) {  case GraphColor.White:  	this.OnTreeEdge (e' reversed);  	todo.Push (new SearchFrame (u' edges' frame.Depth + 1));  	u = v;  	edges = oee (this.VisitedGraph.AdjacentEdges (u)).GetEnumerator ();  	this.VertexColors [u] = GraphColor.Gray;  	this.OnDiscoverVertex (u);  	break;  case GraphColor.Gray:  	this.OnBackEdge (e' reversed);  	break;  case GraphColor.Black:  	this.OnForwardOrCrossEdge (e' reversed);  	break;  }  
Missing Default,QuickGraph.Algorithms.Search,DepthFirstSearchAlgorithm,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Algorithms\Search\DepthFirstSearchAlgorithm.cs,Visit,The following switch statement is missing a default case: switch (c) {  case GraphColor.White:  	this.OnTreeEdge (e);  	todo.Push (new SearchFrame (u' edges' depth));  	u = v;  	edges = oee (this.VisitedGraph.OutEdges (u)).GetEnumerator ();  	depth++;  	this.VertexColors [u] = GraphColor.Gray;  	this.OnDiscoverVertex (u);  	break;  case GraphColor.Gray:  	this.OnBackEdge (e);  	break;  case GraphColor.Black:  	this.OnForwardOrCrossEdge (e);  	break;  }  
Missing Default,QuickGraph.Serialization,DirectedGraphMLExtensions,D:\newReposJune17\YaccConstructor_QuickGraph\src\QuickGraph\Serialization\DirectedGraphMLExtensions.cs,ToDirectedGraphML,The following switch statement is missing a default case: switch (color) {  case GraphColor.Black:  	n.Background = "Black";  	break;  case GraphColor.Gray:  	n.Background = "LightGray";  	break;  case GraphColor.White:  	n.Background = "White";  	break;  }  
