Implementation smell,Namespace,Class,File,Method,Description
Long Method,QuickGraph.Algorithms.Search,BreadthFirstAlgorithmSearchTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\Search\BreadthFirstSearchAlgirthmTest.cs,RunBfs,The method has 109 lines of code.
Long Method,QuickGraph.Algorithms.Search,UndirectedBreadthFirstAlgorithmSearchTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\Search\UndirectedBreathFirstSearchAlgorithmTest.cs,RunBfs,The method has 122 lines of code.
Long Method,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The method has 104 lines of code.
Long Method,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The method has 107 lines of code.
Complex Method,QuickGraph.Tests.Algorithms,TarjanOfflineLeastCommonAncestorAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TarjanOfflineLeastCommonAncestorAlgorithmTest.cs,TarjanOfflineLeastCommonAncestorAlgorithmAll,Cyclomatic complexity of the method is 8
Complex Method,QuickGraph.Algorithms,EulerianTrailAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\EulerianTrailAlgorithmTest.cs,ComputeTrail,Cyclomatic complexity of the method is 8
Complex Method,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithmTest.cs,Repro13160,Cyclomatic complexity of the method is 12
Complex Method,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,RandomTest,Cyclomatic complexity of the method is 10
Complex Method,QuickGraph.Tests.Data,Store,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Data\Store.Designer.cs,InitVars,Cyclomatic complexity of the method is 9
Long Parameter List,QuickGraph.Tests.Algorithms,MaximumBipartiteMatchingAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumBipartiteMatchingAlgorithmTest.cs,MaxBipartiteMatch,The method has 6 parameters. Parameters: g' vertexSetA' vertexSetB' vertexFactory' edgeFactory' expectedMatchSize
Long Parameter List,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPath,The method has 5 parameters. Parameters: g' edgeWeights' rootVertex' goalVertex' pathCount
Long Parameter List,QuickGraph.Tests.Algorithms.ShortestPath,BoostFloydWarshallTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\FloydWarshallAllPairShortestPathAlgorithmTest.cs,AddEdge,The method has 5 parameters. Parameters: g' distances' source' target' weight
Long Parameter List,QuickGraph.Algorithms.ShortestPath,BoostDijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,AddEdge,The method has 5 parameters. Parameters: g' distances' source' target' weight
Long Parameter List,QuickGraph.Tests,UndirectedBidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedBidirectionalGraphTest.cs,ContainsEdgeAssertions,The method has 5 parameters. Parameters: g' e12' f12' e21' f21
Long Parameter List,QuickGraph.Tests,UndirectedGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTest.cs,ContainsEdgeAssertions,The method has 5 parameters. Parameters: g' e12' f12' e21' f21
Long Parameter List,QuickGraph.Serialization,TestEdge,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,TestEdge,The method has 9 parameters. Parameters: source' target' id' _string' _int' _long' _float' _double' _bool
Long Identifier,QuickGraph.Tests.Algorithms.MaximumFlow,EdmondsKarpMaximumFlowAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumFlow\EdmondsKarpMaximumFlowAlgorithmTest.cs,RunMaxFlowAlgorithm,The length of the parameter reversedEdgeAugmentorAlgorithm is 30.
Long Statement,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddVerticesAndEdgeRange,The length of the statement  "            // TODO: add assertions to method AdjacencyGraphTVertexTEdgeTest.AddVerticesAndEdgeRange(AdjacencyGraph`2<!!0'!!1>' !!1[]) " is 122.
Long Statement,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,TryGetEdges,The length of the statement  "            // TODO: add assertions to method AdjacencyGraphTVertexTEdgeTest.TryGetEdges(AdjacencyGraph`2<!!0'!!1>' !!0' !!0' IEnumerable`1<!!1>&) " is 134.
Long Statement,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,TryGetOutEdges,The length of the statement  "            // TODO: add assertions to method AdjacencyGraphTVertexTEdgeTest.TryGetOutEdges(AdjacencyGraph`2<!!0'!!1>' !!0' IEnumerable`1<!!1>&) " is 132.
Long Statement,QuickGraph,ArrayAdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ArrayAdjacencyGraphTVertexTEdgeTest.cs,AllowParallelEdgesGet,The length of the statement  "            // TODO: add assertions to method ArrayAdjacencyGraphTVertexTEdgeTest.AllowParallelEdgesGet(ArrayAdjacencyGraph`2<!!0'!!1>) " is 123.
Long Statement,QuickGraph,ArrayAdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ArrayAdjacencyGraphTVertexTEdgeTest.cs,ContainsEdge,The length of the statement  "            // TODO: add assertions to method ArrayAdjacencyGraphTVertexTEdgeTest.ContainsEdge(ArrayAdjacencyGraph`2<!!0'!!1>' !!0' !!0) " is 124.
Long Statement,QuickGraph,ArrayAdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ArrayAdjacencyGraphTVertexTEdgeTest.cs,ContainsEdge01,The length of the statement  "            // TODO: add assertions to method ArrayAdjacencyGraphTVertexTEdgeTest.ContainsEdge01(ArrayAdjacencyGraph`2<!!0'!!1>' !!1) " is 121.
Long Statement,QuickGraph,ArrayAdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ArrayAdjacencyGraphTVertexTEdgeTest.cs,ContainsVertex,The length of the statement  "            // TODO: add assertions to method ArrayAdjacencyGraphTVertexTEdgeTest.ContainsVertex(ArrayAdjacencyGraph`2<!!0'!!1>' !!0) " is 121.
Long Statement,QuickGraph,ArrayAdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ArrayAdjacencyGraphTVertexTEdgeTest.cs,IsOutEdgesEmpty,The length of the statement  "            // TODO: add assertions to method ArrayAdjacencyGraphTVertexTEdgeTest.IsOutEdgesEmpty(ArrayAdjacencyGraph`2<!!0'!!1>' !!0) " is 122.
Long Statement,QuickGraph,ArrayAdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ArrayAdjacencyGraphTVertexTEdgeTest.cs,IsVerticesEmptyGet,The length of the statement  "            // TODO: add assertions to method ArrayAdjacencyGraphTVertexTEdgeTest.IsVerticesEmptyGet(ArrayAdjacencyGraph`2<!!0'!!1>) " is 120.
Long Statement,QuickGraph,ArrayAdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ArrayAdjacencyGraphTVertexTEdgeTest.cs,OutEdge,The length of the statement  "            // TODO: add assertions to method ArrayAdjacencyGraphTVertexTEdgeTest.OutEdge(ArrayAdjacencyGraph`2<!!0'!!1>' !!0' Int32) " is 121.
Long Statement,QuickGraph,ArrayAdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ArrayAdjacencyGraphTVertexTEdgeTest.cs,TryGetEdge,The length of the statement  "            // TODO: add assertions to method ArrayAdjacencyGraphTVertexTEdgeTest.TryGetEdge(ArrayAdjacencyGraph`2<!!0'!!1>' !!0' !!0' !!1&) " is 128.
Long Statement,QuickGraph,ArrayAdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ArrayAdjacencyGraphTVertexTEdgeTest.cs,TryGetEdges,The length of the statement  "            // TODO: add assertions to method ArrayAdjacencyGraphTVertexTEdgeTest.TryGetEdges(ArrayAdjacencyGraph`2<!!0'!!1>' !!0' !!0' IEnumerable`1<!!1>&) " is 144.
Long Statement,QuickGraph,ArrayAdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ArrayAdjacencyGraphTVertexTEdgeTest.cs,TryGetOutEdges,The length of the statement  "            // TODO: add assertions to method ArrayAdjacencyGraphTVertexTEdgeTest.TryGetOutEdges(ArrayAdjacencyGraph`2<!!0'!!1>' !!0' IEnumerable`1<!!1>&) " is 142.
Long Statement,QuickGraph,EdgeListGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\EdgeListGraphTVertexTEdgeTest.cs,AddEdgeRange,The length of the statement  "            // TODO: add assertions to method EdgeListGraphTVertexTEdgeTest.AddEdgeRange(EdgeListGraph`2<!!0'!!1>' IEnumerable`1<!!1>) " is 122.
Long Statement,QuickGraph,EdgeListGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\EdgeListGraphTVertexTEdgeTest.cs,AddVerticesAndEdgeRange,The length of the statement  "            // TODO: add assertions to method EdgeListGraphTVertexTEdgeTest.AddVerticesAndEdgeRange(EdgeListGraph`2<!!0'!!1>' IEnumerable`1<!!1>) " is 133.
Long Statement,QuickGraph,EdgeListGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\EdgeListGraphTVertexTEdgeTest.cs,RemoveEdgeIf,The length of the statement  "            // TODO: add assertions to method EdgeListGraphTVertexTEdgeTest.RemoveEdgeIf(EdgeListGraph`2<!!0'!!1>' EdgePredicate`2<!!0'!!1>) " is 128.
Long Statement,QuickGraph,GraphExtensionsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\GraphExtensionsTest.cs,ToAdjacencyGraph02,The length of the statement  "            // TODO: add assertions to method GraphExtensionsTest.ToAdjacencyGraph02(IEnumerable`1<!!0>' Func`2<!!0'IEnumerable`1<!!1>>' Boolean) " is 133.
Long Statement,QuickGraph,GraphExtensionsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\GraphExtensionsTest.cs,ToAdjacencyGraph03,The length of the statement  "            // TODO: add assertions to method GraphExtensionsTest.ToAdjacencyGraph03(IEnumerable`1<!!0>' Func`2<!!0'IEnumerable`1<!!1>>) " is 124.
Long Statement,QuickGraph,GraphExtensionsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\GraphExtensionsTest.cs,ToBidirectionalGraph03,The length of the statement  "            // TODO: add assertions to method GraphExtensionsTest.ToBidirectionalGraph03(IEnumerable`1<!!0>' Func`2<!!0'IEnumerable`1<!!1>>' Boolean) " is 137.
Long Statement,QuickGraph,GraphExtensionsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\GraphExtensionsTest.cs,ToBidirectionalGraph04,The length of the statement  "            // TODO: add assertions to method GraphExtensionsTest.ToBidirectionalGraph04(IEnumerable`1<!!0>' Func`2<!!0'IEnumerable`1<!!1>>) " is 128.
Long Statement,QuickGraph,UndirectedGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTVertexTEdgeTest.cs,AddEdgeRange,The length of the statement  "            // TODO: add assertions to method UndirectedGraphTVertexTEdgeTest.AddEdgeRange(UndirectedGraph`2<!!0'!!1>' IEnumerable`1<!!1>) " is 126.
Long Statement,QuickGraph,UndirectedGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTVertexTEdgeTest.cs,AddVertexRange,The length of the statement  "            // TODO: add assertions to method UndirectedGraphTVertexTEdgeTest.AddVertexRange(UndirectedGraph`2<!!0'!!1>' IEnumerable`1<!!0>) " is 128.
Long Statement,QuickGraph,UndirectedGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTVertexTEdgeTest.cs,AddVerticesAndEdgeRange,The length of the statement  "            // TODO: add assertions to method UndirectedGraphTVertexTEdgeTest.AddVerticesAndEdgeRange(UndirectedGraph`2<!!0'!!1>' IEnumerable`1<!!1>) " is 137.
Long Statement,QuickGraph,UndirectedGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTVertexTEdgeTest.cs,RemoveAdjacentEdgeIf,The length of the statement  "            // TODO: add assertions to method UndirectedGraphTVertexTEdgeTest.RemoveAdjacentEdgeIf(UndirectedGraph`2<!!0'!!1>' !!0' EdgePredicate`2<!!0'!!1>) " is 145.
Long Statement,QuickGraph,UndirectedGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTVertexTEdgeTest.cs,RemoveEdgeIf,The length of the statement  "            // TODO: add assertions to method UndirectedGraphTVertexTEdgeTest.RemoveEdgeIf(UndirectedGraph`2<!!0'!!1>' EdgePredicate`2<!!0'!!1>) " is 132.
Long Statement,QuickGraph,UndirectedGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTVertexTEdgeTest.cs,RemoveEdges,The length of the statement  "            // TODO: add assertions to method UndirectedGraphTVertexTEdgeTest.RemoveEdges(UndirectedGraph`2<!!0'!!1>' IEnumerable`1<!!1>) " is 125.
Long Statement,QuickGraph,UndirectedGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTVertexTEdgeTest.cs,RemoveVertexIf,The length of the statement  "            // TODO: add assertions to method UndirectedGraphTVertexTEdgeTest.RemoveVertexIf(UndirectedGraph`2<!!0'!!1>' VertexPredicate`1<!!0>) " is 132.
Long Statement,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The length of the statement  "            CollectionAssert.AreEqual(new int[] { 1' -6' 11' -6' 0 }' ChromaticPolynomial.findChromaticPolynomial(graph' (int x' int y) => new UndirectedEdge<int>(x' y))); " is 159.
Long Statement,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialAlmostFullGraph,The length of the statement  "            CollectionAssert.AreEqual(new int[] { 1' -5' 8' -4' 0 }' ChromaticPolynomial.findChromaticPolynomial(graph' (int x' int y) => new UndirectedEdge<int>(x' y))); " is 158.
Long Statement,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialEmptyGraph,The length of the statement  "            CollectionAssert.AreEqual(new int[] { 1' 0' 0' 0' 0' 0}' ChromaticPolynomial.findChromaticPolynomial(graph' (int x' int y) => new UndirectedEdge<int>(x' y))); " is 158.
Long Statement,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianOneComponentTrue,The length of the statement  "            var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1) }); " is 130.
Long Statement,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsTrue,The length of the statement  "            var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1) }); " is 130.
Long Statement,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The length of the statement  "            var algo = new QuickGraph.Algorithms.MaxCardinality<int' Edge<int>>(g1' g2' dictionary' 0.5' (u' v) => new Edge<int>(u' v)); " is 124.
Long Statement,QuickGraph.Tests.Algorithms,TransitiveClosureAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveClosureAlgorithmTest.cs,Test,The length of the statement  "            graph.AddVerticesAndEdgeRange(new[] { new Edge<int>(1' 2) ' new Edge<int>(2' 3)' new Edge<int>(3' 4)' new Edge<int>(3' 5) }); " is 125.
Long Statement,QuickGraph.Algorithms,SourceFirstBidirectionalTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstBidirectionalTopologicalSortAlgorithmTest.cs,SortDCT,The length of the statement  "            topo = new SourceFirstBidirectionalTopologicalSortAlgorithm<string' Edge<string>>(g' TopologicalSortDirection.Backward); " is 120.
Long Statement,QuickGraph.Algorithms,TopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TopologicalSortAlgorithmTest.cs,FacebookSeattleWordPuzzle,The length of the statement  "            Determine the original word' then go to http://www.facebook.com/seattle/[insert-word-here] to find the second part of the puzzle. " is 129.
Long Statement,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,CompareRoot,The length of the statement  "                Console.WriteLine("prim: {0}"' String.Join("' "' Array.ConvertAll(prim.ToArray()' e => e.ToString() + ':' + distances[e]))); " is 124.
Long Statement,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,CompareRoot,The length of the statement  "                Console.WriteLine("krus: {0}"' String.Join("' "' Array.ConvertAll(kruskal.ToArray()' e => e.ToString() + ':' + distances[e]))); " is 127.
Long Statement,QuickGraph.Tests.Algorithms.ShortestPath,FloydDijkstraCompareTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\FloydWarshallAllPairShortestPathAlgorithmTest.cs,Compare,The length of the statement  "                var dijkstra = shortestPathAlgorithmFactory(g' distances); // new DijkstraShortestPathAlgorithm<TVertex' TEdge>(g' distances); " is 126.
Long Statement,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedFullGraph,The length of the statement  "            var tcp = new TSP<String' EquatableEdge<String>' BidirectionalGraph<String' EquatableEdge<String>>>(testCase.Graph' testCase.GetFuncWeights()); " is 143.
Long Statement,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedSparseGraph,The length of the statement  "            var tcp = new TSP<String' EquatableEdge<String>' BidirectionalGraph<String' EquatableEdge<String>>>(testCase.Graph' testCase.GetFuncWeights()); " is 143.
Long Statement,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraphWithoutPath,The length of the statement  "            var tcp = new TSP<String' EquatableEdge<String>' BidirectionalGraph<String' EquatableEdge<String>>>(testCase.Graph' testCase.GetFuncWeights()); " is 143.
Long Statement,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraph,The length of the statement  "            var tcp = new TSP<String' EquatableEdge<String>' BidirectionalGraph<String' EquatableEdge<String>>>(testCase.Graph' testCase.GetFuncWeights()); " is 143.
Long Statement,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,performanceTest,The length of the statement  "                    var tcp = new TSP<String' EquatableEdge<String>' BidirectionalGraph<String' EquatableEdge<String>>>(testCase.Graph' testCase.GetFuncWeights()); " is 143.
Long Statement,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The length of the statement  "            var str = "True: 1 0' 2 1' 1 2' 2 3' 2 4' 1 5' 1 6' 2 7' 2 8' 2 9' 2 10' 1 11' 1 12' 1 13' 1 14' null' null' null' null' null' "; " is 129.
Long Statement,QuickGraph.Tests.Data,Store,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Data\Store.Designer.cs,GetTypedDataSetSchema,The length of the statement  "                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) { " is 131.
Long Statement,QuickGraph.Tests.Data,UsersDataTable,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Data\Store.Designer.cs,InitClass,The length of the statement  "                this.columnUserID = new global::System.Data.DataColumn("UserID"' typeof(string)' null' global::System.Data.MappingType.Element); " is 128.
Long Statement,QuickGraph.Tests.Data,UsersDataTable,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Data\Store.Designer.cs,GetTypedTableSchema,The length of the statement  "                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) { " is 131.
Long Statement,QuickGraph.Tests.Data,ProductsDataTable,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Data\Store.Designer.cs,InitClass,The length of the statement  "                this.columnProductID = new global::System.Data.DataColumn("ProductID"' typeof(string)' null' global::System.Data.MappingType.Element); " is 134.
Long Statement,QuickGraph.Tests.Data,ProductsDataTable,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Data\Store.Designer.cs,GetTypedTableSchema,The length of the statement  "                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) { " is 131.
Long Statement,QuickGraph.Tests.Data,OrdersDataTable,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Data\Store.Designer.cs,InitClass,The length of the statement  "                this.columnOrderID = new global::System.Data.DataColumn("OrderID"' typeof(string)' null' global::System.Data.MappingType.Element); " is 130.
Long Statement,QuickGraph.Tests.Data,OrdersDataTable,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Data\Store.Designer.cs,InitClass,The length of the statement  "                this.columnUserID = new global::System.Data.DataColumn("UserID"' typeof(string)' null' global::System.Data.MappingType.Element); " is 128.
Long Statement,QuickGraph.Tests.Data,OrdersDataTable,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Data\Store.Designer.cs,GetTypedTableSchema,The length of the statement  "                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) { " is 131.
Long Statement,QuickGraph.Tests.Data,OrderProductsDataTable,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Data\Store.Designer.cs,InitClass,The length of the statement  "                this.columnOrderID = new global::System.Data.DataColumn("OrderID"' typeof(string)' null' global::System.Data.MappingType.Element); " is 130.
Long Statement,QuickGraph.Tests.Data,OrderProductsDataTable,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Data\Store.Designer.cs,InitClass,The length of the statement  "                this.columnProductID = new global::System.Data.DataColumn("ProductID"' typeof(string)' null' global::System.Data.MappingType.Element); " is 134.
Long Statement,QuickGraph.Tests.Data,OrderProductsDataTable,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Data\Store.Designer.cs,InitClass,The length of the statement  "                this.columnQuantity = new global::System.Data.DataColumn("Quantity"' typeof(string)' null' global::System.Data.MappingType.Element); " is 132.
Long Statement,QuickGraph.Tests.Data,OrderProductsDataTable,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Data\Store.Designer.cs,InitClass,The length of the statement  "                this.Constraints.Add(new global::System.Data.UniqueConstraint("OrderProductsKey"' new global::System.Data.DataColumn[] { " is 120.
Long Statement,QuickGraph.Tests.Data,OrderProductsDataTable,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Data\Store.Designer.cs,GetTypedTableSchema,The length of the statement  "                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) { " is 131.
Complex Conditional,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,GenerateGraph,The conditional expression  "edge.Item1 == randVertex1 && edge.Item2 == randVertex2 ||                          edge.Item1 == randVertex2 && edge.Item2 == randVertex1"  is complex.
Empty Catch Block,QuickGraph.Algorithms,SourceFirstBidirectionalTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstBidirectionalTopologicalSortAlgorithmTest.cs,Sort,The method has an empty catch block.
Empty Catch Block,QuickGraph.Algorithms,SourceFirstTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstTopologicalSortAlgorithmTest.cs,Sort,The method has an empty catch block.
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException315,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException315,The following statement contains a magic number: KeyValuePair<int' int> s0 = new KeyValuePair<int' int>(1048578' 840056837);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException315,The following statement contains a magic number: KeyValuePair<int' int> s0 = new KeyValuePair<int' int>(1048578' 840056837);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException315,The following statement contains a magic number: KeyValuePair<int' int> s1 = new KeyValuePair<int' int>(273287168' 273287168);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException315,The following statement contains a magic number: KeyValuePair<int' int> s1 = new KeyValuePair<int' int>(273287168' 273287168);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException569,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException569,The following statement contains a magic number: KeyValuePair<int' int> s0 = new KeyValuePair<int' int>(-2097099498' 50384150);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException569,The following statement contains a magic number: KeyValuePair<int' int> s0 = new KeyValuePair<int' int>(-2097099498' 50384150);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException569,The following statement contains a magic number: KeyValuePair<int' int> s1           = new KeyValuePair<int' int>(-2097099498' -2097099498);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException569,The following statement contains a magic number: KeyValuePair<int' int> s1           = new KeyValuePair<int' int>(-2097099498' -2097099498);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException966,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[3];
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException966,The following statement contains a magic number: KeyValuePair<int' int> s0 = new KeyValuePair<int' int>(1048578' 840056837);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException966,The following statement contains a magic number: KeyValuePair<int' int> s0 = new KeyValuePair<int' int>(1048578' 840056837);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException966,The following statement contains a magic number: KeyValuePair<int' int> s1 = new KeyValuePair<int' int>(273287168' 273287168);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException966,The following statement contains a magic number: KeyValuePair<int' int> s1 = new KeyValuePair<int' int>(273287168' 273287168);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdgeThrowsContractException966,The following statement contains a magic number: keyValuePairs[2] = s2;
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdge55,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdge55,The following statement contains a magic number: KeyValuePair<int' int> s0 = new KeyValuePair<int' int>(36014113' 1781006400);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdge55,The following statement contains a magic number: KeyValuePair<int' int> s0 = new KeyValuePair<int' int>(36014113' 1781006400);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdge55,The following statement contains a magic number: KeyValuePair<int' int> s1 = new KeyValuePair<int' int>(708135361' 708135361);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdge55,The following statement contains a magic number: KeyValuePair<int' int> s1 = new KeyValuePair<int' int>(708135361' 708135361);
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdge791,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph,AdjacencyGraphTVertexTEdgeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\AdjacencyGraphTVertexTEdgeTest.AddEdge.g.cs,AddEdge01,The following statement contains a magic number: adjacencyGraph = new AdjacencyGraph<int' SEdge<int>>(false' 15334' 0);
Magic Number,QuickGraph,AdjacencyGraphFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Factories\AdjacencyGraphFactory.cs,Create,The following statement contains a magic number: edges != null && edges.Length <= 3
Magic Number,QuickGraph,GraphExtensionsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\GraphExtensionsTest.cs,DictionaryToVertexAndEdgeListGraph,The following statement contains a magic number: dic.Add(0' new int[] { 1' 2 });
Magic Number,QuickGraph,GraphExtensionsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\GraphExtensionsTest.cs,DictionaryToVertexAndEdgeListGraph,The following statement contains a magic number: dic.Add(1' new int[] { 2 });
Magic Number,QuickGraph,GraphExtensionsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\GraphExtensionsTest.cs,DictionaryToVertexAndEdgeListGraph,The following statement contains a magic number: dic.Add(2' new int[] { });
Magic Number,QuickGraph,GraphExtensionsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\GraphExtensionsTest.cs,CollectionOfEdgesToAdjacencyGraph,The following statement contains a magic number: int numVertices = 4;
Magic Number,QuickGraph,MutableVertexAndEdgeListGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\MutableVertexAndEdgeListGraphTest.cs,AddVertexAddEdgesAndRemoveTargetVertex,The following statement contains a magic number: Assert.AreEqual(vertexCount + 2' g.VertexCount);
Magic Number,QuickGraph,MutableVertexAndEdgeListGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\MutableVertexAndEdgeListGraphTest.cs,AddVertexAddEdgesAndRemoveSourceVertex,The following statement contains a magic number: Assert.AreEqual(vertexCount + 2' g.VertexCount);
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension6Verticies,The following statement contains a magic number: Assert.AreEqual(3' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }'                  new int[] { 1' 5'  1' 6'  2' 4'  2' 6'  3' 4'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies4Edges,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 4'  2' 4'  2' 5'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies4Edges,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 4'  2' 4'  2' 5'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies4Edges,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 4'  2' 4'  2' 5'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies4Edges,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 4'  2' 4'  2' 5'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies4Edges,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 4'  2' 4'  2' 5'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies4Edges,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 4'  2' 4'  2' 5'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies4Edges,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 4'  2' 4'  2' 5'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies4Edges,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 4'  2' 4'  2' 5'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies4Edges,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 4'  2' 4'  2' 5'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies4Edges,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 4'  2' 4'  2' 5'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies4Edges,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 4'  2' 4'  2' 5'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimension5Verticies4Edges,The following statement contains a magic number: Assert.AreEqual(2' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 4'  2' 4'  2' 5'  3' 5 }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionReducable,The following statement contains a magic number: Assert.AreEqual(1' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12 }'                  new int[] { 1' 5'  1' 6'  1' 7'                              2' 5'  2' 6'  2' 7'                              3' 5'  3' 6'  3' 7'                               4' 5'  4' 6'  4' 7'                  }));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNoEdges,The following statement contains a magic number: Assert.AreEqual(0' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }' new int[] {}));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNoEdges,The following statement contains a magic number: Assert.AreEqual(0' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }' new int[] {}));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNoEdges,The following statement contains a magic number: Assert.AreEqual(0' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }' new int[] {}));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNoEdges,The following statement contains a magic number: Assert.AreEqual(0' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }' new int[] {}));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNoEdges,The following statement contains a magic number: Assert.AreEqual(0' CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5' 6 }' new int[] {}));
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNonBipartiteGraph,The following statement contains a magic number: CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5'  4' 5 });
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNonBipartiteGraph,The following statement contains a magic number: CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5'  4' 5 });
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNonBipartiteGraph,The following statement contains a magic number: CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5'  4' 5 });
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNonBipartiteGraph,The following statement contains a magic number: CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5'  4' 5 });
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNonBipartiteGraph,The following statement contains a magic number: CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5'  4' 5 });
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNonBipartiteGraph,The following statement contains a magic number: CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5'  4' 5 });
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNonBipartiteGraph,The following statement contains a magic number: CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5'  4' 5 });
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNonBipartiteGraph,The following statement contains a magic number: CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5'  4' 5 });
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNonBipartiteGraph,The following statement contains a magic number: CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5'  4' 5 });
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNonBipartiteGraph,The following statement contains a magic number: CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5'  4' 5 });
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNonBipartiteGraph,The following statement contains a magic number: CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5'  4' 5 });
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNonBipartiteGraph,The following statement contains a magic number: CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5'  4' 5 });
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNonBipartiteGraph,The following statement contains a magic number: CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5'  4' 5 });
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,BipartiteDimensionNonBipartiteGraph,The following statement contains a magic number: CalcBicliqueCount(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 3'  2' 3'  1' 4'  2' 4'  2' 5'  4' 5 });
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,CalcBicliqueCount,The following statement contains a magic number: var convEdges = new Edge<int>[edges.Length / 2];
Magic Number,QuickGraph.Tests.Algorithms,BipartiteDimensionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\BipartiteDimensionAlgorithmTest.cs,CalcBicliqueCount,The following statement contains a magic number: convEdges[i / 2] = new Edge<int>(edges[i]' edges[i + 1]);
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4'  3' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4'  3' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4'  3' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4'  3' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4'  3' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4'  3' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4'  3' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4'  3' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4'  3' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4'  3' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4'  3' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4'  3' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The following statement contains a magic number: CollectionAssert.AreEqual(new int[] { 1' -6' 11' -6' 0 }' ChromaticPolynomial.findChromaticPolynomial(graph' (int x' int y) => new UndirectedEdge<int>(x' y)));
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The following statement contains a magic number: CollectionAssert.AreEqual(new int[] { 1' -6' 11' -6' 0 }' ChromaticPolynomial.findChromaticPolynomial(graph' (int x' int y) => new UndirectedEdge<int>(x' y)));
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialFullGraph,The following statement contains a magic number: CollectionAssert.AreEqual(new int[] { 1' -6' 11' -6' 0 }' ChromaticPolynomial.findChromaticPolynomial(graph' (int x' int y) => new UndirectedEdge<int>(x' y)));
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialAlmostFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialAlmostFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialAlmostFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialAlmostFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialAlmostFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialAlmostFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialAlmostFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialAlmostFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialAlmostFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialAlmostFullGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4 }'                  new int[] { 1' 2'  1' 3'  1' 4'                              2' 3'  2' 4});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialAlmostFullGraph,The following statement contains a magic number: CollectionAssert.AreEqual(new int[] { 1' -5' 8' -4' 0 }' ChromaticPolynomial.findChromaticPolynomial(graph' (int x' int y) => new UndirectedEdge<int>(x' y)));
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialAlmostFullGraph,The following statement contains a magic number: CollectionAssert.AreEqual(new int[] { 1' -5' 8' -4' 0 }' ChromaticPolynomial.findChromaticPolynomial(graph' (int x' int y) => new UndirectedEdge<int>(x' y)));
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialAlmostFullGraph,The following statement contains a magic number: CollectionAssert.AreEqual(new int[] { 1' -5' 8' -4' 0 }' ChromaticPolynomial.findChromaticPolynomial(graph' (int x' int y) => new UndirectedEdge<int>(x' y)));
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialEmptyGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4' 5 }'                  new int[] {});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialEmptyGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4' 5 }'                  new int[] {});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialEmptyGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4' 5 }'                  new int[] {});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,ChromaticPolinomialEmptyGraph,The following statement contains a magic number: var graph = BuildGraph(new int[] { 1' 2' 3' 4' 5 }'                  new int[] {});
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,BuildGraph,The following statement contains a magic number: var convEdges = new UndirectedEdge<int>[edges.Length / 2];
Magic Number,QuickGraph.Tests.Algorithms,ChromaticPolinomialAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ChromaticPolinomialAlgorithmTest.cs,BuildGraph,The following statement contains a magic number: convEdges[i / 2] = new UndirectedEdge<int>(edges[i]' edges[i + 1]);
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 6)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 7)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(6' 7)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: var tocompare = new List<HashSet<int>>(new HashSet<int>[]              {                  new HashSet<int>(new int[] { 3' 5' 6 })'                  new HashSet<int>(new int[] { 1' 4 })'                  new HashSet<int>(new int[] { 2' 7 })              });
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: var tocompare = new List<HashSet<int>>(new HashSet<int>[]              {                  new HashSet<int>(new int[] { 3' 5' 6 })'                  new HashSet<int>(new int[] { 1' 4 })'                  new HashSet<int>(new int[] { 2' 7 })              });
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: var tocompare = new List<HashSet<int>>(new HashSet<int>[]              {                  new HashSet<int>(new int[] { 3' 5' 6 })'                  new HashSet<int>(new int[] { 1' 4 })'                  new HashSet<int>(new int[] { 2' 7 })              });
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: var tocompare = new List<HashSet<int>>(new HashSet<int>[]              {                  new HashSet<int>(new int[] { 3' 5' 6 })'                  new HashSet<int>(new int[] { 1' 4 })'                  new HashSet<int>(new int[] { 2' 7 })              });
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: var tocompare = new List<HashSet<int>>(new HashSet<int>[]              {                  new HashSet<int>(new int[] { 3' 5' 6 })'                  new HashSet<int>(new int[] { 1' 4 })'                  new HashSet<int>(new int[] { 2' 7 })              });
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: var tocompare = new List<HashSet<int>>(new HashSet<int>[]              {                  new HashSet<int>(new int[] { 3' 5' 6 })'                  new HashSet<int>(new int[] { 1' 4 })'                  new HashSet<int>(new int[] { 2' 7 })              });
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest1,The following statement contains a magic number: Assert.AreEqual(partition.Count' 3);
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 8)'                  new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 6)'                  new Tuple<int' int>(4' 8)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 7)'                  new Tuple<int' int>(5' 8)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(7' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: int['] domatics =              {                  { 1' 5' 2' 8' 4' 6' 3' 7 }'                  { 1' 5' 2' 8' 4' 7' 3' 6 }'                  { 1' 5' 2' 6' 4' 8' 3' 7 }'                  { 1' 5' 2' 6' 4' 7' 3' 8 }'                  { 1' 5' 2' 7' 4' 8' 3' 6 }'                  { 1' 5' 2' 7' 4' 6' 3' 8 }'                  { 1' 8' 2' 5' 4' 6' 3' 7 }'                  { 1' 8' 2' 5' 4' 7' 3' 6 }'                  { 1' 8' 2' 6' 4' 5' 3' 7 }'                  { 1' 8' 2' 6' 4' 7' 3' 5 }'                  { 1' 8' 2' 7' 4' 5' 3' 6 }'                  { 1' 8' 2' 7' 4' 6' 3' 5 }'                  { 1' 6' 2' 5' 4' 8' 3' 7 }'                  { 1' 6' 2' 5' 4' 7' 3' 8 }'                  { 1' 6' 2' 8' 4' 5' 3' 7 }'                  { 1' 6' 2' 8' 4' 7' 3' 5 }'                  { 1' 6' 2' 7' 4' 5' 3' 8 }'                  { 1' 6' 2' 7' 4' 8' 3' 5 }'                  { 1' 7' 2' 5' 4' 8' 3' 6 }'                  { 1' 7' 2' 5' 4' 6' 3' 8 }'                  { 1' 7' 2' 8' 4' 5' 3' 6 }'                  { 1' 7' 2' 8' 4' 6' 3' 5 }'                  { 1' 7' 2' 6' 4' 5' 3' 8 }'                  { 1' 7' 2' 6' 4' 8' 3' 5 }              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: curPartition.Add(new HashSet<int>(                          new int[] { domatics[i' 2 * j]' domatics[i' 2 * j + 1] }                      ));
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: curPartition.Add(new HashSet<int>(                          new int[] { domatics[i' 2 * j]' domatics[i' 2 * j + 1] }                      ));
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: j < domatics.GetLength(1) / 2
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTest2,The following statement contains a magic number: Assert.AreEqual(partition.Count' 4);
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestLoops,The following statement contains a magic number: Assert.AreEqual(partition.Count' 2);
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5' 6' 7' 8 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(6' 7)'                  new Tuple<int' int>(6' 8)'                  new Tuple<int' int>(6' 8)              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestMultipleEdges,The following statement contains a magic number: Assert.AreEqual(partition.Count' 2);
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: int[] vertices = { 1' 2' 3' 4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestFullGraph,The following statement contains a magic number: Tuple<int' int>[] edges =              {                  new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)'                  new Tuple<int' int>(1' 4)'                  new Tuple<int' int>(1' 5)'                  new Tuple<int' int>(2' 3)'                  new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)'                  new Tuple<int' int>(3' 5)'                  new Tuple<int' int>(4' 5)'              };
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestPerf,The following statement contains a magic number: int maxVertexCount = 16' statRetriesCount = 5;
Magic Number,QuickGraph.Tests.Algorithms,DomaticPartitionTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\DomaticPartitionAlgorithmTest.cs,DomaticPartitionTestPerf,The following statement contains a magic number: int maxVertexCount = 16' statRetriesCount = 5;
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPaths,The following statement contains a magic number: var graphEdges = new Edge<int>[edges.Length / 2];
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPaths,The following statement contains a magic number: graphEdges[i / 2] = new Edge<int>(edges[i]' edges[i + 1]);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 2'  2' 3'  3' 4'  5' 4  });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 2'  2' 3'  3' 4'  5' 4  });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 2'  2' 3'  3' 4'  5' 4  });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 2'  2' 3'  3' 4'  5' 4  });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 2'  2' 3'  3' 4'  5' 4  });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 2'  2' 3'  3' 4'  5' 4  });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 2'  2' 3'  3' 4'  5' 4  });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 2'  2' 3'  3' 4'  5' 4  });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 2'  2' 3'  3' 4'  5' 4  });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 2'  2' 3'  3' 4'  5' 4  });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5 }'                  new int[] { 1' 2'  2' 3'  3' 4'  5' 4  });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var paths = ToListPaths(new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var paths = ToListPaths(new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var paths = ToListPaths(new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var paths = ToListPaths(new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsOnePath,The following statement contains a magic number: var paths = ToListPaths(new int[] { 1' 2' 3' 4' 5 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var edges = new int[] { 1' 2'  1' 3'  1' 4'  1' 5'  2' 3' 2' 4' 2' 5'                              3' 4'  3' 5'  4' 5 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5 }' edges);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5 }' edges);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5 }' edges);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsFullGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5 }' edges);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsEmptyGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8 }'                  new int[] { });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsEmptyGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8 }'                  new int[] { });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsEmptyGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8 }'                  new int[] { });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsEmptyGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8 }'                  new int[] { });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsEmptyGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8 }'                  new int[] { });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsEmptyGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8 }'                  new int[] { });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsEmptyGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8 }'                  new int[] { });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }'                  new int[] { 1' 2'  2' 3'  3' 4'  4' 5'                              6' 7'  7' 3'  3' 8'  8' 9 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCrossedPaths,The following statement contains a magic number: var paths = ToListPaths (new int[] { 1' 2' 3' 4' 5'  1' 2' 3' 8' 9'  1' 2' 3' 6' 7'                  6' 7' 3' 4' 5'  6' 7' 3' 8' 9'  5' 4' 3' 8' 9 }' 5);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: var res = InducedPaths(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10 }'                  new int[] { 1' 2'  1' 5'  1' 6'  2' 3'  2' 7'  3' 4'  3' 8'  4' 5'  4' 9'                              5' 10'  6' 8'  6' 9'  7' 9'  7' 10'  8' 10 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsPetersenGraph,The following statement contains a magic number: Assert.IsTrue(res.Count == 60);
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var res = InducedPaths(new int[] { 0' 1' 2' 3' 4' 5' 6' 7 }'                  new int[] { 0' 1'  1' 2'  2' 3'  3' 4'                              4' 5'  5' 6'  6' 7'  7' 0 });
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var path = new List<int> { 0' 1' 2' 3' 4' 5' 6 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var path = new List<int> { 0' 1' 2' 3' 4' 5' 6 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var path = new List<int> { 0' 1' 2' 3' 4' 5' 6 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var path = new List<int> { 0' 1' 2' 3' 4' 5' 6 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: var path = new List<int> { 0' 1' 2' 3' 4' 5' 6 };
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: path = path.Select(x => (x + 1) % 8).ToList();
Magic Number,QuickGraph.Tests.Algorithms,InducedPathsAlgorithmTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\InducedPathsTest.cs,InducedPathsCircle,The following statement contains a magic number: i < 8
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianOneComponentTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1) });
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianOneComponentTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1) });
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianOneComponentTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1) });
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianOneComponentTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1) });
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianOneComponentFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 4)'                      new Tuple<int' int>(4' 1)' new Tuple<int' int>(1' 3)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianOneComponentFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 4)'                      new Tuple<int' int>(4' 1)' new Tuple<int' int>(1' 3)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianOneComponentFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 4)'                      new Tuple<int' int>(4' 1)' new Tuple<int' int>(1' 3)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianOneComponentFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 4)'                      new Tuple<int' int>(4' 1)' new Tuple<int' int>(1' 3)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianOneComponentFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 4)'                      new Tuple<int' int>(4' 1)' new Tuple<int' int>(1' 3)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianOneComponentFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 4)'                      new Tuple<int' int>(4' 1)' new Tuple<int' int>(1' 3)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianOneComponentFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 4)'                      new Tuple<int' int>(4' 1)' new Tuple<int' int>(1' 3)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1) });
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1) });
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1) });
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1) });
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsTrue,The following statement contains a magic number: g.AddVertex(4);
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsTrue,The following statement contains a magic number: g.AddVertex(5);
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1)'                      new Tuple<int' int>(4' 5)' new Tuple<int' int>(5' 6)'                      new Tuple<int' int>(6' 4)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1)'                      new Tuple<int' int>(4' 5)' new Tuple<int' int>(5' 6)'                      new Tuple<int' int>(6' 4)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1)'                      new Tuple<int' int>(4' 5)' new Tuple<int' int>(5' 6)'                      new Tuple<int' int>(6' 4)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1)'                      new Tuple<int' int>(4' 5)' new Tuple<int' int>(5' 6)'                      new Tuple<int' int>(6' 4)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1)'                      new Tuple<int' int>(4' 5)' new Tuple<int' int>(5' 6)'                      new Tuple<int' int>(6' 4)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1)'                      new Tuple<int' int>(4' 5)' new Tuple<int' int>(5' 6)'                      new Tuple<int' int>(6' 4)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1)'                      new Tuple<int' int>(4' 5)' new Tuple<int' int>(5' 6)'                      new Tuple<int' int>(6' 4)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1)'                      new Tuple<int' int>(4' 5)' new Tuple<int' int>(5' 6)'                      new Tuple<int' int>(6' 4)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1)'                      new Tuple<int' int>(4' 5)' new Tuple<int' int>(5' 6)'                      new Tuple<int' int>(6' 4)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(3' 1)'                      new Tuple<int' int>(4' 5)' new Tuple<int' int>(5' 6)'                      new Tuple<int' int>(6' 4)});
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianManyComponentsFalse,The following statement contains a magic number: g.AddVertex(7);
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianOneVertex,The following statement contains a magic number: g.AddVertex(420);
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianTwoVertices,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 2) });
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianTwoVertices,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 2) });
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianTwoVertices,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 2) });
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianTwoVerticesWithLoops,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 1)' new Tuple<int' int>(2' 2) });
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianTwoVerticesWithLoops,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 1)' new Tuple<int' int>(2' 2) });
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianTwoVerticesTwoEdges,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 1) });
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianTwoVerticesTwoEdges,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 1) });
Magic Number,QuickGraph.Tests.Algorithms,EulerianGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsEulerianGraphAlgorithmTest.cs,IsEulerianTwoVerticesOneEdge,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2) });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] {new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)'                      new Tuple<int' int>(1' 3)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] {new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)'                      new Tuple<int' int>(1' 3)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] {new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)'                      new Tuple<int' int>(1' 3)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] {new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)'                      new Tuple<int' int>(1' 3)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] {new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)'                      new Tuple<int' int>(1' 3)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] {new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)'                      new Tuple<int' int>(1' 3)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] {new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)'                      new Tuple<int' int>(1' 3)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] {new Tuple<int' int>(1' 2)' new Tuple<int' int>(2' 3)'                      new Tuple<int' int>(1' 3)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                      new Tuple<int' int>(2' 3)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTwoVerticesTrue,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2) });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTwoVerticesFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 1)' new Tuple<int' int>(2' 2) });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTwoVerticesFalse,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 1)' new Tuple<int' int>(2' 2) });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithLoops,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 1)' new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)' new Tuple<int' int>(3' 3)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithLoops,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 1)' new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)' new Tuple<int' int>(3' 3)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithLoops,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 1)' new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)' new Tuple<int' int>(3' 3)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithLoops,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 1)' new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)' new Tuple<int' int>(3' 3)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithLoops,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 1)' new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)' new Tuple<int' int>(3' 3)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithLoops,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 1)' new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)' new Tuple<int' int>(3' 3)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithLoops,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 1)' new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)' new Tuple<int' int>(3' 3)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithLoops,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 1)' new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)' new Tuple<int' int>(3' 3)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithLoops,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 1)' new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)' new Tuple<int' int>(3' 3)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithLoops,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 1)' new Tuple<int' int>(1' 1)'                  new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)' new Tuple<int' int>(2' 2)'                  new Tuple<int' int>(3' 3)' new Tuple<int' int>(3' 3)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithParallelEdges,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithParallelEdges,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithParallelEdges,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithParallelEdges,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithParallelEdges,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianWithParallelEdges,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)' new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 4)});
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)' new Tuple<int' int>(2' 5)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonian10VerticesNotDiracsTheorem,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,IsHamiltonianGraphAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,IsHamiltonianTestCyclesBuilder,The following statement contains a magic number: var g = constructGraph(new Tuple<int' int>[] { new Tuple<int' int>(1' 2)'                  new Tuple<int' int>(1' 3)' new Tuple<int' int>(1' 4)' new Tuple<int' int>(1' 7)'                  new Tuple<int' int>(1' 8)' new Tuple<int' int>(1' 10)' new Tuple<int' int>(2' 6)'                  new Tuple<int' int>(2' 9)' new Tuple<int' int>(2' 4)'                  new Tuple<int' int>(3' 4)' new Tuple<int' int>(3' 6)' new Tuple<int' int>(3' 7)'                  new Tuple<int' int>(3' 8)' new Tuple<int' int>(4' 6)' new Tuple<int' int>(4' 5)'                  new Tuple<int' int>(4' 7)' new Tuple<int' int>(5' 7)' new Tuple<int' int>(5' 6)'                  new Tuple<int' int>(5' 9)' new Tuple<int' int>(5' 10)' new Tuple<int' int>(6' 9)'                  new Tuple<int' int>(6' 10)' new Tuple<int' int>(6' 7)' new Tuple<int' int>(7' 8)'                  new Tuple<int' int>(8' 9)' new Tuple<int' int>(8' 10)' new Tuple<int' int>(9' 10)              });
Magic Number,QuickGraph.Tests.Algorithms,SequenceComparer<T>,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,GetHashCode,The following statement contains a magic number: int hash = 1234567;
Magic Number,QuickGraph.Tests.Algorithms,SequenceComparer<T>,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\IsHamiltonianGraphAlgorithmTest.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + elem.GetHashCode();
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,SmallTest,The following statement contains a magic number: g1.AddVerticesAndEdgeRange(new[] {new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(2' 4)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,SmallTest,The following statement contains a magic number: g1.AddVerticesAndEdgeRange(new[] {new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(2' 4)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,SmallTest,The following statement contains a magic number: g1.AddVerticesAndEdgeRange(new[] {new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(2' 4)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,SmallTest,The following statement contains a magic number: g1.AddVerticesAndEdgeRange(new[] {new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(2' 4)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,SmallTest,The following statement contains a magic number: g2.AddVerticesAndEdgeRange(new[] {new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(2' 4)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,SmallTest,The following statement contains a magic number: g2.AddVerticesAndEdgeRange(new[] {new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(2' 4)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,SmallTest,The following statement contains a magic number: g2.AddVerticesAndEdgeRange(new[] {new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(2' 4)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,SmallTest,The following statement contains a magic number: g2.AddVerticesAndEdgeRange(new[] {new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(2' 4)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,SmallTest,The following statement contains a magic number: var algo = new MaxCardinality<int' Edge<int>>(g1' g2' dictionary' 0.5' (u' v) => new Edge<int>(u' v));
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,SmallTest,The following statement contains a magic number: var e = Enumerable.Range(1' 4).Select(x => Tuple.Create(x' x));
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: g1.AddVerticesAndEdgeRange(new[]              {new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: g1.AddVerticesAndEdgeRange(new[]              {new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: g1.AddVerticesAndEdgeRange(new[]              {new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: g1.AddVerticesAndEdgeRange(new[]              {new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: g1.AddVerticesAndEdgeRange(new[]              {new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: g1.AddVerticesAndEdgeRange(new[]              {new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: g2.AddVerticesAndEdgeRange(new[] {new Edge<int>(1' 2)' new Edge<int>(2' 3)' new Edge<int>(2' 4)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: g2.AddVerticesAndEdgeRange(new[] {new Edge<int>(1' 2)' new Edge<int>(2' 3)' new Edge<int>(2' 4)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: g2.AddVerticesAndEdgeRange(new[] {new Edge<int>(1' 2)' new Edge<int>(2' 3)' new Edge<int>(2' 4)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: g2.AddVerticesAndEdgeRange(new[] {new Edge<int>(1' 2)' new Edge<int>(2' 3)' new Edge<int>(2' 4)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: g2.AddVerticesAndEdgeRange(new[] {new Edge<int>(1' 2)' new Edge<int>(2' 3)' new Edge<int>(2' 4)});
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: dictionary[Tuple.Create(2' 2)] = 1.0;
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: dictionary[Tuple.Create(2' 2)] = 1.0;
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: dictionary[Tuple.Create(3' 2)] = 0.6;
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: dictionary[Tuple.Create(3' 2)] = 0.6;
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: dictionary[Tuple.Create(3' 2)] = 0.6;
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: dictionary[Tuple.Create(4' 3)] = 1.0;
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: dictionary[Tuple.Create(4' 3)] = 1.0;
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: dictionary[Tuple.Create(5' 4)] = 1.0;
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: dictionary[Tuple.Create(5' 4)] = 1.0;
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: var algo = new QuickGraph.Algorithms.MaxCardinality<int' Edge<int>>(g1' g2' dictionary' 0.5' (u' v) => new Edge<int>(u' v));
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: var correctResult =                  SetModule.Empty<Tuple<int' int>>()                  .Add(Tuple.Create(1' 1))                  .Add(Tuple.Create(2' 2))                  .Add(Tuple.Create(3' 2))                  .Add(Tuple.Create(4' 3))                  .Add(Tuple.Create(5' 4));
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: var correctResult =                  SetModule.Empty<Tuple<int' int>>()                  .Add(Tuple.Create(1' 1))                  .Add(Tuple.Create(2' 2))                  .Add(Tuple.Create(3' 2))                  .Add(Tuple.Create(4' 3))                  .Add(Tuple.Create(5' 4));
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: var correctResult =                  SetModule.Empty<Tuple<int' int>>()                  .Add(Tuple.Create(1' 1))                  .Add(Tuple.Create(2' 2))                  .Add(Tuple.Create(3' 2))                  .Add(Tuple.Create(4' 3))                  .Add(Tuple.Create(5' 4));
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: var correctResult =                  SetModule.Empty<Tuple<int' int>>()                  .Add(Tuple.Create(1' 1))                  .Add(Tuple.Create(2' 2))                  .Add(Tuple.Create(3' 2))                  .Add(Tuple.Create(4' 3))                  .Add(Tuple.Create(5' 4));
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: var correctResult =                  SetModule.Empty<Tuple<int' int>>()                  .Add(Tuple.Create(1' 1))                  .Add(Tuple.Create(2' 2))                  .Add(Tuple.Create(3' 2))                  .Add(Tuple.Create(4' 3))                  .Add(Tuple.Create(5' 4));
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: var correctResult =                  SetModule.Empty<Tuple<int' int>>()                  .Add(Tuple.Create(1' 1))                  .Add(Tuple.Create(2' 2))                  .Add(Tuple.Create(3' 2))                  .Add(Tuple.Create(4' 3))                  .Add(Tuple.Create(5' 4));
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: var correctResult =                  SetModule.Empty<Tuple<int' int>>()                  .Add(Tuple.Create(1' 1))                  .Add(Tuple.Create(2' 2))                  .Add(Tuple.Create(3' 2))                  .Add(Tuple.Create(4' 3))                  .Add(Tuple.Create(5' 4));
Magic Number,QuickGraph.Tests.Algorithms,MaxCardinalityTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaxCardinalityTest.cs,DifferentGraphsTest,The following statement contains a magic number: var correctResult =                  SetModule.Empty<Tuple<int' int>>()                  .Add(Tuple.Create(1' 1))                  .Add(Tuple.Create(2' 2))                  .Add(Tuple.Create(3' 2))                  .Add(Tuple.Create(4' 3))                  .Add(Tuple.Create(5' 4));
Magic Number,QuickGraph.Tests.Algorithms,MaximumBipartiteMatchingAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumBipartiteMatchingAlgorithmTest.cs,BipartiteMaxMatchSimpleTest,The following statement contains a magic number: var integers = Enumerable.Range(0' 100);
Magic Number,QuickGraph.Tests.Algorithms,MaximumBipartiteMatchingAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumBipartiteMatchingAlgorithmTest.cs,BipartiteMaxMatchSimpleTest,The following statement contains a magic number: var even = integers.Where(n => n % 2 == 0).Select(n => n.ToString());
Magic Number,QuickGraph.Tests.Algorithms,MaximumBipartiteMatchingAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumBipartiteMatchingAlgorithmTest.cs,BipartiteMaxMatchSimpleTest,The following statement contains a magic number: var odd = integers.Where(n => n % 2 != 0).Select(n => n.ToString());
Magic Number,QuickGraph.Tests.Algorithms,MaximumBipartiteMatchingAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumBipartiteMatchingAlgorithmTest.cs,BipartiteMaxMatchSimpleReversedEdgesTest,The following statement contains a magic number: var integers = Enumerable.Range(0' 100);
Magic Number,QuickGraph.Tests.Algorithms,MaximumBipartiteMatchingAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumBipartiteMatchingAlgorithmTest.cs,BipartiteMaxMatchSimpleReversedEdgesTest,The following statement contains a magic number: var even = integers.Where(n => n % 2 == 0).Select(n => n.ToString());
Magic Number,QuickGraph.Tests.Algorithms,MaximumBipartiteMatchingAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumBipartiteMatchingAlgorithmTest.cs,BipartiteMaxMatchSimpleReversedEdgesTest,The following statement contains a magic number: var odd = integers.Where(n => n % 2 != 0).Select(n => n.ToString());
Magic Number,QuickGraph.Tests.Algorithms,MaximumBipartiteMatchingAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumBipartiteMatchingAlgorithmTest.cs,BipartiteMaxMatchTwoFullyConnectedSetsTest,The following statement contains a magic number: int nodesInSet1 = 100;
Magic Number,QuickGraph.Tests.Algorithms,MaximumBipartiteMatchingAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumBipartiteMatchingAlgorithmTest.cs,BipartiteMaxMatchTwoFullyConnectedSetsTest,The following statement contains a magic number: int nodesInSet2 = 10;
Magic Number,QuickGraph.Tests.Algorithms,MaximumBipartiteMatchingAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumBipartiteMatchingAlgorithmTest.cs,BipartiteMaxMatchTwoFullyConnectedSetsTest,The following statement contains a magic number: var even = integers.Where(n => n % 2 == 0).Select(n => n.ToString());
Magic Number,QuickGraph.Tests.Algorithms,MaximumBipartiteMatchingAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumBipartiteMatchingAlgorithmTest.cs,BipartiteMaxMatchTwoFullyConnectedSetsTest,The following statement contains a magic number: var odd = integers.Where(n => n % 2 != 0).Select(n => n.ToString());
Magic Number,QuickGraph.Tests.Algorithms,MaximumBipartiteMatchingAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumBipartiteMatchingAlgorithmTest.cs,BipartiteMaxMatchTwoFullyConnectedSetsTest,The following statement contains a magic number: even = integers.Where(n => n % 2 == 0).Select(n => n.ToString());
Magic Number,QuickGraph.Tests.Algorithms,MaximumBipartiteMatchingAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumBipartiteMatchingAlgorithmTest.cs,BipartiteMaxMatchTwoFullyConnectedSetsTest,The following statement contains a magic number: odd = integers.Where(n => n % 2 != 0).Select(n => n.ToString());
Magic Number,QuickGraph.Tests.Algorithms,MaximumBipartiteMatchingAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumBipartiteMatchingAlgorithmTest.cs,BipartiteMaxMatchUnequalPartitionsTest,The following statement contains a magic number: int largerSetSize = 1000;
Magic Number,QuickGraph.Tests.Algorithms,MaximumBipartiteMatchingAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumBipartiteMatchingAlgorithmTest.cs,MaxBipartiteMatch,The following statement contains a magic number: Assert.IsTrue(computeTime < TimeSpan.FromMinutes(5));
Magic Number,QuickGraph.Tests.Algorithms,TarjanOfflineLeastCommonAncestorAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TarjanOfflineLeastCommonAncestorAlgorithmTest.cs,TarjanOfflineLeastCommonAncestorAlgorithmAll,The following statement contains a magic number: count++ > 10
Magic Number,QuickGraph.Tests.Algorithms,TransitiveClosureAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveClosureAlgorithmTest.cs,SmallTest,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[] { new Edge<int>(1' 2)' new Edge<int>(2' 3)});
Magic Number,QuickGraph.Tests.Algorithms,TransitiveClosureAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveClosureAlgorithmTest.cs,SmallTest,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[] { new Edge<int>(1' 2)' new Edge<int>(2' 3)});
Magic Number,QuickGraph.Tests.Algorithms,TransitiveClosureAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveClosureAlgorithmTest.cs,SmallTest,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[] { new Edge<int>(1' 2)' new Edge<int>(2' 3)});
Magic Number,QuickGraph.Tests.Algorithms,TransitiveClosureAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveClosureAlgorithmTest.cs,SmallTest,The following statement contains a magic number: Assert.AreEqual(3' result.EdgeCount);
Magic Number,QuickGraph.Tests.Algorithms,TransitiveClosureAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveClosureAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[] { new Edge<int>(1' 2) ' new Edge<int>(2' 3)' new Edge<int>(3' 4)' new Edge<int>(3' 5) });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveClosureAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveClosureAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[] { new Edge<int>(1' 2) ' new Edge<int>(2' 3)' new Edge<int>(3' 4)' new Edge<int>(3' 5) });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveClosureAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveClosureAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[] { new Edge<int>(1' 2) ' new Edge<int>(2' 3)' new Edge<int>(3' 4)' new Edge<int>(3' 5) });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveClosureAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveClosureAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[] { new Edge<int>(1' 2) ' new Edge<int>(2' 3)' new Edge<int>(3' 4)' new Edge<int>(3' 5) });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveClosureAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveClosureAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[] { new Edge<int>(1' 2) ' new Edge<int>(2' 3)' new Edge<int>(3' 4)' new Edge<int>(3' 5) });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveClosureAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveClosureAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[] { new Edge<int>(1' 2) ' new Edge<int>(2' 3)' new Edge<int>(3' 4)' new Edge<int>(3' 5) });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveClosureAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveClosureAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[] { new Edge<int>(1' 2) ' new Edge<int>(2' 3)' new Edge<int>(3' 4)' new Edge<int>(3' 5) });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveClosureAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveClosureAlgorithmTest.cs,Test,The following statement contains a magic number: Assert.AreEqual(9' result.EdgeCount);
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,SmallTest,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(1' 4)'                  new Edge<int>(1' 5)' new Edge<int>(2' 4)' new Edge<int>(3' 4)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,SmallTest,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(1' 4)'                  new Edge<int>(1' 5)' new Edge<int>(2' 4)' new Edge<int>(3' 4)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,SmallTest,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(1' 4)'                  new Edge<int>(1' 5)' new Edge<int>(2' 4)' new Edge<int>(3' 4)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,SmallTest,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(1' 4)'                  new Edge<int>(1' 5)' new Edge<int>(2' 4)' new Edge<int>(3' 4)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,SmallTest,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(1' 4)'                  new Edge<int>(1' 5)' new Edge<int>(2' 4)' new Edge<int>(3' 4)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,SmallTest,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(1' 4)'                  new Edge<int>(1' 5)' new Edge<int>(2' 4)' new Edge<int>(3' 4)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,SmallTest,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(1' 4)'                  new Edge<int>(1' 5)' new Edge<int>(2' 4)' new Edge<int>(3' 4)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,SmallTest,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(1' 4)'                  new Edge<int>(1' 5)' new Edge<int>(2' 4)' new Edge<int>(3' 4)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,SmallTest,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(1' 4)'                  new Edge<int>(1' 5)' new Edge<int>(2' 4)' new Edge<int>(3' 4)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,SmallTest,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(1' 4)'                  new Edge<int>(1' 5)' new Edge<int>(2' 4)' new Edge<int>(3' 4)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,SmallTest,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(1' 4)'                  new Edge<int>(1' 5)' new Edge<int>(2' 4)' new Edge<int>(3' 4)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,SmallTest,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(1' 2)' new Edge<int>(1' 3)' new Edge<int>(1' 4)'                  new Edge<int>(1' 5)' new Edge<int>(2' 4)' new Edge<int>(3' 4)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,SmallTest,The following statement contains a magic number: Assert.AreEqual(5' result.EdgeCount);
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: graph.AddVerticesAndEdgeRange(new[]              {                  new Edge<int>(0' 1)' new Edge<int>(0' 2)' new Edge<int>(0' 3)'                  new Edge<int>(2' 3)' new Edge<int>(2' 4)' new Edge<int>(2' 5)'                  new Edge<int>(3' 5)' new Edge<int>(4' 5)' new Edge<int>(6' 5)'                  new Edge<int>(6' 7)' new Edge<int>(7' 4)              });
Magic Number,QuickGraph.Tests.Algorithms,TransitiveReductionAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TransitiveReductionAlgorithmTest.cs,Test,The following statement contains a magic number: Assert.AreEqual(8' result.EdgeCount);
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,RunCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,RunCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,RunCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,RunCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,RunCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,RunCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,RunCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,RunCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,RunCheck,The following statement contains a magic number: Assert.AreEqual(res[2]' 2);
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,RunCheck,The following statement contains a magic number: Assert.AreEqual(res[2]' 2);
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,IterationsCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,IterationsCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,IterationsCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,IterationsCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,IterationsCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,IterationsCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,IterationsCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,IterationsCheck,The following statement contains a magic number: var matrix = new['] { { 1' 2' 3 }' { 3' 3' 3 }' { 3' 3' 2 } };
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,IterationsCheck,The following statement contains a magic number: Assert.AreEqual(res[2]' 2);
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,IterationsCheck,The following statement contains a magic number: Assert.AreEqual(res[2]' 2);
Magic Number,QuickGraph.Tests.Algorithms.AssigmentProblem,HungarianAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\AssigmentProblem\HungarianAlgorithmTest.cs,IterationsCheck,The following statement contains a magic number: Assert.AreEqual(iterations.Count' 3);
Magic Number,QuickGraph.Tests.Algorithms.ConnectedComponents,IncrementalConnectedComponentsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ConnectedComponents\IncrementalConnectedComponentsAlgorithmTest.cs,IncrementalConnectedComponent,The following statement contains a magic number: g.AddVertexRange(new int[] { 0' 1' 2' 3 });
Magic Number,QuickGraph.Tests.Algorithms.ConnectedComponents,IncrementalConnectedComponentsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ConnectedComponents\IncrementalConnectedComponentsAlgorithmTest.cs,IncrementalConnectedComponent,The following statement contains a magic number: g.AddVertexRange(new int[] { 0' 1' 2' 3 });
Magic Number,QuickGraph.Tests.Algorithms.ConnectedComponents,IncrementalConnectedComponentsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ConnectedComponents\IncrementalConnectedComponentsAlgorithmTest.cs,IncrementalConnectedComponent,The following statement contains a magic number: Assert.AreEqual(4' current.Key);
Magic Number,QuickGraph.Tests.Algorithms.ConnectedComponents,IncrementalConnectedComponentsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ConnectedComponents\IncrementalConnectedComponentsAlgorithmTest.cs,IncrementalConnectedComponent,The following statement contains a magic number: Assert.AreEqual(3' current.Key);
Magic Number,QuickGraph.Tests.Algorithms.ConnectedComponents,IncrementalConnectedComponentsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ConnectedComponents\IncrementalConnectedComponentsAlgorithmTest.cs,IncrementalConnectedComponent,The following statement contains a magic number: g.AddEdge(new SEquatableEdge<int>(2' 3));
Magic Number,QuickGraph.Tests.Algorithms.ConnectedComponents,IncrementalConnectedComponentsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ConnectedComponents\IncrementalConnectedComponentsAlgorithmTest.cs,IncrementalConnectedComponent,The following statement contains a magic number: g.AddEdge(new SEquatableEdge<int>(2' 3));
Magic Number,QuickGraph.Tests.Algorithms.ConnectedComponents,IncrementalConnectedComponentsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ConnectedComponents\IncrementalConnectedComponentsAlgorithmTest.cs,IncrementalConnectedComponent,The following statement contains a magic number: Assert.AreEqual(2' current.Key);
Magic Number,QuickGraph.Tests.Algorithms.ConnectedComponents,IncrementalConnectedComponentsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ConnectedComponents\IncrementalConnectedComponentsAlgorithmTest.cs,IncrementalConnectedComponent,The following statement contains a magic number: g.AddEdge(new SEquatableEdge<int>(1' 3));
Magic Number,QuickGraph.Algorithms,SourceFirstBidirectionalTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstBidirectionalTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddVertexRange(new int[5] { 0' 1' 2' 3' 4 });
Magic Number,QuickGraph.Algorithms,SourceFirstBidirectionalTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstBidirectionalTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddVertexRange(new int[5] { 0' 1' 2' 3' 4 });
Magic Number,QuickGraph.Algorithms,SourceFirstBidirectionalTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstBidirectionalTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddVertexRange(new int[5] { 0' 1' 2' 3' 4 });
Magic Number,QuickGraph.Algorithms,SourceFirstBidirectionalTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstBidirectionalTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddVertexRange(new int[5] { 0' 1' 2' 3' 4 });
Magic Number,QuickGraph.Algorithms,SourceFirstBidirectionalTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstBidirectionalTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddEdge(new Edge<int>(1' 2));
Magic Number,QuickGraph.Algorithms,SourceFirstBidirectionalTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstBidirectionalTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddEdge(new Edge<int>(1' 3));
Magic Number,QuickGraph.Algorithms,SourceFirstBidirectionalTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstBidirectionalTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddEdge(new Edge<int>(2' 3));
Magic Number,QuickGraph.Algorithms,SourceFirstBidirectionalTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstBidirectionalTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddEdge(new Edge<int>(2' 3));
Magic Number,QuickGraph.Algorithms,SourceFirstBidirectionalTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstBidirectionalTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddEdge(new Edge<int>(3' 4));
Magic Number,QuickGraph.Algorithms,SourceFirstBidirectionalTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstBidirectionalTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddEdge(new Edge<int>(3' 4));
Magic Number,QuickGraph.Algorithms,SourceFirstTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddVertexRange(new int[5] { 0' 1' 2' 3' 4 });
Magic Number,QuickGraph.Algorithms,SourceFirstTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddVertexRange(new int[5] { 0' 1' 2' 3' 4 });
Magic Number,QuickGraph.Algorithms,SourceFirstTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddVertexRange(new int[5] { 0' 1' 2' 3' 4 });
Magic Number,QuickGraph.Algorithms,SourceFirstTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddVertexRange(new int[5] { 0' 1' 2' 3' 4 });
Magic Number,QuickGraph.Algorithms,SourceFirstTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddEdge(new Edge<int>(1' 2));
Magic Number,QuickGraph.Algorithms,SourceFirstTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddEdge(new Edge<int>(1' 3));
Magic Number,QuickGraph.Algorithms,SourceFirstTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddEdge(new Edge<int>(2' 3));
Magic Number,QuickGraph.Algorithms,SourceFirstTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddEdge(new Edge<int>(2' 3));
Magic Number,QuickGraph.Algorithms,SourceFirstTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddEdge(new Edge<int>(3' 4));
Magic Number,QuickGraph.Algorithms,SourceFirstTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\SourceFirstTopologicalSortAlgorithmTest.cs,SortAnotherOne,The following statement contains a magic number: g.AddEdge(new Edge<int>(3' 4));
Magic Number,QuickGraph.Algorithms,StronglyConnectedComponentAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\StronglyConnectedComponentsAlgorithmTest.cs,TwoVertex,The following statement contains a magic number: Assert.AreEqual(2' strong.ComponentCount);
Magic Number,QuickGraph.Algorithms,StronglyConnectedComponentAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\StronglyConnectedComponentsAlgorithmTest.cs,TwoVertexOnEdge,The following statement contains a magic number: Assert.AreEqual(2' strong.ComponentCount);
Magic Number,QuickGraph.Algorithms,TopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TopologicalSortAlgorithmTest.cs,OneTwo,The following statement contains a magic number: graph.AddVertex(2);
Magic Number,QuickGraph.Algorithms,TopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TopologicalSortAlgorithmTest.cs,OneTwo,The following statement contains a magic number: graph.AddEdge(new Edge<int>(1' 2));
Magic Number,QuickGraph.Algorithms,TopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TopologicalSortAlgorithmTest.cs,OneTwo,The following statement contains a magic number: Assert.AreEqual(2' vertices.Count);
Magic Number,QuickGraph.Algorithms,TopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TopologicalSortAlgorithmTest.cs,TwoOne,The following statement contains a magic number: graph.AddVertex(2);
Magic Number,QuickGraph.Algorithms,TopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TopologicalSortAlgorithmTest.cs,TwoOne,The following statement contains a magic number: graph.AddEdge(new Edge<int>(2' 1));
Magic Number,QuickGraph.Algorithms,TopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TopologicalSortAlgorithmTest.cs,TwoOne,The following statement contains a magic number: Assert.AreEqual(2' vertices.Count);
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest1,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>> { new TaggedUndirectedEdge<int'double>(0' 1' 100)'                                                                        new TaggedUndirectedEdge<int'double>(1' 2' 20)'                                                                        new TaggedUndirectedEdge<int'double>(2' 3' 10)'                                                                        new TaggedUndirectedEdge<int'double>(3' 1' 50)};
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest1,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>> { new TaggedUndirectedEdge<int'double>(0' 1' 100)'                                                                        new TaggedUndirectedEdge<int'double>(1' 2' 20)'                                                                        new TaggedUndirectedEdge<int'double>(2' 3' 10)'                                                                        new TaggedUndirectedEdge<int'double>(3' 1' 50)};
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest1,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>> { new TaggedUndirectedEdge<int'double>(0' 1' 100)'                                                                        new TaggedUndirectedEdge<int'double>(1' 2' 20)'                                                                        new TaggedUndirectedEdge<int'double>(2' 3' 10)'                                                                        new TaggedUndirectedEdge<int'double>(3' 1' 50)};
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest1,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>> { new TaggedUndirectedEdge<int'double>(0' 1' 100)'                                                                        new TaggedUndirectedEdge<int'double>(1' 2' 20)'                                                                        new TaggedUndirectedEdge<int'double>(2' 3' 10)'                                                                        new TaggedUndirectedEdge<int'double>(3' 1' 50)};
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest1,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>> { new TaggedUndirectedEdge<int'double>(0' 1' 100)'                                                                        new TaggedUndirectedEdge<int'double>(1' 2' 20)'                                                                        new TaggedUndirectedEdge<int'double>(2' 3' 10)'                                                                        new TaggedUndirectedEdge<int'double>(3' 1' 50)};
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest1,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>> { new TaggedUndirectedEdge<int'double>(0' 1' 100)'                                                                        new TaggedUndirectedEdge<int'double>(1' 2' 20)'                                                                        new TaggedUndirectedEdge<int'double>(2' 3' 10)'                                                                        new TaggedUndirectedEdge<int'double>(3' 1' 50)};
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest1,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>> { new TaggedUndirectedEdge<int'double>(0' 1' 100)'                                                                        new TaggedUndirectedEdge<int'double>(1' 2' 20)'                                                                        new TaggedUndirectedEdge<int'double>(2' 3' 10)'                                                                        new TaggedUndirectedEdge<int'double>(3' 1' 50)};
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest1,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>> { new TaggedUndirectedEdge<int'double>(0' 1' 100)'                                                                        new TaggedUndirectedEdge<int'double>(1' 2' 20)'                                                                        new TaggedUndirectedEdge<int'double>(2' 3' 10)'                                                                        new TaggedUndirectedEdge<int'double>(3' 1' 50)};
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest1,The following statement contains a magic number: B.Add(3);
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest1,The following statement contains a magic number: B.Add(2);
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest1,The following statement contains a magic number: var expected = new Partition<int>(A' B' 3);
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest2,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>> { new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                        new TaggedUndirectedEdge<int' double>(1' 2' 1)'                                                                        new TaggedUndirectedEdge<int' double>(2' 3' 1)'                                                                        new TaggedUndirectedEdge<int' double>(3' 4' 1)'                                                                        new TaggedUndirectedEdge<int' double>(4' 0' 1)'                                                                        new TaggedUndirectedEdge<int' double>(4' 1' 1) };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest2,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>> { new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                        new TaggedUndirectedEdge<int' double>(1' 2' 1)'                                                                        new TaggedUndirectedEdge<int' double>(2' 3' 1)'                                                                        new TaggedUndirectedEdge<int' double>(3' 4' 1)'                                                                        new TaggedUndirectedEdge<int' double>(4' 0' 1)'                                                                        new TaggedUndirectedEdge<int' double>(4' 1' 1) };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest2,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>> { new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                        new TaggedUndirectedEdge<int' double>(1' 2' 1)'                                                                        new TaggedUndirectedEdge<int' double>(2' 3' 1)'                                                                        new TaggedUndirectedEdge<int' double>(3' 4' 1)'                                                                        new TaggedUndirectedEdge<int' double>(4' 0' 1)'                                                                        new TaggedUndirectedEdge<int' double>(4' 1' 1) };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest2,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>> { new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                        new TaggedUndirectedEdge<int' double>(1' 2' 1)'                                                                        new TaggedUndirectedEdge<int' double>(2' 3' 1)'                                                                        new TaggedUndirectedEdge<int' double>(3' 4' 1)'                                                                        new TaggedUndirectedEdge<int' double>(4' 0' 1)'                                                                        new TaggedUndirectedEdge<int' double>(4' 1' 1) };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest2,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>> { new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                        new TaggedUndirectedEdge<int' double>(1' 2' 1)'                                                                        new TaggedUndirectedEdge<int' double>(2' 3' 1)'                                                                        new TaggedUndirectedEdge<int' double>(3' 4' 1)'                                                                        new TaggedUndirectedEdge<int' double>(4' 0' 1)'                                                                        new TaggedUndirectedEdge<int' double>(4' 1' 1) };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest2,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>> { new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                        new TaggedUndirectedEdge<int' double>(1' 2' 1)'                                                                        new TaggedUndirectedEdge<int' double>(2' 3' 1)'                                                                        new TaggedUndirectedEdge<int' double>(3' 4' 1)'                                                                        new TaggedUndirectedEdge<int' double>(4' 0' 1)'                                                                        new TaggedUndirectedEdge<int' double>(4' 1' 1) };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest2,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>> { new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                        new TaggedUndirectedEdge<int' double>(1' 2' 1)'                                                                        new TaggedUndirectedEdge<int' double>(2' 3' 1)'                                                                        new TaggedUndirectedEdge<int' double>(3' 4' 1)'                                                                        new TaggedUndirectedEdge<int' double>(4' 0' 1)'                                                                        new TaggedUndirectedEdge<int' double>(4' 1' 1) };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest2,The following statement contains a magic number: i == 2 || i == 3
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest2,The following statement contains a magic number: i == 2 || i == 3
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest2,The following statement contains a magic number: i < 5
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest2,The following statement contains a magic number: var expected = new Partition<int>(A' B' 3);
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var edges = new List<TaggedUndirectedEdge<int' double>>{ new TaggedUndirectedEdge<int' double>(0' 1' 1)'                                                                       new TaggedUndirectedEdge<int' double>(1' 2' 50)'                                                                       new TaggedUndirectedEdge<int' double>(1' 4' 5)'                                                                       new TaggedUndirectedEdge<int' double>(4' 3' 1)'                                                                       new TaggedUndirectedEdge<int' double>(3' 6' 10)'                                                                       new TaggedUndirectedEdge<int' double>(4' 5' 1)'                                                                       new TaggedUndirectedEdge<int' double>(4' 7' 25)'                                                                       new TaggedUndirectedEdge<int' double>(4' 8' 100)'                                                                       new TaggedUndirectedEdge<int' double>(5' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(5' 8' 3)'                                                                       new TaggedUndirectedEdge<int' double>(6' 7' 1)'                                                                       new TaggedUndirectedEdge<int' double>(6' 9' 2)'                                                                       new TaggedUndirectedEdge<int' double>(7' 8' 1)'                                                                       new TaggedUndirectedEdge<int' double>(7' 10' 5)'                                                                       new TaggedUndirectedEdge<int' double>(8' 11' 1)' };
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: i < 4 || i == 6 || i == 9
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: i < 4 || i == 6 || i == 9
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: i < 4 || i == 6 || i == 9
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: i < 12
Magic Number,QuickGraph.Tests.Algorithms.GraphPartitioning,KernighanLinAlgoritmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\GraphPartition\KernighanLinAlgoritmTest.cs,GraphPartitioningTest3,The following statement contains a magic number: var expected = new Partition<int>(A' B' 3);
Magic Number,QuickGraph.Algorithms.MaximumFlow,AllVerticesGraphAugmentorAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MaximumFlow\AllVerticesGraphAugmentorAlgorithmTest.cs,VerifyCount,The following statement contains a magic number: Assert.AreEqual(vertexCount + 2' g.VertexCount);
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,GetUndirectedFullGraph,The following statement contains a magic number: graph.AddEdge(new TaggedEdge<string' double>(i.ToString()' j.ToString()' random.Next(100)));
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim10,The following statement contains a magic number: var graph = GetUndirectedFullGraph(10);
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim50,The following statement contains a magic number: var graph = GetUndirectedFullGraph(50);
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim100,The following statement contains a magic number: var graph = GetUndirectedFullGraph(100);
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim200,The following statement contains a magic number: var graph = GetUndirectedFullGraph(200);
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim300,The following statement contains a magic number: var graph = GetUndirectedFullGraph(300);
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim400,The following statement contains a magic number: var graph = GetUndirectedFullGraph(400);
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Kruskal10,The following statement contains a magic number: var graph = GetUndirectedFullGraph(10);
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Kruskal50,The following statement contains a magic number: var graph = GetUndirectedFullGraph(50);
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Kruskal100,The following statement contains a magic number: var graph = GetUndirectedFullGraph(100);
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Kruskal200,The following statement contains a magic number: var graph = GetUndirectedFullGraph(200);
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Kruskal300,The following statement contains a magic number: var graph = GetUndirectedFullGraph(300);
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Kruskal400,The following statement contains a magic number: var graph = GetUndirectedFullGraph(400);
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240,The following statement contains a magic number: g.AddVerticesAndEdge(new Edge<int>(1' 2));
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240,The following statement contains a magic number: g.AddVerticesAndEdge(new Edge<int>(3' 2));
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240,The following statement contains a magic number: g.AddVerticesAndEdge(new Edge<int>(3' 2));
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240,The following statement contains a magic number: g.AddVerticesAndEdge(new Edge<int>(3' 4));
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240,The following statement contains a magic number: g.AddVerticesAndEdge(new Edge<int>(3' 4));
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240,The following statement contains a magic number: g.AddVerticesAndEdge(new Edge<int>(1' 4));
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240,The following statement contains a magic number: Assert.AreEqual(9' cost);
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var vertices = new int[] { 1' 2' 3' 4 };
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var vertices = new int[] { 1' 2' 3' 4 };
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var vertices = new int[] { 1' 2' 3' 4 };
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var g = vertices.ToDelegateUndirectedGraph(                  delegate (int v' out IEnumerable<EquatableEdge<int>> ov)                  {                      switch (v)                      {                          case 1: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(1' 4) }; break;                          case 2: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(3' 1) }; break;                          case 3: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(3' 2)' new EquatableEdge<int>(3' 4) }; break;                          case 4: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 4)' new EquatableEdge<int>(3' 4) }; break;                          default: ov = null; break;                      }                      return ov != null;                  });
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var g = vertices.ToDelegateUndirectedGraph(                  delegate (int v' out IEnumerable<EquatableEdge<int>> ov)                  {                      switch (v)                      {                          case 1: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(1' 4) }; break;                          case 2: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(3' 1) }; break;                          case 3: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(3' 2)' new EquatableEdge<int>(3' 4) }; break;                          case 4: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 4)' new EquatableEdge<int>(3' 4) }; break;                          default: ov = null; break;                      }                      return ov != null;                  });
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var g = vertices.ToDelegateUndirectedGraph(                  delegate (int v' out IEnumerable<EquatableEdge<int>> ov)                  {                      switch (v)                      {                          case 1: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(1' 4) }; break;                          case 2: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(3' 1) }; break;                          case 3: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(3' 2)' new EquatableEdge<int>(3' 4) }; break;                          case 4: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 4)' new EquatableEdge<int>(3' 4) }; break;                          default: ov = null; break;                      }                      return ov != null;                  });
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var g = vertices.ToDelegateUndirectedGraph(                  delegate (int v' out IEnumerable<EquatableEdge<int>> ov)                  {                      switch (v)                      {                          case 1: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(1' 4) }; break;                          case 2: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(3' 1) }; break;                          case 3: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(3' 2)' new EquatableEdge<int>(3' 4) }; break;                          case 4: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 4)' new EquatableEdge<int>(3' 4) }; break;                          default: ov = null; break;                      }                      return ov != null;                  });
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var g = vertices.ToDelegateUndirectedGraph(                  delegate (int v' out IEnumerable<EquatableEdge<int>> ov)                  {                      switch (v)                      {                          case 1: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(1' 4) }; break;                          case 2: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(3' 1) }; break;                          case 3: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(3' 2)' new EquatableEdge<int>(3' 4) }; break;                          case 4: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 4)' new EquatableEdge<int>(3' 4) }; break;                          default: ov = null; break;                      }                      return ov != null;                  });
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var g = vertices.ToDelegateUndirectedGraph(                  delegate (int v' out IEnumerable<EquatableEdge<int>> ov)                  {                      switch (v)                      {                          case 1: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(1' 4) }; break;                          case 2: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(3' 1) }; break;                          case 3: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(3' 2)' new EquatableEdge<int>(3' 4) }; break;                          case 4: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 4)' new EquatableEdge<int>(3' 4) }; break;                          default: ov = null; break;                      }                      return ov != null;                  });
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var g = vertices.ToDelegateUndirectedGraph(                  delegate (int v' out IEnumerable<EquatableEdge<int>> ov)                  {                      switch (v)                      {                          case 1: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(1' 4) }; break;                          case 2: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(3' 1) }; break;                          case 3: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(3' 2)' new EquatableEdge<int>(3' 4) }; break;                          case 4: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 4)' new EquatableEdge<int>(3' 4) }; break;                          default: ov = null; break;                      }                      return ov != null;                  });
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var g = vertices.ToDelegateUndirectedGraph(                  delegate (int v' out IEnumerable<EquatableEdge<int>> ov)                  {                      switch (v)                      {                          case 1: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(1' 4) }; break;                          case 2: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(3' 1) }; break;                          case 3: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(3' 2)' new EquatableEdge<int>(3' 4) }; break;                          case 4: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 4)' new EquatableEdge<int>(3' 4) }; break;                          default: ov = null; break;                      }                      return ov != null;                  });
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var g = vertices.ToDelegateUndirectedGraph(                  delegate (int v' out IEnumerable<EquatableEdge<int>> ov)                  {                      switch (v)                      {                          case 1: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(1' 4) }; break;                          case 2: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(3' 1) }; break;                          case 3: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(3' 2)' new EquatableEdge<int>(3' 4) }; break;                          case 4: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 4)' new EquatableEdge<int>(3' 4) }; break;                          default: ov = null; break;                      }                      return ov != null;                  });
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var g = vertices.ToDelegateUndirectedGraph(                  delegate (int v' out IEnumerable<EquatableEdge<int>> ov)                  {                      switch (v)                      {                          case 1: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(1' 4) }; break;                          case 2: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(3' 1) }; break;                          case 3: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(3' 2)' new EquatableEdge<int>(3' 4) }; break;                          case 4: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 4)' new EquatableEdge<int>(3' 4) }; break;                          default: ov = null; break;                      }                      return ov != null;                  });
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var g = vertices.ToDelegateUndirectedGraph(                  delegate (int v' out IEnumerable<EquatableEdge<int>> ov)                  {                      switch (v)                      {                          case 1: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(1' 4) }; break;                          case 2: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(3' 1) }; break;                          case 3: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(3' 2)' new EquatableEdge<int>(3' 4) }; break;                          case 4: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 4)' new EquatableEdge<int>(3' 4) }; break;                          default: ov = null; break;                      }                      return ov != null;                  });
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var g = vertices.ToDelegateUndirectedGraph(                  delegate (int v' out IEnumerable<EquatableEdge<int>> ov)                  {                      switch (v)                      {                          case 1: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(1' 4) }; break;                          case 2: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(3' 1) }; break;                          case 3: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(3' 2)' new EquatableEdge<int>(3' 4) }; break;                          case 4: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 4)' new EquatableEdge<int>(3' 4) }; break;                          default: ov = null; break;                      }                      return ov != null;                  });
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var g = vertices.ToDelegateUndirectedGraph(                  delegate (int v' out IEnumerable<EquatableEdge<int>> ov)                  {                      switch (v)                      {                          case 1: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(1' 4) }; break;                          case 2: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(3' 1) }; break;                          case 3: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(3' 2)' new EquatableEdge<int>(3' 4) }; break;                          case 4: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 4)' new EquatableEdge<int>(3' 4) }; break;                          default: ov = null; break;                      }                      return ov != null;                  });
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: var g = vertices.ToDelegateUndirectedGraph(                  delegate (int v' out IEnumerable<EquatableEdge<int>> ov)                  {                      switch (v)                      {                          case 1: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(1' 4) }; break;                          case 2: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 2)' new EquatableEdge<int>(3' 1) }; break;                          case 3: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(3' 2)' new EquatableEdge<int>(3' 4) }; break;                          case 4: ov = new EquatableEdge<int>[] { new EquatableEdge<int>(1' 4)' new EquatableEdge<int>(3' 4) }; break;                          default: ov = null; break;                      }                      return ov != null;                  });
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12240WithDelegate,The following statement contains a magic number: Assert.AreEqual(9' cost);
Magic Number,QuickGraph.Tests.Algorithms.MinimumSpanningTree,MinimumSpanningTreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\MinimumSpanningTree\MinimumSpanningTreeTest.cs,Prim12273,The following statement contains a magic number: Assert.AreEqual(pcost' 63);
Magic Number,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithmTest.cs,Repro13160,The following statement contains a magic number: graph.AddVertex(i * 3 + j);
Magic Number,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithmTest.cs,Repro13160,The following statement contains a magic number: i < 3
Magic Number,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithmTest.cs,Repro13160,The following statement contains a magic number: graph.AddEdge(new SEquatableEdge<int>(i * 3 +j' i * 3 + j + 1));
Magic Number,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithmTest.cs,Repro13160,The following statement contains a magic number: graph.AddEdge(new SEquatableEdge<int>(i * 3 +j' i * 3 + j + 1));
Magic Number,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithmTest.cs,Repro13160,The following statement contains a magic number: i < 3
Magic Number,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithmTest.cs,Repro13160,The following statement contains a magic number: graph.AddEdge(new SEquatableEdge<int>(i * 3 + j' (i+1) * 3 + j));
Magic Number,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithmTest.cs,Repro13160,The following statement contains a magic number: graph.AddEdge(new SEquatableEdge<int>(i * 3 + j' (i+1) * 3 + j));
Magic Number,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithmTest.cs,Repro13160,The following statement contains a magic number: i < 2
Magic Number,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithmTest.cs,Repro13160,The following statement contains a magic number: graph.RemoveVertex(i * 3 + j);
Magic Number,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithmTest.cs,Repro13160,The following statement contains a magic number: i < 3
Magic Number,QuickGraph.Algorithms.RandomWalks,CyclePoppingRandomTreeAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RandomWalks\CyclePoppingRandomTreeAlgorithmTest.cs,Repro13160,The following statement contains a magic number: target.Compute(2);
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: var data = new int[] {                  1'4'3' //                  4'1'3'                    1'2'1'                  2'1'1'                    2'3'3'                  3'2'3'                    4'5'1'                  5'4'1'                    1'5'2'                  5'1'2'                    2'5'2'                  5'2'3'                    2'6'5'                  6'2'5'                    2'8'2'                  8'2'2'                    6'9'2'                  9'6'2'                    6'8'4'                  8'6'4'                    5'8'2'                  8'5'2'                    5'7'2'                  7'5'2'                    4'7'3'                  7'4'3'                    7'8'4'                  8'7'4'                    9'8'5              };
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: weights[edge] = data[i + 2];
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: i + 2 < data.Length
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: this.HoffmanPavleyRankedShortestPath(g' weights' 9' 1' 10);
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,HoffmanPavleyRankedShortestPathNetwork,The following statement contains a magic number: this.HoffmanPavleyRankedShortestPath(g' weights' 9' 1' 10);
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,Repro12288,The following statement contains a magic number: int Target = 2;
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,Repro12288,The following statement contains a magic number: int pathCount = 5;
Magic Number,QuickGraph.Tests.Algorithms.RankedShortestPath,HoffmanPavleyRankedShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\RankedShortestPath\HoffmanPavleyRankedShortestPathAlgorithmTest.cs,Repro12288,The following statement contains a magic number: g1.RankedShortestPathHoffmanPavley(                  e => 5' Source' Target' pathCount)
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,BellmanFordShortestPathTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\BellmanFordShortestPathTest.cs,Sample,The following statement contains a magic number: testGraph.AddVerticesAndEdge(new Edge<int>(1' 2));
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,BellmanFordShortestPathTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\BellmanFordShortestPathTest.cs,Sample,The following statement contains a magic number: testGraph.AddVerticesAndEdge(new Edge<int>(1' 3));
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,BellmanFordShortestPathTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\BellmanFordShortestPathTest.cs,Sample,The following statement contains a magic number: testGraph.AddVerticesAndEdge(new Edge<int>(3' 4));
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,BellmanFordShortestPathTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\BellmanFordShortestPathTest.cs,Sample,The following statement contains a magic number: testGraph.AddVerticesAndEdge(new Edge<int>(3' 4));
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,BellmanFordShortestPathTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\BellmanFordShortestPathTest.cs,Sample,The following statement contains a magic number: testGraph.AddVerticesAndEdge(new Edge<int>(1' 4));
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,BoostFloydWarshallTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\FloydWarshallAllPairShortestPathAlgorithmTest.cs,CreateGraph,The following statement contains a magic number: AddEdge(g' distances' 'B'' 'B'' 2);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,BoostFloydWarshallTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\FloydWarshallAllPairShortestPathAlgorithmTest.cs,CreateGraph,The following statement contains a magic number: AddEdge(g' distances' 'B'' 'E'' 2);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,BoostFloydWarshallTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\FloydWarshallAllPairShortestPathAlgorithmTest.cs,CreateGraph,The following statement contains a magic number: AddEdge(g' distances' 'C'' 'B'' 7);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,BoostFloydWarshallTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\FloydWarshallAllPairShortestPathAlgorithmTest.cs,CreateGraph,The following statement contains a magic number: AddEdge(g' distances' 'C'' 'D'' 3);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,BoostFloydWarshallTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\FloydWarshallAllPairShortestPathAlgorithmTest.cs,Compute,The following statement contains a magic number: Assert.AreEqual(6' distance);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,BoostFloydWarshallTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\FloydWarshallAllPairShortestPathAlgorithmTest.cs,Compute,The following statement contains a magic number: Assert.AreEqual(4' distance);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,BoostFloydWarshallTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\FloydWarshallAllPairShortestPathAlgorithmTest.cs,Compute,The following statement contains a magic number: Assert.AreEqual(5' distance);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenZeroCaseTest,The following statement contains a magic number: var yen = new YenShortestPathsAlgorithm<char>(graph' '1'' '5'' 10);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenOneVertexCaseTest,The following statement contains a magic number: var yen = new YenShortestPathsAlgorithm<char>(graph' '1'' '1'' 10);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenLoopCaseTest,The following statement contains a magic number: var yen = new YenShortestPathsAlgorithm<char>(graph' '1'' '1'' 10);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenLoopCaseTest,The following statement contains a magic number: graph.AddEdge(new TaggedEquatableEdge<char' double>('1'' '1'' 7));
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTest,The following statement contains a magic number: var yen = new YenShortestPathsAlgorithm<char>(input' '1'' '5'' 10);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTest,The following statement contains a magic number: yen = new YenShortestPathsAlgorithm<char>(input' '1'' '5'' 10' e => e.Tag);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTest,The following statement contains a magic number: yen = new YenShortestPathsAlgorithm<char>(input' '1'' '5'' 10' null' e => e);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTest,The following statement contains a magic number: yen = new YenShortestPathsAlgorithm<char>(input' '1'' '5'' 10' e => e.Tag' e => e);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(3' result.Count);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(result[0].ToArray()[1]' input.Edges.ToArray()[5]);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(result[0].ToArray()[2]' input.Edges.ToArray()[7]);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(result[0].ToArray()[2]' input.Edges.ToArray()[7]);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(result[1].ToArray()[1]' input.Edges.ToArray()[4]);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(result[1].ToArray()[2]' input.Edges.ToArray()[7]);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(result[1].ToArray()[2]' input.Edges.ToArray()[7]);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(result[2].ToArray()[0]' input.Edges.ToArray()[0]);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(result[2].ToArray()[1]' input.Edges.ToArray()[3]);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(result[2].ToArray()[1]' input.Edges.ToArray()[3]);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(result[2].ToArray()[2]' input.Edges.ToArray()[5]);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(result[2].ToArray()[2]' input.Edges.ToArray()[5]);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(result[2].ToArray()[2]' input.Edges.ToArray()[5]);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(result[2].ToArray()[3]' input.Edges.ToArray()[7]);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(result[2].ToArray()[3]' input.Edges.ToArray()[7]);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,YenNormalCaseTestBody,The following statement contains a magic number: Assert.AreEqual(result[2].ToArray()[3]' input.Edges.ToArray()[7]);
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,GenerateNormalInput,The following statement contains a magic number: graph.AddEdge(new TaggedEquatableEdge<char' double>('1'' '2'' 7));
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,GenerateNormalInput,The following statement contains a magic number: graph.AddEdge(new TaggedEquatableEdge<char' double>('1'' '3'' 9));
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,GenerateNormalInput,The following statement contains a magic number: graph.AddEdge(new TaggedEquatableEdge<char' double>('1'' '6'' 14));
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,GenerateNormalInput,The following statement contains a magic number: graph.AddEdge(new TaggedEquatableEdge<char' double>('2'' '3'' 10));
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,GenerateNormalInput,The following statement contains a magic number: graph.AddEdge(new TaggedEquatableEdge<char' double>('2'' '4'' 15));
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,GenerateNormalInput,The following statement contains a magic number: graph.AddEdge(new TaggedEquatableEdge<char' double>('3'' '4'' 11));
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,GenerateNormalInput,The following statement contains a magic number: graph.AddEdge(new TaggedEquatableEdge<char' double>('3'' '6'' 2));
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,GenerateNormalInput,The following statement contains a magic number: graph.AddEdge(new TaggedEquatableEdge<char' double>('4'' '5'' 6));
Magic Number,QuickGraph.Tests.Algorithms.ShortestPath,YenShortestPathsAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\YenShortestPathsAlgorithmTest.cs,GenerateNormalInput,The following statement contains a magic number: graph.AddEdge(new TaggedEquatableEdge<char' double>('5'' '6'' 9));
Magic Number,QuickGraph.Algorithms.ShortestPath,UndirectedDijkstraShortestPathAlgorithmTest2,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\UndirectedDijkstraShortestPathAlgorithmTest.cs,UndirectedDijkstraAll,The following statement contains a magic number: cut++ > 10
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnLineGraph,The following statement contains a magic number: g.AddVertex(2);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnLineGraph,The following statement contains a magic number: g.AddVertex(3);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnLineGraph,The following statement contains a magic number: g.AddEdge(new Edge<int>(1'2));
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnLineGraph,The following statement contains a magic number: g.AddEdge(new Edge<int>(2'3));
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnLineGraph,The following statement contains a magic number: g.AddEdge(new Edge<int>(2'3));
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnLineGraph,The following statement contains a magic number: Assert.AreEqual<double>(1' dij.Distances[2]);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnLineGraph,The following statement contains a magic number: Assert.AreEqual<double>(2' dij.Distances[3]);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnLineGraph,The following statement contains a magic number: Assert.AreEqual<double>(2' dij.Distances[3]);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorLineGraph,The following statement contains a magic number: g.AddVertex(2);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorLineGraph,The following statement contains a magic number: g.AddVertex(3);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorLineGraph,The following statement contains a magic number: Edge<int> e12 = new Edge<int>(1' 2);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorLineGraph,The following statement contains a magic number: Edge<int> e23 = new Edge<int>(2' 3);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorLineGraph,The following statement contains a magic number: Edge<int> e23 = new Edge<int>(2' 3);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorLineGraph,The following statement contains a magic number: Assert.IsTrue(vis.TryGetPath(2' out path));
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorLineGraph,The following statement contains a magic number: Assert.IsTrue(vis.TryGetPath(3' out path));
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorLineGraph,The following statement contains a magic number: Assert.AreEqual(2' col.Count);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnDoubleLineGraph,The following statement contains a magic number: g.AddVertex(2);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnDoubleLineGraph,The following statement contains a magic number: g.AddVertex(3);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnDoubleLineGraph,The following statement contains a magic number: Edge<int> e12 = new Edge<int>(1' 2);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnDoubleLineGraph,The following statement contains a magic number: Edge<int> e23 = new Edge<int>(2' 3);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnDoubleLineGraph,The following statement contains a magic number: Edge<int> e23 = new Edge<int>(2' 3);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnDoubleLineGraph,The following statement contains a magic number: Edge<int> e13 = new Edge<int>(1' 3);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnDoubleLineGraph,The following statement contains a magic number: Assert.AreEqual(1.0' dij.Distances[2]);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,RunOnDoubleLineGraph,The following statement contains a magic number: Assert.AreEqual(1.0' dij.Distances[3]);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorDoubleLineGraph,The following statement contains a magic number: g.AddVertex(2);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorDoubleLineGraph,The following statement contains a magic number: g.AddVertex(3);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorDoubleLineGraph,The following statement contains a magic number: Edge<int> e12 = new Edge<int>(1' 2);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorDoubleLineGraph,The following statement contains a magic number: Edge<int> e23 = new Edge<int>(2' 3);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorDoubleLineGraph,The following statement contains a magic number: Edge<int> e23 = new Edge<int>(2' 3);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorDoubleLineGraph,The following statement contains a magic number: Edge<int> e13 = new Edge<int>(1' 3);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorDoubleLineGraph,The following statement contains a magic number: Assert.IsTrue(vis.TryGetPath(2' out path));
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathTestOld,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CheckPredecessorDoubleLineGraph,The following statement contains a magic number: Assert.IsTrue(vis.TryGetPath(3' out path));
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraAlgoTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CreateGraph,The following statement contains a magic number: weight.Add(a_b' 30);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraAlgoTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CreateGraph,The following statement contains a magic number: weight.Add(a_c' 30);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraAlgoTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CreateGraph,The following statement contains a magic number: weight.Add(b_e' 60);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraAlgoTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CreateGraph,The following statement contains a magic number: weight.Add(c_d' 40);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraAlgoTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CreateGraph,The following statement contains a magic number: weight.Add(d_e' 4);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraAlgoTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,CreateGraph,The following statement contains a magic number: Assert.IsTrue(algo.Distances["E"] == 74);
Magic Number,QuickGraph.Algorithms.ShortestPath,BoostDijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,Compute,The following statement contains a magic number: AddEdge(g' distances' 'B'' 'B'' 2);
Magic Number,QuickGraph.Algorithms.ShortestPath,BoostDijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,Compute,The following statement contains a magic number: AddEdge(g' distances' 'B'' 'E'' 2);
Magic Number,QuickGraph.Algorithms.ShortestPath,BoostDijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,Compute,The following statement contains a magic number: AddEdge(g' distances' 'C'' 'B'' 7);
Magic Number,QuickGraph.Algorithms.ShortestPath,BoostDijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,Compute,The following statement contains a magic number: AddEdge(g' distances' 'C'' 'D'' 3);
Magic Number,QuickGraph.Algorithms.ShortestPath,BoostDijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,Compute,The following statement contains a magic number: Assert.AreEqual(6' dijkstra.Distances['B']);
Magic Number,QuickGraph.Algorithms.ShortestPath,BoostDijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,Compute,The following statement contains a magic number: Assert.AreEqual(4' dijkstra.Distances['D']);
Magic Number,QuickGraph.Algorithms.ShortestPath,BoostDijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTestOld.cs,Compute,The following statement contains a magic number: Assert.AreEqual(5' dijkstra.Distances['E']);
Magic Number,QuickGraph.Algorithms.ShortestPath,DijkstraShortestPathAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\ShortestPath\DijkstraShortestPathAlgorithmTest.cs,Repro12359,The following statement contains a magic number: i++ > 5
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedFullGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 16)                  .AddUndirectedEdge("n1"' "n3"' 9)                  .AddUndirectedEdge("n1"' "n4"' 15)                  .AddUndirectedEdge("n1"' "n5"' 3)                  .AddUndirectedEdge("n2"' "n3"' 14)                  .AddUndirectedEdge("n2"' "n4"' 4)                  .AddUndirectedEdge("n2"' "n5"' 5)                  .AddUndirectedEdge("n3"' "n4"' 4)                  .AddUndirectedEdge("n3"' "n5"' 2)                  .AddUndirectedEdge("n4"' "n5"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedFullGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 16)                  .AddUndirectedEdge("n1"' "n3"' 9)                  .AddUndirectedEdge("n1"' "n4"' 15)                  .AddUndirectedEdge("n1"' "n5"' 3)                  .AddUndirectedEdge("n2"' "n3"' 14)                  .AddUndirectedEdge("n2"' "n4"' 4)                  .AddUndirectedEdge("n2"' "n5"' 5)                  .AddUndirectedEdge("n3"' "n4"' 4)                  .AddUndirectedEdge("n3"' "n5"' 2)                  .AddUndirectedEdge("n4"' "n5"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedFullGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 16)                  .AddUndirectedEdge("n1"' "n3"' 9)                  .AddUndirectedEdge("n1"' "n4"' 15)                  .AddUndirectedEdge("n1"' "n5"' 3)                  .AddUndirectedEdge("n2"' "n3"' 14)                  .AddUndirectedEdge("n2"' "n4"' 4)                  .AddUndirectedEdge("n2"' "n5"' 5)                  .AddUndirectedEdge("n3"' "n4"' 4)                  .AddUndirectedEdge("n3"' "n5"' 2)                  .AddUndirectedEdge("n4"' "n5"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedFullGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 16)                  .AddUndirectedEdge("n1"' "n3"' 9)                  .AddUndirectedEdge("n1"' "n4"' 15)                  .AddUndirectedEdge("n1"' "n5"' 3)                  .AddUndirectedEdge("n2"' "n3"' 14)                  .AddUndirectedEdge("n2"' "n4"' 4)                  .AddUndirectedEdge("n2"' "n5"' 5)                  .AddUndirectedEdge("n3"' "n4"' 4)                  .AddUndirectedEdge("n3"' "n5"' 2)                  .AddUndirectedEdge("n4"' "n5"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedFullGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 16)                  .AddUndirectedEdge("n1"' "n3"' 9)                  .AddUndirectedEdge("n1"' "n4"' 15)                  .AddUndirectedEdge("n1"' "n5"' 3)                  .AddUndirectedEdge("n2"' "n3"' 14)                  .AddUndirectedEdge("n2"' "n4"' 4)                  .AddUndirectedEdge("n2"' "n5"' 5)                  .AddUndirectedEdge("n3"' "n4"' 4)                  .AddUndirectedEdge("n3"' "n5"' 2)                  .AddUndirectedEdge("n4"' "n5"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedFullGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 16)                  .AddUndirectedEdge("n1"' "n3"' 9)                  .AddUndirectedEdge("n1"' "n4"' 15)                  .AddUndirectedEdge("n1"' "n5"' 3)                  .AddUndirectedEdge("n2"' "n3"' 14)                  .AddUndirectedEdge("n2"' "n4"' 4)                  .AddUndirectedEdge("n2"' "n5"' 5)                  .AddUndirectedEdge("n3"' "n4"' 4)                  .AddUndirectedEdge("n3"' "n5"' 2)                  .AddUndirectedEdge("n4"' "n5"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedFullGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 16)                  .AddUndirectedEdge("n1"' "n3"' 9)                  .AddUndirectedEdge("n1"' "n4"' 15)                  .AddUndirectedEdge("n1"' "n5"' 3)                  .AddUndirectedEdge("n2"' "n3"' 14)                  .AddUndirectedEdge("n2"' "n4"' 4)                  .AddUndirectedEdge("n2"' "n5"' 5)                  .AddUndirectedEdge("n3"' "n4"' 4)                  .AddUndirectedEdge("n3"' "n5"' 2)                  .AddUndirectedEdge("n4"' "n5"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedFullGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 16)                  .AddUndirectedEdge("n1"' "n3"' 9)                  .AddUndirectedEdge("n1"' "n4"' 15)                  .AddUndirectedEdge("n1"' "n5"' 3)                  .AddUndirectedEdge("n2"' "n3"' 14)                  .AddUndirectedEdge("n2"' "n4"' 4)                  .AddUndirectedEdge("n2"' "n5"' 5)                  .AddUndirectedEdge("n3"' "n4"' 4)                  .AddUndirectedEdge("n3"' "n5"' 2)                  .AddUndirectedEdge("n4"' "n5"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedFullGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 16)                  .AddUndirectedEdge("n1"' "n3"' 9)                  .AddUndirectedEdge("n1"' "n4"' 15)                  .AddUndirectedEdge("n1"' "n5"' 3)                  .AddUndirectedEdge("n2"' "n3"' 14)                  .AddUndirectedEdge("n2"' "n4"' 4)                  .AddUndirectedEdge("n2"' "n5"' 5)                  .AddUndirectedEdge("n3"' "n4"' 4)                  .AddUndirectedEdge("n3"' "n5"' 2)                  .AddUndirectedEdge("n4"' "n5"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedFullGraph,The following statement contains a magic number: Assert.AreEqual(tcp.BestCost' 25);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedSparseGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 10)                  .AddUndirectedEdge("n2"' "n3"' 8)                  .AddUndirectedEdge("n3"' "n4"' 11)                  .AddUndirectedEdge("n4"' "n5"' 6)                  .AddUndirectedEdge("n5"' "n6"' 9)                  .AddUndirectedEdge("n1"' "n6"' 3)                  .AddUndirectedEdge("n2"' "n6"' 5)                  .AddUndirectedEdge("n3"' "n6"' 18)                  .AddUndirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedSparseGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 10)                  .AddUndirectedEdge("n2"' "n3"' 8)                  .AddUndirectedEdge("n3"' "n4"' 11)                  .AddUndirectedEdge("n4"' "n5"' 6)                  .AddUndirectedEdge("n5"' "n6"' 9)                  .AddUndirectedEdge("n1"' "n6"' 3)                  .AddUndirectedEdge("n2"' "n6"' 5)                  .AddUndirectedEdge("n3"' "n6"' 18)                  .AddUndirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedSparseGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 10)                  .AddUndirectedEdge("n2"' "n3"' 8)                  .AddUndirectedEdge("n3"' "n4"' 11)                  .AddUndirectedEdge("n4"' "n5"' 6)                  .AddUndirectedEdge("n5"' "n6"' 9)                  .AddUndirectedEdge("n1"' "n6"' 3)                  .AddUndirectedEdge("n2"' "n6"' 5)                  .AddUndirectedEdge("n3"' "n6"' 18)                  .AddUndirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedSparseGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 10)                  .AddUndirectedEdge("n2"' "n3"' 8)                  .AddUndirectedEdge("n3"' "n4"' 11)                  .AddUndirectedEdge("n4"' "n5"' 6)                  .AddUndirectedEdge("n5"' "n6"' 9)                  .AddUndirectedEdge("n1"' "n6"' 3)                  .AddUndirectedEdge("n2"' "n6"' 5)                  .AddUndirectedEdge("n3"' "n6"' 18)                  .AddUndirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedSparseGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 10)                  .AddUndirectedEdge("n2"' "n3"' 8)                  .AddUndirectedEdge("n3"' "n4"' 11)                  .AddUndirectedEdge("n4"' "n5"' 6)                  .AddUndirectedEdge("n5"' "n6"' 9)                  .AddUndirectedEdge("n1"' "n6"' 3)                  .AddUndirectedEdge("n2"' "n6"' 5)                  .AddUndirectedEdge("n3"' "n6"' 18)                  .AddUndirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedSparseGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 10)                  .AddUndirectedEdge("n2"' "n3"' 8)                  .AddUndirectedEdge("n3"' "n4"' 11)                  .AddUndirectedEdge("n4"' "n5"' 6)                  .AddUndirectedEdge("n5"' "n6"' 9)                  .AddUndirectedEdge("n1"' "n6"' 3)                  .AddUndirectedEdge("n2"' "n6"' 5)                  .AddUndirectedEdge("n3"' "n6"' 18)                  .AddUndirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedSparseGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 10)                  .AddUndirectedEdge("n2"' "n3"' 8)                  .AddUndirectedEdge("n3"' "n4"' 11)                  .AddUndirectedEdge("n4"' "n5"' 6)                  .AddUndirectedEdge("n5"' "n6"' 9)                  .AddUndirectedEdge("n1"' "n6"' 3)                  .AddUndirectedEdge("n2"' "n6"' 5)                  .AddUndirectedEdge("n3"' "n6"' 18)                  .AddUndirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedSparseGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 10)                  .AddUndirectedEdge("n2"' "n3"' 8)                  .AddUndirectedEdge("n3"' "n4"' 11)                  .AddUndirectedEdge("n4"' "n5"' 6)                  .AddUndirectedEdge("n5"' "n6"' 9)                  .AddUndirectedEdge("n1"' "n6"' 3)                  .AddUndirectedEdge("n2"' "n6"' 5)                  .AddUndirectedEdge("n3"' "n6"' 18)                  .AddUndirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedSparseGraph,The following statement contains a magic number: testCase.AddUndirectedEdge("n1"' "n2"' 10)                  .AddUndirectedEdge("n2"' "n3"' 8)                  .AddUndirectedEdge("n3"' "n4"' 11)                  .AddUndirectedEdge("n4"' "n5"' 6)                  .AddUndirectedEdge("n5"' "n6"' 9)                  .AddUndirectedEdge("n1"' "n6"' 3)                  .AddUndirectedEdge("n2"' "n6"' 5)                  .AddUndirectedEdge("n3"' "n6"' 18)                  .AddUndirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,UndirectedSparseGraph,The following statement contains a magic number: Assert.AreEqual(tcp.BestCost' 47);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraphWithoutPath,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraphWithoutPath,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraphWithoutPath,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraphWithoutPath,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraphWithoutPath,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraphWithoutPath,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraphWithoutPath,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraphWithoutPath,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraphWithoutPath,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraph,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21)                  .AddDirectedEdge("n6"' "n1"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraph,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21)                  .AddDirectedEdge("n6"' "n1"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraph,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21)                  .AddDirectedEdge("n6"' "n1"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraph,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21)                  .AddDirectedEdge("n6"' "n1"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraph,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21)                  .AddDirectedEdge("n6"' "n1"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraph,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21)                  .AddDirectedEdge("n6"' "n1"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraph,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21)                  .AddDirectedEdge("n6"' "n1"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraph,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21)                  .AddDirectedEdge("n6"' "n1"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraph,The following statement contains a magic number: testCase.AddDirectedEdge("n1"' "n2"' 10)                  .AddDirectedEdge("n2"' "n3"' 8)                  .AddDirectedEdge("n3"' "n4"' 11)                  .AddDirectedEdge("n4"' "n5"' 6)                  .AddDirectedEdge("n5"' "n6"' 9)                  .AddDirectedEdge("n1"' "n6"' 3)                  .AddDirectedEdge("n2"' "n6"' 5)                  .AddDirectedEdge("n3"' "n6"' 18)                  .AddDirectedEdge("n3"' "n5"' 21)                  .AddDirectedEdge("n6"' "n1"' 1);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,DirectedSparseGraph,The following statement contains a magic number: Assert.AreEqual(tcp.BestCost' 45);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,performanceTest,The following statement contains a magic number: int repeat = 10;
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,performanceTest,The following statement contains a magic number: TestCase testCase = TestCase.completeGraphTestCase((i + 1) * 5' 100000000);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,performanceTest,The following statement contains a magic number: TestCase testCase = TestCase.completeGraphTestCase((i + 1) * 5' 100000000);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,performanceTest,The following statement contains a magic number: Trace.WriteLine((i + 1) * 5 + " vertices complete' avg time: " + avg / repeat);
Magic Number,QuickGraph.Tests.Algorithms.TSP,TSPTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\TSP\TSPTest.cs,performanceTest,The following statement contains a magic number: i < 6
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeSimpleGraph,The following statement contains a magic number: Assert.IsFalse(grafWithColoredVertices.Colors.Values.Contains(3));
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeSimpleGraph,The following statement contains a magic number: Assert.AreEqual(3' result.Max() + 1);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeSimpleGraph,The following statement contains a magic number: Assert.AreEqual(2' result[2]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeSimpleGraph,The following statement contains a magic number: Assert.AreEqual(2' result[2]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeSimpleGraph,The following statement contains a magic number: Assert.AreEqual(0' result[3]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeSimpleGraph,The following statement contains a magic number: Assert.AreEqual(1' result[4]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeEmptyGraph,The following statement contains a magic number: Assert.AreEqual(0' result[2]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeEmptyGraph,The following statement contains a magic number: Assert.AreEqual(0' result[3]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeEmptyGraph,The following statement contains a magic number: Assert.AreEqual(0' result[4]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeFullGraph,The following statement contains a magic number: Assert.IsFalse(grafWithColoredVertices.Colors.Values.Contains(6));
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeFullGraph,The following statement contains a magic number: Assert.AreEqual(6' result.Max() + 1);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeFullGraph,The following statement contains a magic number: Assert.AreEqual(2' result[2]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeFullGraph,The following statement contains a magic number: Assert.AreEqual(2' result[2]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeFullGraph,The following statement contains a magic number: Assert.AreEqual(3' result[3]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeFullGraph,The following statement contains a magic number: Assert.AreEqual(3' result[3]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeFullGraph,The following statement contains a magic number: Assert.AreEqual(4' result[4]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeFullGraph,The following statement contains a magic number: Assert.AreEqual(4' result[4]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeFullGraph,The following statement contains a magic number: Assert.AreEqual(5' result[5]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeFullGraph,The following statement contains a magic number: Assert.AreEqual(5' result[5]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeBipartiteGraph,The following statement contains a magic number: Assert.IsFalse(grafWithColoredVertices.Colors.Values.Contains(2));
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeBipartiteGraph,The following statement contains a magic number: Assert.AreEqual(2' result.Max() + 1);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeBipartiteGraph,The following statement contains a magic number: Assert.AreEqual(0' result[2]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeBipartiteGraph,The following statement contains a magic number: Assert.AreEqual(1' result[3]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeBipartiteGraph,The following statement contains a magic number: Assert.AreEqual(1' result[4]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeBipartiteGraph,The following statement contains a magic number: Assert.AreEqual(1' result[5]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeBipartiteGraph,The following statement contains a magic number: Assert.AreEqual(1' result[6]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeTestGraph,The following statement contains a magic number: Assert.IsFalse(grafWithColoredVertices.Colors.Values.Contains(3));
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeTestGraph,The following statement contains a magic number: Assert.AreEqual(3' result.Max() + 1);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeTestGraph,The following statement contains a magic number: Assert.AreEqual(1' result[2]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeTestGraph,The following statement contains a magic number: Assert.AreEqual(1' result[3]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeTestGraph,The following statement contains a magic number: Assert.AreEqual(2' result[4]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeTestGraph,The following statement contains a magic number: Assert.AreEqual(2' result[4]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeTestGraph,The following statement contains a magic number: Assert.AreEqual(0' result[5]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeTestGraph,The following statement contains a magic number: Assert.AreEqual(0' result[6]);
Magic Number,QuickGraph.Tests.Algorithms.GraphColoring,VertexColoringAlgorithmTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Algorithms\VertexColoring\VertexColoringAlgorithmTest.cs,VertexColoringComputeTestGraph,The following statement contains a magic number: Assert.AreEqual(1' result[7]);
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: g.AddVertexRange(new int[3] {1' 2' 3});
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: g.AddVertexRange(new int[3] {1' 2' 3});
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: g.AddVertexRange(new int[3] {1' 2' 3});
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: g.AddEdge(new Edge<int>(1' 2));
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: g.AddEdge(new Edge<int>(2' 3));
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: g.AddEdge(new Edge<int>(2' 3));
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: g.AddEdge(new Edge<int>(3' 1));
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: Assert.AreEqual(3' g.VertexCount);
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: Assert.AreEqual(3' g.EdgeCount);
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: Assert.AreEqual(3' h.VertexCount);
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: Assert.AreEqual(3' h.EdgeCount);
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: h.AddVertexRange(new int[4] { 10' 11' 12' 13 });
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: h.AddVertexRange(new int[4] { 10' 11' 12' 13 });
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: h.AddVertexRange(new int[4] { 10' 11' 12' 13 });
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: h.AddVertexRange(new int[4] { 10' 11' 12' 13 });
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: h.AddVertexRange(new int[4] { 10' 11' 12' 13 });
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: h.AddEdge(new Edge<int>(10' 11));
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: h.AddEdge(new Edge<int>(10' 11));
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: Assert.AreEqual(7' h.VertexCount);
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: Assert.AreEqual(4' h.EdgeCount);
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: Assert.AreEqual(4' i);
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: Assert.AreEqual(3' g.VertexCount);
Magic Number,QuickGraph.Tests,BidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\BidirectionalGraphTest.cs,CloneTest,The following statement contains a magic number: Assert.AreEqual(3' g.EdgeCount);
Magic Number,QuickGraph.Tests,ClusteredGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ClusteredGraphTest.cs,AddingClustVertexTest1,The following statement contains a magic number: cluster1.AddVertex(5);
Magic Number,QuickGraph.Tests,ClusteredGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ClusteredGraphTest.cs,AddingClustVertexTest1,The following statement contains a magic number: var a = ContainsVertexParent(clusteredGraph' 5);
Magic Number,QuickGraph.Tests,ClusteredGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ClusteredGraphTest.cs,AddingClustEdgeTest1,The following statement contains a magic number: cluster1.AddVertex(5);
Magic Number,QuickGraph.Tests,ClusteredGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ClusteredGraphTest.cs,AddingClustEdgeTest1,The following statement contains a magic number: cluster1.AddVertex(6);
Magic Number,QuickGraph.Tests,ClusteredGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ClusteredGraphTest.cs,AddingClustEdgeTest1,The following statement contains a magic number: var edge = new TaggedEdge<int' int>(5' 6' 1);
Magic Number,QuickGraph.Tests,ClusteredGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ClusteredGraphTest.cs,AddingClustEdgeTest1,The following statement contains a magic number: var edge = new TaggedEdge<int' int>(5' 6' 1);
Magic Number,QuickGraph.Tests,ClusteredGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ClusteredGraphTest.cs,RemovingClustEdgeTest1,The following statement contains a magic number: cluster3.AddVertex(5);
Magic Number,QuickGraph.Tests,ClusteredGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ClusteredGraphTest.cs,RemovingClustEdgeTest1,The following statement contains a magic number: cluster3.AddVertex(6);
Magic Number,QuickGraph.Tests,ClusteredGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ClusteredGraphTest.cs,RemovingClustEdgeTest1,The following statement contains a magic number: var edge = new TaggedEdge<int' int>(5' 6' 1);
Magic Number,QuickGraph.Tests,ClusteredGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ClusteredGraphTest.cs,RemovingClustEdgeTest1,The following statement contains a magic number: var edge = new TaggedEdge<int' int>(5' 6' 1);
Magic Number,QuickGraph.Tests,ClusteredGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ClusteredGraphTest.cs,RemovingClustVertexTest1,The following statement contains a magic number: cluster3.AddVertex(5);
Magic Number,QuickGraph.Tests,ClusteredGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ClusteredGraphTest.cs,RemovingClustVertexTest1,The following statement contains a magic number: cluster2.RemoveVertex(5);
Magic Number,QuickGraph.Tests,ClusteredGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\ClusteredGraphTest.cs,RemovingClustVertexTest1,The following statement contains a magic number: Assert.IsFalse(ContainsVertexParent(cluster3' 5));
Magic Number,QuickGraph.Tests,DegreeTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\DegreeTest.cs,DegreeSumEqualsTwiceEdgeCount,The following statement contains a magic number: Assert.AreEqual(edgeCount * 2' degCount);
Magic Number,QuickGraph.Tests,GraphVizTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\GraphVizTests.cs,CommonVertexFormat_FontSize_UseDecimalPointForFloats,The following statement contains a magic number: gv.CommonVertexFormat.Font = new Font(SystemFonts.DefaultFont.FontFamily' emSize: 1.75f);
Magic Number,QuickGraph.Tests,GraphVizTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\GraphVizTests.cs,CommonVertexFormat_Z_UseDecimalPointForDoubles,The following statement contains a magic number: gv.CommonVertexFormat.Z = 1.75;
Magic Number,QuickGraph.Tests,GraphVizTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\GraphVizTests.cs,CommonEdgeFormat_FontSize_UseDecimalPointForFloats,The following statement contains a magic number: gv.CommonEdgeFormat.Font = new Font(SystemFonts.DefaultFont.FontFamily' emSize: 1.75f);
Magic Number,QuickGraph.Tests,GraphVizTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\GraphVizTests.cs,CommonEdgeFormat_Weight_UseDecimalPointForDoubles,The following statement contains a magic number: gv.CommonEdgeFormat.Weight = 1.75;
Magic Number,QuickGraph.Tests,GraphVizTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\GraphVizTests.cs,GraphFormat_RankSeparation_UseDecimalPointForDoubles,The following statement contains a magic number: gv.GraphFormat.RankSeparation = 0.75d;
Magic Number,QuickGraph.Tests,GraphVizTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\GraphVizTests.cs,GraphFormat_FontSize_UseDecimalPointForFloats,The following statement contains a magic number: gv.GraphFormat.Font = new Font(SystemFonts.DefaultFont.FontFamily' emSize: 1.75f);
Magic Number,QuickGraph.Tests,UndirectedBidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedBidirectionalGraphTest.cs,ContainsEdgeTest1,The following statement contains a magic number: var e12 = new SEquatableUndirectedEdge<int>(1' 2);
Magic Number,QuickGraph.Tests,UndirectedBidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedBidirectionalGraphTest.cs,ContainsEdgeTest1,The following statement contains a magic number: var f12 = new SEquatableUndirectedEdge<int>(1' 2);
Magic Number,QuickGraph.Tests,UndirectedBidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedBidirectionalGraphTest.cs,ContainsEdgeTest2,The following statement contains a magic number: var e12 = new EquatableEdge<int>(1' 2);
Magic Number,QuickGraph.Tests,UndirectedBidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedBidirectionalGraphTest.cs,ContainsEdgeTest2,The following statement contains a magic number: var f12 = new EquatableEdge<int>(1' 2);
Magic Number,QuickGraph.Tests,UndirectedBidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedBidirectionalGraphTest.cs,ContainsEdgeTest2,The following statement contains a magic number: var e21 = new EquatableEdge<int>(2' 1);
Magic Number,QuickGraph.Tests,UndirectedBidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedBidirectionalGraphTest.cs,ContainsEdgeTest2,The following statement contains a magic number: var f21 = new EquatableEdge<int>(2' 1);
Magic Number,QuickGraph.Tests,UndirectedBidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedBidirectionalGraphTest.cs,ContainsEdgeAssertions,The following statement contains a magic number: Assert.AreEqual(1' g.InDegree(2));
Magic Number,QuickGraph.Tests,UndirectedBidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedBidirectionalGraphTest.cs,ContainsEdgeAssertions,The following statement contains a magic number: Assert.AreEqual(0' g.OutDegree(2));
Magic Number,QuickGraph.Tests,UndirectedBidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedBidirectionalGraphTest.cs,ContainsEdgeAssertions,The following statement contains a magic number: Assert.AreEqual(1' g.InEdges(2).Count());
Magic Number,QuickGraph.Tests,UndirectedBidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedBidirectionalGraphTest.cs,ContainsEdgeAssertions,The following statement contains a magic number: Assert.IsTrue(g.ContainsEdge(1' 2));
Magic Number,QuickGraph.Tests,UndirectedBidirectionalGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedBidirectionalGraphTest.cs,ContainsEdgeAssertions,The following statement contains a magic number: Assert.IsFalse(g.ContainsEdge(2' 1));
Magic Number,QuickGraph.Tests,UndirectedGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTest.cs,ContainsEdgeTest1,The following statement contains a magic number: var e12 = new SEquatableUndirectedEdge<int>(1' 2);
Magic Number,QuickGraph.Tests,UndirectedGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTest.cs,ContainsEdgeTest1,The following statement contains a magic number: var f12 = new SEquatableUndirectedEdge<int>(1' 2);
Magic Number,QuickGraph.Tests,UndirectedGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTest.cs,ContainsEdgeTest1,The following statement contains a magic number: new SEquatableUndirectedEdge<int>(2' 1);
Magic Number,QuickGraph.Tests,UndirectedGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTest.cs,ContainsEdgeTest2,The following statement contains a magic number: var e12 = new EquatableEdge<int>(1' 2);
Magic Number,QuickGraph.Tests,UndirectedGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTest.cs,ContainsEdgeTest2,The following statement contains a magic number: var f12 = new EquatableEdge<int>(1' 2);
Magic Number,QuickGraph.Tests,UndirectedGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTest.cs,ContainsEdgeTest2,The following statement contains a magic number: var e21 = new EquatableEdge<int>(2' 1);
Magic Number,QuickGraph.Tests,UndirectedGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTest.cs,ContainsEdgeTest2,The following statement contains a magic number: var f21 = new EquatableEdge<int>(2' 1);
Magic Number,QuickGraph.Tests,UndirectedGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTest.cs,ContainsEdgeAssertions,The following statement contains a magic number: Assert.AreEqual(1' g.AdjacentDegree(2));
Magic Number,QuickGraph.Tests,UndirectedGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTest.cs,ContainsEdgeAssertions,The following statement contains a magic number: Assert.AreEqual(1' g.AdjacentEdges(2).Count());
Magic Number,QuickGraph.Tests,UndirectedGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTest.cs,ContainsEdgeAssertions,The following statement contains a magic number: Assert.IsTrue(g.ContainsEdge(1' 2));
Magic Number,QuickGraph.Tests,UndirectedGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTest.cs,ContainsEdgeAssertions,The following statement contains a magic number: Assert.IsTrue(g.ContainsEdge(2' 1));
Magic Number,QuickGraph.Tests,UndirectedGraphTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\UndirectedGraphTest.cs,ContainsEdgeAssertions,The following statement contains a magic number: Assert.IsFalse(g.ContainsEdge(1' 3));
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: var heap = BinaryHeapFactory.Create(20);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(2' 1);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(1' 2);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(2' 3);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(2' 3);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(2' 4);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(2' 4);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(1' 5);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(1' 6);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(2' 7);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(2' 7);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(2' 8);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(2' 8);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(2' 9);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(2' 9);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(2' 10);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(2' 10);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(1' 11);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(1' 12);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(1' 13);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: heap.Add(1' 14);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeap01,The following statement contains a magic number: Assert.AreEqual(15' heap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: var heap = BinaryHeapFactory.Create(20);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(0' 255);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(0' 256);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(0' 257);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(0' 258);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(0' 259);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(0' 260);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(0' 261);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(0' 262);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 263);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 263);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 264);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 264);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 265);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 265);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 266);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 266);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 267);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 267);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 268);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 268);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 269);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 269);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 270);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 270);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 271);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 272);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 273);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 274);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 275);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 276);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 277);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 278);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 279);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 279);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 280);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 280);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 281);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 282);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 283);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 284);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 285);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 285);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 286);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 286);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 287);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 287);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 288);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 288);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 289);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 290);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 291);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 292);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 293);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 294);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 295);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 296);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 297);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 298);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 299);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 300);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 300);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 301);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 301);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 302);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 302);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 303);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 303);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 304);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 305);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 306);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 307);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 308);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 308);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 309);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 309);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 310);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 310);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 311);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 312);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 312);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 313);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 313);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 314);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 314);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 315);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 316);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 317);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 318);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 319);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 319);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 320);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 320);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 321);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 321);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 322);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 322);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 323);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 323);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 324);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 324);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 325);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 326);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 326);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 327);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 327);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 328);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 328);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 329);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(2' 329);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 330);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 331);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 332);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(1' 333);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(0' 334);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(0' 335);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(0' 336);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(0' 337);
Magic Number,QuickGraph.Collections,BinaryHeapFactory,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,ExampleHeapFromTopologicalSortOfDCT8,The following statement contains a magic number: heap.Add(0' 338);
Magic Number,QuickGraph.Collections,BinaryHeapTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,UpdateTest,The following statement contains a magic number: heap.Update(1' 4);
Magic Number,QuickGraph.Collections,BinaryHeapTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,UpdateTest,The following statement contains a magic number: Assert.AreEqual(15' heap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,UpdateTestUsingDCT8,The following statement contains a magic number: heap.Update(1' 320);
Magic Number,QuickGraph.Collections,BinaryHeapTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,RemoveAtTest,The following statement contains a magic number: heap.RemoveAt(4);
Magic Number,QuickGraph.Collections,BinaryHeapTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,RemoveAtTest,The following statement contains a magic number: Assert.AreEqual(14' heap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,RemoveAtTestUsingDCT8,The following statement contains a magic number: heap.RemoveAt(66);
Magic Number,QuickGraph.Collections,BinaryHeapTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,RemoveMinimumTest,The following statement contains a magic number: Assert.AreEqual(14' heap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert504,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert504,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert504,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert50401,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(2);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert50401,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert50401,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert50401,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert280,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(2);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert280,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[6];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert280,The following statement contains a magic number: KeyValuePair<int' int> s1 = new KeyValuePair<int' int>(1073741824' default(int))        ;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert280,The following statement contains a magic number: keyValuePairs[2] = s1;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert280,The following statement contains a magic number: keyValuePairs[3] = s2;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert280,The following statement contains a magic number: keyValuePairs[4] = s3;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert280,The following statement contains a magic number: KeyValuePair<int' int> s4 = new KeyValuePair<int' int>(11' 11);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert280,The following statement contains a magic number: KeyValuePair<int' int> s4 = new KeyValuePair<int' int>(11' 11);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert280,The following statement contains a magic number: keyValuePairs[5] = s4;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert280,The following statement contains a magic number: Assert.AreEqual<int>(11' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Insert280,The following statement contains a magic number: Assert.AreEqual<int>(6' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndEnumerate707,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndEnumerate707,The following statement contains a magic number: KeyValuePair<int' int> s0 = new KeyValuePair<int' int>(414277560' default(int));
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndEnumerate707,The following statement contains a magic number: KeyValuePair<int' int> s1 = new KeyValuePair<int' int>(16384' 16384);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndEnumerate707,The following statement contains a magic number: KeyValuePair<int' int> s1 = new KeyValuePair<int' int>(16384' 16384);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndEnumerate707,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndEnumerate707,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndEnumerate397,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(2);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndEnumerate397,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndEnumerate397,The following statement contains a magic number: KeyValuePair<int' int> s0 = new KeyValuePair<int' int>(995098625' default(int));
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndEnumerate397,The following statement contains a magic number: KeyValuePair<int' int> s1 = new KeyValuePair<int' int>(16384' 16384);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndEnumerate397,The following statement contains a magic number: KeyValuePair<int' int> s1 = new KeyValuePair<int' int>(16384' 16384);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndEnumerate397,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndEnumerate397,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndIndexOf504,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndIndexOf504,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndIndexOf504,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndIndexOf50401,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(3);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndIndexOf50401,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndIndexOf50401,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndIndexOf50401,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndIndexOf332,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(2);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndIndexOf332,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[3];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndIndexOf332,The following statement contains a magic number: keyValuePairs[2] = s1;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndIndexOf332,The following statement contains a magic number: Assert.AreEqual<int>(5' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndIndexOf332,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum636,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum636,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum636,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum63601,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(3);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum63601,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum63601,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum63601,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum504,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(2);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum504,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum504,The following statement contains a magic number: KeyValuePair<int' int> s0 = new KeyValuePair<int' int>(16384' 16384);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum504,The following statement contains a magic number: KeyValuePair<int' int> s0 = new KeyValuePair<int' int>(16384' 16384);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum504,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum504,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum905,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(2);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum905,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[3];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum905,The following statement contains a magic number: keyValuePairs[2] = s0;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum905,The following statement contains a magic number: Assert.AreEqual<int>(5' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum905,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum128,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(3);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum128,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[3];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum128,The following statement contains a magic number: KeyValuePair<int' int> s1         = new KeyValuePair<int' int>(-2147483647' default(int));
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum128,The following statement contains a magic number: keyValuePairs[2] = s1;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum128,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum128,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum40,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum40,The following statement contains a magic number: KeyValuePair<int' int> s0 = new KeyValuePair<int' int>(-63' default(int));
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum40,The following statement contains a magic number: KeyValuePair<int' int> s1 = new KeyValuePair<int' int>(-63' default(int));
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum40,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndMinimum40,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveAt866,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveAt866,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveAt260,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveAt260,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveAt504,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveAt504,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveAt144,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(2);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveAt144,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveAt144,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum112,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum112,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum995,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(2);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum995,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum995,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum47,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum47,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum506,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(3);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum506,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[3];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum506,The following statement contains a magic number: KeyValuePair<int' int> s0         = new KeyValuePair<int' int>(-2147483647' default(int));
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum506,The following statement contains a magic number: keyValuePairs[2] = s1;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum506,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum23,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(3);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum23,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[3];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum23,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum277,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[4];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum277,The following statement contains a magic number: KeyValuePair<int' int> s1 = new KeyValuePair<int' int>(2' default(int));
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum277,The following statement contains a magic number: keyValuePairs[2] = s1;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum277,The following statement contains a magic number: KeyValuePair<int' int> s2 = new KeyValuePair<int' int>(3' default(int));
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum277,The following statement contains a magic number: keyValuePairs[3] = s2;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum277,The following statement contains a magic number: Assert.AreEqual<int>(7' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum878,The following statement contains a magic number: KeyValuePair<int' int>[] keyValuePairs = new KeyValuePair<int' int>[4];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum878,The following statement contains a magic number: KeyValuePair<int' int> s1 = new KeyValuePair<int' int>(2' default(int));
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum878,The following statement contains a magic number: keyValuePairs[2] = s1;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum878,The following statement contains a magic number: keyValuePairs[3] = s2;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,InsertAndRemoveMinimum878,The following statement contains a magic number: Assert.AreEqual<int>(7' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations748,The following statement contains a magic number: KeyValuePair<bool' int>[] keyValuePairs = new KeyValuePair<bool' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations748,The following statement contains a magic number: KeyValuePair<bool' int> s1 = new KeyValuePair<bool' int>(default(bool)' 16384);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations38,The following statement contains a magic number: KeyValuePair<bool' int>[] keyValuePairs = new KeyValuePair<bool' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations38,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations38,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations3801,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(2);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations3801,The following statement contains a magic number: KeyValuePair<bool' int>[] keyValuePairs = new KeyValuePair<bool' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations3801,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations3801,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations303,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(2);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations303,The following statement contains a magic number: KeyValuePair<bool' int>[] keyValuePairs = new KeyValuePair<bool' int>[3];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations303,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations20,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(2);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations20,The following statement contains a magic number: KeyValuePair<bool' int>[] keyValuePairs = new KeyValuePair<bool' int>[4];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations20,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,OperationsThrowsInvalidOperationException277,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(2);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,OperationsThrowsInvalidOperationException277,The following statement contains a magic number: KeyValuePair<bool' int>[] keyValuePairs = new KeyValuePair<bool' int>[5];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations648,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(2);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations648,The following statement contains a magic number: KeyValuePair<bool' int>[] keyValuePairs = new KeyValuePair<bool' int>[3];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations648,The following statement contains a magic number: keyValuePairs[2] = s2;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations648,The following statement contains a magic number: Assert.AreEqual<int>(5' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations648,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations955,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(2);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations955,The following statement contains a magic number: KeyValuePair<bool' int>[] keyValuePairs = new KeyValuePair<bool' int>[5];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations955,The following statement contains a magic number: keyValuePairs[3] = s2;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations955,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,OperationsThrowsInvalidOperationException565,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(2);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,OperationsThrowsInvalidOperationException565,The following statement contains a magic number: KeyValuePair<bool' int>[] keyValuePairs = new KeyValuePair<bool' int>[5];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,OperationsThrowsInvalidOperationException565,The following statement contains a magic number: KeyValuePair<bool' int> s0 = new KeyValuePair<bool' int>(true' -2147352575);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,OperationsThrowsInvalidOperationException565,The following statement contains a magic number: KeyValuePair<bool' int> s1 = new KeyValuePair<bool' int>(true' 131072);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations3802,The following statement contains a magic number: KeyValuePair<bool' int>[] keyValuePairs = new KeyValuePair<bool' int>[2];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations3802,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations3802,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations982,The following statement contains a magic number: binaryHeap = BinaryHeapFactory.Create(3);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations982,The following statement contains a magic number: KeyValuePair<bool' int>[] keyValuePairs = new KeyValuePair<bool' int>[4];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations982,The following statement contains a magic number: KeyValuePair<bool' int> s0 = new KeyValuePair<bool' int>(true' -507);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations982,The following statement contains a magic number: KeyValuePair<bool' int> s1 = new KeyValuePair<bool' int>(true' 2147483136);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations982,The following statement contains a magic number: KeyValuePair<bool' int> s2 = new KeyValuePair<bool' int>(true' -507);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations982,The following statement contains a magic number: keyValuePairs[2] = s2;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations982,The following statement contains a magic number: KeyValuePair<bool' int> s3 = new KeyValuePair<bool' int>(default(bool)' 16384);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations982,The following statement contains a magic number: keyValuePairs[3] = s3;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations982,The following statement contains a magic number: Assert.AreEqual<int>(3' binaryHeap.Capacity);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,Operations982,The following statement contains a magic number: Assert.AreEqual<int>(2' binaryHeap.Count);
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,OperationsThrowsInvalidOperationException202,The following statement contains a magic number: KeyValuePair<bool' int>[] keyValuePairs = new KeyValuePair<bool' int>[5];
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,OperationsThrowsInvalidOperationException202,The following statement contains a magic number: keyValuePairs[2] = s2;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,OperationsThrowsInvalidOperationException202,The following statement contains a magic number: keyValuePairs[3] = s3;
Magic Number,QuickGraph.Collections,BinaryHeapTPriorityTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\BinaryHeapTest.cs,OperationsThrowsInvalidOperationException202,The following statement contains a magic number: keyValuePairs[4] = s4;
Magic Number,QuickGraph.Collections,SoftHeapTKeyTValueTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\SoftHeapTKeyTValueTest.Add.g.cs,Add,The following statement contains a magic number: var target = new SoftHeap<int' int>(1/4.0' int.MaxValue);
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,SimpleEnqueDequeIncreasing,The following statement contains a magic number: i < 10
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,SimpleEnqueDequeDecreasing,The following statement contains a magic number: i < 10
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,DecreaseKeyOnIncreasing,The following statement contains a magic number: i < 10
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,DecreaseKeyOnIncreasing,The following statement contains a magic number: heap.ChangeKey(cells[9]' -1);
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,IncreaseKeyOnIncreasing,The following statement contains a magic number: i < 10
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,IncreaseKeyOnIncreasing,The following statement contains a magic number: heap.ChangeKey(cells[0]' 100);
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,DecreaseKeyOnDecreasing,The following statement contains a magic number: i < 10
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,DecreaseKeyOnDecreasing,The following statement contains a magic number: heap.ChangeKey(cells[9]' -1);
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,IncreaseKeyOnDecreasing,The following statement contains a magic number: i < 10
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,IncreaseKeyOnDecreasing,The following statement contains a magic number: heap.ChangeKey(cells[0]' 100);
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,ChangeKeyToSelf,The following statement contains a magic number: i < 10
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,IncreasingDecreaseKeyCascadeCut,The following statement contains a magic number: i < 10
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,IncreasingDecreaseKeyCascadeCut,The following statement contains a magic number: heap.ChangeKey(cells[6]' 3);
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,IncreasingDecreaseKeyCascadeCut,The following statement contains a magic number: heap.ChangeKey(cells[6]' 3);
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,IncreasingDecreaseKeyCascadeCut,The following statement contains a magic number: heap.ChangeKey(cells[7]' 2);
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,IncreasingDecreaseKeyCascadeCut,The following statement contains a magic number: heap.ChangeKey(cells[7]' 2);
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,IncreasingIncreaseKeyCascadeCut,The following statement contains a magic number: i < 10
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,IncreasingIncreaseKeyCascadeCut,The following statement contains a magic number: heap.ChangeKey(cells[5]' 10);
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,IncreasingIncreaseKeyCascadeCut,The following statement contains a magic number: heap.ChangeKey(cells[5]' 10);
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,DeleteKey,The following statement contains a magic number: i < 10
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,DeleteKey,The following statement contains a magic number: var DeletedCell = cells[8];
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,DeleteKey,The following statement contains a magic number: count -= 2;
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,MergeTest,The following statement contains a magic number: heap2.Enqueue(i * 11' i.ToString());
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,MergeTest,The following statement contains a magic number: count += 2;
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnLessThan,The following statement contains a magic number: toCutNodes.Add(heap.Enqueue(5' "5"));
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnLessThan,The following statement contains a magic number: toCutNodes.Add(heap.Enqueue(6' "6"));
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnLessThan,The following statement contains a magic number: toCutNodes.Add(heap.Enqueue(7' "7"));
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnLessThan,The following statement contains a magic number: heap.Enqueue(-10' "-10");
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnLessThan,The following statement contains a magic number: heap2.Enqueue(4' "4");
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnLessThan,The following statement contains a magic number: heap2.Enqueue(5' "5");
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnLessThan,The following statement contains a magic number: heap2.Enqueue(-10' "-10");
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnLessThan,The following statement contains a magic number: heap.Enqueue(-10' "-10");
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnLessThan,The following statement contains a magic number: toCutNodes.ForEach(x => heap.ChangeKey(x' -5));
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnLessThan,The following statement contains a magic number: heap.Enqueue(-10' "-10");
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnLessThan,The following statement contains a magic number: count = 7;
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnGreaterThan,The following statement contains a magic number: toCutNodes.Add(heap.Enqueue(5' "5"));
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnGreaterThan,The following statement contains a magic number: toCutNodes.Add(heap.Enqueue(6' "6"));
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnGreaterThan,The following statement contains a magic number: toCutNodes.Add(heap.Enqueue(7' "7"));
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnGreaterThan,The following statement contains a magic number: heap.Enqueue(-10' "-10");
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnGreaterThan,The following statement contains a magic number: heap2.Enqueue(5' "5");
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnGreaterThan,The following statement contains a magic number: heap2.Enqueue(-10' "-10");
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnGreaterThan,The following statement contains a magic number: heap.Enqueue(-10' "-10");
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnGreaterThan,The following statement contains a magic number: toCutNodes.ForEach(x => heap.ChangeKey(x' -5));
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnGreaterThan,The following statement contains a magic number: heap.Enqueue(-10' "-10");
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,NextCutOnGreaterThan,The following statement contains a magic number: count = 7;
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,RandomTest,The following statement contains a magic number: Random rand = new Random(10);
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,RandomTest,The following statement contains a magic number: int NumberOfRecords = 10000;
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,RandomTest,The following statement contains a magic number: int RangeMultiplier = 10;
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,RandomTest,The following statement contains a magic number: int action = rand.Next(1' 6);
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,RandomTest,The following statement contains a magic number: action = rand.Next(1' 6);
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,RandomTest,The following statement contains a magic number: action == 1 && i < 2
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,RandomTest,The following statement contains a magic number: switch (action)                  {                      case 1:                          cells.Add(heap.Enqueue(rand.Next(0' NumberOfRecords * RangeMultiplier)' "SomeValue"));                          count++;                          break;                      case 2:                          Assert.IsFalse(lastValue > heap.Top.Priority' "Heap Condition Violated");                          lastValue = heap.Top.Priority;                          cells.Remove(heap.Top);                          heap.Dequeue();                          count--;                          break;                      case 3:                          int deleteIndex = rand.Next(0' cells.Count);                          heap.Delete(cells[deleteIndex]);                          cells.RemoveAt(deleteIndex);                          count--;                          break;                      case 4:                          int decreaseIndex = rand.Next(0' cells.Count);                          int newValue = rand.Next(0' cells[decreaseIndex].Priority);                          if (newValue < lastValue)                          {                              lastValue = newValue;                          }                          heap.ChangeKey(cells[decreaseIndex]' newValue);                          break;                      case 5:                          int increaseIndex = rand.Next(0' cells.Count);                          heap.ChangeKey(cells[increaseIndex]' rand.Next(cells[increaseIndex].Priority' NumberOfRecords * RangeMultiplier));                          break;                      default:                          break;                  }
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,RandomTest,The following statement contains a magic number: switch (action)                  {                      case 1:                          cells.Add(heap.Enqueue(rand.Next(0' NumberOfRecords * RangeMultiplier)' "SomeValue"));                          count++;                          break;                      case 2:                          Assert.IsFalse(lastValue > heap.Top.Priority' "Heap Condition Violated");                          lastValue = heap.Top.Priority;                          cells.Remove(heap.Top);                          heap.Dequeue();                          count--;                          break;                      case 3:                          int deleteIndex = rand.Next(0' cells.Count);                          heap.Delete(cells[deleteIndex]);                          cells.RemoveAt(deleteIndex);                          count--;                          break;                      case 4:                          int decreaseIndex = rand.Next(0' cells.Count);                          int newValue = rand.Next(0' cells[decreaseIndex].Priority);                          if (newValue < lastValue)                          {                              lastValue = newValue;                          }                          heap.ChangeKey(cells[decreaseIndex]' newValue);                          break;                      case 5:                          int increaseIndex = rand.Next(0' cells.Count);                          heap.ChangeKey(cells[increaseIndex]' rand.Next(cells[increaseIndex].Priority' NumberOfRecords * RangeMultiplier));                          break;                      default:                          break;                  }
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,RandomTest,The following statement contains a magic number: switch (action)                  {                      case 1:                          cells.Add(heap.Enqueue(rand.Next(0' NumberOfRecords * RangeMultiplier)' "SomeValue"));                          count++;                          break;                      case 2:                          Assert.IsFalse(lastValue > heap.Top.Priority' "Heap Condition Violated");                          lastValue = heap.Top.Priority;                          cells.Remove(heap.Top);                          heap.Dequeue();                          count--;                          break;                      case 3:                          int deleteIndex = rand.Next(0' cells.Count);                          heap.Delete(cells[deleteIndex]);                          cells.RemoveAt(deleteIndex);                          count--;                          break;                      case 4:                          int decreaseIndex = rand.Next(0' cells.Count);                          int newValue = rand.Next(0' cells[decreaseIndex].Priority);                          if (newValue < lastValue)                          {                              lastValue = newValue;                          }                          heap.ChangeKey(cells[decreaseIndex]' newValue);                          break;                      case 5:                          int increaseIndex = rand.Next(0' cells.Count);                          heap.ChangeKey(cells[increaseIndex]' rand.Next(cells[increaseIndex].Priority' NumberOfRecords * RangeMultiplier));                          break;                      default:                          break;                  }
Magic Number,QuickGraph.Tests.Collections,FibonacciHeapTests,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Collections\FibonacciHeapTest.cs,RandomTest,The following statement contains a magic number: switch (action)                  {                      case 1:                          cells.Add(heap.Enqueue(rand.Next(0' NumberOfRecords * RangeMultiplier)' "SomeValue"));                          count++;                          break;                      case 2:                          Assert.IsFalse(lastValue > heap.Top.Priority' "Heap Condition Violated");                          lastValue = heap.Top.Priority;                          cells.Remove(heap.Top);                          heap.Dequeue();                          count--;                          break;                      case 3:                          int deleteIndex = rand.Next(0' cells.Count);                          heap.Delete(cells[deleteIndex]);                          cells.RemoveAt(deleteIndex);                          count--;                          break;                      case 4:                          int decreaseIndex = rand.Next(0' cells.Count);                          int newValue = rand.Next(0' cells[decreaseIndex].Priority);                          if (newValue < lastValue)                          {                              lastValue = newValue;                          }                          heap.ChangeKey(cells[decreaseIndex]' newValue);                          break;                      case 5:                          int increaseIndex = rand.Next(0' cells.Count);                          heap.ChangeKey(cells[increaseIndex]' rand.Next(cells[increaseIndex].Priority' NumberOfRecords * RangeMultiplier));                          break;                      default:                          break;                  }
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(a_b' 4);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(b_a' 74);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(b_c' 2);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(b_e' 12);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(c_b' 12);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(c_f' 74);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(c_j' 12);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(d_e' 32);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(d_g' 22);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(e_d' 66);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(e_f' 76);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(e_h' 33);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(f_i' 11);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(f_j' 21);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(g_d' 12);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(g_h' 10);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(h_g' 2);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(h_i' 72);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(i_f' 31);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(i_h' 18);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(i_j' 7);
Magic Number,QuickGraph.Tests.Regression,DijkstraTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\DijkstraTest.cs,Scenario,The following statement contains a magic number: edgeCost.Add(j_f' 8);
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(493' 495' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(493' 495' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(495' 493' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(495' 493' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(497' 499' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(497' 499' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(499' 497' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(499' 497' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(499' 501' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(499' 501' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(501' 499' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(501' 499' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(501' 503' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(501' 503' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(503' 501' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(503' 501' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(503' 505' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(503' 505' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(505' 503' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(505' 503' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(505' 507' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(505' 507' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(507' 505' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(507' 505' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(507' 509' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(507' 509' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(509' 507' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(509' 507' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(509' 511' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(509' 511' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(511' 509' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(511' 509' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2747' 2749' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2747' 2749' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2749' 2747' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2749' 2747' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2749' 2751' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2749' 2751' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2751' 2749' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2751' 2749' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2751' 2753' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2751' 2753' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2753' 2751' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2753' 2751' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2753' 2755' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2753' 2755' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2755' 2753' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2755' 2753' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2755' 2757' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2755' 2757' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2757' 2755' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2757' 2755' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2757' 2759' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2757' 2759' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2759' 2757' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2759' 2757' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2761' 2763' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2761' 2763' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2763' 2761' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2763' 2761' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2765' 2767' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2765' 2767' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2767' 2765' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2767' 2765' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2763' 2765' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2763' 2765' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2765' 2763' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2765' 2763' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(654' 978' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(654' 978' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(978' 654' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(978' 654' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(978' 1302' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(978' 1302' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1302' 978' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1302' 978' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1302' 1626' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1302' 1626' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1626' 1302' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1626' 1302' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1626' 1950' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1626' 1950' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1950' 1626' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1950' 1626' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1950' 2274' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1950' 2274' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2274' 1950' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2274' 1950' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2274' 2598' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2274' 2598' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2598' 2274' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2598' 2274' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(513' 676' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(513' 676' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(676' 513' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(676' 513' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2767' 2608' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2767' 2608' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2608' 2767' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2608' 2767' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2287' 2608' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2287' 2608' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2608' 2287' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2608' 2287' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(676' 999' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(676' 999' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(999' 676' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(999' 676' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1321' 1643' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1321' 1643' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1643' 1321' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1643' 1321' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1643' 1965' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1643' 1965' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1965' 1643' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1965' 1643' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1965' 2287' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1965' 2287' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2287' 1965' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2287' 1965' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(999' 1321' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(999' 1321' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1321' 999' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1321' 999' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2745' 2747' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2745' 2747' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2747' 2745' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2747' 2745' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(650' 491' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(650' 491' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(491' 650' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(491' 650' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(650' 970' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(650' 970' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(970' 650' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(970' 650' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2258' 2582' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2258' 2582' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2582' 2258' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2582' 2258' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(970' 1291' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(970' 1291' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1291' 970' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1291' 970' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1935' 2258' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1935' 2258' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2258' 1935' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2258' 1935' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1291' 1613' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1291' 1613' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1613' 1291' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1613' 1291' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1613' 1935' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1613' 1935' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1935' 1613' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(1935' 1613' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2582' 2745' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2582' 2745' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2745' 2582' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2745' 2582' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(495' 497' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(495' 497' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(497' 495' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(497' 495' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(511' 513' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(511' 513' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(513' 511' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(513' 511' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(491' 493' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(491' 493' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(493' 491' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(493' 491' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(491' 654' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(491' 654' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(654' 491' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(654' 491' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2761' 2598' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2761' 2598' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2598' 2761' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2598' 2761' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2761' 2759' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2761' 2759' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2759' 2761' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: graph.AddVerticesAndEdge(new TaggedEdge<int' int>(2759' 2761' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: test1.ShortestPathCount = 5;
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: test1.Compute(1626' 1965);
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: test1.Compute(1626' 1965);
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,NotEnoughPaths,The following statement contains a magic number: Assert.AreEqual(4' test1.ComputedShortestPathCount);
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(1' 2' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(2' 3' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(2' 3' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(3' 4' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(3' 4' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(4' 5' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(4' 5' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(5' 0' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(1' 5' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(5' 1' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(2' 5' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(2' 5' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(2' 1' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(3' 2' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(3' 2' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(4' 3' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(4' 3' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(5' 4' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(5' 4' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(0' 5' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(5' 2' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: mvGraph2.AddVerticesAndEdge(new TaggedEdge<int' int>(5' 2' ii++));
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: test1.ShortestPathCount = 5;
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: test1.Compute(5' 2);
Magic Number,QuickGraph.Tests.Regression,HoffmanPavleyTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Regression\HoffmanPavleyTest.cs,InfiniteLoop13111,The following statement contains a magic number: test1.Compute(5' 2);
Magic Number,QuickGraph.Tests.Serialization,DirectedGraphMLExtensionsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\DirectedGraphMLExtensionsTest.cs,SimpleGraph,The following statement contains a magic number: int[][] edges = { new int[]{ 1' 2' 3 }'                                 new int[]{ 2' 3' 1 } };
Magic Number,QuickGraph.Tests.Serialization,DirectedGraphMLExtensionsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\DirectedGraphMLExtensionsTest.cs,SimpleGraph,The following statement contains a magic number: int[][] edges = { new int[]{ 1' 2' 3 }'                                 new int[]{ 2' 3' 1 } };
Magic Number,QuickGraph.Tests.Serialization,DirectedGraphMLExtensionsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\DirectedGraphMLExtensionsTest.cs,SimpleGraph,The following statement contains a magic number: int[][] edges = { new int[]{ 1' 2' 3 }'                                 new int[]{ 2' 3' 1 } };
Magic Number,QuickGraph.Tests.Serialization,DirectedGraphMLExtensionsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\DirectedGraphMLExtensionsTest.cs,SimpleGraph,The following statement contains a magic number: int[][] edges = { new int[]{ 1' 2' 3 }'                                 new int[]{ 2' 3' 1 } };
Magic Number,QuickGraph.Tests.Serialization,Repro13482Test,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\Repro13428.cs,Repro13482,The following statement contains a magic number: Person jacob = new Person("Jacob"' "Hochstetler")              {                  BirthDate = new DateTime(1712' 01' 01)'                  BirthPlace = "Alsace' France"'                  DeathDate = new DateTime(1776' 01' 01)'                  DeathPlace = "Pennsylvania' USA"'                  Gender = Gender.Male              };
Magic Number,QuickGraph.Tests.Serialization,Repro13482Test,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\Repro13428.cs,Repro13482,The following statement contains a magic number: Person jacob = new Person("Jacob"' "Hochstetler")              {                  BirthDate = new DateTime(1712' 01' 01)'                  BirthPlace = "Alsace' France"'                  DeathDate = new DateTime(1776' 01' 01)'                  DeathPlace = "Pennsylvania' USA"'                  Gender = Gender.Male              };
Magic Number,QuickGraph.Tests.Serialization,Repro13482Test,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\Repro13428.cs,Repro13482,The following statement contains a magic number: Person john = new Person("John"' "Hochstetler")              {                  BirthDate = new DateTime(1735' 01' 01)'                  BirthPlace = "Alsace' France"'                  DeathDate = new DateTime(1805' 04' 15)'                  DeathPlace = "Summit Mills' PA"'                  Gender = Gender.Male              };
Magic Number,QuickGraph.Tests.Serialization,Repro13482Test,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\Repro13428.cs,Repro13482,The following statement contains a magic number: Person john = new Person("John"' "Hochstetler")              {                  BirthDate = new DateTime(1735' 01' 01)'                  BirthPlace = "Alsace' France"'                  DeathDate = new DateTime(1805' 04' 15)'                  DeathPlace = "Summit Mills' PA"'                  Gender = Gender.Male              };
Magic Number,QuickGraph.Tests.Serialization,Repro13482Test,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\Repro13428.cs,Repro13482,The following statement contains a magic number: Person john = new Person("John"' "Hochstetler")              {                  BirthDate = new DateTime(1735' 01' 01)'                  BirthPlace = "Alsace' France"'                  DeathDate = new DateTime(1805' 04' 15)'                  DeathPlace = "Summit Mills' PA"'                  Gender = Gender.Male              };
Magic Number,QuickGraph.Tests.Serialization,Repro13482Test,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\Repro13428.cs,Repro13482,The following statement contains a magic number: Person john = new Person("John"' "Hochstetler")              {                  BirthDate = new DateTime(1735' 01' 01)'                  BirthPlace = "Alsace' France"'                  DeathDate = new DateTime(1805' 04' 15)'                  DeathPlace = "Summit Mills' PA"'                  Gender = Gender.Male              };
Magic Number,QuickGraph.Tests.Serialization,Repro13482Test,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\Repro13428.cs,Repro13482,The following statement contains a magic number: Person jonathon = new Person("Jonathon"' "Hochstetler")              {                  BirthPlace = "Pennsylvania"'                  DeathDate = new DateTime(1823' 05' 08)'                  Gender = Gender.Male'              };
Magic Number,QuickGraph.Tests.Serialization,Repro13482Test,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\Repro13428.cs,Repro13482,The following statement contains a magic number: Person jonathon = new Person("Jonathon"' "Hochstetler")              {                  BirthPlace = "Pennsylvania"'                  DeathDate = new DateTime(1823' 05' 08)'                  Gender = Gender.Male'              };
Magic Number,QuickGraph.Tests.Serialization,Repro13482Test,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\Repro13428.cs,Repro13482,The following statement contains a magic number: Person jonathon = new Person("Jonathon"' "Hochstetler")              {                  BirthPlace = "Pennsylvania"'                  DeathDate = new DateTime(1823' 05' 08)'                  Gender = Gender.Male'              };
Magic Number,QuickGraph.Tests.Serialization,Repro13482Test,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\Repro13428.cs,Repro13482,The following statement contains a magic number: Person emanuel = new Person("Emanuel"' "Hochstedler")              {                  BirthDate = new DateTime(1855' 01' 01)'                  DeathDate = new DateTime(1900' 01' 01)'                  Gender = Gender.Male              };
Magic Number,QuickGraph.Tests.Serialization,Repro13482Test,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\Repro13428.cs,Repro13482,The following statement contains a magic number: Person emanuel = new Person("Emanuel"' "Hochstedler")              {                  BirthDate = new DateTime(1855' 01' 01)'                  DeathDate = new DateTime(1900' 01' 01)'                  Gender = Gender.Male              };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: TestGraph g = new TestGraph()              {                  Bool = true'                  Double = 1.0'                  Float = 2.0F'                  Int = 10'                  Long = 100'                  String = "foo"'                  BoolArray = BoolArray'                  IntArray = IntArray'                  LongArray = LongArray'                  FloatArray = FloatArray'                  DoubleArray = DoubleArray'                  StringArray = StringArray'                  NullArray = null'                  BoolIList = BoolIList'                  IntIList = IntIList'                  LongIList = LongIList'                  FloatIList = FloatIList'                  DoubleIList = DoubleIList'                  StringIList = StringIList'                };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: TestGraph g = new TestGraph()              {                  Bool = true'                  Double = 1.0'                  Float = 2.0F'                  Int = 10'                  Long = 100'                  String = "foo"'                  BoolArray = BoolArray'                  IntArray = IntArray'                  LongArray = LongArray'                  FloatArray = FloatArray'                  DoubleArray = DoubleArray'                  StringArray = StringArray'                  NullArray = null'                  BoolIList = BoolIList'                  IntIList = IntIList'                  LongIList = LongIList'                  FloatIList = FloatIList'                  DoubleIList = DoubleIList'                  StringIList = StringIList'                };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: TestGraph g = new TestGraph()              {                  Bool = true'                  Double = 1.0'                  Float = 2.0F'                  Int = 10'                  Long = 100'                  String = "foo"'                  BoolArray = BoolArray'                  IntArray = IntArray'                  LongArray = LongArray'                  FloatArray = FloatArray'                  DoubleArray = DoubleArray'                  StringArray = StringArray'                  NullArray = null'                  BoolIList = BoolIList'                  IntIList = IntIList'                  LongIList = LongIList'                  FloatIList = FloatIList'                  DoubleIList = DoubleIList'                  StringIList = StringIList'                };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: TestVertex v = new TestVertex("v1")              {                  StringDefault = "bla"'                  String = "string"'                  Int = 10'                  Long = 20'                  Float = 25.0F'                  Double = 30.0'                  Bool = true'                  IntArray = new int[] { 1' 2' 3' 4 }'                  IntIList = new int[] { 4' 5' 6' 7 }              };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: TestVertex v = new TestVertex("v1")              {                  StringDefault = "bla"'                  String = "string"'                  Int = 10'                  Long = 20'                  Float = 25.0F'                  Double = 30.0'                  Bool = true'                  IntArray = new int[] { 1' 2' 3' 4 }'                  IntIList = new int[] { 4' 5' 6' 7 }              };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: TestVertex v = new TestVertex("v1")              {                  StringDefault = "bla"'                  String = "string"'                  Int = 10'                  Long = 20'                  Float = 25.0F'                  Double = 30.0'                  Bool = true'                  IntArray = new int[] { 1' 2' 3' 4 }'                  IntIList = new int[] { 4' 5' 6' 7 }              };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: TestVertex v = new TestVertex("v1")              {                  StringDefault = "bla"'                  String = "string"'                  Int = 10'                  Long = 20'                  Float = 25.0F'                  Double = 30.0'                  Bool = true'                  IntArray = new int[] { 1' 2' 3' 4 }'                  IntIList = new int[] { 4' 5' 6' 7 }              };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: TestVertex v = new TestVertex("v1")              {                  StringDefault = "bla"'                  String = "string"'                  Int = 10'                  Long = 20'                  Float = 25.0F'                  Double = 30.0'                  Bool = true'                  IntArray = new int[] { 1' 2' 3' 4 }'                  IntIList = new int[] { 4' 5' 6' 7 }              };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: TestVertex v = new TestVertex("v1")              {                  StringDefault = "bla"'                  String = "string"'                  Int = 10'                  Long = 20'                  Float = 25.0F'                  Double = 30.0'                  Bool = true'                  IntArray = new int[] { 1' 2' 3' 4 }'                  IntIList = new int[] { 4' 5' 6' 7 }              };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: TestVertex v = new TestVertex("v1")              {                  StringDefault = "bla"'                  String = "string"'                  Int = 10'                  Long = 20'                  Float = 25.0F'                  Double = 30.0'                  Bool = true'                  IntArray = new int[] { 1' 2' 3' 4 }'                  IntIList = new int[] { 4' 5' 6' 7 }              };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: TestVertex v = new TestVertex("v1")              {                  StringDefault = "bla"'                  String = "string"'                  Int = 10'                  Long = 20'                  Float = 25.0F'                  Double = 30.0'                  Bool = true'                  IntArray = new int[] { 1' 2' 3' 4 }'                  IntIList = new int[] { 4' 5' 6' 7 }              };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: TestVertex v = new TestVertex("v1")              {                  StringDefault = "bla"'                  String = "string"'                  Int = 10'                  Long = 20'                  Float = 25.0F'                  Double = 30.0'                  Bool = true'                  IntArray = new int[] { 1' 2' 3' 4 }'                  IntIList = new int[] { 4' 5' 6' 7 }              };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: TestVertex v = new TestVertex("v1")              {                  StringDefault = "bla"'                  String = "string"'                  Int = 10'                  Long = 20'                  Float = 25.0F'                  Double = 30.0'                  Bool = true'                  IntArray = new int[] { 1' 2' 3' 4 }'                  IntIList = new int[] { 4' 5' 6' 7 }              };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: TestVertex v = new TestVertex("v1")              {                  StringDefault = "bla"'                  String = "string"'                  Int = 10'                  Long = 20'                  Float = 25.0F'                  Double = 30.0'                  Bool = true'                  IntArray = new int[] { 1' 2' 3' 4 }'                  IntIList = new int[] { 4' 5' 6' 7 }              };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: Assert.IsTrue(g.FloatArray.Equals1(sg.FloatArray' 0.001F));
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: Assert.IsTrue(g.DoubleArray.Equals1(sg.DoubleArray' 0.0001));
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: Assert.IsTrue(g.FloatIList.Equals1(sg.FloatIList' 0.001F));
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteVertex,The following statement contains a magic number: Assert.IsTrue(g.DoubleIList.Equals1(sg.DoubleIList' 0.0001));
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteEdge,The following statement contains a magic number: var g = new TestGraph()                  {                      Bool = true'                      Double = 1.0'                      Float = 2.0F'                      Int = 10'                      Long = 100'                      String = "foo"                  };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteEdge,The following statement contains a magic number: var g = new TestGraph()                  {                      Bool = true'                      Double = 1.0'                      Float = 2.0F'                      Int = 10'                      Long = 100'                      String = "foo"                  };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteEdge,The following statement contains a magic number: var g = new TestGraph()                  {                      Bool = true'                      Double = 1.0'                      Float = 2.0F'                      Int = 10'                      Long = 100'                      String = "foo"                  };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteEdge,The following statement contains a magic number: TestVertex v1 = new TestVertex("v1")                  {                      StringDefault = "bla"'                      String = "string"'                      Int = 10'                      Long = 20'                      Float = 25.0F'                      Double = 30.0'                      Bool = true                  };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteEdge,The following statement contains a magic number: TestVertex v1 = new TestVertex("v1")                  {                      StringDefault = "bla"'                      String = "string"'                      Int = 10'                      Long = 20'                      Float = 25.0F'                      Double = 30.0'                      Bool = true                  };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteEdge,The following statement contains a magic number: TestVertex v1 = new TestVertex("v1")                  {                      StringDefault = "bla"'                      String = "string"'                      Int = 10'                      Long = 20'                      Float = 25.0F'                      Double = 30.0'                      Bool = true                  };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteEdge,The following statement contains a magic number: TestVertex v1 = new TestVertex("v1")                  {                      StringDefault = "bla"'                      String = "string"'                      Int = 10'                      Long = 20'                      Float = 25.0F'                      Double = 30.0'                      Bool = true                  };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteEdge,The following statement contains a magic number: TestVertex v2 = new TestVertex("v2")                  {                      StringDefault = "bla"'                      String = "string2"'                      Int = 110'                      Long = 120'                      Float = 125.0F'                      Double = 130.0'                      Bool = true                  };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteEdge,The following statement contains a magic number: TestVertex v2 = new TestVertex("v2")                  {                      StringDefault = "bla"'                      String = "string2"'                      Int = 110'                      Long = 120'                      Float = 125.0F'                      Double = 130.0'                      Bool = true                  };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteEdge,The following statement contains a magic number: TestVertex v2 = new TestVertex("v2")                  {                      StringDefault = "bla"'                      String = "string2"'                      Int = 110'                      Long = 120'                      Float = 125.0F'                      Double = 130.0'                      Bool = true                  };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteEdge,The following statement contains a magic number: TestVertex v2 = new TestVertex("v2")                  {                      StringDefault = "bla"'                      String = "string2"'                      Int = 110'                      Long = 120'                      Float = 125.0F'                      Double = 130.0'                      Bool = true                  };
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteEdge,The following statement contains a magic number: var e = new TestEdge(                      v1'v2'                      "e1"'                      "edge"'                      90'                      100'                      25.0F'                      110.0'                      true                      );
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteEdge,The following statement contains a magic number: var e = new TestEdge(                      v1'v2'                      "e1"'                      "edge"'                      90'                      100'                      25.0F'                      110.0'                      true                      );
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteEdge,The following statement contains a magic number: var e = new TestEdge(                      v1'v2'                      "e1"'                      "edge"'                      90'                      100'                      25.0F'                      110.0'                      true                      );
Magic Number,QuickGraph.Serialization,GraphMLSerializerWithArgumentsTest,D:\research\architectureSmells\repos\YaccConstructor_QuickGraph\tests\QuickGraph.Tests\Serialization\GraphMLSerializerWithArgumentsTest.cs,WriteEdge,The following statement contains a magic number: var e = new TestEdge(                      v1'v2'                      "e1"'                      "edge"'                      90'                      100'                      25.0F'                      110.0'                      true                      );
