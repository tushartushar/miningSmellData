Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Smeedee.Integration.PMT.ScrumForTFS.DomainModel.Repositories,ScrumForTFSRepository,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\PMT\ScrumForTFS\DomainModel\Repositories\ScrumForTFSRepository.cs,ScrumForTFSRepository,The method has 5 parameters.
Long Parameter List,Smeedee.Integration.VCS.SVN.DomainModel.Services,SVNCredentialsChecker,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\VCS\SVN\DomainModel\Services\SVNCredentialsChecker.cs,TryCredentials,The method has 5 parameters.
Long Statement,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,CCServerRepository,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\CCServerRepository.cs,GetBuildLogData,The length of the statement  "		throw new CruiseControlRepositoryException ("There was an error getting data from the cruise control server. See inner exception for details."' ex); " is 148.
Long Statement,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,CCServerRepository,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\CCServerRepository.cs,GetBuildLogDataFromWebserver,The length of the statement  "	string buildLogXmlUrl = landingPageResponse.ResponseUri.ToString ().Replace (BUILD_REPORT_FILENAME' XML_BUILD_LOG_FILENAME); " is 124.
Long Statement,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,CCServerRepository,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\CCServerRepository.cs,GetProjectsXML,The length of the statement  "		throw new CruiseControlRepositoryException ("There was an error getting data from the cruise control server. See inner exception for details."' ex); " is 148.
Long Statement,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,CCServerRepository,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\CCServerRepository.cs,Get,The length of the statement  "		if (project.LatestBuild.Status == BuildStatus.FinishedSuccefully || project.LatestBuild.Status == BuildStatus.FinishedWithFailure) { " is 132.
Long Statement,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,SocketXMLBuildlogRequester,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\SocketXMLBuildlogRequester.cs,ReadDataFromSocket,The length of the statement  "	var xmlData = Regex.Match (webResult' ".+(<cruisecontrol.*<build .+?>)"' RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups [1].Value; " is 141.
Long Statement,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,XmlBuildLogParser,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\XmlBuildLogParser.cs,Parse,The length of the statement  "		throw new CruiseControlRepositoryException ("There was an error parsing the XML-file. " + "Please refer to the inner exception for details."' ex); " is 146.
Long Statement,Smeedee.Integration.CI.TFSBuild.DomainModel.Repositories,BuildFetcher,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\TFSBuild\DomainModel\Repositories\BuildFetcher.cs,GetBuildHistory,The length of the statement  "	return new List<IBuildDetail> (buildServer.QueryBuilds (buildDefinition).Where (bd => bd.Status != BuildStatus.NotStarted).Reverse ()); " is 135.
Long Statement,Smeedee.Integration.Database.DomainModel.Repositories,ChangesetDatabaseRepository,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\Database\DomainModel\Repositories\ChangesetDatabaseRepository.cs,AssureServerIsPresentInDb,The length of the statement  "			var hit = session.CreateQuery (string.Format ("from ChangesetServer c WHERE c.Url ='{0}'"' server.Url)).UniqueResult (); " is 120.
Long Statement,Smeedee.Integration.Database.DomainModel.Repositories,GenericDatabaseRepository,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\Database\DomainModel\Repositories\GenericDatabaseRepository.cs,Get,The length of the statement  "		var results = session.CreateCriteria (typeof(TDomainModelType)).List<TDomainModelType> ().Where (cs => specification.IsSatisfiedBy (cs)); " is 137.
Long Statement,Smeedee.Integration.Database.DomainModel.Repositories,NHibConfig,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\Database\DomainModel\Repositories\NHibConfig.cs,CreateConfiguration,The length of the statement  "	configuration.Properties.Add ("connection.connection_string"' string.Format ("Data Source={0};Version=3;New=True"' dbFilePath)); " is 128.
Long Statement,Smeedee.Integration.Database.DomainModel.Repositories,NHibConfig,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\Database\DomainModel\Repositories\NHibConfig.cs,CreateConfiguration,The length of the statement  "	configuration.Properties.Add ("proxyfactory.factory_class"' "NHibernate.ByteCode.Castle.ProxyFactoryFactory' NHibernate.ByteCode.Castle"); " is 138.
Long Statement,Smeedee.Integration.PMT.RallyDev.DomainModel.Repositories,RallyDevReader,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\PMT\RallyDev\DomainModel\Repositories\RallyDevReader.cs,GetTaskReferences,The length of the statement  "	var queryString = webServiceUrl + "Task?query=(Iteration.Name = %22" + iterationName + "%22)&pagesize=" + PAGE_SIZE + "&start=" + start; " is 136.
Long Statement,Smeedee.Integration.PMT.RallyDev.DomainModel.Repositories,RallyDevReader,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\PMT\RallyDev\DomainModel\Repositories\RallyDevReader.cs,GetTaskReferences,The length of the statement  "			queryString = webServiceUrl + "Task?query=(Iteration.Name = %22" + iterationName + "%22)&pagesize=" + PAGE_SIZE + "&start=" + start; " is 132.
Long Statement,Smeedee.Integration.PMT.RallyDev.DomainModel.Repositories,RallyDevReader,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\PMT\RallyDev\DomainModel\Repositories\RallyDevReader.cs,GetIterationReferences,The length of the statement  "	var queryString = string.Format ("{0}Iteration?query=(Project.Name = %22{1}%22)&pagesize={2}&start={3}"' webServiceUrl' projectName' PAGE_SIZE' start); " is 151.
Long Statement,Smeedee.Integration.PMT.RallyDev.DomainModel.Repositories,RallyDevReader,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\PMT\RallyDev\DomainModel\Repositories\RallyDevReader.cs,GetIterationReferences,The length of the statement  "			queryString = string.Format ("{0}Iteration?query=(Project.Name = %22{1}%22)&pagesize={2}&start={3}"' webServiceUrl' projectName' PAGE_SIZE' start); " is 147.
Long Statement,Smeedee.Integration.PMT.RallyDev.DomainModel.Repositories,XmlTaskParser,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\PMT\RallyDev\DomainModel\Repositories\XmlTaskParser.cs,ParseTaskWithData,The length of the statement  "	var workEffortHistoryItem = new WorkEffortHistoryItem (GetIntValueFromNode (taskEstimateNode)' GetDateFromXmlNode (creationDateNode)); " is 134.
Long Statement,Smeedee.Integration.PMT.RallyDev.DomainModel.Repositories,XmlTaskParser,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\PMT\RallyDev\DomainModel\Repositories\XmlTaskParser.cs,ParseRemainingWorkEffortFromDecription,The length of the statement  "	MatchCollection matches = Regex.Matches (description' @"TO DO changed from \[[^\]]+?\] to \[(?<remaining>[^\.]+?.[\d]+?) Hours\]"' RegexOptions.Singleline); " is 156.
Long Statement,Smeedee.Integration.PMT.ScrumForTFS.DomainModel.Repositories,WorkItemFetcher,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\PMT\ScrumForTFS\DomainModel\Repositories\WorkItemFetcher.cs,GetCurrentWorkItemsInSprint,The length of the statement  "	string wiqlQuery = @"SELECT [Estimated Effort (Scrum v3)]' " + @"[Work Remaining (Scrum v3)] " + @"FROM [WorkItems] " + @"WHERE [Team Project] = '" + projectName + "'" + @"AND [Iteration Path] = '" + iterationPath + "'" + @"AND [Work Item Type] = 'Sprint Backlog Task'"; " is 270.
Long Statement,Smeedee.Integration.PMT.ScrumForTFS.DomainModel.Repositories,WorkItemFetcher,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\PMT\ScrumForTFS\DomainModel\Repositories\WorkItemFetcher.cs,GetAllCurrentWorkItems,The length of the statement  "	var wiqlQuery = @"SELECT [Estimated Effort (Scrum v3)]' " + @"[Work Remaining (Scrum v3)] " + @"FROM [WorkItems] " + @"WHERE [System.TeamProject] = '" + projectName + "'" + @"AND [Work Item Type] = 'Sprint Backlog Task'"; " is 221.
Long Statement,Smeedee.Integration.VCS.TFSVC.DomainModel.Repositories,SpecificationHandler,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\VCS\TFSVC\DomainModel\Repositories\SpecificationHandler.cs,GetValueFromExpressionBody,The length of the statement  "		var value = objType.GetProperty (memberExpression.Member.Name' BindingFlags.Instance | BindingFlags.Public).GetValue (obj' null); " is 129.
Long Statement,Smeedee.Integration.VCS.TFSVC.DomainModel.Repositories,TFSChangesetRepository,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\VCS\TFSVC\DomainModel\Repositories\TFSChangesetRepository.cs,Get,The length of the statement  "	IEnumerable changesets = vcs.QueryHistory (repository' query.RevisionTo' query.DeletionId' query.RecursionType' query.Author.Username' query.RevisionFrom' query.RevisionTo' query.MaxRevisions' query.IncludeChanges' query.SlotMode); " is 231.
Long Statement,Smeedee.Integration.WidgetDiscovery,XapUnpacker,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\WidgetDiscovery\XapUnpacker.cs,GetAssemblies,The length of the statement  "	return extractDirInfo.GetFiles ("*.dll"' SearchOption.AllDirectories).Select (af => Assembly.ReflectionOnlyLoadFrom (af.FullName)); " is 131.
Empty Catch Block,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,CompressedBuildlogRequester,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\CompressedBuildlogRequester.cs,DecompressGzip,The method has an empty catch block.
Empty Catch Block,Smeedee.Integration.PMT.RallyDev.DomainModel.Repositories,XmlDownloader,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\PMT\RallyDev\DomainModel\Repositories\XmlDownloader.cs,DecompressGzip,The method has an empty catch block.
Empty Catch Block,Smeedee.Integration.WidgetDiscovery,WidgetInfoLoader,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\WidgetDiscovery\WidgetInfoLoader.cs,GetWidgetInfosFromAssemblies,The method has an empty catch block.
Magic Number,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,CCServerRepository,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\CCServerRepository.cs,GetPartialXmlBuildLog,The following statement contains a magic number: return httpRequester.Request (buildLogXmlUrl' 80);  
Magic Number,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,CompressedBuildlogRequester,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\CompressedBuildlogRequester.cs,Request,The following statement contains a magic number: if (port != 80)  	throw new Exception ("Only port 80 is supported");  
Magic Number,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,CompressedBuildlogRequester,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\CompressedBuildlogRequester.cs,DecompressGzip,The following statement contains a magic number: try {  	byte[] readBuffer = new byte[4096];  	/// read from input stream and write to gzip stream  	using (GZipStream streamGZip = new GZipStream (streamInput' CompressionMode.Decompress)) {  		int i;  		while ((i = streamGZip.Read (readBuffer' 0' readBuffer.Length)) != 0) {  			streamOutput.Write (readBuffer' 0' i);  			iOutputLength = iOutputLength + i;  		}  	}  }  catch (Exception ex) {  	// todo: handle exception  }  
Magic Number,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,HTTPSocket,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\HTTPSocket.cs,ReadBytesFromHost,The following statement contains a magic number: stream.ReadTimeout = 3000;  
Magic Number,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,OptimizedHTTPRequest,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\OptimizedHTTPRequest.cs,ParseData,The following statement contains a magic number: if (httpResponse.Substring (0' 20).ToLower ().Contains ("200 ok") != true)  	throw new Exception ("Response from server did not indicate '200 OK'");  
Magic Number,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,OptimizedHTTPRequest,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\OptimizedHTTPRequest.cs,ParseData,The following statement contains a magic number: if (httpResponse.IndexOf ("\n") < httpResponse.IndexOf ("\r") || !httpResponse.Contains ("\r")) {  	retString = httpResponse.Substring (httpResponse.IndexOf ("\n\n") + 2);  }  else {  	retString = httpResponse.Substring (httpResponse.IndexOf ("\r\n\r\n") + 4);  }  
Magic Number,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,OptimizedHTTPRequest,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\OptimizedHTTPRequest.cs,ParseData,The following statement contains a magic number: if (httpResponse.IndexOf ("\n") < httpResponse.IndexOf ("\r") || !httpResponse.Contains ("\r")) {  	retString = httpResponse.Substring (httpResponse.IndexOf ("\n\n") + 2);  }  else {  	retString = httpResponse.Substring (httpResponse.IndexOf ("\r\n\r\n") + 4);  }  
Magic Number,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,OptimizedHTTPRequest,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\OptimizedHTTPRequest.cs,ParseData,The following statement contains a magic number: retString = httpResponse.Substring (httpResponse.IndexOf ("\n\n") + 2);  
Magic Number,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,OptimizedHTTPRequest,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\OptimizedHTTPRequest.cs,ParseData,The following statement contains a magic number: retString = httpResponse.Substring (httpResponse.IndexOf ("\r\n\r\n") + 4);  
Magic Number,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,SocketXMLBuildlogRequester,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\SocketXMLBuildlogRequester.cs,ReadDataFromSocket,The following statement contains a magic number: if (fetchLogSize > 160000)  	throw new Exception ("Read data request was too large");  
Magic Number,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,SocketXMLBuildlogRequester,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\SocketXMLBuildlogRequester.cs,ReadDataFromSocket,The following statement contains a magic number: if (Regex.IsMatch (webResult' @"\<build .*\>") == false) {  	return ReadDataFromSocket (buildLogXmlUrl' port' fetchLogSize * 2);  }  
Magic Number,Smeedee.Integration.CI.CruiseControl.DomainModel.Repositories,SocketXMLBuildlogRequester,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\CI\CruiseControl\DomainModel\Repositories\SocketXMLBuildlogRequester.cs,ReadDataFromSocket,The following statement contains a magic number: return ReadDataFromSocket (buildLogXmlUrl' port' fetchLogSize * 2);  
Magic Number,Smeedee.Integration.PMT.RallyDev.DomainModel.Repositories,XmlDownloader,C:\repos\Smeedee_Smeedee\source\Integration\Smeedee.Integration\PMT\RallyDev\DomainModel\Repositories\XmlDownloader.cs,DecompressGzip,The following statement contains a magic number: try {  	byte[] readBuffer = new byte[4096];  	/// read from input stream and write to gzip stream  	using (GZipStream streamGZip = new GZipStream (streamInput' CompressionMode.Decompress)) {  		int i;  		while ((i = streamGZip.Read (readBuffer' 0' readBuffer.Length)) != 0) {  			streamOutput.Write (readBuffer' 0' i);  			iOutputLength = iOutputLength + i;  		}  	}  }  catch (Exception ex) {  	// todo: handle exception  }  
