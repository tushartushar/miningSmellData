Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ExtractionTool,Program,C:\repos\umbraco_Courier\Samples\CourierTeamDev\ExtractionTool\Program.cs,GetRevisionsFroDeploy,Cyclomatic complexity of the method is 8
Long Statement,ExtractionTool,Program,C:\repos\umbraco_Courier\Samples\CourierTeamDev\ExtractionTool\Program.cs,Main,The length of the statement  "                Umbraco.Courier.Core.Helpers.TypeResolver.LoadAssembliesIntoAppDomain(pluginFolder' "umbraco.courier.dataresolvers.dll"); " is 121.
Long Statement,ExtractionTool,Program,C:\repos\umbraco_Courier\Samples\CourierTeamDev\ExtractionTool\Program.cs,Main,The length of the statement  "                Umbraco.Courier.Core.Helpers.TypeResolver.LoadAssembliesIntoAppDomain(pluginFolder' "umbraco.courier.repositoryproviders.dll"); " is 127.
Magic Number,ExtractionTool,Arguments,C:\repos\umbraco_Courier\Samples\CourierTeamDev\ExtractionTool\Utility.cs,Arguments,The following statement contains a magic number: foreach (string Txt in Args)              {                  // Look for new parameters (-'/ or --) and a                    // possible enclosed value (=':)                    Parts = Spliter.Split(Txt' 3);                    switch (Parts.Length)                  {                      // Found a value (for the last parameter                         // found (space separator))                        case 1:                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                              {                                  Parts[0] =                                      Remover.Replace(Parts[0]' "$1");                                    Parameters.Add(Parameter' Parts[0]);                              }                              Parameter = null;                          }                          // else Error: no parameter waiting for a value (skipped)                            break;                        // Found just a parameter                        case 2:                          // The last parameter is still waiting.                             // With no value' set it to true.                            if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter' "true");                          }                          Parameter = Parts[1];                          break;                        // Parameter with enclosed value                        case 3:                          // The last parameter is still waiting.                             // With no value' set it to true.                            if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter' "true");                          }                            Parameter = Parts[1];                            // Remove possible enclosing characters ("'')                            if (!Parameters.ContainsKey(Parameter))                          {                              Parts[2] = Remover.Replace(Parts[2]' "$1");                              Parameters.Add(Parameter' Parts[2]);                          }                            Parameter = null;                          break;                  }              }
Magic Number,ExtractionTool,Arguments,C:\repos\umbraco_Courier\Samples\CourierTeamDev\ExtractionTool\Utility.cs,Arguments,The following statement contains a magic number: foreach (string Txt in Args)              {                  // Look for new parameters (-'/ or --) and a                    // possible enclosed value (=':)                    Parts = Spliter.Split(Txt' 3);                    switch (Parts.Length)                  {                      // Found a value (for the last parameter                         // found (space separator))                        case 1:                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                              {                                  Parts[0] =                                      Remover.Replace(Parts[0]' "$1");                                    Parameters.Add(Parameter' Parts[0]);                              }                              Parameter = null;                          }                          // else Error: no parameter waiting for a value (skipped)                            break;                        // Found just a parameter                        case 2:                          // The last parameter is still waiting.                             // With no value' set it to true.                            if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter' "true");                          }                          Parameter = Parts[1];                          break;                        // Parameter with enclosed value                        case 3:                          // The last parameter is still waiting.                             // With no value' set it to true.                            if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter' "true");                          }                            Parameter = Parts[1];                            // Remove possible enclosing characters ("'')                            if (!Parameters.ContainsKey(Parameter))                          {                              Parts[2] = Remover.Replace(Parts[2]' "$1");                              Parameters.Add(Parameter' Parts[2]);                          }                            Parameter = null;                          break;                  }              }
Magic Number,ExtractionTool,Arguments,C:\repos\umbraco_Courier\Samples\CourierTeamDev\ExtractionTool\Utility.cs,Arguments,The following statement contains a magic number: foreach (string Txt in Args)              {                  // Look for new parameters (-'/ or --) and a                    // possible enclosed value (=':)                    Parts = Spliter.Split(Txt' 3);                    switch (Parts.Length)                  {                      // Found a value (for the last parameter                         // found (space separator))                        case 1:                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                              {                                  Parts[0] =                                      Remover.Replace(Parts[0]' "$1");                                    Parameters.Add(Parameter' Parts[0]);                              }                              Parameter = null;                          }                          // else Error: no parameter waiting for a value (skipped)                            break;                        // Found just a parameter                        case 2:                          // The last parameter is still waiting.                             // With no value' set it to true.                            if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter' "true");                          }                          Parameter = Parts[1];                          break;                        // Parameter with enclosed value                        case 3:                          // The last parameter is still waiting.                             // With no value' set it to true.                            if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter' "true");                          }                            Parameter = Parts[1];                            // Remove possible enclosing characters ("'')                            if (!Parameters.ContainsKey(Parameter))                          {                              Parts[2] = Remover.Replace(Parts[2]' "$1");                              Parameters.Add(Parameter' Parts[2]);                          }                            Parameter = null;                          break;                  }              }
Magic Number,ExtractionTool,Arguments,C:\repos\umbraco_Courier\Samples\CourierTeamDev\ExtractionTool\Utility.cs,Arguments,The following statement contains a magic number: foreach (string Txt in Args)              {                  // Look for new parameters (-'/ or --) and a                    // possible enclosed value (=':)                    Parts = Spliter.Split(Txt' 3);                    switch (Parts.Length)                  {                      // Found a value (for the last parameter                         // found (space separator))                        case 1:                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                              {                                  Parts[0] =                                      Remover.Replace(Parts[0]' "$1");                                    Parameters.Add(Parameter' Parts[0]);                              }                              Parameter = null;                          }                          // else Error: no parameter waiting for a value (skipped)                            break;                        // Found just a parameter                        case 2:                          // The last parameter is still waiting.                             // With no value' set it to true.                            if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter' "true");                          }                          Parameter = Parts[1];                          break;                        // Parameter with enclosed value                        case 3:                          // The last parameter is still waiting.                             // With no value' set it to true.                            if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter' "true");                          }                            Parameter = Parts[1];                            // Remove possible enclosing characters ("'')                            if (!Parameters.ContainsKey(Parameter))                          {                              Parts[2] = Remover.Replace(Parts[2]' "$1");                              Parameters.Add(Parameter' Parts[2]);                          }                            Parameter = null;                          break;                  }              }
Magic Number,ExtractionTool,Arguments,C:\repos\umbraco_Courier\Samples\CourierTeamDev\ExtractionTool\Utility.cs,Arguments,The following statement contains a magic number: foreach (string Txt in Args)              {                  // Look for new parameters (-'/ or --) and a                    // possible enclosed value (=':)                    Parts = Spliter.Split(Txt' 3);                    switch (Parts.Length)                  {                      // Found a value (for the last parameter                         // found (space separator))                        case 1:                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                              {                                  Parts[0] =                                      Remover.Replace(Parts[0]' "$1");                                    Parameters.Add(Parameter' Parts[0]);                              }                              Parameter = null;                          }                          // else Error: no parameter waiting for a value (skipped)                            break;                        // Found just a parameter                        case 2:                          // The last parameter is still waiting.                             // With no value' set it to true.                            if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter' "true");                          }                          Parameter = Parts[1];                          break;                        // Parameter with enclosed value                        case 3:                          // The last parameter is still waiting.                             // With no value' set it to true.                            if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter' "true");                          }                            Parameter = Parts[1];                            // Remove possible enclosing characters ("'')                            if (!Parameters.ContainsKey(Parameter))                          {                              Parts[2] = Remover.Replace(Parts[2]' "$1");                              Parameters.Add(Parameter' Parts[2]);                          }                            Parameter = null;                          break;                  }              }
Magic Number,ExtractionTool,Arguments,C:\repos\umbraco_Courier\Samples\CourierTeamDev\ExtractionTool\Utility.cs,Arguments,The following statement contains a magic number: foreach (string Txt in Args)              {                  // Look for new parameters (-'/ or --) and a                    // possible enclosed value (=':)                    Parts = Spliter.Split(Txt' 3);                    switch (Parts.Length)                  {                      // Found a value (for the last parameter                         // found (space separator))                        case 1:                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                              {                                  Parts[0] =                                      Remover.Replace(Parts[0]' "$1");                                    Parameters.Add(Parameter' Parts[0]);                              }                              Parameter = null;                          }                          // else Error: no parameter waiting for a value (skipped)                            break;                        // Found just a parameter                        case 2:                          // The last parameter is still waiting.                             // With no value' set it to true.                            if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter' "true");                          }                          Parameter = Parts[1];                          break;                        // Parameter with enclosed value                        case 3:                          // The last parameter is still waiting.                             // With no value' set it to true.                            if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter' "true");                          }                            Parameter = Parts[1];                            // Remove possible enclosing characters ("'')                            if (!Parameters.ContainsKey(Parameter))                          {                              Parts[2] = Remover.Replace(Parts[2]' "$1");                              Parameters.Add(Parameter' Parts[2]);                          }                            Parameter = null;                          break;                  }              }
Missing Default,ExtractionTool,Arguments,C:\repos\umbraco_Courier\Samples\CourierTeamDev\ExtractionTool\Utility.cs,Arguments,The following switch statement is missing a default case: switch (Parts.Length)                  {                      // Found a value (for the last parameter                         // found (space separator))                        case 1:                          if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                              {                                  Parts[0] =                                      Remover.Replace(Parts[0]' "$1");                                    Parameters.Add(Parameter' Parts[0]);                              }                              Parameter = null;                          }                          // else Error: no parameter waiting for a value (skipped)                            break;                        // Found just a parameter                        case 2:                          // The last parameter is still waiting.                             // With no value' set it to true.                            if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter' "true");                          }                          Parameter = Parts[1];                          break;                        // Parameter with enclosed value                        case 3:                          // The last parameter is still waiting.                             // With no value' set it to true.                            if (Parameter != null)                          {                              if (!Parameters.ContainsKey(Parameter))                                  Parameters.Add(Parameter' "true");                          }                            Parameter = Parts[1];                            // Remove possible enclosing characters ("'')                            if (!Parameters.ContainsKey(Parameter))                          {                              Parts[2] = Remover.Replace(Parts[2]' "$1");                              Parameters.Add(Parameter' Parts[2]);                          }                            Parameter = null;                          break;                  }
