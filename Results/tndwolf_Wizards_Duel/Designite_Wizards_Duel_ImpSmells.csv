Implementation smell,Namespace,Class,File,Method,Description
Long Method,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The method has 127 lines of code.
Complex Method,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,Cyclomatic complexity of the method is 25
Complex Method,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,Cyclomatic complexity of the method is 83
Complex Method,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadSkill,Cyclomatic complexity of the method is 13
Complex Method,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadSkillBehaviour,Cyclomatic complexity of the method is 32
Complex Method,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,ParseEffect,Cyclomatic complexity of the method is 23
Complex Method,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,TrySkill,Cyclomatic complexity of the method is 10
Complex Method,WizardsDuel.Game,ConstructionBlock,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,RotateCCW,Cyclomatic complexity of the method is 8
Complex Method,WizardsDuel.Game,ConstructionBlock,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,RotateCW,Cyclomatic complexity of the method is 8
Complex Method,WizardsDuel.Game,BufferLevel,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,AddRandomBlock,Cyclomatic complexity of the method is 8
Complex Method,WizardsDuel.Game,BufferLevel,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,IsOpenExit,Cyclomatic complexity of the method is 13
Complex Method,WizardsDuel.Game,BufferLevel,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,PlaceBlock,Cyclomatic complexity of the method is 9
Complex Method,WizardsDuel.Game,BufferLevel,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,ToImage,Cyclomatic complexity of the method is 11
Complex Method,WizardsDuel.Game,WorldFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,BuildBlock,Cyclomatic complexity of the method is 20
Complex Method,WizardsDuel.Game,WorldFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,BuildAI,Cyclomatic complexity of the method is 22
Complex Method,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,Cyclomatic complexity of the method is 13
Complex Method,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,Cyclomatic complexity of the method is 13
Complex Method,WizardsDuel.Game,Entity,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Entity.cs,Run,Cyclomatic complexity of the method is 12
Complex Method,WizardsDuel.Game,SpawnBehaviour,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Skills.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadPage,Cyclomatic complexity of the method is 14
Complex Method,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,Cyclomatic complexity of the method is 45
Complex Method,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,Cyclomatic complexity of the method is 9
Complex Method,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,Cyclomatic complexity of the method is 19
Complex Method,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,SetDungeon,Cyclomatic complexity of the method is 10
Complex Method,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CheckKeyboard,Cyclomatic complexity of the method is 10
Complex Method,WizardsDuel.Io,Icon,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\GraphicWidgets.cs,DrawingRoutine,Cyclomatic complexity of the method is 9
Complex Method,WizardsDuel.States,GameState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,ChangeState,Cyclomatic complexity of the method is 8
Complex Method,WizardsDuel.States,TestState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,Cyclomatic complexity of the method is 14
Complex Method,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,Cyclomatic complexity of the method is 21
Long Parameter List,WizardsDuel.Game,ShiftEvent,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Events.cs,AttackOrMove,The method has 5 parameters.
Long Parameter List,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The method has 5 parameters.
Long Parameter List,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,TrySkill,The method has 5 parameters.
Long Parameter List,WizardsDuel.Game,World,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\World.cs,testInLoS,The method has 5 parameters.
Long Parameter List,WizardsDuel.Game,ConstructionBlock,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,AddObject,The method has 5 parameters.
Long Parameter List,WizardsDuel.Io,AnimationFrame,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\AdvancedWidgets.cs,AnimationFrame,The method has 6 parameters.
Long Parameter List,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,GridLayer,The method has 6 parameters.
Long Parameter List,WizardsDuel.Io,LightLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,SetLightTexture,The method has 5 parameters.
Long Parameter List,WizardsDuel.Io,TiledLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,SetTilemask,The method has 5 parameters.
Long Parameter List,WizardsDuel.Io,TiledLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,SetTile,The method has 8 parameters.
Long Parameter List,WizardsDuel.Io,TiledLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,SetDefaultTile,The method has 6 parameters.
Long Parameter List,WizardsDuel.Io,ObjectsLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AddObject,The method has 5 parameters.
Long Parameter List,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,WorldView,The method has 5 parameters.
Long Parameter List,WizardsDuel.Io,Emitter,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Emitters.cs,AddParticleTemplate,The method has 7 parameters.
Long Parameter List,WizardsDuel.Io,BurstInSpawner,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Emitters.cs,BurstInSpawner,The method has 6 parameters.
Long Parameter List,WizardsDuel.Io,GridSpawner,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Emitters.cs,GridSpawner,The method has 6 parameters.
Long Parameter List,WizardsDuel.Io,Icon,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\GraphicWidgets.cs,Icon,The method has 5 parameters.
Long Statement,WizardsDuel.Game,EventManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\EventDispatcher.cs,Dispatch,The length of the statement  "		Logger.Debug ("EventManager"' "Dispatch"' "Object " + actor.ToString () + " at initiative " + this.Initiative.ToString ()); " is 123.
Long Statement,WizardsDuel.Game,EventManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\EventDispatcher.cs,Dispatch,The length of the statement  "					//Logger.Debug ("EventManager"' "Dispatch"' "Object to process " + actor.GetHashCode() + " at initiative " + this.Initiative.ToString());" is 137.
Long Statement,WizardsDuel.Game,EventManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\EventDispatcher.cs,DispatchAll,The length of the statement  "			Logger.Debug ("EventManager"' "DispatchAll"' "Object " + actor.ToString () + " at initiative " + this.Initiative.ToString ()); " is 126.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadGame,The length of the statement  "				UiFactory.LoadTilemask(tilemask' LayerType.FLOOR' res.worldView);*/Logger.Debug ("GameFactory"' "LoadGame"' "Build world' initializing dungeon"); " is 145.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadAnimationDefinition,The length of the statement  "		var frame = new AnimationFrame (XmlUtilities.GetInt (frames [f]' "x")' XmlUtilities.GetInt (frames [f]' "y")' XmlUtilities.GetInt (frames [f]' "width")' XmlUtilities.GetInt (frames [f]' "height")' XmlUtilities.GetInt (frames [f]' "duration")' XmlUtilities.GetString (frames [f]' "sfx")); " is 287.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadAnimationDefinition,The length of the statement  "		frame.offset = new Vector2f (XmlUtilities.GetFloat (frames [f]' "offsetX")' XmlUtilities.GetFloat (frames [f]' "offsetY")); " is 123.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The length of the statement  "		res.OutIcon = new Icon (XmlUtilities.GetString (icon' "texture")' XmlUtilities.GetIntRect (icon' "rect"' new IntRect (0' 0' 0' 0))); " is 132.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The length of the statement  "		res.OutObject = new OutObject (XmlUtilities.GetString (outTemplate' "texture")' new SFML.Graphics.IntRect (XmlUtilities.GetInt (outTemplate' "defaultX")' XmlUtilities.GetInt (outTemplate' "defaultY")' XmlUtilities.GetInt (outTemplate' "defaultW")' XmlUtilities.GetInt (outTemplate' "defaultH"))); " is 296.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The length of the statement  "			var shadowSprite = new Sprite (IoManager.LoadTexture ("00_base_pc_fx.png")' new IntRect (576' 40' shadowWidth' shadowHeight)); " is 126.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The length of the statement  "			emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY")); " is 138.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The length of the statement  "					emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height"))); " is 133.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The length of the statement  "					emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff)); " is 266.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The length of the statement  "					emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff)); " is 370.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The length of the statement  "					emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration"))); " is 198.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The length of the statement  "					emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY")))); " is 164.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The length of the statement  "					emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f))); " is 354.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The length of the statement  "						emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c])); " is 343.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The length of the statement  "						emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)); " is 303.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The length of the statement  "					emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end"))); " is 182.
Long Statement,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The length of the statement  "					emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end"))); " is 174.
Long Statement,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Click,The length of the statement  "				//Logger.Debug ("Simulator"' "Click"' "Creating carpet " + CreateObject (createdEntityCount.ToString ()' "bp_fire_garg1"' gx' gy).ID); " is 134.
Long Statement,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,CreateObject,The length of the statement  "			newEntity.OutIcon.Position = new Vector2f (IoManager.Width - UI_VERTICAL_START - newEntity.OutIcon.Width' UI_VERTICAL_START); " is 125.
Long Statement,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,CreateParticleAt,The length of the statement  "	var ps = GameFactory.LoadParticleFromTemplate (pid' (gx + 0.5f) * this.CellWidth' (gy + 0.5f) * this.CellHeight' this.world.worldView.ObjectsLayer); " is 148.
Long Statement,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,GetEnemiesAt,The length of the statement  "		if (e.X >= x - radius && e.X <= x + radius && e.Y >= y - radius && e.Y <= y + radius && e.Health > 0 && e.Faction == enemyFaction) { " is 132.
Long Statement,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The length of the statement  "			ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top); " is 130.
Long Statement,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The length of the statement  "			//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer); " is 144.
Long Statement,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Shift,The length of the statement  "			var ta = new TranslateAnimation (res.OutObject.GetAnimationLength ("SHIFT")' dx * this.CellWidth' dy * this.CellHeight); " is 120.
Long Statement,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Shift,The length of the statement  "		Logger.Debug ("Simulator"' "Shift"' "Moving to " + endX.ToString () + "'" + endY.ToString () + " vs " + world.EndCell.ToString ()); " is 131.
Long Statement,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Shift,The length of the statement  "					Logger.Debug ("Simulator"' "Shift"' "Found entity " + res.ToString () + " at " + endX.ToString () + "'" + endY.ToString ());" is 124.
Long Statement,WizardsDuel.Game,ConstructionBlock,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,AddExit,The length of the statement  "	if (x < this.Width && x >= 0 && y < this.Height && y >= 0 && (direction == "N" || direction == "S" || direction == "W" || direction == "E")) { " is 142.
Long Statement,WizardsDuel.Game,ConstructionBlock,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,ToString,The length of the statement  "		res += String.Format ("<exit ref=\"{0}\" x=\"{1}\" y=\"{2}\" probability=\"{3}\"/>\n"' obj.ID' obj.X' obj.Y' obj.Probability); " is 126.
Long Statement,WizardsDuel.Game,BufferLevel,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,CellularAutomata,The length of the statement  "				if (this.Data [x - 1' y] == "." && this.Data [x + 1' y] == "." && this.Data [x' y - 1] == "#" && this.Data [x' y + 1] == "#") { " is 127.
Long Statement,WizardsDuel.Game,BufferLevel,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,CellularAutomata,The length of the statement  "				else if (this.Data [x - 1' y] == "#" && this.Data [x + 1' y] == "#" && this.Data [x' y - 1] == "." && this.Data [x' y + 1] == ".") { " is 132.
Long Statement,WizardsDuel.Game,BufferLevel,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,IsValid,The length of the statement  "	return (x - tolerance >= 0 && x + tolerance < this.Data.GetLength (0) && y - tolerance >= 0 && y + tolerance < this.Data.GetLength (1)); " is 136.
Long Statement,WizardsDuel.Game,BufferLevel,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,Trim,The length of the statement  "				Logger.Debug ("TestLevel"' "Trim"' "invalid: " + (x + minX - halfTrimSize).ToString () + " " + (y + minY - halfTrimSize).ToString ()); " is 134.
Long Statement,WizardsDuel.Game,WorldFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,BuildBlock,The length of the statement  "	var block = new ConstructionBlock (data' XmlUtilities.GetInt (xblock' "width")' XmlUtilities.GetInt (xblock' "height")' XmlUtilities.GetString (xblock' "id")); " is 159.
Long Statement,WizardsDuel.Game,WorldFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,BuildBlock,The length of the statement  "			block.AddExit (XmlUtilities.GetInt (children [i]' "x")' XmlUtilities.GetInt (children [i]' "y")' XmlUtilities.GetString (children [i]' "direction")' XmlUtilities.GetBool (children [i]' "canBeClosed"' false)); " is 208.
Long Statement,WizardsDuel.Game,WorldFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,BuildBlock,The length of the statement  "			block.AddObject (XmlUtilities.GetString (children [i]' "ref")' XmlUtilities.GetInt (children [i]' "x")' XmlUtilities.GetInt (children [i]' "y")' XmlUtilities.GetFloat (children [i]' "probability")' XmlUtilities.GetStringArray (children [i]' "variations")); " is 256.
Long Statement,WizardsDuel.Game,WorldFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,BuildAI,The length of the statement  "		var bp = new EnemyBlueprint (XmlUtilities.GetString (enemies [e]' "blueprint")' XmlUtilities.GetInt (enemies [e]' "threat")); " is 125.
Long Statement,WizardsDuel.Game,WorldFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,BuildAI,The length of the statement  "		music.AddLoop (XmlUtilities.GetString (xloops [i]' "name")' XmlUtilities.GetInt (xloops [i]' "start")' XmlUtilities.GetInt (xloops [i]' "end")); " is 144.
Long Statement,WizardsDuel.Game,WorldFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,Generate,The length of the statement  "			res.AI.progression = XmlUtilities.GetIntArray(this.xdoc.SelectSingleNode("//enemies")' "threatProgression");*/// Generate the map " is 129.
Long Statement,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The length of the statement  "						if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) { " is 149.
Long Statement,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,UpdateMusic,The length of the statement  "		//Logger.Debug AreaAI "UpdateMusic"' "threath level " + this.VisibleThreatLevel.ToString() + " vs music level " + loop.MaxThreat.ToString()); " is 141.
Long Statement,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The length of the statement  "	if (this.Parent.Visible == true && skill != null && enemiesInRange.Count > 0 && skill.OnTargetScript != null && skill.OnTargetScript.Count > 0) { " is 145.
Long Statement,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The length of the statement  "			Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying tageted skill " + skill.Name + " on " + enemiesInRange [0].ID); " is 125.
Long Statement,WizardsDuel.Game,LavaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The length of the statement  "	//Logger.Info ("LavaEmitterAI"' "onRound"' "Current initiative " + this.startInitiative.ToString() + " parent " + this.Parent.GetHashCode().ToString()); " is 152.
Long Statement,WizardsDuel.Game,LavaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The length of the statement  "	if (this.status == 0 && this.Generation > 0 && this.Generation < MAX_GENERATIONS && this.firstRound == false && this.hasSpawned == false) { " is 139.
Long Statement,WizardsDuel.Game,Entity,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Entity.cs,Damage,The length of the statement  "	Logger.Debug ("Entity"' "Damage"' "Receiving " + type + " damage: " + howMuch.ToString () + " vs health " + this.Health.ToString ()); " is 133.
Long Statement,WizardsDuel.Game,Entity,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Entity.cs,Damage,The length of the statement  "	Logger.Debug ("Entity"' "Damage"' "After process " + type + " damage: " + howMuch.ToString () + " vs health " + this.Health.ToString ()); " is 137.
Long Statement,WizardsDuel.Game,Entity,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Entity.cs,Damage,The length of the statement  "	Logger.Debug ("Entity"' "Damage"' "Receiving " + type + " damage: " + howMuch.ToString () + " vs health " + this.Health.ToString ()); " is 133.
Long Statement,WizardsDuel.Game,Entity,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Entity.cs,GetComboSkill,The length of the statement  "		Logger.Debug ("Entity"' "GetComboSkill"' "Comparing: " + String.Join ("'"' s.Combo.ToArray ()) + " vs " + String.Join ("'"' combo.ToArray ())); " is 143.
Long Statement,WizardsDuel.Game,SpawnBehaviour,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Skills.cs,Run,The length of the statement  "	if (/*Simulator.Instance.IsSafeToWalk (actor' gx' gy)*/this.Independent || actor.GetVar ("SPAWNS") < actor.GetVar ("MAX_SPAWNS")) { " is 131.
Long Statement,WizardsDuel.Io,AnimationFrame,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\AdvancedWidgets.cs,ToString,The length of the statement  "	return string.Format ("<frame x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\" offsetX=\"%d\" offsetY=\"%d\" duration=\"%d\"/>"' frame.Top' frame.Left' frame.Width' frame.Height' offset.X' offset.Y' duration); " is 205.
Long Statement,WizardsDuel.Io,AttractAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The length of the statement  "	var acceleration = new Vector2f (this.strength * dx / (distance * distance)' this.strength * dy / (distance * distance)); " is 121.
Long Statement,WizardsDuel.Io,ColorAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The length of the statement  "		p.Color = new Color ((byte)(this.StartColor.R * (1f - k) + this.EndColor.R * k)' (byte)(this.StartColor.G * (1f - k) + this.EndColor.G * k)' (byte)(this.StartColor.B * (1f - k) + this.EndColor.B * k)' (byte)(this.StartColor.A * (1f - k) + this.EndColor.A * k)); " is 261.
Long Statement,WizardsDuel.Io,FadeAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Clone,The length of the statement  "	var clone = new FadeAnimation (this.fadeInEndTime' this.fadeOutStartTime - this.fadeInEndTime' this.endTime - this.fadeOutStartTime); " is 133.
Long Statement,WizardsDuel.Io,BackgroundMusic,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\BackgroundMusic.cs,Update,The length of the statement  "		Logger.Debug ("BackgroundMusic"' "Update"' "Tstart " + this.timeRef.ToString () + " Tend " + this.endLoopTime.ToString ()); " is 123.
Long Statement,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The length of the statement  "	this.maskDrawRange.Left = (int)((this.Width / 2 - this.center.X) / this.cellSize.X) - (this.maskDrawRange.Width - 2) / 2 - 1; " is 125.
Long Statement,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The length of the statement  "	this.maskDrawRange.Top = (int)((this.Height / 2 - this.center.Y) / this.cellSize.Y) - (this.maskDrawRange.Height - 2) / 2 - 1; " is 126.
Long Statement,WizardsDuel.Io,TiledLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The length of the statement  "	this.maskDrawRange.Left = (int)((this.Width / 2 - this.center.X) / this.cellSize.X) - (this.maskDrawRange.Width - 2) / 2 - 1; " is 125.
Long Statement,WizardsDuel.Io,TiledLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The length of the statement  "	this.maskDrawRange.Top = (int)((this.Height / 2 - this.center.Y) / this.cellSize.Y) - (this.maskDrawRange.Height - 2) / 2 - 1; " is 126.
Long Statement,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadBackgroundMusic,The length of the statement  "	Logger.Info ("UiFactory"' "LoadBackgroundMusic"' "loaded music: " + "Assets\\" + XmlUtilities.GetString (widget' "file")); " is 122.
Long Statement,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadBackgroundMusic,The length of the statement  "				music.AddLoop (XmlUtilities.GetString (xloop' "name")' XmlUtilities.GetInt (xloop' "start")' XmlUtilities.GetInt (xloop' "end")); " is 129.
Long Statement,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The length of the statement  "				XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture")); " is 134.
Long Statement,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The length of the statement  "				ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")); " is 195.
Long Statement,WizardsDuel.Io,Emitter,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Emitters.cs,Spawn,The length of the statement  "		/*var particle = new Particle (IO.LIGHT_TEXTURE_ID' new IntRect (0' 0' IO.LIGHT_TEXTRE_MAX_RADIUS*2' IO.LIGHT_TEXTRE_MAX_RADIUS*2));" is 132.
Long Statement,WizardsDuel.Io,Emitter,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Emitters.cs,ToString,The length of the statement  "	var res = String.Format ("<emitter offsetX=\"{0}\" offsetY=\"{1}\" particleTtl=\"{2}\" spawnCount=\"{3}\" spawnDeltaTime=\"{4}\" startDelay=\"{5}\" ttl=\"{6}\" zIndex=\"{7}\">"' this.Offset.X' this.Offset.Y' this.ParticleTTL' this.SpawnCount' this.SpawnDeltaTime' this.StartDelay' this.TTL' this.ZIndex); " is 304.
Long Statement,WizardsDuel.Io,GridSpawner,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Emitters.cs,Apply,The length of the statement  "	var x = particle.Position.X + (this.lastSpawn % this.gridWidth) * this.cellWidth + Simulator.Instance.Random () * deltaX - deltaX / 2f; " is 135.
Long Statement,WizardsDuel.Io,GridSpawner,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Emitters.cs,Apply,The length of the statement  "	var y = particle.Position.Y + (int)(this.lastSpawn / this.gridHeight) * this.cellHeight + Simulator.Instance.Random () * deltaY - deltaY / 2f; " is 142.
Long Statement,WizardsDuel.Io,Button,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\BaseWidgets.cs,Contains,The length of the statement  "	return x > this.OffsetPosition.X && x < this.OffsetPosition.X + this.Width && y > this.OffsetPosition.Y && y < this.OffsetPosition.Y + this.Height; " is 147.
Long Statement,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CheckKeyboard,The length of the statement  "	if (Keyboard.IsKeyPressed (Keyboard.Key.Q) || (Keyboard.IsKeyPressed (Keyboard.Key.A) && Keyboard.IsKeyPressed (Keyboard.Key.W))) { " is 131.
Long Statement,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CheckKeyboard,The length of the statement  "	else if (Keyboard.IsKeyPressed (Keyboard.Key.E) || (Keyboard.IsKeyPressed (Keyboard.Key.D) && Keyboard.IsKeyPressed (Keyboard.Key.W))) { " is 136.
Long Statement,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CheckKeyboard,The length of the statement  "	else if (Keyboard.IsKeyPressed (Keyboard.Key.Z) || (Keyboard.IsKeyPressed (Keyboard.Key.A) && Keyboard.IsKeyPressed (Keyboard.Key.X))) { " is 136.
Long Statement,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CheckKeyboard,The length of the statement  "	else if (Keyboard.IsKeyPressed (Keyboard.Key.C) || (Keyboard.IsKeyPressed (Keyboard.Key.D) && Keyboard.IsKeyPressed (Keyboard.Key.X))) { " is 136.
Long Statement,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,Draw,The length of the statement  "			IoManager.fadeOverlay.FillColor = new Color ((byte)(fadeStartColor.R * (1f - k) + fadeEndColor.R * k)' (byte)(fadeStartColor.G * (1f - k) + fadeEndColor.G * k)' (byte)(fadeStartColor.B * (1f - k) + fadeEndColor.B * k)' (byte)(fadeStartColor.A * (1f - k) + fadeEndColor.A * k)); " is 277.
Long Statement,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,ForceDraw,The length of the statement  "		IoManager.fadeOverlay.FillColor = new Color ((byte)(fadeStartColor.R * (1f - k) + fadeEndColor.R * k)' (byte)(fadeStartColor.G * (1f - k) + fadeEndColor.G * k)' (byte)(fadeStartColor.B * (1f - k) + fadeEndColor.B * k)' (byte)(fadeStartColor.A * (1f - k) + fadeEndColor.A * k)); " is 277.
Long Statement,WizardsDuel.Io,ButtonIcon,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\GraphicWidgets.cs,Contains,The length of the statement  "	return x > this.OffsetPosition.X && x < this.OffsetPosition.X + this.Width && y > this.OffsetPosition.Y && y < this.OffsetPosition.Y + this.Height; " is 147.
Long Statement,WizardsDuel.Utils,Logger,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Utils\Logger.cs,Initialize,The length of the statement  "		Console.WriteLine (currTime + " | logger.init [" + LogLevel.INFO.ToString () + "]: Running at log level " + Logger.logLevel.ToString ()); " is 137.
Long Statement,WizardsDuel.Utils,Logger,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Utils\Logger.cs,Log,The length of the statement  "			Logger.logFile.WriteLine ("<msg ts='" + currTime + "' type='" + level.ToString () + "' module='" + moduleName + "' func='" + functionName + "'>" + msg + "</msg>"); " is 163.
Long Statement,WizardsDuel.Utils,XmlUtilities,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Utils\XmlUtilities.cs,GetFloat,The length of the statement  "		return (float)Convert.ToDouble (node.Attributes.GetNamedItem (attributeName).Value' CultureInfo.InvariantCulture.NumberFormat); " is 127.
Complex Conditional,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,DoLogic,The conditional expression  "this.waitIcon.Alpha < 255 && p.OutObject.IsInIdle && this.events.NextActor != p && this.waitCountdown < 1"  is complex.
Complex Conditional,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,GetEnemiesAt,The conditional expression  "e.X >= x - radius && e.X <= x + radius && e.Y >= y - radius && e.Y <= y + radius && e.Health > 0 && e.Faction == enemyFaction"  is complex.
Complex Conditional,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,GetObjectsAt,The conditional expression  "e.X >= x - radius && e.X <= x + radius && e.Y >= y - radius && e.Y <= y + radius"  is complex.
Complex Conditional,WizardsDuel.Game,ConstructionBlock,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,AddExit,The conditional expression  "x < this.Width && x >= 0 && y < this.Height && y >= 0 && (direction == "N" || direction == "S" || direction == "W" || direction == "E")"  is complex.
Complex Conditional,WizardsDuel.Game,ConstructionBlock,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,AddObject,The conditional expression  "x < this.Width && x >= 0 && y < this.Height && y >= 0"  is complex.
Complex Conditional,WizardsDuel.Game,BufferLevel,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,CellularAutomata,The conditional expression  "this.Data [x - 1' y] == "." && this.Data [x + 1' y] == "." && this.Data [x' y - 1] == "#" && this.Data [x' y + 1] == "#""  is complex.
Complex Conditional,WizardsDuel.Game,BufferLevel,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,CellularAutomata,The conditional expression  "this.Data [x - 1' y] == "#" && this.Data [x + 1' y] == "#" && this.Data [x' y - 1] == "." && this.Data [x' y + 1] == ".""  is complex.
Complex Conditional,WizardsDuel.Game,BufferLevel,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,Trim,The conditional expression  "y == 0 || x == 0 || y == dy - 1 || x == dx - 1"  is complex.
Complex Conditional,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The conditional expression  "x > sminX && x < smaxX && y > sminY && y < smaxY"  is complex.
Complex Conditional,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The conditional expression  "x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null"  is complex.
Complex Conditional,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The conditional expression  "this.Parent.Visible == true && skill != null && enemiesInRange.Count > 0 && skill.OnTargetScript != null && skill.OnTargetScript.Count > 0"  is complex.
Complex Conditional,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The conditional expression  "this.Parent.Visible == true && skill != null && skill.OnSelfScript != null && skill.OnSelfScript.Count > 0"  is complex.
Complex Conditional,WizardsDuel.Game,LavaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The conditional expression  "this.status == 0 && this.Generation > 0 && this.Generation < MAX_GENERATIONS && this.firstRound == false && this.hasSpawned == false"  is complex.
Empty Catch Block,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The method has an empty catch block.
Empty Catch Block,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The method has an empty catch block.
Empty Catch Block,WizardsDuel.Utils,Logger,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Utils\Logger.cs,Close,The method has an empty catch block.
Magic Number,WizardsDuel,MainClass,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Program.cs,Main,The following statement contains a magic number: try {  	Logger.Initialize (LogLevel.ALL' true);  	Logger.SetOutFile ();  	Logger.Blacklist ("AddLayer");  	Logger.Blacklist ("AddRule");  	Logger.Blacklist ("AreaAI");  	Logger.Blacklist ("BackgroundMusic");  	Logger.Blacklist ("CalculateLoS");  	Logger.Blacklist ("CanShift");  	Logger.Blacklist ("Effect");  	Logger.Blacklist ("Entity");  	Logger.Blacklist ("EventManager");  	Logger.Blacklist ("GameFactory");  	Logger.Blacklist ("IoManager");  	Logger.Blacklist ("LavaAI");  	Logger.Blacklist ("LoadTilemask");  	Logger.Blacklist ("LoadWorldView");  	Logger.Blacklist ("Main");  	Logger.Blacklist ("MeleeAI");  	Logger.Blacklist ("OnRound");  	Logger.Blacklist ("OutObject");  	Logger.Blacklist ("Run");  	Logger.Blacklist ("SetDungeon");  	Logger.Blacklist ("SetUserEvent");  	Logger.Blacklist ("Skill");  	//Logger.Blacklist ("Simulator");  	Logger.Blacklist ("TestLevel");  	Logger.Blacklist ("TranslateAnimation");  	Logger.Blacklist ("WorldFactory");  	Logger.Blacklist ("XmlUtilities");  	IoManager.Initialize ("Wizards of Unica"' 1280' 720);  }  catch (Exception ex) {  	Console.WriteLine ("Configuration Error' Aborting: " + ex.ToString ());  	return;  }  
Magic Number,WizardsDuel,MainClass,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Program.cs,Main,The following statement contains a magic number: try {  	Logger.Initialize (LogLevel.ALL' true);  	Logger.SetOutFile ();  	Logger.Blacklist ("AddLayer");  	Logger.Blacklist ("AddRule");  	Logger.Blacklist ("AreaAI");  	Logger.Blacklist ("BackgroundMusic");  	Logger.Blacklist ("CalculateLoS");  	Logger.Blacklist ("CanShift");  	Logger.Blacklist ("Effect");  	Logger.Blacklist ("Entity");  	Logger.Blacklist ("EventManager");  	Logger.Blacklist ("GameFactory");  	Logger.Blacklist ("IoManager");  	Logger.Blacklist ("LavaAI");  	Logger.Blacklist ("LoadTilemask");  	Logger.Blacklist ("LoadWorldView");  	Logger.Blacklist ("Main");  	Logger.Blacklist ("MeleeAI");  	Logger.Blacklist ("OnRound");  	Logger.Blacklist ("OutObject");  	Logger.Blacklist ("Run");  	Logger.Blacklist ("SetDungeon");  	Logger.Blacklist ("SetUserEvent");  	Logger.Blacklist ("Skill");  	//Logger.Blacklist ("Simulator");  	Logger.Blacklist ("TestLevel");  	Logger.Blacklist ("TranslateAnimation");  	Logger.Blacklist ("WorldFactory");  	Logger.Blacklist ("XmlUtilities");  	IoManager.Initialize ("Wizards of Unica"' 1280' 720);  }  catch (Exception ex) {  	Console.WriteLine ("Configuration Error' Aborting: " + ex.ToString ());  	return;  }  
Magic Number,WizardsDuel,MainClass,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Program.cs,Main,The following statement contains a magic number: IoManager.Initialize ("Wizards of Unica"' 1280' 720);  
Magic Number,WizardsDuel,MainClass,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Program.cs,Main,The following statement contains a magic number: IoManager.Initialize ("Wizards of Unica"' 1280' 720);  
Magic Number,WizardsDuel.Game,EventManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\EventDispatcher.cs,RunUserEvent,The following statement contains a magic number: if (this.userEvent != null && simulator.GetPlayer ().OutObject.IsInIdle) {  	//if (this.userEvent != null) {  	//Logger.Debug ("EventManager"' "RunUserEvent"' "Running user event " + this.userEvent.ToString());  	Logger.Debug ("EventManager"' "RunUserEvent"' "RUNNING EVENT AT INIT " + this.Initiative.ToString ());  	var player = simulator.GetPlayer ();  	if (this.userEvent.Run () == true) {  		simulator.waitCountdown = IoManager.FPS * 3 / 4;  		this.userEvent = null;  		simulator.world.CalculateFoV (player.X' player.Y' World.FOV_UPDATE_RADIUS - 2);  		return true;  	}  	else {  		if ((this.userEvent as ClickEvent) != null) {  			// don't keep clicks in the buffer  			this.ClearUserEvent ();  		}  		return false;  	}  }  else {  	this.ClearUserEvent ();  	return false;  }  
Magic Number,WizardsDuel.Game,EventManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\EventDispatcher.cs,RunUserEvent,The following statement contains a magic number: if (this.userEvent != null && simulator.GetPlayer ().OutObject.IsInIdle) {  	//if (this.userEvent != null) {  	//Logger.Debug ("EventManager"' "RunUserEvent"' "Running user event " + this.userEvent.ToString());  	Logger.Debug ("EventManager"' "RunUserEvent"' "RUNNING EVENT AT INIT " + this.Initiative.ToString ());  	var player = simulator.GetPlayer ();  	if (this.userEvent.Run () == true) {  		simulator.waitCountdown = IoManager.FPS * 3 / 4;  		this.userEvent = null;  		simulator.world.CalculateFoV (player.X' player.Y' World.FOV_UPDATE_RADIUS - 2);  		return true;  	}  	else {  		if ((this.userEvent as ClickEvent) != null) {  			// don't keep clicks in the buffer  			this.ClearUserEvent ();  		}  		return false;  	}  }  else {  	this.ClearUserEvent ();  	return false;  }  
Magic Number,WizardsDuel.Game,EventManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\EventDispatcher.cs,RunUserEvent,The following statement contains a magic number: if (this.userEvent != null && simulator.GetPlayer ().OutObject.IsInIdle) {  	//if (this.userEvent != null) {  	//Logger.Debug ("EventManager"' "RunUserEvent"' "Running user event " + this.userEvent.ToString());  	Logger.Debug ("EventManager"' "RunUserEvent"' "RUNNING EVENT AT INIT " + this.Initiative.ToString ());  	var player = simulator.GetPlayer ();  	if (this.userEvent.Run () == true) {  		simulator.waitCountdown = IoManager.FPS * 3 / 4;  		this.userEvent = null;  		simulator.world.CalculateFoV (player.X' player.Y' World.FOV_UPDATE_RADIUS - 2);  		return true;  	}  	else {  		if ((this.userEvent as ClickEvent) != null) {  			// don't keep clicks in the buffer  			this.ClearUserEvent ();  		}  		return false;  	}  }  else {  	this.ClearUserEvent ();  	return false;  }  
Magic Number,WizardsDuel.Game,EventManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\EventDispatcher.cs,RunUserEvent,The following statement contains a magic number: if (this.userEvent.Run () == true) {  	simulator.waitCountdown = IoManager.FPS * 3 / 4;  	this.userEvent = null;  	simulator.world.CalculateFoV (player.X' player.Y' World.FOV_UPDATE_RADIUS - 2);  	return true;  }  else {  	if ((this.userEvent as ClickEvent) != null) {  		// don't keep clicks in the buffer  		this.ClearUserEvent ();  	}  	return false;  }  
Magic Number,WizardsDuel.Game,EventManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\EventDispatcher.cs,RunUserEvent,The following statement contains a magic number: if (this.userEvent.Run () == true) {  	simulator.waitCountdown = IoManager.FPS * 3 / 4;  	this.userEvent = null;  	simulator.world.CalculateFoV (player.X' player.Y' World.FOV_UPDATE_RADIUS - 2);  	return true;  }  else {  	if ((this.userEvent as ClickEvent) != null) {  		// don't keep clicks in the buffer  		this.ClearUserEvent ();  	}  	return false;  }  
Magic Number,WizardsDuel.Game,EventManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\EventDispatcher.cs,RunUserEvent,The following statement contains a magic number: if (this.userEvent.Run () == true) {  	simulator.waitCountdown = IoManager.FPS * 3 / 4;  	this.userEvent = null;  	simulator.world.CalculateFoV (player.X' player.Y' World.FOV_UPDATE_RADIUS - 2);  	return true;  }  else {  	if ((this.userEvent as ClickEvent) != null) {  		// don't keep clicks in the buffer  		this.ClearUserEvent ();  	}  	return false;  }  
Magic Number,WizardsDuel.Game,EventManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\EventDispatcher.cs,RunUserEvent,The following statement contains a magic number: simulator.waitCountdown = IoManager.FPS * 3 / 4;  
Magic Number,WizardsDuel.Game,EventManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\EventDispatcher.cs,RunUserEvent,The following statement contains a magic number: simulator.waitCountdown = IoManager.FPS * 3 / 4;  
Magic Number,WizardsDuel.Game,EventManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\EventDispatcher.cs,RunUserEvent,The following statement contains a magic number: simulator.world.CalculateFoV (player.X' player.Y' World.FOV_UPDATE_RADIUS - 2);  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: try {  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//blueprint[@id='" + templateId + "']");  	var res = new Entity (assignedId' templateId);  	var properties = template.SelectSingleNode ("./properties");  	res.Faction = XmlUtilities.GetString (properties' "faction");  	res.Static = XmlUtilities.GetBool (properties' "static");  	res.Dressing = XmlUtilities.GetBool (properties' "dressing");  	res.Threat = XmlUtilities.GetInt (properties' "threat");  	var ai = XmlUtilities.GetStringArray (properties' "ai"' true);  	switch (ai [0]) {  	case ArtificialIntelligence.ICE:  		res.AI = new IceAI ();  		break;  	case ArtificialIntelligence.LAVA_EMITTER:  		res.AI = new LavaEmitterAI ();  		break;  	case ArtificialIntelligence.LAVA:  		res.AI = new LavaAI ();  		if (ai.Length > 1 && ai [1] == "PERMANENT") {  			(res.AI as LavaAI).CanHarden = false;  		}  		break;  	case ArtificialIntelligence.MELEE:  		res.AI = new MeleeAI ();  		break;  	default:  		break;  	}  	var tags = XmlUtilities.GetStringArray (properties' "tags"' true);  	foreach (var tag in tags) {  		res.AddTag (tag);  	}  	var icon = template.SelectSingleNode ("./icon");  	res.OutIcon = new Icon (XmlUtilities.GetString (icon' "texture")' XmlUtilities.GetIntRect (icon' "rect"' new IntRect (0' 0' 0' 0)));  	var skills = template.SelectNodes ("./skill");  	for (int s = 0; s < skills.Count; s++) {  		var skillId = XmlUtilities.GetString (skills [s]' "ref");  		var xmlSkill = GameFactory.xdoc.SelectSingleNode ("//skill[@id='" + skillId + "']");  		var combo = XmlUtilities.GetStringArray (skills [s]' "combo");  		var skill = LoadSkill (xmlSkill' combo [0] == string.Empty ? null : combo);  		if (skill != null) {  			skill.Show = XmlUtilities.GetBool (skills [s]' "show");  			res.AddSkill (skill);  		}  	}  	var variables = template.SelectNodes ("./var");  	for (int v = 0; v < variables.Count; v++) {  		var vname = XmlUtilities.GetString (variables [v]' "name");  		var vvalue = XmlUtilities.GetInt (variables [v]' "value");  		res.Vars [vname] = vvalue;  		//res.Vars.Add(vname' vvalue);  		if (vname == "HEALTH") {  			res.MaxHealth = vvalue;  		}  		else if (vname == "SPEED") {  			res.SpeedFactor = (float)vvalue / 10f;  			Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Speed factor of " + templateId + ": " + res.SpeedFactor.ToString ());  		}  	}  	var death = template.SelectSingleNode ("./death");  	res.DeathAnimation = XmlUtilities.GetString (death' "animation"' String.Empty);  	res.DeathMain = XmlUtilities.GetColor (death' "color1"' Color.Red);  	res.DeathSecundary = XmlUtilities.GetColor (death' "color2"' Color.Black);  	res.DeathRect.Left = XmlUtilities.GetInt (death' "offsetX");  	res.DeathRect.Top = XmlUtilities.GetInt (death' "offsetY");  	res.DeathRect.Width = XmlUtilities.GetInt (death' "width"' 1);  	res.DeathRect.Height = XmlUtilities.GetInt (death' "height"' 1);  	XmlNode outTemplate = template.SelectSingleNode ("./output");  	res.OutObject = new OutObject (XmlUtilities.GetString (outTemplate' "texture")' new SFML.Graphics.IntRect (XmlUtilities.GetInt (outTemplate' "defaultX")' XmlUtilities.GetInt (outTemplate' "defaultY")' XmlUtilities.GetInt (outTemplate' "defaultW")' XmlUtilities.GetInt (outTemplate' "defaultH")));  	res.OutObject.LightColor = XmlUtilities.GetColor (outTemplate' "lightColor"' Color.White);  	res.OutObject.LightRadius = XmlUtilities.GetInt (outTemplate' "lightRadius");  	res.OutObject.ZIndex = XmlUtilities.GetInt (outTemplate' "zIndex");  	var shadow = XmlUtilities.GetString (outTemplate' "shadow"' String.Empty);  	if (shadow != String.Empty) {  		var shadowWidth = 24;  		var shadowHeight = (int)(shadowWidth / 3);  		var shadowSprite = new Sprite (IoManager.LoadTexture ("00_base_pc_fx.png")' new IntRect (576' 40' shadowWidth' shadowHeight));  		shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  		shadowSprite.Color = new Color (0' 0' 0' 96);  		shadowSprite.Scale = new Vector2f (2f' 2f);  		res.OutObject.Shadow = shadowSprite;  		//Simulator.Instance.CreateParticleOn(shadow'res);  	}  	var animations = outTemplate.SelectNodes ("./animation");  	for (int a = 0; a < animations.Count; a++) {  		var ad = LoadAnimationDefinition (animations [a]);  		res.OutObject.AddAnimation (XmlUtilities.GetString (animations [a]' "name")' ad);  		//Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Added animation " + XmlUtilities.GetString(animations[a]' "name"));  	}  	Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Built object " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: try {  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//blueprint[@id='" + templateId + "']");  	var res = new Entity (assignedId' templateId);  	var properties = template.SelectSingleNode ("./properties");  	res.Faction = XmlUtilities.GetString (properties' "faction");  	res.Static = XmlUtilities.GetBool (properties' "static");  	res.Dressing = XmlUtilities.GetBool (properties' "dressing");  	res.Threat = XmlUtilities.GetInt (properties' "threat");  	var ai = XmlUtilities.GetStringArray (properties' "ai"' true);  	switch (ai [0]) {  	case ArtificialIntelligence.ICE:  		res.AI = new IceAI ();  		break;  	case ArtificialIntelligence.LAVA_EMITTER:  		res.AI = new LavaEmitterAI ();  		break;  	case ArtificialIntelligence.LAVA:  		res.AI = new LavaAI ();  		if (ai.Length > 1 && ai [1] == "PERMANENT") {  			(res.AI as LavaAI).CanHarden = false;  		}  		break;  	case ArtificialIntelligence.MELEE:  		res.AI = new MeleeAI ();  		break;  	default:  		break;  	}  	var tags = XmlUtilities.GetStringArray (properties' "tags"' true);  	foreach (var tag in tags) {  		res.AddTag (tag);  	}  	var icon = template.SelectSingleNode ("./icon");  	res.OutIcon = new Icon (XmlUtilities.GetString (icon' "texture")' XmlUtilities.GetIntRect (icon' "rect"' new IntRect (0' 0' 0' 0)));  	var skills = template.SelectNodes ("./skill");  	for (int s = 0; s < skills.Count; s++) {  		var skillId = XmlUtilities.GetString (skills [s]' "ref");  		var xmlSkill = GameFactory.xdoc.SelectSingleNode ("//skill[@id='" + skillId + "']");  		var combo = XmlUtilities.GetStringArray (skills [s]' "combo");  		var skill = LoadSkill (xmlSkill' combo [0] == string.Empty ? null : combo);  		if (skill != null) {  			skill.Show = XmlUtilities.GetBool (skills [s]' "show");  			res.AddSkill (skill);  		}  	}  	var variables = template.SelectNodes ("./var");  	for (int v = 0; v < variables.Count; v++) {  		var vname = XmlUtilities.GetString (variables [v]' "name");  		var vvalue = XmlUtilities.GetInt (variables [v]' "value");  		res.Vars [vname] = vvalue;  		//res.Vars.Add(vname' vvalue);  		if (vname == "HEALTH") {  			res.MaxHealth = vvalue;  		}  		else if (vname == "SPEED") {  			res.SpeedFactor = (float)vvalue / 10f;  			Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Speed factor of " + templateId + ": " + res.SpeedFactor.ToString ());  		}  	}  	var death = template.SelectSingleNode ("./death");  	res.DeathAnimation = XmlUtilities.GetString (death' "animation"' String.Empty);  	res.DeathMain = XmlUtilities.GetColor (death' "color1"' Color.Red);  	res.DeathSecundary = XmlUtilities.GetColor (death' "color2"' Color.Black);  	res.DeathRect.Left = XmlUtilities.GetInt (death' "offsetX");  	res.DeathRect.Top = XmlUtilities.GetInt (death' "offsetY");  	res.DeathRect.Width = XmlUtilities.GetInt (death' "width"' 1);  	res.DeathRect.Height = XmlUtilities.GetInt (death' "height"' 1);  	XmlNode outTemplate = template.SelectSingleNode ("./output");  	res.OutObject = new OutObject (XmlUtilities.GetString (outTemplate' "texture")' new SFML.Graphics.IntRect (XmlUtilities.GetInt (outTemplate' "defaultX")' XmlUtilities.GetInt (outTemplate' "defaultY")' XmlUtilities.GetInt (outTemplate' "defaultW")' XmlUtilities.GetInt (outTemplate' "defaultH")));  	res.OutObject.LightColor = XmlUtilities.GetColor (outTemplate' "lightColor"' Color.White);  	res.OutObject.LightRadius = XmlUtilities.GetInt (outTemplate' "lightRadius");  	res.OutObject.ZIndex = XmlUtilities.GetInt (outTemplate' "zIndex");  	var shadow = XmlUtilities.GetString (outTemplate' "shadow"' String.Empty);  	if (shadow != String.Empty) {  		var shadowWidth = 24;  		var shadowHeight = (int)(shadowWidth / 3);  		var shadowSprite = new Sprite (IoManager.LoadTexture ("00_base_pc_fx.png")' new IntRect (576' 40' shadowWidth' shadowHeight));  		shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  		shadowSprite.Color = new Color (0' 0' 0' 96);  		shadowSprite.Scale = new Vector2f (2f' 2f);  		res.OutObject.Shadow = shadowSprite;  		//Simulator.Instance.CreateParticleOn(shadow'res);  	}  	var animations = outTemplate.SelectNodes ("./animation");  	for (int a = 0; a < animations.Count; a++) {  		var ad = LoadAnimationDefinition (animations [a]);  		res.OutObject.AddAnimation (XmlUtilities.GetString (animations [a]' "name")' ad);  		//Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Added animation " + XmlUtilities.GetString(animations[a]' "name"));  	}  	Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Built object " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: try {  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//blueprint[@id='" + templateId + "']");  	var res = new Entity (assignedId' templateId);  	var properties = template.SelectSingleNode ("./properties");  	res.Faction = XmlUtilities.GetString (properties' "faction");  	res.Static = XmlUtilities.GetBool (properties' "static");  	res.Dressing = XmlUtilities.GetBool (properties' "dressing");  	res.Threat = XmlUtilities.GetInt (properties' "threat");  	var ai = XmlUtilities.GetStringArray (properties' "ai"' true);  	switch (ai [0]) {  	case ArtificialIntelligence.ICE:  		res.AI = new IceAI ();  		break;  	case ArtificialIntelligence.LAVA_EMITTER:  		res.AI = new LavaEmitterAI ();  		break;  	case ArtificialIntelligence.LAVA:  		res.AI = new LavaAI ();  		if (ai.Length > 1 && ai [1] == "PERMANENT") {  			(res.AI as LavaAI).CanHarden = false;  		}  		break;  	case ArtificialIntelligence.MELEE:  		res.AI = new MeleeAI ();  		break;  	default:  		break;  	}  	var tags = XmlUtilities.GetStringArray (properties' "tags"' true);  	foreach (var tag in tags) {  		res.AddTag (tag);  	}  	var icon = template.SelectSingleNode ("./icon");  	res.OutIcon = new Icon (XmlUtilities.GetString (icon' "texture")' XmlUtilities.GetIntRect (icon' "rect"' new IntRect (0' 0' 0' 0)));  	var skills = template.SelectNodes ("./skill");  	for (int s = 0; s < skills.Count; s++) {  		var skillId = XmlUtilities.GetString (skills [s]' "ref");  		var xmlSkill = GameFactory.xdoc.SelectSingleNode ("//skill[@id='" + skillId + "']");  		var combo = XmlUtilities.GetStringArray (skills [s]' "combo");  		var skill = LoadSkill (xmlSkill' combo [0] == string.Empty ? null : combo);  		if (skill != null) {  			skill.Show = XmlUtilities.GetBool (skills [s]' "show");  			res.AddSkill (skill);  		}  	}  	var variables = template.SelectNodes ("./var");  	for (int v = 0; v < variables.Count; v++) {  		var vname = XmlUtilities.GetString (variables [v]' "name");  		var vvalue = XmlUtilities.GetInt (variables [v]' "value");  		res.Vars [vname] = vvalue;  		//res.Vars.Add(vname' vvalue);  		if (vname == "HEALTH") {  			res.MaxHealth = vvalue;  		}  		else if (vname == "SPEED") {  			res.SpeedFactor = (float)vvalue / 10f;  			Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Speed factor of " + templateId + ": " + res.SpeedFactor.ToString ());  		}  	}  	var death = template.SelectSingleNode ("./death");  	res.DeathAnimation = XmlUtilities.GetString (death' "animation"' String.Empty);  	res.DeathMain = XmlUtilities.GetColor (death' "color1"' Color.Red);  	res.DeathSecundary = XmlUtilities.GetColor (death' "color2"' Color.Black);  	res.DeathRect.Left = XmlUtilities.GetInt (death' "offsetX");  	res.DeathRect.Top = XmlUtilities.GetInt (death' "offsetY");  	res.DeathRect.Width = XmlUtilities.GetInt (death' "width"' 1);  	res.DeathRect.Height = XmlUtilities.GetInt (death' "height"' 1);  	XmlNode outTemplate = template.SelectSingleNode ("./output");  	res.OutObject = new OutObject (XmlUtilities.GetString (outTemplate' "texture")' new SFML.Graphics.IntRect (XmlUtilities.GetInt (outTemplate' "defaultX")' XmlUtilities.GetInt (outTemplate' "defaultY")' XmlUtilities.GetInt (outTemplate' "defaultW")' XmlUtilities.GetInt (outTemplate' "defaultH")));  	res.OutObject.LightColor = XmlUtilities.GetColor (outTemplate' "lightColor"' Color.White);  	res.OutObject.LightRadius = XmlUtilities.GetInt (outTemplate' "lightRadius");  	res.OutObject.ZIndex = XmlUtilities.GetInt (outTemplate' "zIndex");  	var shadow = XmlUtilities.GetString (outTemplate' "shadow"' String.Empty);  	if (shadow != String.Empty) {  		var shadowWidth = 24;  		var shadowHeight = (int)(shadowWidth / 3);  		var shadowSprite = new Sprite (IoManager.LoadTexture ("00_base_pc_fx.png")' new IntRect (576' 40' shadowWidth' shadowHeight));  		shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  		shadowSprite.Color = new Color (0' 0' 0' 96);  		shadowSprite.Scale = new Vector2f (2f' 2f);  		res.OutObject.Shadow = shadowSprite;  		//Simulator.Instance.CreateParticleOn(shadow'res);  	}  	var animations = outTemplate.SelectNodes ("./animation");  	for (int a = 0; a < animations.Count; a++) {  		var ad = LoadAnimationDefinition (animations [a]);  		res.OutObject.AddAnimation (XmlUtilities.GetString (animations [a]' "name")' ad);  		//Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Added animation " + XmlUtilities.GetString(animations[a]' "name"));  	}  	Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Built object " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: try {  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//blueprint[@id='" + templateId + "']");  	var res = new Entity (assignedId' templateId);  	var properties = template.SelectSingleNode ("./properties");  	res.Faction = XmlUtilities.GetString (properties' "faction");  	res.Static = XmlUtilities.GetBool (properties' "static");  	res.Dressing = XmlUtilities.GetBool (properties' "dressing");  	res.Threat = XmlUtilities.GetInt (properties' "threat");  	var ai = XmlUtilities.GetStringArray (properties' "ai"' true);  	switch (ai [0]) {  	case ArtificialIntelligence.ICE:  		res.AI = new IceAI ();  		break;  	case ArtificialIntelligence.LAVA_EMITTER:  		res.AI = new LavaEmitterAI ();  		break;  	case ArtificialIntelligence.LAVA:  		res.AI = new LavaAI ();  		if (ai.Length > 1 && ai [1] == "PERMANENT") {  			(res.AI as LavaAI).CanHarden = false;  		}  		break;  	case ArtificialIntelligence.MELEE:  		res.AI = new MeleeAI ();  		break;  	default:  		break;  	}  	var tags = XmlUtilities.GetStringArray (properties' "tags"' true);  	foreach (var tag in tags) {  		res.AddTag (tag);  	}  	var icon = template.SelectSingleNode ("./icon");  	res.OutIcon = new Icon (XmlUtilities.GetString (icon' "texture")' XmlUtilities.GetIntRect (icon' "rect"' new IntRect (0' 0' 0' 0)));  	var skills = template.SelectNodes ("./skill");  	for (int s = 0; s < skills.Count; s++) {  		var skillId = XmlUtilities.GetString (skills [s]' "ref");  		var xmlSkill = GameFactory.xdoc.SelectSingleNode ("//skill[@id='" + skillId + "']");  		var combo = XmlUtilities.GetStringArray (skills [s]' "combo");  		var skill = LoadSkill (xmlSkill' combo [0] == string.Empty ? null : combo);  		if (skill != null) {  			skill.Show = XmlUtilities.GetBool (skills [s]' "show");  			res.AddSkill (skill);  		}  	}  	var variables = template.SelectNodes ("./var");  	for (int v = 0; v < variables.Count; v++) {  		var vname = XmlUtilities.GetString (variables [v]' "name");  		var vvalue = XmlUtilities.GetInt (variables [v]' "value");  		res.Vars [vname] = vvalue;  		//res.Vars.Add(vname' vvalue);  		if (vname == "HEALTH") {  			res.MaxHealth = vvalue;  		}  		else if (vname == "SPEED") {  			res.SpeedFactor = (float)vvalue / 10f;  			Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Speed factor of " + templateId + ": " + res.SpeedFactor.ToString ());  		}  	}  	var death = template.SelectSingleNode ("./death");  	res.DeathAnimation = XmlUtilities.GetString (death' "animation"' String.Empty);  	res.DeathMain = XmlUtilities.GetColor (death' "color1"' Color.Red);  	res.DeathSecundary = XmlUtilities.GetColor (death' "color2"' Color.Black);  	res.DeathRect.Left = XmlUtilities.GetInt (death' "offsetX");  	res.DeathRect.Top = XmlUtilities.GetInt (death' "offsetY");  	res.DeathRect.Width = XmlUtilities.GetInt (death' "width"' 1);  	res.DeathRect.Height = XmlUtilities.GetInt (death' "height"' 1);  	XmlNode outTemplate = template.SelectSingleNode ("./output");  	res.OutObject = new OutObject (XmlUtilities.GetString (outTemplate' "texture")' new SFML.Graphics.IntRect (XmlUtilities.GetInt (outTemplate' "defaultX")' XmlUtilities.GetInt (outTemplate' "defaultY")' XmlUtilities.GetInt (outTemplate' "defaultW")' XmlUtilities.GetInt (outTemplate' "defaultH")));  	res.OutObject.LightColor = XmlUtilities.GetColor (outTemplate' "lightColor"' Color.White);  	res.OutObject.LightRadius = XmlUtilities.GetInt (outTemplate' "lightRadius");  	res.OutObject.ZIndex = XmlUtilities.GetInt (outTemplate' "zIndex");  	var shadow = XmlUtilities.GetString (outTemplate' "shadow"' String.Empty);  	if (shadow != String.Empty) {  		var shadowWidth = 24;  		var shadowHeight = (int)(shadowWidth / 3);  		var shadowSprite = new Sprite (IoManager.LoadTexture ("00_base_pc_fx.png")' new IntRect (576' 40' shadowWidth' shadowHeight));  		shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  		shadowSprite.Color = new Color (0' 0' 0' 96);  		shadowSprite.Scale = new Vector2f (2f' 2f);  		res.OutObject.Shadow = shadowSprite;  		//Simulator.Instance.CreateParticleOn(shadow'res);  	}  	var animations = outTemplate.SelectNodes ("./animation");  	for (int a = 0; a < animations.Count; a++) {  		var ad = LoadAnimationDefinition (animations [a]);  		res.OutObject.AddAnimation (XmlUtilities.GetString (animations [a]' "name")' ad);  		//Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Added animation " + XmlUtilities.GetString(animations[a]' "name"));  	}  	Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Built object " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: try {  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//blueprint[@id='" + templateId + "']");  	var res = new Entity (assignedId' templateId);  	var properties = template.SelectSingleNode ("./properties");  	res.Faction = XmlUtilities.GetString (properties' "faction");  	res.Static = XmlUtilities.GetBool (properties' "static");  	res.Dressing = XmlUtilities.GetBool (properties' "dressing");  	res.Threat = XmlUtilities.GetInt (properties' "threat");  	var ai = XmlUtilities.GetStringArray (properties' "ai"' true);  	switch (ai [0]) {  	case ArtificialIntelligence.ICE:  		res.AI = new IceAI ();  		break;  	case ArtificialIntelligence.LAVA_EMITTER:  		res.AI = new LavaEmitterAI ();  		break;  	case ArtificialIntelligence.LAVA:  		res.AI = new LavaAI ();  		if (ai.Length > 1 && ai [1] == "PERMANENT") {  			(res.AI as LavaAI).CanHarden = false;  		}  		break;  	case ArtificialIntelligence.MELEE:  		res.AI = new MeleeAI ();  		break;  	default:  		break;  	}  	var tags = XmlUtilities.GetStringArray (properties' "tags"' true);  	foreach (var tag in tags) {  		res.AddTag (tag);  	}  	var icon = template.SelectSingleNode ("./icon");  	res.OutIcon = new Icon (XmlUtilities.GetString (icon' "texture")' XmlUtilities.GetIntRect (icon' "rect"' new IntRect (0' 0' 0' 0)));  	var skills = template.SelectNodes ("./skill");  	for (int s = 0; s < skills.Count; s++) {  		var skillId = XmlUtilities.GetString (skills [s]' "ref");  		var xmlSkill = GameFactory.xdoc.SelectSingleNode ("//skill[@id='" + skillId + "']");  		var combo = XmlUtilities.GetStringArray (skills [s]' "combo");  		var skill = LoadSkill (xmlSkill' combo [0] == string.Empty ? null : combo);  		if (skill != null) {  			skill.Show = XmlUtilities.GetBool (skills [s]' "show");  			res.AddSkill (skill);  		}  	}  	var variables = template.SelectNodes ("./var");  	for (int v = 0; v < variables.Count; v++) {  		var vname = XmlUtilities.GetString (variables [v]' "name");  		var vvalue = XmlUtilities.GetInt (variables [v]' "value");  		res.Vars [vname] = vvalue;  		//res.Vars.Add(vname' vvalue);  		if (vname == "HEALTH") {  			res.MaxHealth = vvalue;  		}  		else if (vname == "SPEED") {  			res.SpeedFactor = (float)vvalue / 10f;  			Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Speed factor of " + templateId + ": " + res.SpeedFactor.ToString ());  		}  	}  	var death = template.SelectSingleNode ("./death");  	res.DeathAnimation = XmlUtilities.GetString (death' "animation"' String.Empty);  	res.DeathMain = XmlUtilities.GetColor (death' "color1"' Color.Red);  	res.DeathSecundary = XmlUtilities.GetColor (death' "color2"' Color.Black);  	res.DeathRect.Left = XmlUtilities.GetInt (death' "offsetX");  	res.DeathRect.Top = XmlUtilities.GetInt (death' "offsetY");  	res.DeathRect.Width = XmlUtilities.GetInt (death' "width"' 1);  	res.DeathRect.Height = XmlUtilities.GetInt (death' "height"' 1);  	XmlNode outTemplate = template.SelectSingleNode ("./output");  	res.OutObject = new OutObject (XmlUtilities.GetString (outTemplate' "texture")' new SFML.Graphics.IntRect (XmlUtilities.GetInt (outTemplate' "defaultX")' XmlUtilities.GetInt (outTemplate' "defaultY")' XmlUtilities.GetInt (outTemplate' "defaultW")' XmlUtilities.GetInt (outTemplate' "defaultH")));  	res.OutObject.LightColor = XmlUtilities.GetColor (outTemplate' "lightColor"' Color.White);  	res.OutObject.LightRadius = XmlUtilities.GetInt (outTemplate' "lightRadius");  	res.OutObject.ZIndex = XmlUtilities.GetInt (outTemplate' "zIndex");  	var shadow = XmlUtilities.GetString (outTemplate' "shadow"' String.Empty);  	if (shadow != String.Empty) {  		var shadowWidth = 24;  		var shadowHeight = (int)(shadowWidth / 3);  		var shadowSprite = new Sprite (IoManager.LoadTexture ("00_base_pc_fx.png")' new IntRect (576' 40' shadowWidth' shadowHeight));  		shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  		shadowSprite.Color = new Color (0' 0' 0' 96);  		shadowSprite.Scale = new Vector2f (2f' 2f);  		res.OutObject.Shadow = shadowSprite;  		//Simulator.Instance.CreateParticleOn(shadow'res);  	}  	var animations = outTemplate.SelectNodes ("./animation");  	for (int a = 0; a < animations.Count; a++) {  		var ad = LoadAnimationDefinition (animations [a]);  		res.OutObject.AddAnimation (XmlUtilities.GetString (animations [a]' "name")' ad);  		//Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Added animation " + XmlUtilities.GetString(animations[a]' "name"));  	}  	Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Built object " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: try {  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//blueprint[@id='" + templateId + "']");  	var res = new Entity (assignedId' templateId);  	var properties = template.SelectSingleNode ("./properties");  	res.Faction = XmlUtilities.GetString (properties' "faction");  	res.Static = XmlUtilities.GetBool (properties' "static");  	res.Dressing = XmlUtilities.GetBool (properties' "dressing");  	res.Threat = XmlUtilities.GetInt (properties' "threat");  	var ai = XmlUtilities.GetStringArray (properties' "ai"' true);  	switch (ai [0]) {  	case ArtificialIntelligence.ICE:  		res.AI = new IceAI ();  		break;  	case ArtificialIntelligence.LAVA_EMITTER:  		res.AI = new LavaEmitterAI ();  		break;  	case ArtificialIntelligence.LAVA:  		res.AI = new LavaAI ();  		if (ai.Length > 1 && ai [1] == "PERMANENT") {  			(res.AI as LavaAI).CanHarden = false;  		}  		break;  	case ArtificialIntelligence.MELEE:  		res.AI = new MeleeAI ();  		break;  	default:  		break;  	}  	var tags = XmlUtilities.GetStringArray (properties' "tags"' true);  	foreach (var tag in tags) {  		res.AddTag (tag);  	}  	var icon = template.SelectSingleNode ("./icon");  	res.OutIcon = new Icon (XmlUtilities.GetString (icon' "texture")' XmlUtilities.GetIntRect (icon' "rect"' new IntRect (0' 0' 0' 0)));  	var skills = template.SelectNodes ("./skill");  	for (int s = 0; s < skills.Count; s++) {  		var skillId = XmlUtilities.GetString (skills [s]' "ref");  		var xmlSkill = GameFactory.xdoc.SelectSingleNode ("//skill[@id='" + skillId + "']");  		var combo = XmlUtilities.GetStringArray (skills [s]' "combo");  		var skill = LoadSkill (xmlSkill' combo [0] == string.Empty ? null : combo);  		if (skill != null) {  			skill.Show = XmlUtilities.GetBool (skills [s]' "show");  			res.AddSkill (skill);  		}  	}  	var variables = template.SelectNodes ("./var");  	for (int v = 0; v < variables.Count; v++) {  		var vname = XmlUtilities.GetString (variables [v]' "name");  		var vvalue = XmlUtilities.GetInt (variables [v]' "value");  		res.Vars [vname] = vvalue;  		//res.Vars.Add(vname' vvalue);  		if (vname == "HEALTH") {  			res.MaxHealth = vvalue;  		}  		else if (vname == "SPEED") {  			res.SpeedFactor = (float)vvalue / 10f;  			Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Speed factor of " + templateId + ": " + res.SpeedFactor.ToString ());  		}  	}  	var death = template.SelectSingleNode ("./death");  	res.DeathAnimation = XmlUtilities.GetString (death' "animation"' String.Empty);  	res.DeathMain = XmlUtilities.GetColor (death' "color1"' Color.Red);  	res.DeathSecundary = XmlUtilities.GetColor (death' "color2"' Color.Black);  	res.DeathRect.Left = XmlUtilities.GetInt (death' "offsetX");  	res.DeathRect.Top = XmlUtilities.GetInt (death' "offsetY");  	res.DeathRect.Width = XmlUtilities.GetInt (death' "width"' 1);  	res.DeathRect.Height = XmlUtilities.GetInt (death' "height"' 1);  	XmlNode outTemplate = template.SelectSingleNode ("./output");  	res.OutObject = new OutObject (XmlUtilities.GetString (outTemplate' "texture")' new SFML.Graphics.IntRect (XmlUtilities.GetInt (outTemplate' "defaultX")' XmlUtilities.GetInt (outTemplate' "defaultY")' XmlUtilities.GetInt (outTemplate' "defaultW")' XmlUtilities.GetInt (outTemplate' "defaultH")));  	res.OutObject.LightColor = XmlUtilities.GetColor (outTemplate' "lightColor"' Color.White);  	res.OutObject.LightRadius = XmlUtilities.GetInt (outTemplate' "lightRadius");  	res.OutObject.ZIndex = XmlUtilities.GetInt (outTemplate' "zIndex");  	var shadow = XmlUtilities.GetString (outTemplate' "shadow"' String.Empty);  	if (shadow != String.Empty) {  		var shadowWidth = 24;  		var shadowHeight = (int)(shadowWidth / 3);  		var shadowSprite = new Sprite (IoManager.LoadTexture ("00_base_pc_fx.png")' new IntRect (576' 40' shadowWidth' shadowHeight));  		shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  		shadowSprite.Color = new Color (0' 0' 0' 96);  		shadowSprite.Scale = new Vector2f (2f' 2f);  		res.OutObject.Shadow = shadowSprite;  		//Simulator.Instance.CreateParticleOn(shadow'res);  	}  	var animations = outTemplate.SelectNodes ("./animation");  	for (int a = 0; a < animations.Count; a++) {  		var ad = LoadAnimationDefinition (animations [a]);  		res.OutObject.AddAnimation (XmlUtilities.GetString (animations [a]' "name")' ad);  		//Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Added animation " + XmlUtilities.GetString(animations[a]' "name"));  	}  	Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Built object " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: try {  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//blueprint[@id='" + templateId + "']");  	var res = new Entity (assignedId' templateId);  	var properties = template.SelectSingleNode ("./properties");  	res.Faction = XmlUtilities.GetString (properties' "faction");  	res.Static = XmlUtilities.GetBool (properties' "static");  	res.Dressing = XmlUtilities.GetBool (properties' "dressing");  	res.Threat = XmlUtilities.GetInt (properties' "threat");  	var ai = XmlUtilities.GetStringArray (properties' "ai"' true);  	switch (ai [0]) {  	case ArtificialIntelligence.ICE:  		res.AI = new IceAI ();  		break;  	case ArtificialIntelligence.LAVA_EMITTER:  		res.AI = new LavaEmitterAI ();  		break;  	case ArtificialIntelligence.LAVA:  		res.AI = new LavaAI ();  		if (ai.Length > 1 && ai [1] == "PERMANENT") {  			(res.AI as LavaAI).CanHarden = false;  		}  		break;  	case ArtificialIntelligence.MELEE:  		res.AI = new MeleeAI ();  		break;  	default:  		break;  	}  	var tags = XmlUtilities.GetStringArray (properties' "tags"' true);  	foreach (var tag in tags) {  		res.AddTag (tag);  	}  	var icon = template.SelectSingleNode ("./icon");  	res.OutIcon = new Icon (XmlUtilities.GetString (icon' "texture")' XmlUtilities.GetIntRect (icon' "rect"' new IntRect (0' 0' 0' 0)));  	var skills = template.SelectNodes ("./skill");  	for (int s = 0; s < skills.Count; s++) {  		var skillId = XmlUtilities.GetString (skills [s]' "ref");  		var xmlSkill = GameFactory.xdoc.SelectSingleNode ("//skill[@id='" + skillId + "']");  		var combo = XmlUtilities.GetStringArray (skills [s]' "combo");  		var skill = LoadSkill (xmlSkill' combo [0] == string.Empty ? null : combo);  		if (skill != null) {  			skill.Show = XmlUtilities.GetBool (skills [s]' "show");  			res.AddSkill (skill);  		}  	}  	var variables = template.SelectNodes ("./var");  	for (int v = 0; v < variables.Count; v++) {  		var vname = XmlUtilities.GetString (variables [v]' "name");  		var vvalue = XmlUtilities.GetInt (variables [v]' "value");  		res.Vars [vname] = vvalue;  		//res.Vars.Add(vname' vvalue);  		if (vname == "HEALTH") {  			res.MaxHealth = vvalue;  		}  		else if (vname == "SPEED") {  			res.SpeedFactor = (float)vvalue / 10f;  			Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Speed factor of " + templateId + ": " + res.SpeedFactor.ToString ());  		}  	}  	var death = template.SelectSingleNode ("./death");  	res.DeathAnimation = XmlUtilities.GetString (death' "animation"' String.Empty);  	res.DeathMain = XmlUtilities.GetColor (death' "color1"' Color.Red);  	res.DeathSecundary = XmlUtilities.GetColor (death' "color2"' Color.Black);  	res.DeathRect.Left = XmlUtilities.GetInt (death' "offsetX");  	res.DeathRect.Top = XmlUtilities.GetInt (death' "offsetY");  	res.DeathRect.Width = XmlUtilities.GetInt (death' "width"' 1);  	res.DeathRect.Height = XmlUtilities.GetInt (death' "height"' 1);  	XmlNode outTemplate = template.SelectSingleNode ("./output");  	res.OutObject = new OutObject (XmlUtilities.GetString (outTemplate' "texture")' new SFML.Graphics.IntRect (XmlUtilities.GetInt (outTemplate' "defaultX")' XmlUtilities.GetInt (outTemplate' "defaultY")' XmlUtilities.GetInt (outTemplate' "defaultW")' XmlUtilities.GetInt (outTemplate' "defaultH")));  	res.OutObject.LightColor = XmlUtilities.GetColor (outTemplate' "lightColor"' Color.White);  	res.OutObject.LightRadius = XmlUtilities.GetInt (outTemplate' "lightRadius");  	res.OutObject.ZIndex = XmlUtilities.GetInt (outTemplate' "zIndex");  	var shadow = XmlUtilities.GetString (outTemplate' "shadow"' String.Empty);  	if (shadow != String.Empty) {  		var shadowWidth = 24;  		var shadowHeight = (int)(shadowWidth / 3);  		var shadowSprite = new Sprite (IoManager.LoadTexture ("00_base_pc_fx.png")' new IntRect (576' 40' shadowWidth' shadowHeight));  		shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  		shadowSprite.Color = new Color (0' 0' 0' 96);  		shadowSprite.Scale = new Vector2f (2f' 2f);  		res.OutObject.Shadow = shadowSprite;  		//Simulator.Instance.CreateParticleOn(shadow'res);  	}  	var animations = outTemplate.SelectNodes ("./animation");  	for (int a = 0; a < animations.Count; a++) {  		var ad = LoadAnimationDefinition (animations [a]);  		res.OutObject.AddAnimation (XmlUtilities.GetString (animations [a]' "name")' ad);  		//Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Added animation " + XmlUtilities.GetString(animations[a]' "name"));  	}  	Logger.Debug ("GameFactory"' "LoadFromTemplate"' "Built object " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: if (shadow != String.Empty) {  	var shadowWidth = 24;  	var shadowHeight = (int)(shadowWidth / 3);  	var shadowSprite = new Sprite (IoManager.LoadTexture ("00_base_pc_fx.png")' new IntRect (576' 40' shadowWidth' shadowHeight));  	shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  	shadowSprite.Color = new Color (0' 0' 0' 96);  	shadowSprite.Scale = new Vector2f (2f' 2f);  	res.OutObject.Shadow = shadowSprite;  	//Simulator.Instance.CreateParticleOn(shadow'res);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: if (shadow != String.Empty) {  	var shadowWidth = 24;  	var shadowHeight = (int)(shadowWidth / 3);  	var shadowSprite = new Sprite (IoManager.LoadTexture ("00_base_pc_fx.png")' new IntRect (576' 40' shadowWidth' shadowHeight));  	shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  	shadowSprite.Color = new Color (0' 0' 0' 96);  	shadowSprite.Scale = new Vector2f (2f' 2f);  	res.OutObject.Shadow = shadowSprite;  	//Simulator.Instance.CreateParticleOn(shadow'res);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: if (shadow != String.Empty) {  	var shadowWidth = 24;  	var shadowHeight = (int)(shadowWidth / 3);  	var shadowSprite = new Sprite (IoManager.LoadTexture ("00_base_pc_fx.png")' new IntRect (576' 40' shadowWidth' shadowHeight));  	shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  	shadowSprite.Color = new Color (0' 0' 0' 96);  	shadowSprite.Scale = new Vector2f (2f' 2f);  	res.OutObject.Shadow = shadowSprite;  	//Simulator.Instance.CreateParticleOn(shadow'res);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: if (shadow != String.Empty) {  	var shadowWidth = 24;  	var shadowHeight = (int)(shadowWidth / 3);  	var shadowSprite = new Sprite (IoManager.LoadTexture ("00_base_pc_fx.png")' new IntRect (576' 40' shadowWidth' shadowHeight));  	shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  	shadowSprite.Color = new Color (0' 0' 0' 96);  	shadowSprite.Scale = new Vector2f (2f' 2f);  	res.OutObject.Shadow = shadowSprite;  	//Simulator.Instance.CreateParticleOn(shadow'res);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: if (shadow != String.Empty) {  	var shadowWidth = 24;  	var shadowHeight = (int)(shadowWidth / 3);  	var shadowSprite = new Sprite (IoManager.LoadTexture ("00_base_pc_fx.png")' new IntRect (576' 40' shadowWidth' shadowHeight));  	shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  	shadowSprite.Color = new Color (0' 0' 0' 96);  	shadowSprite.Scale = new Vector2f (2f' 2f);  	res.OutObject.Shadow = shadowSprite;  	//Simulator.Instance.CreateParticleOn(shadow'res);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: if (shadow != String.Empty) {  	var shadowWidth = 24;  	var shadowHeight = (int)(shadowWidth / 3);  	var shadowSprite = new Sprite (IoManager.LoadTexture ("00_base_pc_fx.png")' new IntRect (576' 40' shadowWidth' shadowHeight));  	shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  	shadowSprite.Color = new Color (0' 0' 0' 96);  	shadowSprite.Scale = new Vector2f (2f' 2f);  	res.OutObject.Shadow = shadowSprite;  	//Simulator.Instance.CreateParticleOn(shadow'res);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: if (shadow != String.Empty) {  	var shadowWidth = 24;  	var shadowHeight = (int)(shadowWidth / 3);  	var shadowSprite = new Sprite (IoManager.LoadTexture ("00_base_pc_fx.png")' new IntRect (576' 40' shadowWidth' shadowHeight));  	shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  	shadowSprite.Color = new Color (0' 0' 0' 96);  	shadowSprite.Scale = new Vector2f (2f' 2f);  	res.OutObject.Shadow = shadowSprite;  	//Simulator.Instance.CreateParticleOn(shadow'res);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: shadowSprite.Origin = new Vector2f (shadowWidth / 2' shadowHeight / 2);  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadFromTemplate,The following statement contains a magic number: shadowSprite.Color = new Color (0' 0' 0' 96);  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: try {  	var res = new ParticleSystem (templateId);  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//particle[@id='" + templateId + "']");  	if (XmlUtilities.GetString (template' "flip"' "true") == "false") {  		flip = false;  	}  	var xCoeff = flip ? -1f : 1f;  	var angleCoeff = flip ? 3.1415f : 0f;  	res.TTL = XmlUtilities.GetInt (template' "ttl");  	if (res.TTL < 0)  		res.TTL = int.MaxValue;  	res.Layer = layer;  	res.Position = new Vector2f (x' y);  	var emitters = template.SelectNodes ("./emitter");  	for (int e = 0; e < emitters.Count; e++) {  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  		var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  		var emitter = new Emitter (res' startDelay);  		emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  		emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  		emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  		emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  		emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  		if (emitter.TTL < 0)  			emitter.TTL = int.MaxValue;  		emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  		var children = emitters [e].ChildNodes;  		for (var c = 0; c < children.Count; c++) {  			switch (children [c].Name) {  			case "boxSpawner":  				emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  				break;  			case "burstSpawner":  				emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  				break;  			case "burstInSpawner":  				emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  				break;  			case "colorAnimation":  				var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  				var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					startColor.A = (byte)buff [3];  				buff = XmlUtilities.GetIntArray (children [c]' "endColor");  				var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					endColor.A = (byte)buff [3];  				emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  				break;  			case "colorPicker":  				var cps = new ColorPickerSpawner ();  				var colors = children [c].SelectNodes ("./color");  				for (int i = 0; i < colors.Count; i++) {  					var color = XmlUtilities.GetIntArray (colors [i]' "select");  					switch (color.Length) {  					case 3:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  						break;  					case 4:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  						break;  					default:  						break;  					}  				}  				emitter.AddVariator (cps);  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  				break;  			case "fade":  				emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  				break;  			case "gravity":  				emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  				break;  			case "gridSpawner":  				emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  				break;  			case "lightSpawner":  				buff = XmlUtilities.GetIntArray (children [c]' "color");  				var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					lightColor.A = (byte)buff [3];  				emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  				break;  			case "particleTemplate":  				if (children [c].HasChildNodes) {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  				}  				else {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  				}  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  				break;  			case "scaleAnimation":  				emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  				break;  			case "sfxSpawner":  				emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  				break;  			case "zAnimation":  				emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  				break;  			default:  				break;  			}  		}  		res.AddEmitter (emitter);  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "Built particle system " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadParticleFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: try {  	var res = new ParticleSystem (templateId);  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//particle[@id='" + templateId + "']");  	if (XmlUtilities.GetString (template' "flip"' "true") == "false") {  		flip = false;  	}  	var xCoeff = flip ? -1f : 1f;  	var angleCoeff = flip ? 3.1415f : 0f;  	res.TTL = XmlUtilities.GetInt (template' "ttl");  	if (res.TTL < 0)  		res.TTL = int.MaxValue;  	res.Layer = layer;  	res.Position = new Vector2f (x' y);  	var emitters = template.SelectNodes ("./emitter");  	for (int e = 0; e < emitters.Count; e++) {  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  		var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  		var emitter = new Emitter (res' startDelay);  		emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  		emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  		emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  		emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  		emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  		if (emitter.TTL < 0)  			emitter.TTL = int.MaxValue;  		emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  		var children = emitters [e].ChildNodes;  		for (var c = 0; c < children.Count; c++) {  			switch (children [c].Name) {  			case "boxSpawner":  				emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  				break;  			case "burstSpawner":  				emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  				break;  			case "burstInSpawner":  				emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  				break;  			case "colorAnimation":  				var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  				var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					startColor.A = (byte)buff [3];  				buff = XmlUtilities.GetIntArray (children [c]' "endColor");  				var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					endColor.A = (byte)buff [3];  				emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  				break;  			case "colorPicker":  				var cps = new ColorPickerSpawner ();  				var colors = children [c].SelectNodes ("./color");  				for (int i = 0; i < colors.Count; i++) {  					var color = XmlUtilities.GetIntArray (colors [i]' "select");  					switch (color.Length) {  					case 3:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  						break;  					case 4:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  						break;  					default:  						break;  					}  				}  				emitter.AddVariator (cps);  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  				break;  			case "fade":  				emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  				break;  			case "gravity":  				emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  				break;  			case "gridSpawner":  				emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  				break;  			case "lightSpawner":  				buff = XmlUtilities.GetIntArray (children [c]' "color");  				var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					lightColor.A = (byte)buff [3];  				emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  				break;  			case "particleTemplate":  				if (children [c].HasChildNodes) {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  				}  				else {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  				}  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  				break;  			case "scaleAnimation":  				emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  				break;  			case "sfxSpawner":  				emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  				break;  			case "zAnimation":  				emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  				break;  			default:  				break;  			}  		}  		res.AddEmitter (emitter);  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "Built particle system " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadParticleFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: try {  	var res = new ParticleSystem (templateId);  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//particle[@id='" + templateId + "']");  	if (XmlUtilities.GetString (template' "flip"' "true") == "false") {  		flip = false;  	}  	var xCoeff = flip ? -1f : 1f;  	var angleCoeff = flip ? 3.1415f : 0f;  	res.TTL = XmlUtilities.GetInt (template' "ttl");  	if (res.TTL < 0)  		res.TTL = int.MaxValue;  	res.Layer = layer;  	res.Position = new Vector2f (x' y);  	var emitters = template.SelectNodes ("./emitter");  	for (int e = 0; e < emitters.Count; e++) {  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  		var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  		var emitter = new Emitter (res' startDelay);  		emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  		emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  		emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  		emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  		emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  		if (emitter.TTL < 0)  			emitter.TTL = int.MaxValue;  		emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  		var children = emitters [e].ChildNodes;  		for (var c = 0; c < children.Count; c++) {  			switch (children [c].Name) {  			case "boxSpawner":  				emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  				break;  			case "burstSpawner":  				emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  				break;  			case "burstInSpawner":  				emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  				break;  			case "colorAnimation":  				var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  				var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					startColor.A = (byte)buff [3];  				buff = XmlUtilities.GetIntArray (children [c]' "endColor");  				var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					endColor.A = (byte)buff [3];  				emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  				break;  			case "colorPicker":  				var cps = new ColorPickerSpawner ();  				var colors = children [c].SelectNodes ("./color");  				for (int i = 0; i < colors.Count; i++) {  					var color = XmlUtilities.GetIntArray (colors [i]' "select");  					switch (color.Length) {  					case 3:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  						break;  					case 4:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  						break;  					default:  						break;  					}  				}  				emitter.AddVariator (cps);  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  				break;  			case "fade":  				emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  				break;  			case "gravity":  				emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  				break;  			case "gridSpawner":  				emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  				break;  			case "lightSpawner":  				buff = XmlUtilities.GetIntArray (children [c]' "color");  				var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					lightColor.A = (byte)buff [3];  				emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  				break;  			case "particleTemplate":  				if (children [c].HasChildNodes) {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  				}  				else {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  				}  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  				break;  			case "scaleAnimation":  				emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  				break;  			case "sfxSpawner":  				emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  				break;  			case "zAnimation":  				emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  				break;  			default:  				break;  			}  		}  		res.AddEmitter (emitter);  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "Built particle system " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadParticleFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: try {  	var res = new ParticleSystem (templateId);  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//particle[@id='" + templateId + "']");  	if (XmlUtilities.GetString (template' "flip"' "true") == "false") {  		flip = false;  	}  	var xCoeff = flip ? -1f : 1f;  	var angleCoeff = flip ? 3.1415f : 0f;  	res.TTL = XmlUtilities.GetInt (template' "ttl");  	if (res.TTL < 0)  		res.TTL = int.MaxValue;  	res.Layer = layer;  	res.Position = new Vector2f (x' y);  	var emitters = template.SelectNodes ("./emitter");  	for (int e = 0; e < emitters.Count; e++) {  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  		var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  		var emitter = new Emitter (res' startDelay);  		emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  		emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  		emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  		emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  		emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  		if (emitter.TTL < 0)  			emitter.TTL = int.MaxValue;  		emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  		var children = emitters [e].ChildNodes;  		for (var c = 0; c < children.Count; c++) {  			switch (children [c].Name) {  			case "boxSpawner":  				emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  				break;  			case "burstSpawner":  				emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  				break;  			case "burstInSpawner":  				emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  				break;  			case "colorAnimation":  				var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  				var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					startColor.A = (byte)buff [3];  				buff = XmlUtilities.GetIntArray (children [c]' "endColor");  				var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					endColor.A = (byte)buff [3];  				emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  				break;  			case "colorPicker":  				var cps = new ColorPickerSpawner ();  				var colors = children [c].SelectNodes ("./color");  				for (int i = 0; i < colors.Count; i++) {  					var color = XmlUtilities.GetIntArray (colors [i]' "select");  					switch (color.Length) {  					case 3:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  						break;  					case 4:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  						break;  					default:  						break;  					}  				}  				emitter.AddVariator (cps);  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  				break;  			case "fade":  				emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  				break;  			case "gravity":  				emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  				break;  			case "gridSpawner":  				emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  				break;  			case "lightSpawner":  				buff = XmlUtilities.GetIntArray (children [c]' "color");  				var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					lightColor.A = (byte)buff [3];  				emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  				break;  			case "particleTemplate":  				if (children [c].HasChildNodes) {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  				}  				else {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  				}  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  				break;  			case "scaleAnimation":  				emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  				break;  			case "sfxSpawner":  				emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  				break;  			case "zAnimation":  				emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  				break;  			default:  				break;  			}  		}  		res.AddEmitter (emitter);  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "Built particle system " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadParticleFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: try {  	var res = new ParticleSystem (templateId);  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//particle[@id='" + templateId + "']");  	if (XmlUtilities.GetString (template' "flip"' "true") == "false") {  		flip = false;  	}  	var xCoeff = flip ? -1f : 1f;  	var angleCoeff = flip ? 3.1415f : 0f;  	res.TTL = XmlUtilities.GetInt (template' "ttl");  	if (res.TTL < 0)  		res.TTL = int.MaxValue;  	res.Layer = layer;  	res.Position = new Vector2f (x' y);  	var emitters = template.SelectNodes ("./emitter");  	for (int e = 0; e < emitters.Count; e++) {  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  		var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  		var emitter = new Emitter (res' startDelay);  		emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  		emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  		emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  		emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  		emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  		if (emitter.TTL < 0)  			emitter.TTL = int.MaxValue;  		emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  		var children = emitters [e].ChildNodes;  		for (var c = 0; c < children.Count; c++) {  			switch (children [c].Name) {  			case "boxSpawner":  				emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  				break;  			case "burstSpawner":  				emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  				break;  			case "burstInSpawner":  				emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  				break;  			case "colorAnimation":  				var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  				var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					startColor.A = (byte)buff [3];  				buff = XmlUtilities.GetIntArray (children [c]' "endColor");  				var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					endColor.A = (byte)buff [3];  				emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  				break;  			case "colorPicker":  				var cps = new ColorPickerSpawner ();  				var colors = children [c].SelectNodes ("./color");  				for (int i = 0; i < colors.Count; i++) {  					var color = XmlUtilities.GetIntArray (colors [i]' "select");  					switch (color.Length) {  					case 3:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  						break;  					case 4:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  						break;  					default:  						break;  					}  				}  				emitter.AddVariator (cps);  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  				break;  			case "fade":  				emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  				break;  			case "gravity":  				emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  				break;  			case "gridSpawner":  				emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  				break;  			case "lightSpawner":  				buff = XmlUtilities.GetIntArray (children [c]' "color");  				var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					lightColor.A = (byte)buff [3];  				emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  				break;  			case "particleTemplate":  				if (children [c].HasChildNodes) {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  				}  				else {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  				}  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  				break;  			case "scaleAnimation":  				emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  				break;  			case "sfxSpawner":  				emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  				break;  			case "zAnimation":  				emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  				break;  			default:  				break;  			}  		}  		res.AddEmitter (emitter);  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "Built particle system " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadParticleFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: try {  	var res = new ParticleSystem (templateId);  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//particle[@id='" + templateId + "']");  	if (XmlUtilities.GetString (template' "flip"' "true") == "false") {  		flip = false;  	}  	var xCoeff = flip ? -1f : 1f;  	var angleCoeff = flip ? 3.1415f : 0f;  	res.TTL = XmlUtilities.GetInt (template' "ttl");  	if (res.TTL < 0)  		res.TTL = int.MaxValue;  	res.Layer = layer;  	res.Position = new Vector2f (x' y);  	var emitters = template.SelectNodes ("./emitter");  	for (int e = 0; e < emitters.Count; e++) {  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  		var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  		var emitter = new Emitter (res' startDelay);  		emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  		emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  		emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  		emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  		emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  		if (emitter.TTL < 0)  			emitter.TTL = int.MaxValue;  		emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  		var children = emitters [e].ChildNodes;  		for (var c = 0; c < children.Count; c++) {  			switch (children [c].Name) {  			case "boxSpawner":  				emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  				break;  			case "burstSpawner":  				emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  				break;  			case "burstInSpawner":  				emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  				break;  			case "colorAnimation":  				var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  				var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					startColor.A = (byte)buff [3];  				buff = XmlUtilities.GetIntArray (children [c]' "endColor");  				var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					endColor.A = (byte)buff [3];  				emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  				break;  			case "colorPicker":  				var cps = new ColorPickerSpawner ();  				var colors = children [c].SelectNodes ("./color");  				for (int i = 0; i < colors.Count; i++) {  					var color = XmlUtilities.GetIntArray (colors [i]' "select");  					switch (color.Length) {  					case 3:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  						break;  					case 4:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  						break;  					default:  						break;  					}  				}  				emitter.AddVariator (cps);  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  				break;  			case "fade":  				emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  				break;  			case "gravity":  				emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  				break;  			case "gridSpawner":  				emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  				break;  			case "lightSpawner":  				buff = XmlUtilities.GetIntArray (children [c]' "color");  				var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					lightColor.A = (byte)buff [3];  				emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  				break;  			case "particleTemplate":  				if (children [c].HasChildNodes) {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  				}  				else {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  				}  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  				break;  			case "scaleAnimation":  				emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  				break;  			case "sfxSpawner":  				emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  				break;  			case "zAnimation":  				emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  				break;  			default:  				break;  			}  		}  		res.AddEmitter (emitter);  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "Built particle system " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadParticleFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: try {  	var res = new ParticleSystem (templateId);  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//particle[@id='" + templateId + "']");  	if (XmlUtilities.GetString (template' "flip"' "true") == "false") {  		flip = false;  	}  	var xCoeff = flip ? -1f : 1f;  	var angleCoeff = flip ? 3.1415f : 0f;  	res.TTL = XmlUtilities.GetInt (template' "ttl");  	if (res.TTL < 0)  		res.TTL = int.MaxValue;  	res.Layer = layer;  	res.Position = new Vector2f (x' y);  	var emitters = template.SelectNodes ("./emitter");  	for (int e = 0; e < emitters.Count; e++) {  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  		var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  		var emitter = new Emitter (res' startDelay);  		emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  		emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  		emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  		emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  		emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  		if (emitter.TTL < 0)  			emitter.TTL = int.MaxValue;  		emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  		var children = emitters [e].ChildNodes;  		for (var c = 0; c < children.Count; c++) {  			switch (children [c].Name) {  			case "boxSpawner":  				emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  				break;  			case "burstSpawner":  				emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  				break;  			case "burstInSpawner":  				emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  				break;  			case "colorAnimation":  				var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  				var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					startColor.A = (byte)buff [3];  				buff = XmlUtilities.GetIntArray (children [c]' "endColor");  				var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					endColor.A = (byte)buff [3];  				emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  				break;  			case "colorPicker":  				var cps = new ColorPickerSpawner ();  				var colors = children [c].SelectNodes ("./color");  				for (int i = 0; i < colors.Count; i++) {  					var color = XmlUtilities.GetIntArray (colors [i]' "select");  					switch (color.Length) {  					case 3:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  						break;  					case 4:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  						break;  					default:  						break;  					}  				}  				emitter.AddVariator (cps);  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  				break;  			case "fade":  				emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  				break;  			case "gravity":  				emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  				break;  			case "gridSpawner":  				emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  				break;  			case "lightSpawner":  				buff = XmlUtilities.GetIntArray (children [c]' "color");  				var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					lightColor.A = (byte)buff [3];  				emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  				break;  			case "particleTemplate":  				if (children [c].HasChildNodes) {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  				}  				else {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  				}  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  				break;  			case "scaleAnimation":  				emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  				break;  			case "sfxSpawner":  				emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  				break;  			case "zAnimation":  				emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  				break;  			default:  				break;  			}  		}  		res.AddEmitter (emitter);  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "Built particle system " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadParticleFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: try {  	var res = new ParticleSystem (templateId);  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//particle[@id='" + templateId + "']");  	if (XmlUtilities.GetString (template' "flip"' "true") == "false") {  		flip = false;  	}  	var xCoeff = flip ? -1f : 1f;  	var angleCoeff = flip ? 3.1415f : 0f;  	res.TTL = XmlUtilities.GetInt (template' "ttl");  	if (res.TTL < 0)  		res.TTL = int.MaxValue;  	res.Layer = layer;  	res.Position = new Vector2f (x' y);  	var emitters = template.SelectNodes ("./emitter");  	for (int e = 0; e < emitters.Count; e++) {  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  		var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  		var emitter = new Emitter (res' startDelay);  		emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  		emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  		emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  		emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  		emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  		if (emitter.TTL < 0)  			emitter.TTL = int.MaxValue;  		emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  		var children = emitters [e].ChildNodes;  		for (var c = 0; c < children.Count; c++) {  			switch (children [c].Name) {  			case "boxSpawner":  				emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  				break;  			case "burstSpawner":  				emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  				break;  			case "burstInSpawner":  				emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  				break;  			case "colorAnimation":  				var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  				var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					startColor.A = (byte)buff [3];  				buff = XmlUtilities.GetIntArray (children [c]' "endColor");  				var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					endColor.A = (byte)buff [3];  				emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  				break;  			case "colorPicker":  				var cps = new ColorPickerSpawner ();  				var colors = children [c].SelectNodes ("./color");  				for (int i = 0; i < colors.Count; i++) {  					var color = XmlUtilities.GetIntArray (colors [i]' "select");  					switch (color.Length) {  					case 3:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  						break;  					case 4:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  						break;  					default:  						break;  					}  				}  				emitter.AddVariator (cps);  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  				break;  			case "fade":  				emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  				break;  			case "gravity":  				emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  				break;  			case "gridSpawner":  				emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  				break;  			case "lightSpawner":  				buff = XmlUtilities.GetIntArray (children [c]' "color");  				var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					lightColor.A = (byte)buff [3];  				emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  				break;  			case "particleTemplate":  				if (children [c].HasChildNodes) {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  				}  				else {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  				}  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  				break;  			case "scaleAnimation":  				emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  				break;  			case "sfxSpawner":  				emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  				break;  			case "zAnimation":  				emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  				break;  			default:  				break;  			}  		}  		res.AddEmitter (emitter);  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "Built particle system " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadParticleFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: try {  	var res = new ParticleSystem (templateId);  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//particle[@id='" + templateId + "']");  	if (XmlUtilities.GetString (template' "flip"' "true") == "false") {  		flip = false;  	}  	var xCoeff = flip ? -1f : 1f;  	var angleCoeff = flip ? 3.1415f : 0f;  	res.TTL = XmlUtilities.GetInt (template' "ttl");  	if (res.TTL < 0)  		res.TTL = int.MaxValue;  	res.Layer = layer;  	res.Position = new Vector2f (x' y);  	var emitters = template.SelectNodes ("./emitter");  	for (int e = 0; e < emitters.Count; e++) {  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  		var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  		var emitter = new Emitter (res' startDelay);  		emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  		emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  		emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  		emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  		emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  		if (emitter.TTL < 0)  			emitter.TTL = int.MaxValue;  		emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  		var children = emitters [e].ChildNodes;  		for (var c = 0; c < children.Count; c++) {  			switch (children [c].Name) {  			case "boxSpawner":  				emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  				break;  			case "burstSpawner":  				emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  				break;  			case "burstInSpawner":  				emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  				break;  			case "colorAnimation":  				var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  				var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					startColor.A = (byte)buff [3];  				buff = XmlUtilities.GetIntArray (children [c]' "endColor");  				var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					endColor.A = (byte)buff [3];  				emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  				break;  			case "colorPicker":  				var cps = new ColorPickerSpawner ();  				var colors = children [c].SelectNodes ("./color");  				for (int i = 0; i < colors.Count; i++) {  					var color = XmlUtilities.GetIntArray (colors [i]' "select");  					switch (color.Length) {  					case 3:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  						break;  					case 4:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  						break;  					default:  						break;  					}  				}  				emitter.AddVariator (cps);  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  				break;  			case "fade":  				emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  				break;  			case "gravity":  				emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  				break;  			case "gridSpawner":  				emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  				break;  			case "lightSpawner":  				buff = XmlUtilities.GetIntArray (children [c]' "color");  				var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					lightColor.A = (byte)buff [3];  				emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  				break;  			case "particleTemplate":  				if (children [c].HasChildNodes) {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  				}  				else {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  				}  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  				break;  			case "scaleAnimation":  				emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  				break;  			case "sfxSpawner":  				emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  				break;  			case "zAnimation":  				emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  				break;  			default:  				break;  			}  		}  		res.AddEmitter (emitter);  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "Built particle system " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadParticleFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: try {  	var res = new ParticleSystem (templateId);  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//particle[@id='" + templateId + "']");  	if (XmlUtilities.GetString (template' "flip"' "true") == "false") {  		flip = false;  	}  	var xCoeff = flip ? -1f : 1f;  	var angleCoeff = flip ? 3.1415f : 0f;  	res.TTL = XmlUtilities.GetInt (template' "ttl");  	if (res.TTL < 0)  		res.TTL = int.MaxValue;  	res.Layer = layer;  	res.Position = new Vector2f (x' y);  	var emitters = template.SelectNodes ("./emitter");  	for (int e = 0; e < emitters.Count; e++) {  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  		var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  		var emitter = new Emitter (res' startDelay);  		emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  		emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  		emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  		emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  		emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  		if (emitter.TTL < 0)  			emitter.TTL = int.MaxValue;  		emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  		var children = emitters [e].ChildNodes;  		for (var c = 0; c < children.Count; c++) {  			switch (children [c].Name) {  			case "boxSpawner":  				emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  				break;  			case "burstSpawner":  				emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  				break;  			case "burstInSpawner":  				emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  				break;  			case "colorAnimation":  				var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  				var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					startColor.A = (byte)buff [3];  				buff = XmlUtilities.GetIntArray (children [c]' "endColor");  				var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					endColor.A = (byte)buff [3];  				emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  				break;  			case "colorPicker":  				var cps = new ColorPickerSpawner ();  				var colors = children [c].SelectNodes ("./color");  				for (int i = 0; i < colors.Count; i++) {  					var color = XmlUtilities.GetIntArray (colors [i]' "select");  					switch (color.Length) {  					case 3:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  						break;  					case 4:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  						break;  					default:  						break;  					}  				}  				emitter.AddVariator (cps);  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  				break;  			case "fade":  				emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  				break;  			case "gravity":  				emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  				break;  			case "gridSpawner":  				emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  				break;  			case "lightSpawner":  				buff = XmlUtilities.GetIntArray (children [c]' "color");  				var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					lightColor.A = (byte)buff [3];  				emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  				break;  			case "particleTemplate":  				if (children [c].HasChildNodes) {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  				}  				else {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  				}  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  				break;  			case "scaleAnimation":  				emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  				break;  			case "sfxSpawner":  				emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  				break;  			case "zAnimation":  				emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  				break;  			default:  				break;  			}  		}  		res.AddEmitter (emitter);  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "Built particle system " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadParticleFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: try {  	var res = new ParticleSystem (templateId);  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//particle[@id='" + templateId + "']");  	if (XmlUtilities.GetString (template' "flip"' "true") == "false") {  		flip = false;  	}  	var xCoeff = flip ? -1f : 1f;  	var angleCoeff = flip ? 3.1415f : 0f;  	res.TTL = XmlUtilities.GetInt (template' "ttl");  	if (res.TTL < 0)  		res.TTL = int.MaxValue;  	res.Layer = layer;  	res.Position = new Vector2f (x' y);  	var emitters = template.SelectNodes ("./emitter");  	for (int e = 0; e < emitters.Count; e++) {  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  		var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  		var emitter = new Emitter (res' startDelay);  		emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  		emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  		emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  		emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  		emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  		if (emitter.TTL < 0)  			emitter.TTL = int.MaxValue;  		emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  		var children = emitters [e].ChildNodes;  		for (var c = 0; c < children.Count; c++) {  			switch (children [c].Name) {  			case "boxSpawner":  				emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  				break;  			case "burstSpawner":  				emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  				break;  			case "burstInSpawner":  				emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  				break;  			case "colorAnimation":  				var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  				var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					startColor.A = (byte)buff [3];  				buff = XmlUtilities.GetIntArray (children [c]' "endColor");  				var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					endColor.A = (byte)buff [3];  				emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  				break;  			case "colorPicker":  				var cps = new ColorPickerSpawner ();  				var colors = children [c].SelectNodes ("./color");  				for (int i = 0; i < colors.Count; i++) {  					var color = XmlUtilities.GetIntArray (colors [i]' "select");  					switch (color.Length) {  					case 3:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  						break;  					case 4:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  						break;  					default:  						break;  					}  				}  				emitter.AddVariator (cps);  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  				break;  			case "fade":  				emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  				break;  			case "gravity":  				emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  				break;  			case "gridSpawner":  				emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  				break;  			case "lightSpawner":  				buff = XmlUtilities.GetIntArray (children [c]' "color");  				var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					lightColor.A = (byte)buff [3];  				emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  				break;  			case "particleTemplate":  				if (children [c].HasChildNodes) {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  				}  				else {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  				}  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  				break;  			case "scaleAnimation":  				emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  				break;  			case "sfxSpawner":  				emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  				break;  			case "zAnimation":  				emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  				break;  			default:  				break;  			}  		}  		res.AddEmitter (emitter);  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "Built particle system " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadParticleFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: try {  	var res = new ParticleSystem (templateId);  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//particle[@id='" + templateId + "']");  	if (XmlUtilities.GetString (template' "flip"' "true") == "false") {  		flip = false;  	}  	var xCoeff = flip ? -1f : 1f;  	var angleCoeff = flip ? 3.1415f : 0f;  	res.TTL = XmlUtilities.GetInt (template' "ttl");  	if (res.TTL < 0)  		res.TTL = int.MaxValue;  	res.Layer = layer;  	res.Position = new Vector2f (x' y);  	var emitters = template.SelectNodes ("./emitter");  	for (int e = 0; e < emitters.Count; e++) {  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  		var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  		var emitter = new Emitter (res' startDelay);  		emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  		emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  		emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  		emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  		emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  		if (emitter.TTL < 0)  			emitter.TTL = int.MaxValue;  		emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  		var children = emitters [e].ChildNodes;  		for (var c = 0; c < children.Count; c++) {  			switch (children [c].Name) {  			case "boxSpawner":  				emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  				break;  			case "burstSpawner":  				emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  				break;  			case "burstInSpawner":  				emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  				break;  			case "colorAnimation":  				var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  				var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					startColor.A = (byte)buff [3];  				buff = XmlUtilities.GetIntArray (children [c]' "endColor");  				var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					endColor.A = (byte)buff [3];  				emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  				break;  			case "colorPicker":  				var cps = new ColorPickerSpawner ();  				var colors = children [c].SelectNodes ("./color");  				for (int i = 0; i < colors.Count; i++) {  					var color = XmlUtilities.GetIntArray (colors [i]' "select");  					switch (color.Length) {  					case 3:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  						break;  					case 4:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  						break;  					default:  						break;  					}  				}  				emitter.AddVariator (cps);  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  				break;  			case "fade":  				emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  				break;  			case "gravity":  				emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  				break;  			case "gridSpawner":  				emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  				break;  			case "lightSpawner":  				buff = XmlUtilities.GetIntArray (children [c]' "color");  				var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					lightColor.A = (byte)buff [3];  				emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  				break;  			case "particleTemplate":  				if (children [c].HasChildNodes) {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  				}  				else {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  				}  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  				break;  			case "scaleAnimation":  				emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  				break;  			case "sfxSpawner":  				emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  				break;  			case "zAnimation":  				emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  				break;  			default:  				break;  			}  		}  		res.AddEmitter (emitter);  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "Built particle system " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadParticleFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: try {  	var res = new ParticleSystem (templateId);  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//particle[@id='" + templateId + "']");  	if (XmlUtilities.GetString (template' "flip"' "true") == "false") {  		flip = false;  	}  	var xCoeff = flip ? -1f : 1f;  	var angleCoeff = flip ? 3.1415f : 0f;  	res.TTL = XmlUtilities.GetInt (template' "ttl");  	if (res.TTL < 0)  		res.TTL = int.MaxValue;  	res.Layer = layer;  	res.Position = new Vector2f (x' y);  	var emitters = template.SelectNodes ("./emitter");  	for (int e = 0; e < emitters.Count; e++) {  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  		var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  		var emitter = new Emitter (res' startDelay);  		emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  		emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  		emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  		emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  		emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  		if (emitter.TTL < 0)  			emitter.TTL = int.MaxValue;  		emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  		var children = emitters [e].ChildNodes;  		for (var c = 0; c < children.Count; c++) {  			switch (children [c].Name) {  			case "boxSpawner":  				emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  				break;  			case "burstSpawner":  				emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  				break;  			case "burstInSpawner":  				emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  				break;  			case "colorAnimation":  				var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  				var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					startColor.A = (byte)buff [3];  				buff = XmlUtilities.GetIntArray (children [c]' "endColor");  				var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					endColor.A = (byte)buff [3];  				emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  				break;  			case "colorPicker":  				var cps = new ColorPickerSpawner ();  				var colors = children [c].SelectNodes ("./color");  				for (int i = 0; i < colors.Count; i++) {  					var color = XmlUtilities.GetIntArray (colors [i]' "select");  					switch (color.Length) {  					case 3:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  						break;  					case 4:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  						break;  					default:  						break;  					}  				}  				emitter.AddVariator (cps);  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  				break;  			case "fade":  				emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  				break;  			case "gravity":  				emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  				break;  			case "gridSpawner":  				emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  				break;  			case "lightSpawner":  				buff = XmlUtilities.GetIntArray (children [c]' "color");  				var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					lightColor.A = (byte)buff [3];  				emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  				break;  			case "particleTemplate":  				if (children [c].HasChildNodes) {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  				}  				else {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  				}  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  				break;  			case "scaleAnimation":  				emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  				break;  			case "sfxSpawner":  				emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  				break;  			case "zAnimation":  				emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  				break;  			default:  				break;  			}  		}  		res.AddEmitter (emitter);  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "Built particle system " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadParticleFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: try {  	var res = new ParticleSystem (templateId);  	XmlNode template = GameFactory.xdoc.SelectSingleNode ("//particle[@id='" + templateId + "']");  	if (XmlUtilities.GetString (template' "flip"' "true") == "false") {  		flip = false;  	}  	var xCoeff = flip ? -1f : 1f;  	var angleCoeff = flip ? 3.1415f : 0f;  	res.TTL = XmlUtilities.GetInt (template' "ttl");  	if (res.TTL < 0)  		res.TTL = int.MaxValue;  	res.Layer = layer;  	res.Position = new Vector2f (x' y);  	var emitters = template.SelectNodes ("./emitter");  	for (int e = 0; e < emitters.Count; e++) {  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  		var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  		var emitter = new Emitter (res' startDelay);  		emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  		emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  		emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  		emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  		emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  		if (emitter.TTL < 0)  			emitter.TTL = int.MaxValue;  		emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  		var children = emitters [e].ChildNodes;  		for (var c = 0; c < children.Count; c++) {  			switch (children [c].Name) {  			case "boxSpawner":  				emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  				break;  			case "burstSpawner":  				emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  				break;  			case "burstInSpawner":  				emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  				break;  			case "colorAnimation":  				var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  				var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					startColor.A = (byte)buff [3];  				buff = XmlUtilities.GetIntArray (children [c]' "endColor");  				var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					endColor.A = (byte)buff [3];  				emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  				break;  			case "colorPicker":  				var cps = new ColorPickerSpawner ();  				var colors = children [c].SelectNodes ("./color");  				for (int i = 0; i < colors.Count; i++) {  					var color = XmlUtilities.GetIntArray (colors [i]' "select");  					switch (color.Length) {  					case 3:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  						break;  					case 4:  						cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  						break;  					default:  						break;  					}  				}  				emitter.AddVariator (cps);  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  				break;  			case "fade":  				emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  				break;  			case "gravity":  				emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  				break;  			case "gridSpawner":  				emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  				break;  			case "lightSpawner":  				buff = XmlUtilities.GetIntArray (children [c]' "color");  				var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  				if (buff.Length > 3)  					lightColor.A = (byte)buff [3];  				emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  				break;  			case "particleTemplate":  				if (children [c].HasChildNodes) {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  				}  				else {  					emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  				}  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  				break;  			case "scaleAnimation":  				emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  				break;  			case "sfxSpawner":  				emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  				break;  			case "zAnimation":  				emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  				Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  				break;  			default:  				break;  			}  		}  		res.AddEmitter (emitter);  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "Built particle system " + templateId);  	return res;  }  catch (Exception ex) {  	Logger.Warning ("GameFactory"' "LoadParticleFromTemplate"' ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int e = 0; e < emitters.Count; e++) {  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  	var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  	var emitter = new Emitter (res' startDelay);  	emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  	emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  	emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  	emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  	emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  	if (emitter.TTL < 0)  		emitter.TTL = int.MaxValue;  	emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  	var children = emitters [e].ChildNodes;  	for (var c = 0; c < children.Count; c++) {  		switch (children [c].Name) {  		case "boxSpawner":  			emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  			break;  		case "burstSpawner":  			emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  			break;  		case "burstInSpawner":  			emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  			break;  		case "colorAnimation":  			var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  			var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				startColor.A = (byte)buff [3];  			buff = XmlUtilities.GetIntArray (children [c]' "endColor");  			var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				endColor.A = (byte)buff [3];  			emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  			break;  		case "colorPicker":  			var cps = new ColorPickerSpawner ();  			var colors = children [c].SelectNodes ("./color");  			for (int i = 0; i < colors.Count; i++) {  				var color = XmlUtilities.GetIntArray (colors [i]' "select");  				switch (color.Length) {  				case 3:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  					break;  				case 4:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  					break;  				default:  					break;  				}  			}  			emitter.AddVariator (cps);  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  			break;  		case "fade":  			emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  			break;  		case "gravity":  			emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  			break;  		case "gridSpawner":  			emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  			break;  		case "lightSpawner":  			buff = XmlUtilities.GetIntArray (children [c]' "color");  			var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				lightColor.A = (byte)buff [3];  			emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  			break;  		case "particleTemplate":  			if (children [c].HasChildNodes) {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  			}  			else {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  			}  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  			break;  		case "scaleAnimation":  			emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  			break;  		case "sfxSpawner":  			emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  			break;  		case "zAnimation":  			emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  			break;  		default:  			break;  		}  	}  	res.AddEmitter (emitter);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int e = 0; e < emitters.Count; e++) {  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  	var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  	var emitter = new Emitter (res' startDelay);  	emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  	emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  	emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  	emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  	emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  	if (emitter.TTL < 0)  		emitter.TTL = int.MaxValue;  	emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  	var children = emitters [e].ChildNodes;  	for (var c = 0; c < children.Count; c++) {  		switch (children [c].Name) {  		case "boxSpawner":  			emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  			break;  		case "burstSpawner":  			emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  			break;  		case "burstInSpawner":  			emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  			break;  		case "colorAnimation":  			var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  			var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				startColor.A = (byte)buff [3];  			buff = XmlUtilities.GetIntArray (children [c]' "endColor");  			var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				endColor.A = (byte)buff [3];  			emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  			break;  		case "colorPicker":  			var cps = new ColorPickerSpawner ();  			var colors = children [c].SelectNodes ("./color");  			for (int i = 0; i < colors.Count; i++) {  				var color = XmlUtilities.GetIntArray (colors [i]' "select");  				switch (color.Length) {  				case 3:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  					break;  				case 4:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  					break;  				default:  					break;  				}  			}  			emitter.AddVariator (cps);  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  			break;  		case "fade":  			emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  			break;  		case "gravity":  			emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  			break;  		case "gridSpawner":  			emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  			break;  		case "lightSpawner":  			buff = XmlUtilities.GetIntArray (children [c]' "color");  			var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				lightColor.A = (byte)buff [3];  			emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  			break;  		case "particleTemplate":  			if (children [c].HasChildNodes) {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  			}  			else {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  			}  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  			break;  		case "scaleAnimation":  			emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  			break;  		case "sfxSpawner":  			emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  			break;  		case "zAnimation":  			emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  			break;  		default:  			break;  		}  	}  	res.AddEmitter (emitter);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int e = 0; e < emitters.Count; e++) {  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  	var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  	var emitter = new Emitter (res' startDelay);  	emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  	emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  	emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  	emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  	emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  	if (emitter.TTL < 0)  		emitter.TTL = int.MaxValue;  	emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  	var children = emitters [e].ChildNodes;  	for (var c = 0; c < children.Count; c++) {  		switch (children [c].Name) {  		case "boxSpawner":  			emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  			break;  		case "burstSpawner":  			emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  			break;  		case "burstInSpawner":  			emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  			break;  		case "colorAnimation":  			var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  			var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				startColor.A = (byte)buff [3];  			buff = XmlUtilities.GetIntArray (children [c]' "endColor");  			var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				endColor.A = (byte)buff [3];  			emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  			break;  		case "colorPicker":  			var cps = new ColorPickerSpawner ();  			var colors = children [c].SelectNodes ("./color");  			for (int i = 0; i < colors.Count; i++) {  				var color = XmlUtilities.GetIntArray (colors [i]' "select");  				switch (color.Length) {  				case 3:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  					break;  				case 4:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  					break;  				default:  					break;  				}  			}  			emitter.AddVariator (cps);  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  			break;  		case "fade":  			emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  			break;  		case "gravity":  			emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  			break;  		case "gridSpawner":  			emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  			break;  		case "lightSpawner":  			buff = XmlUtilities.GetIntArray (children [c]' "color");  			var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				lightColor.A = (byte)buff [3];  			emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  			break;  		case "particleTemplate":  			if (children [c].HasChildNodes) {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  			}  			else {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  			}  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  			break;  		case "scaleAnimation":  			emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  			break;  		case "sfxSpawner":  			emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  			break;  		case "zAnimation":  			emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  			break;  		default:  			break;  		}  	}  	res.AddEmitter (emitter);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int e = 0; e < emitters.Count; e++) {  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  	var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  	var emitter = new Emitter (res' startDelay);  	emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  	emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  	emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  	emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  	emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  	if (emitter.TTL < 0)  		emitter.TTL = int.MaxValue;  	emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  	var children = emitters [e].ChildNodes;  	for (var c = 0; c < children.Count; c++) {  		switch (children [c].Name) {  		case "boxSpawner":  			emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  			break;  		case "burstSpawner":  			emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  			break;  		case "burstInSpawner":  			emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  			break;  		case "colorAnimation":  			var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  			var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				startColor.A = (byte)buff [3];  			buff = XmlUtilities.GetIntArray (children [c]' "endColor");  			var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				endColor.A = (byte)buff [3];  			emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  			break;  		case "colorPicker":  			var cps = new ColorPickerSpawner ();  			var colors = children [c].SelectNodes ("./color");  			for (int i = 0; i < colors.Count; i++) {  				var color = XmlUtilities.GetIntArray (colors [i]' "select");  				switch (color.Length) {  				case 3:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  					break;  				case 4:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  					break;  				default:  					break;  				}  			}  			emitter.AddVariator (cps);  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  			break;  		case "fade":  			emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  			break;  		case "gravity":  			emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  			break;  		case "gridSpawner":  			emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  			break;  		case "lightSpawner":  			buff = XmlUtilities.GetIntArray (children [c]' "color");  			var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				lightColor.A = (byte)buff [3];  			emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  			break;  		case "particleTemplate":  			if (children [c].HasChildNodes) {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  			}  			else {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  			}  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  			break;  		case "scaleAnimation":  			emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  			break;  		case "sfxSpawner":  			emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  			break;  		case "zAnimation":  			emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  			break;  		default:  			break;  		}  	}  	res.AddEmitter (emitter);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int e = 0; e < emitters.Count; e++) {  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  	var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  	var emitter = new Emitter (res' startDelay);  	emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  	emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  	emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  	emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  	emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  	if (emitter.TTL < 0)  		emitter.TTL = int.MaxValue;  	emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  	var children = emitters [e].ChildNodes;  	for (var c = 0; c < children.Count; c++) {  		switch (children [c].Name) {  		case "boxSpawner":  			emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  			break;  		case "burstSpawner":  			emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  			break;  		case "burstInSpawner":  			emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  			break;  		case "colorAnimation":  			var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  			var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				startColor.A = (byte)buff [3];  			buff = XmlUtilities.GetIntArray (children [c]' "endColor");  			var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				endColor.A = (byte)buff [3];  			emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  			break;  		case "colorPicker":  			var cps = new ColorPickerSpawner ();  			var colors = children [c].SelectNodes ("./color");  			for (int i = 0; i < colors.Count; i++) {  				var color = XmlUtilities.GetIntArray (colors [i]' "select");  				switch (color.Length) {  				case 3:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  					break;  				case 4:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  					break;  				default:  					break;  				}  			}  			emitter.AddVariator (cps);  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  			break;  		case "fade":  			emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  			break;  		case "gravity":  			emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  			break;  		case "gridSpawner":  			emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  			break;  		case "lightSpawner":  			buff = XmlUtilities.GetIntArray (children [c]' "color");  			var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				lightColor.A = (byte)buff [3];  			emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  			break;  		case "particleTemplate":  			if (children [c].HasChildNodes) {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  			}  			else {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  			}  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  			break;  		case "scaleAnimation":  			emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  			break;  		case "sfxSpawner":  			emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  			break;  		case "zAnimation":  			emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  			break;  		default:  			break;  		}  	}  	res.AddEmitter (emitter);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int e = 0; e < emitters.Count; e++) {  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  	var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  	var emitter = new Emitter (res' startDelay);  	emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  	emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  	emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  	emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  	emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  	if (emitter.TTL < 0)  		emitter.TTL = int.MaxValue;  	emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  	var children = emitters [e].ChildNodes;  	for (var c = 0; c < children.Count; c++) {  		switch (children [c].Name) {  		case "boxSpawner":  			emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  			break;  		case "burstSpawner":  			emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  			break;  		case "burstInSpawner":  			emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  			break;  		case "colorAnimation":  			var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  			var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				startColor.A = (byte)buff [3];  			buff = XmlUtilities.GetIntArray (children [c]' "endColor");  			var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				endColor.A = (byte)buff [3];  			emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  			break;  		case "colorPicker":  			var cps = new ColorPickerSpawner ();  			var colors = children [c].SelectNodes ("./color");  			for (int i = 0; i < colors.Count; i++) {  				var color = XmlUtilities.GetIntArray (colors [i]' "select");  				switch (color.Length) {  				case 3:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  					break;  				case 4:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  					break;  				default:  					break;  				}  			}  			emitter.AddVariator (cps);  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  			break;  		case "fade":  			emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  			break;  		case "gravity":  			emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  			break;  		case "gridSpawner":  			emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  			break;  		case "lightSpawner":  			buff = XmlUtilities.GetIntArray (children [c]' "color");  			var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				lightColor.A = (byte)buff [3];  			emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  			break;  		case "particleTemplate":  			if (children [c].HasChildNodes) {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  			}  			else {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  			}  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  			break;  		case "scaleAnimation":  			emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  			break;  		case "sfxSpawner":  			emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  			break;  		case "zAnimation":  			emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  			break;  		default:  			break;  		}  	}  	res.AddEmitter (emitter);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int e = 0; e < emitters.Count; e++) {  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  	var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  	var emitter = new Emitter (res' startDelay);  	emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  	emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  	emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  	emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  	emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  	if (emitter.TTL < 0)  		emitter.TTL = int.MaxValue;  	emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  	var children = emitters [e].ChildNodes;  	for (var c = 0; c < children.Count; c++) {  		switch (children [c].Name) {  		case "boxSpawner":  			emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  			break;  		case "burstSpawner":  			emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  			break;  		case "burstInSpawner":  			emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  			break;  		case "colorAnimation":  			var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  			var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				startColor.A = (byte)buff [3];  			buff = XmlUtilities.GetIntArray (children [c]' "endColor");  			var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				endColor.A = (byte)buff [3];  			emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  			break;  		case "colorPicker":  			var cps = new ColorPickerSpawner ();  			var colors = children [c].SelectNodes ("./color");  			for (int i = 0; i < colors.Count; i++) {  				var color = XmlUtilities.GetIntArray (colors [i]' "select");  				switch (color.Length) {  				case 3:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  					break;  				case 4:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  					break;  				default:  					break;  				}  			}  			emitter.AddVariator (cps);  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  			break;  		case "fade":  			emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  			break;  		case "gravity":  			emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  			break;  		case "gridSpawner":  			emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  			break;  		case "lightSpawner":  			buff = XmlUtilities.GetIntArray (children [c]' "color");  			var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				lightColor.A = (byte)buff [3];  			emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  			break;  		case "particleTemplate":  			if (children [c].HasChildNodes) {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  			}  			else {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  			}  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  			break;  		case "scaleAnimation":  			emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  			break;  		case "sfxSpawner":  			emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  			break;  		case "zAnimation":  			emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  			break;  		default:  			break;  		}  	}  	res.AddEmitter (emitter);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int e = 0; e < emitters.Count; e++) {  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  	var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  	var emitter = new Emitter (res' startDelay);  	emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  	emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  	emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  	emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  	emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  	if (emitter.TTL < 0)  		emitter.TTL = int.MaxValue;  	emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  	var children = emitters [e].ChildNodes;  	for (var c = 0; c < children.Count; c++) {  		switch (children [c].Name) {  		case "boxSpawner":  			emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  			break;  		case "burstSpawner":  			emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  			break;  		case "burstInSpawner":  			emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  			break;  		case "colorAnimation":  			var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  			var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				startColor.A = (byte)buff [3];  			buff = XmlUtilities.GetIntArray (children [c]' "endColor");  			var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				endColor.A = (byte)buff [3];  			emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  			break;  		case "colorPicker":  			var cps = new ColorPickerSpawner ();  			var colors = children [c].SelectNodes ("./color");  			for (int i = 0; i < colors.Count; i++) {  				var color = XmlUtilities.GetIntArray (colors [i]' "select");  				switch (color.Length) {  				case 3:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  					break;  				case 4:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  					break;  				default:  					break;  				}  			}  			emitter.AddVariator (cps);  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  			break;  		case "fade":  			emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  			break;  		case "gravity":  			emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  			break;  		case "gridSpawner":  			emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  			break;  		case "lightSpawner":  			buff = XmlUtilities.GetIntArray (children [c]' "color");  			var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				lightColor.A = (byte)buff [3];  			emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  			break;  		case "particleTemplate":  			if (children [c].HasChildNodes) {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  			}  			else {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  			}  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  			break;  		case "scaleAnimation":  			emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  			break;  		case "sfxSpawner":  			emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  			break;  		case "zAnimation":  			emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  			break;  		default:  			break;  		}  	}  	res.AddEmitter (emitter);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int e = 0; e < emitters.Count; e++) {  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  	var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  	var emitter = new Emitter (res' startDelay);  	emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  	emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  	emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  	emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  	emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  	if (emitter.TTL < 0)  		emitter.TTL = int.MaxValue;  	emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  	var children = emitters [e].ChildNodes;  	for (var c = 0; c < children.Count; c++) {  		switch (children [c].Name) {  		case "boxSpawner":  			emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  			break;  		case "burstSpawner":  			emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  			break;  		case "burstInSpawner":  			emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  			break;  		case "colorAnimation":  			var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  			var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				startColor.A = (byte)buff [3];  			buff = XmlUtilities.GetIntArray (children [c]' "endColor");  			var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				endColor.A = (byte)buff [3];  			emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  			break;  		case "colorPicker":  			var cps = new ColorPickerSpawner ();  			var colors = children [c].SelectNodes ("./color");  			for (int i = 0; i < colors.Count; i++) {  				var color = XmlUtilities.GetIntArray (colors [i]' "select");  				switch (color.Length) {  				case 3:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  					break;  				case 4:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  					break;  				default:  					break;  				}  			}  			emitter.AddVariator (cps);  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  			break;  		case "fade":  			emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  			break;  		case "gravity":  			emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  			break;  		case "gridSpawner":  			emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  			break;  		case "lightSpawner":  			buff = XmlUtilities.GetIntArray (children [c]' "color");  			var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				lightColor.A = (byte)buff [3];  			emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  			break;  		case "particleTemplate":  			if (children [c].HasChildNodes) {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  			}  			else {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  			}  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  			break;  		case "scaleAnimation":  			emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  			break;  		case "sfxSpawner":  			emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  			break;  		case "zAnimation":  			emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  			break;  		default:  			break;  		}  	}  	res.AddEmitter (emitter);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int e = 0; e < emitters.Count; e++) {  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  	var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  	var emitter = new Emitter (res' startDelay);  	emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  	emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  	emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  	emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  	emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  	if (emitter.TTL < 0)  		emitter.TTL = int.MaxValue;  	emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  	var children = emitters [e].ChildNodes;  	for (var c = 0; c < children.Count; c++) {  		switch (children [c].Name) {  		case "boxSpawner":  			emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  			break;  		case "burstSpawner":  			emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  			break;  		case "burstInSpawner":  			emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  			break;  		case "colorAnimation":  			var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  			var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				startColor.A = (byte)buff [3];  			buff = XmlUtilities.GetIntArray (children [c]' "endColor");  			var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				endColor.A = (byte)buff [3];  			emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  			break;  		case "colorPicker":  			var cps = new ColorPickerSpawner ();  			var colors = children [c].SelectNodes ("./color");  			for (int i = 0; i < colors.Count; i++) {  				var color = XmlUtilities.GetIntArray (colors [i]' "select");  				switch (color.Length) {  				case 3:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  					break;  				case 4:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  					break;  				default:  					break;  				}  			}  			emitter.AddVariator (cps);  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  			break;  		case "fade":  			emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  			break;  		case "gravity":  			emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  			break;  		case "gridSpawner":  			emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  			break;  		case "lightSpawner":  			buff = XmlUtilities.GetIntArray (children [c]' "color");  			var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				lightColor.A = (byte)buff [3];  			emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  			break;  		case "particleTemplate":  			if (children [c].HasChildNodes) {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  			}  			else {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  			}  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  			break;  		case "scaleAnimation":  			emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  			break;  		case "sfxSpawner":  			emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  			break;  		case "zAnimation":  			emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  			break;  		default:  			break;  		}  	}  	res.AddEmitter (emitter);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int e = 0; e < emitters.Count; e++) {  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  	var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  	var emitter = new Emitter (res' startDelay);  	emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  	emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  	emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  	emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  	emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  	if (emitter.TTL < 0)  		emitter.TTL = int.MaxValue;  	emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  	var children = emitters [e].ChildNodes;  	for (var c = 0; c < children.Count; c++) {  		switch (children [c].Name) {  		case "boxSpawner":  			emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  			break;  		case "burstSpawner":  			emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  			break;  		case "burstInSpawner":  			emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  			break;  		case "colorAnimation":  			var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  			var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				startColor.A = (byte)buff [3];  			buff = XmlUtilities.GetIntArray (children [c]' "endColor");  			var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				endColor.A = (byte)buff [3];  			emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  			break;  		case "colorPicker":  			var cps = new ColorPickerSpawner ();  			var colors = children [c].SelectNodes ("./color");  			for (int i = 0; i < colors.Count; i++) {  				var color = XmlUtilities.GetIntArray (colors [i]' "select");  				switch (color.Length) {  				case 3:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  					break;  				case 4:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  					break;  				default:  					break;  				}  			}  			emitter.AddVariator (cps);  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  			break;  		case "fade":  			emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  			break;  		case "gravity":  			emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  			break;  		case "gridSpawner":  			emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  			break;  		case "lightSpawner":  			buff = XmlUtilities.GetIntArray (children [c]' "color");  			var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				lightColor.A = (byte)buff [3];  			emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  			break;  		case "particleTemplate":  			if (children [c].HasChildNodes) {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  			}  			else {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  			}  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  			break;  		case "scaleAnimation":  			emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  			break;  		case "sfxSpawner":  			emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  			break;  		case "zAnimation":  			emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  			break;  		default:  			break;  		}  	}  	res.AddEmitter (emitter);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int e = 0; e < emitters.Count; e++) {  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  	var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  	var emitter = new Emitter (res' startDelay);  	emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  	emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  	emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  	emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  	emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  	if (emitter.TTL < 0)  		emitter.TTL = int.MaxValue;  	emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  	var children = emitters [e].ChildNodes;  	for (var c = 0; c < children.Count; c++) {  		switch (children [c].Name) {  		case "boxSpawner":  			emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  			break;  		case "burstSpawner":  			emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  			break;  		case "burstInSpawner":  			emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  			break;  		case "colorAnimation":  			var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  			var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				startColor.A = (byte)buff [3];  			buff = XmlUtilities.GetIntArray (children [c]' "endColor");  			var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				endColor.A = (byte)buff [3];  			emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  			break;  		case "colorPicker":  			var cps = new ColorPickerSpawner ();  			var colors = children [c].SelectNodes ("./color");  			for (int i = 0; i < colors.Count; i++) {  				var color = XmlUtilities.GetIntArray (colors [i]' "select");  				switch (color.Length) {  				case 3:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  					break;  				case 4:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  					break;  				default:  					break;  				}  			}  			emitter.AddVariator (cps);  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  			break;  		case "fade":  			emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  			break;  		case "gravity":  			emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  			break;  		case "gridSpawner":  			emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  			break;  		case "lightSpawner":  			buff = XmlUtilities.GetIntArray (children [c]' "color");  			var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				lightColor.A = (byte)buff [3];  			emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  			break;  		case "particleTemplate":  			if (children [c].HasChildNodes) {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  			}  			else {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  			}  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  			break;  		case "scaleAnimation":  			emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  			break;  		case "sfxSpawner":  			emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  			break;  		case "zAnimation":  			emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  			break;  		default:  			break;  		}  	}  	res.AddEmitter (emitter);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int e = 0; e < emitters.Count; e++) {  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  	var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  	var emitter = new Emitter (res' startDelay);  	emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  	emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  	emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  	emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  	emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  	if (emitter.TTL < 0)  		emitter.TTL = int.MaxValue;  	emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  	var children = emitters [e].ChildNodes;  	for (var c = 0; c < children.Count; c++) {  		switch (children [c].Name) {  		case "boxSpawner":  			emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  			break;  		case "burstSpawner":  			emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  			break;  		case "burstInSpawner":  			emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  			break;  		case "colorAnimation":  			var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  			var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				startColor.A = (byte)buff [3];  			buff = XmlUtilities.GetIntArray (children [c]' "endColor");  			var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				endColor.A = (byte)buff [3];  			emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  			break;  		case "colorPicker":  			var cps = new ColorPickerSpawner ();  			var colors = children [c].SelectNodes ("./color");  			for (int i = 0; i < colors.Count; i++) {  				var color = XmlUtilities.GetIntArray (colors [i]' "select");  				switch (color.Length) {  				case 3:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  					break;  				case 4:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  					break;  				default:  					break;  				}  			}  			emitter.AddVariator (cps);  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  			break;  		case "fade":  			emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  			break;  		case "gravity":  			emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  			break;  		case "gridSpawner":  			emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  			break;  		case "lightSpawner":  			buff = XmlUtilities.GetIntArray (children [c]' "color");  			var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				lightColor.A = (byte)buff [3];  			emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  			break;  		case "particleTemplate":  			if (children [c].HasChildNodes) {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  			}  			else {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  			}  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  			break;  		case "scaleAnimation":  			emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  			break;  		case "sfxSpawner":  			emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  			break;  		case "zAnimation":  			emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  			break;  		default:  			break;  		}  	}  	res.AddEmitter (emitter);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int e = 0; e < emitters.Count; e++) {  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New emitter: " + emitters [e].ToString ());  	var startDelay = XmlUtilities.GetInt (emitters [e]' "startDelay");  	var emitter = new Emitter (res' startDelay);  	emitter.Offset = new Vector2f (XmlUtilities.GetFloat (emitters [e]' "offsetX") * xCoeff' XmlUtilities.GetFloat (emitters [e]' "offsetY"));  	emitter.ParticleTTL = XmlUtilities.GetInt (emitters [e]' "particleTtl");  	emitter.SpawnCount = XmlUtilities.GetInt (emitters [e]' "spawnCount");  	emitter.SpawnDeltaTime = XmlUtilities.GetInt (emitters [e]' "spawnDeltaTime");  	emitter.TTL = XmlUtilities.GetInt (emitters [e]' "ttl");  	if (emitter.TTL < 0)  		emitter.TTL = int.MaxValue;  	emitter.ZIndex = XmlUtilities.GetInt (emitters [e]' "zIndex"' 0);  	var children = emitters [e].ChildNodes;  	for (var c = 0; c < children.Count; c++) {  		switch (children [c].Name) {  		case "boxSpawner":  			emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  			break;  		case "burstSpawner":  			emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  			break;  		case "burstInSpawner":  			emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  			break;  		case "colorAnimation":  			var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  			var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				startColor.A = (byte)buff [3];  			buff = XmlUtilities.GetIntArray (children [c]' "endColor");  			var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				endColor.A = (byte)buff [3];  			emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  			break;  		case "colorPicker":  			var cps = new ColorPickerSpawner ();  			var colors = children [c].SelectNodes ("./color");  			for (int i = 0; i < colors.Count; i++) {  				var color = XmlUtilities.GetIntArray (colors [i]' "select");  				switch (color.Length) {  				case 3:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  					break;  				case 4:  					cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  					break;  				default:  					break;  				}  			}  			emitter.AddVariator (cps);  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  			break;  		case "fade":  			emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  			break;  		case "gravity":  			emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  			break;  		case "gridSpawner":  			emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  			break;  		case "lightSpawner":  			buff = XmlUtilities.GetIntArray (children [c]' "color");  			var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  			if (buff.Length > 3)  				lightColor.A = (byte)buff [3];  			emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  			break;  		case "particleTemplate":  			if (children [c].HasChildNodes) {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  			}  			else {  				emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  			}  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  			break;  		case "scaleAnimation":  			emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  			break;  		case "sfxSpawner":  			emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  			break;  		case "zAnimation":  			emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  			Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  			break;  		default:  			break;  		}  	}  	res.AddEmitter (emitter);  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (var c = 0; c < children.Count; c++) {  	switch (children [c].Name) {  	case "boxSpawner":  		emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  		break;  	case "burstSpawner":  		emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  		break;  	case "burstInSpawner":  		emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  		break;  	case "colorAnimation":  		var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  		var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			startColor.A = (byte)buff [3];  		buff = XmlUtilities.GetIntArray (children [c]' "endColor");  		var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			endColor.A = (byte)buff [3];  		emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  		break;  	case "colorPicker":  		var cps = new ColorPickerSpawner ();  		var colors = children [c].SelectNodes ("./color");  		for (int i = 0; i < colors.Count; i++) {  			var color = XmlUtilities.GetIntArray (colors [i]' "select");  			switch (color.Length) {  			case 3:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  				break;  			case 4:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  				break;  			default:  				break;  			}  		}  		emitter.AddVariator (cps);  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  		break;  	case "fade":  		emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  		break;  	case "gravity":  		emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  		break;  	case "gridSpawner":  		emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  		break;  	case "lightSpawner":  		buff = XmlUtilities.GetIntArray (children [c]' "color");  		var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			lightColor.A = (byte)buff [3];  		emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  		break;  	case "particleTemplate":  		if (children [c].HasChildNodes) {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  		}  		else {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  		}  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  		break;  	case "scaleAnimation":  		emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  		break;  	case "sfxSpawner":  		emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  		break;  	case "zAnimation":  		emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (var c = 0; c < children.Count; c++) {  	switch (children [c].Name) {  	case "boxSpawner":  		emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  		break;  	case "burstSpawner":  		emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  		break;  	case "burstInSpawner":  		emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  		break;  	case "colorAnimation":  		var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  		var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			startColor.A = (byte)buff [3];  		buff = XmlUtilities.GetIntArray (children [c]' "endColor");  		var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			endColor.A = (byte)buff [3];  		emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  		break;  	case "colorPicker":  		var cps = new ColorPickerSpawner ();  		var colors = children [c].SelectNodes ("./color");  		for (int i = 0; i < colors.Count; i++) {  			var color = XmlUtilities.GetIntArray (colors [i]' "select");  			switch (color.Length) {  			case 3:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  				break;  			case 4:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  				break;  			default:  				break;  			}  		}  		emitter.AddVariator (cps);  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  		break;  	case "fade":  		emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  		break;  	case "gravity":  		emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  		break;  	case "gridSpawner":  		emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  		break;  	case "lightSpawner":  		buff = XmlUtilities.GetIntArray (children [c]' "color");  		var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			lightColor.A = (byte)buff [3];  		emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  		break;  	case "particleTemplate":  		if (children [c].HasChildNodes) {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  		}  		else {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  		}  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  		break;  	case "scaleAnimation":  		emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  		break;  	case "sfxSpawner":  		emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  		break;  	case "zAnimation":  		emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (var c = 0; c < children.Count; c++) {  	switch (children [c].Name) {  	case "boxSpawner":  		emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  		break;  	case "burstSpawner":  		emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  		break;  	case "burstInSpawner":  		emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  		break;  	case "colorAnimation":  		var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  		var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			startColor.A = (byte)buff [3];  		buff = XmlUtilities.GetIntArray (children [c]' "endColor");  		var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			endColor.A = (byte)buff [3];  		emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  		break;  	case "colorPicker":  		var cps = new ColorPickerSpawner ();  		var colors = children [c].SelectNodes ("./color");  		for (int i = 0; i < colors.Count; i++) {  			var color = XmlUtilities.GetIntArray (colors [i]' "select");  			switch (color.Length) {  			case 3:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  				break;  			case 4:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  				break;  			default:  				break;  			}  		}  		emitter.AddVariator (cps);  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  		break;  	case "fade":  		emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  		break;  	case "gravity":  		emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  		break;  	case "gridSpawner":  		emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  		break;  	case "lightSpawner":  		buff = XmlUtilities.GetIntArray (children [c]' "color");  		var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			lightColor.A = (byte)buff [3];  		emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  		break;  	case "particleTemplate":  		if (children [c].HasChildNodes) {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  		}  		else {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  		}  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  		break;  	case "scaleAnimation":  		emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  		break;  	case "sfxSpawner":  		emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  		break;  	case "zAnimation":  		emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (var c = 0; c < children.Count; c++) {  	switch (children [c].Name) {  	case "boxSpawner":  		emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  		break;  	case "burstSpawner":  		emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  		break;  	case "burstInSpawner":  		emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  		break;  	case "colorAnimation":  		var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  		var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			startColor.A = (byte)buff [3];  		buff = XmlUtilities.GetIntArray (children [c]' "endColor");  		var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			endColor.A = (byte)buff [3];  		emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  		break;  	case "colorPicker":  		var cps = new ColorPickerSpawner ();  		var colors = children [c].SelectNodes ("./color");  		for (int i = 0; i < colors.Count; i++) {  			var color = XmlUtilities.GetIntArray (colors [i]' "select");  			switch (color.Length) {  			case 3:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  				break;  			case 4:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  				break;  			default:  				break;  			}  		}  		emitter.AddVariator (cps);  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  		break;  	case "fade":  		emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  		break;  	case "gravity":  		emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  		break;  	case "gridSpawner":  		emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  		break;  	case "lightSpawner":  		buff = XmlUtilities.GetIntArray (children [c]' "color");  		var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			lightColor.A = (byte)buff [3];  		emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  		break;  	case "particleTemplate":  		if (children [c].HasChildNodes) {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  		}  		else {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  		}  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  		break;  	case "scaleAnimation":  		emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  		break;  	case "sfxSpawner":  		emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  		break;  	case "zAnimation":  		emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (var c = 0; c < children.Count; c++) {  	switch (children [c].Name) {  	case "boxSpawner":  		emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  		break;  	case "burstSpawner":  		emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  		break;  	case "burstInSpawner":  		emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  		break;  	case "colorAnimation":  		var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  		var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			startColor.A = (byte)buff [3];  		buff = XmlUtilities.GetIntArray (children [c]' "endColor");  		var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			endColor.A = (byte)buff [3];  		emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  		break;  	case "colorPicker":  		var cps = new ColorPickerSpawner ();  		var colors = children [c].SelectNodes ("./color");  		for (int i = 0; i < colors.Count; i++) {  			var color = XmlUtilities.GetIntArray (colors [i]' "select");  			switch (color.Length) {  			case 3:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  				break;  			case 4:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  				break;  			default:  				break;  			}  		}  		emitter.AddVariator (cps);  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  		break;  	case "fade":  		emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  		break;  	case "gravity":  		emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  		break;  	case "gridSpawner":  		emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  		break;  	case "lightSpawner":  		buff = XmlUtilities.GetIntArray (children [c]' "color");  		var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			lightColor.A = (byte)buff [3];  		emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  		break;  	case "particleTemplate":  		if (children [c].HasChildNodes) {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  		}  		else {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  		}  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  		break;  	case "scaleAnimation":  		emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  		break;  	case "sfxSpawner":  		emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  		break;  	case "zAnimation":  		emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (var c = 0; c < children.Count; c++) {  	switch (children [c].Name) {  	case "boxSpawner":  		emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  		break;  	case "burstSpawner":  		emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  		break;  	case "burstInSpawner":  		emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  		break;  	case "colorAnimation":  		var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  		var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			startColor.A = (byte)buff [3];  		buff = XmlUtilities.GetIntArray (children [c]' "endColor");  		var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			endColor.A = (byte)buff [3];  		emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  		break;  	case "colorPicker":  		var cps = new ColorPickerSpawner ();  		var colors = children [c].SelectNodes ("./color");  		for (int i = 0; i < colors.Count; i++) {  			var color = XmlUtilities.GetIntArray (colors [i]' "select");  			switch (color.Length) {  			case 3:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  				break;  			case 4:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  				break;  			default:  				break;  			}  		}  		emitter.AddVariator (cps);  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  		break;  	case "fade":  		emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  		break;  	case "gravity":  		emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  		break;  	case "gridSpawner":  		emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  		break;  	case "lightSpawner":  		buff = XmlUtilities.GetIntArray (children [c]' "color");  		var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			lightColor.A = (byte)buff [3];  		emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  		break;  	case "particleTemplate":  		if (children [c].HasChildNodes) {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  		}  		else {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  		}  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  		break;  	case "scaleAnimation":  		emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  		break;  	case "sfxSpawner":  		emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  		break;  	case "zAnimation":  		emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (var c = 0; c < children.Count; c++) {  	switch (children [c].Name) {  	case "boxSpawner":  		emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  		break;  	case "burstSpawner":  		emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  		break;  	case "burstInSpawner":  		emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  		break;  	case "colorAnimation":  		var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  		var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			startColor.A = (byte)buff [3];  		buff = XmlUtilities.GetIntArray (children [c]' "endColor");  		var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			endColor.A = (byte)buff [3];  		emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  		break;  	case "colorPicker":  		var cps = new ColorPickerSpawner ();  		var colors = children [c].SelectNodes ("./color");  		for (int i = 0; i < colors.Count; i++) {  			var color = XmlUtilities.GetIntArray (colors [i]' "select");  			switch (color.Length) {  			case 3:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  				break;  			case 4:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  				break;  			default:  				break;  			}  		}  		emitter.AddVariator (cps);  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  		break;  	case "fade":  		emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  		break;  	case "gravity":  		emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  		break;  	case "gridSpawner":  		emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  		break;  	case "lightSpawner":  		buff = XmlUtilities.GetIntArray (children [c]' "color");  		var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			lightColor.A = (byte)buff [3];  		emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  		break;  	case "particleTemplate":  		if (children [c].HasChildNodes) {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  		}  		else {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  		}  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  		break;  	case "scaleAnimation":  		emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  		break;  	case "sfxSpawner":  		emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  		break;  	case "zAnimation":  		emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (var c = 0; c < children.Count; c++) {  	switch (children [c].Name) {  	case "boxSpawner":  		emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  		break;  	case "burstSpawner":  		emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  		break;  	case "burstInSpawner":  		emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  		break;  	case "colorAnimation":  		var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  		var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			startColor.A = (byte)buff [3];  		buff = XmlUtilities.GetIntArray (children [c]' "endColor");  		var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			endColor.A = (byte)buff [3];  		emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  		break;  	case "colorPicker":  		var cps = new ColorPickerSpawner ();  		var colors = children [c].SelectNodes ("./color");  		for (int i = 0; i < colors.Count; i++) {  			var color = XmlUtilities.GetIntArray (colors [i]' "select");  			switch (color.Length) {  			case 3:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  				break;  			case 4:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  				break;  			default:  				break;  			}  		}  		emitter.AddVariator (cps);  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  		break;  	case "fade":  		emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  		break;  	case "gravity":  		emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  		break;  	case "gridSpawner":  		emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  		break;  	case "lightSpawner":  		buff = XmlUtilities.GetIntArray (children [c]' "color");  		var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			lightColor.A = (byte)buff [3];  		emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  		break;  	case "particleTemplate":  		if (children [c].HasChildNodes) {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  		}  		else {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  		}  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  		break;  	case "scaleAnimation":  		emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  		break;  	case "sfxSpawner":  		emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  		break;  	case "zAnimation":  		emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (var c = 0; c < children.Count; c++) {  	switch (children [c].Name) {  	case "boxSpawner":  		emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  		break;  	case "burstSpawner":  		emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  		break;  	case "burstInSpawner":  		emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  		break;  	case "colorAnimation":  		var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  		var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			startColor.A = (byte)buff [3];  		buff = XmlUtilities.GetIntArray (children [c]' "endColor");  		var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			endColor.A = (byte)buff [3];  		emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  		break;  	case "colorPicker":  		var cps = new ColorPickerSpawner ();  		var colors = children [c].SelectNodes ("./color");  		for (int i = 0; i < colors.Count; i++) {  			var color = XmlUtilities.GetIntArray (colors [i]' "select");  			switch (color.Length) {  			case 3:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  				break;  			case 4:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  				break;  			default:  				break;  			}  		}  		emitter.AddVariator (cps);  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  		break;  	case "fade":  		emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  		break;  	case "gravity":  		emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  		break;  	case "gridSpawner":  		emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  		break;  	case "lightSpawner":  		buff = XmlUtilities.GetIntArray (children [c]' "color");  		var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			lightColor.A = (byte)buff [3];  		emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  		break;  	case "particleTemplate":  		if (children [c].HasChildNodes) {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  		}  		else {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  		}  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  		break;  	case "scaleAnimation":  		emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  		break;  	case "sfxSpawner":  		emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  		break;  	case "zAnimation":  		emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (var c = 0; c < children.Count; c++) {  	switch (children [c].Name) {  	case "boxSpawner":  		emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  		break;  	case "burstSpawner":  		emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  		break;  	case "burstInSpawner":  		emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  		break;  	case "colorAnimation":  		var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  		var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			startColor.A = (byte)buff [3];  		buff = XmlUtilities.GetIntArray (children [c]' "endColor");  		var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			endColor.A = (byte)buff [3];  		emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  		break;  	case "colorPicker":  		var cps = new ColorPickerSpawner ();  		var colors = children [c].SelectNodes ("./color");  		for (int i = 0; i < colors.Count; i++) {  			var color = XmlUtilities.GetIntArray (colors [i]' "select");  			switch (color.Length) {  			case 3:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  				break;  			case 4:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  				break;  			default:  				break;  			}  		}  		emitter.AddVariator (cps);  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  		break;  	case "fade":  		emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  		break;  	case "gravity":  		emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  		break;  	case "gridSpawner":  		emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  		break;  	case "lightSpawner":  		buff = XmlUtilities.GetIntArray (children [c]' "color");  		var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			lightColor.A = (byte)buff [3];  		emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  		break;  	case "particleTemplate":  		if (children [c].HasChildNodes) {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  		}  		else {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  		}  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  		break;  	case "scaleAnimation":  		emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  		break;  	case "sfxSpawner":  		emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  		break;  	case "zAnimation":  		emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (var c = 0; c < children.Count; c++) {  	switch (children [c].Name) {  	case "boxSpawner":  		emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  		break;  	case "burstSpawner":  		emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  		break;  	case "burstInSpawner":  		emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  		break;  	case "colorAnimation":  		var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  		var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			startColor.A = (byte)buff [3];  		buff = XmlUtilities.GetIntArray (children [c]' "endColor");  		var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			endColor.A = (byte)buff [3];  		emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  		break;  	case "colorPicker":  		var cps = new ColorPickerSpawner ();  		var colors = children [c].SelectNodes ("./color");  		for (int i = 0; i < colors.Count; i++) {  			var color = XmlUtilities.GetIntArray (colors [i]' "select");  			switch (color.Length) {  			case 3:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  				break;  			case 4:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  				break;  			default:  				break;  			}  		}  		emitter.AddVariator (cps);  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  		break;  	case "fade":  		emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  		break;  	case "gravity":  		emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  		break;  	case "gridSpawner":  		emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  		break;  	case "lightSpawner":  		buff = XmlUtilities.GetIntArray (children [c]' "color");  		var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			lightColor.A = (byte)buff [3];  		emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  		break;  	case "particleTemplate":  		if (children [c].HasChildNodes) {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  		}  		else {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  		}  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  		break;  	case "scaleAnimation":  		emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  		break;  	case "sfxSpawner":  		emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  		break;  	case "zAnimation":  		emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (var c = 0; c < children.Count; c++) {  	switch (children [c].Name) {  	case "boxSpawner":  		emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  		break;  	case "burstSpawner":  		emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  		break;  	case "burstInSpawner":  		emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  		break;  	case "colorAnimation":  		var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  		var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			startColor.A = (byte)buff [3];  		buff = XmlUtilities.GetIntArray (children [c]' "endColor");  		var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			endColor.A = (byte)buff [3];  		emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  		break;  	case "colorPicker":  		var cps = new ColorPickerSpawner ();  		var colors = children [c].SelectNodes ("./color");  		for (int i = 0; i < colors.Count; i++) {  			var color = XmlUtilities.GetIntArray (colors [i]' "select");  			switch (color.Length) {  			case 3:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  				break;  			case 4:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  				break;  			default:  				break;  			}  		}  		emitter.AddVariator (cps);  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  		break;  	case "fade":  		emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  		break;  	case "gravity":  		emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  		break;  	case "gridSpawner":  		emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  		break;  	case "lightSpawner":  		buff = XmlUtilities.GetIntArray (children [c]' "color");  		var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			lightColor.A = (byte)buff [3];  		emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  		break;  	case "particleTemplate":  		if (children [c].HasChildNodes) {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  		}  		else {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  		}  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  		break;  	case "scaleAnimation":  		emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  		break;  	case "sfxSpawner":  		emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  		break;  	case "zAnimation":  		emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (var c = 0; c < children.Count; c++) {  	switch (children [c].Name) {  	case "boxSpawner":  		emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  		break;  	case "burstSpawner":  		emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  		break;  	case "burstInSpawner":  		emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  		break;  	case "colorAnimation":  		var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  		var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			startColor.A = (byte)buff [3];  		buff = XmlUtilities.GetIntArray (children [c]' "endColor");  		var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			endColor.A = (byte)buff [3];  		emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  		break;  	case "colorPicker":  		var cps = new ColorPickerSpawner ();  		var colors = children [c].SelectNodes ("./color");  		for (int i = 0; i < colors.Count; i++) {  			var color = XmlUtilities.GetIntArray (colors [i]' "select");  			switch (color.Length) {  			case 3:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  				break;  			case 4:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  				break;  			default:  				break;  			}  		}  		emitter.AddVariator (cps);  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  		break;  	case "fade":  		emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  		break;  	case "gravity":  		emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  		break;  	case "gridSpawner":  		emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  		break;  	case "lightSpawner":  		buff = XmlUtilities.GetIntArray (children [c]' "color");  		var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			lightColor.A = (byte)buff [3];  		emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  		break;  	case "particleTemplate":  		if (children [c].HasChildNodes) {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  		}  		else {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  		}  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  		break;  	case "scaleAnimation":  		emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  		break;  	case "sfxSpawner":  		emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  		break;  	case "zAnimation":  		emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (var c = 0; c < children.Count; c++) {  	switch (children [c].Name) {  	case "boxSpawner":  		emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  		break;  	case "burstSpawner":  		emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  		break;  	case "burstInSpawner":  		emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  		break;  	case "colorAnimation":  		var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  		var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			startColor.A = (byte)buff [3];  		buff = XmlUtilities.GetIntArray (children [c]' "endColor");  		var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			endColor.A = (byte)buff [3];  		emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  		break;  	case "colorPicker":  		var cps = new ColorPickerSpawner ();  		var colors = children [c].SelectNodes ("./color");  		for (int i = 0; i < colors.Count; i++) {  			var color = XmlUtilities.GetIntArray (colors [i]' "select");  			switch (color.Length) {  			case 3:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  				break;  			case 4:  				cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  				break;  			default:  				break;  			}  		}  		emitter.AddVariator (cps);  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  		break;  	case "fade":  		emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  		break;  	case "gravity":  		emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  		break;  	case "gridSpawner":  		emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  		break;  	case "lightSpawner":  		buff = XmlUtilities.GetIntArray (children [c]' "color");  		var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  		if (buff.Length > 3)  			lightColor.A = (byte)buff [3];  		emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  		break;  	case "particleTemplate":  		if (children [c].HasChildNodes) {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  		}  		else {  			emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  		}  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  		break;  	case "scaleAnimation":  		emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  		break;  	case "sfxSpawner":  		emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  		break;  	case "zAnimation":  		emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  		Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (children [c].Name) {  case "boxSpawner":  	emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  	break;  case "burstSpawner":  	emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  	break;  case "burstInSpawner":  	emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  	break;  case "colorAnimation":  	var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  	var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		startColor.A = (byte)buff [3];  	buff = XmlUtilities.GetIntArray (children [c]' "endColor");  	var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		endColor.A = (byte)buff [3];  	emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  	break;  case "colorPicker":  	var cps = new ColorPickerSpawner ();  	var colors = children [c].SelectNodes ("./color");  	for (int i = 0; i < colors.Count; i++) {  		var color = XmlUtilities.GetIntArray (colors [i]' "select");  		switch (color.Length) {  		case 3:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  			break;  		case 4:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  			break;  		default:  			break;  		}  	}  	emitter.AddVariator (cps);  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  	break;  case "fade":  	emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  	break;  case "gravity":  	emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  	break;  case "gridSpawner":  	emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  	break;  case "lightSpawner":  	buff = XmlUtilities.GetIntArray (children [c]' "color");  	var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		lightColor.A = (byte)buff [3];  	emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  	break;  case "particleTemplate":  	if (children [c].HasChildNodes) {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  	}  	else {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  	break;  case "scaleAnimation":  	emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  	break;  case "sfxSpawner":  	emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  	break;  case "zAnimation":  	emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (children [c].Name) {  case "boxSpawner":  	emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  	break;  case "burstSpawner":  	emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  	break;  case "burstInSpawner":  	emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  	break;  case "colorAnimation":  	var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  	var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		startColor.A = (byte)buff [3];  	buff = XmlUtilities.GetIntArray (children [c]' "endColor");  	var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		endColor.A = (byte)buff [3];  	emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  	break;  case "colorPicker":  	var cps = new ColorPickerSpawner ();  	var colors = children [c].SelectNodes ("./color");  	for (int i = 0; i < colors.Count; i++) {  		var color = XmlUtilities.GetIntArray (colors [i]' "select");  		switch (color.Length) {  		case 3:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  			break;  		case 4:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  			break;  		default:  			break;  		}  	}  	emitter.AddVariator (cps);  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  	break;  case "fade":  	emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  	break;  case "gravity":  	emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  	break;  case "gridSpawner":  	emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  	break;  case "lightSpawner":  	buff = XmlUtilities.GetIntArray (children [c]' "color");  	var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		lightColor.A = (byte)buff [3];  	emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  	break;  case "particleTemplate":  	if (children [c].HasChildNodes) {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  	}  	else {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  	break;  case "scaleAnimation":  	emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  	break;  case "sfxSpawner":  	emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  	break;  case "zAnimation":  	emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (children [c].Name) {  case "boxSpawner":  	emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  	break;  case "burstSpawner":  	emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  	break;  case "burstInSpawner":  	emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  	break;  case "colorAnimation":  	var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  	var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		startColor.A = (byte)buff [3];  	buff = XmlUtilities.GetIntArray (children [c]' "endColor");  	var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		endColor.A = (byte)buff [3];  	emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  	break;  case "colorPicker":  	var cps = new ColorPickerSpawner ();  	var colors = children [c].SelectNodes ("./color");  	for (int i = 0; i < colors.Count; i++) {  		var color = XmlUtilities.GetIntArray (colors [i]' "select");  		switch (color.Length) {  		case 3:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  			break;  		case 4:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  			break;  		default:  			break;  		}  	}  	emitter.AddVariator (cps);  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  	break;  case "fade":  	emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  	break;  case "gravity":  	emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  	break;  case "gridSpawner":  	emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  	break;  case "lightSpawner":  	buff = XmlUtilities.GetIntArray (children [c]' "color");  	var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		lightColor.A = (byte)buff [3];  	emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  	break;  case "particleTemplate":  	if (children [c].HasChildNodes) {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  	}  	else {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  	break;  case "scaleAnimation":  	emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  	break;  case "sfxSpawner":  	emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  	break;  case "zAnimation":  	emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (children [c].Name) {  case "boxSpawner":  	emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  	break;  case "burstSpawner":  	emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  	break;  case "burstInSpawner":  	emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  	break;  case "colorAnimation":  	var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  	var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		startColor.A = (byte)buff [3];  	buff = XmlUtilities.GetIntArray (children [c]' "endColor");  	var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		endColor.A = (byte)buff [3];  	emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  	break;  case "colorPicker":  	var cps = new ColorPickerSpawner ();  	var colors = children [c].SelectNodes ("./color");  	for (int i = 0; i < colors.Count; i++) {  		var color = XmlUtilities.GetIntArray (colors [i]' "select");  		switch (color.Length) {  		case 3:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  			break;  		case 4:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  			break;  		default:  			break;  		}  	}  	emitter.AddVariator (cps);  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  	break;  case "fade":  	emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  	break;  case "gravity":  	emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  	break;  case "gridSpawner":  	emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  	break;  case "lightSpawner":  	buff = XmlUtilities.GetIntArray (children [c]' "color");  	var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		lightColor.A = (byte)buff [3];  	emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  	break;  case "particleTemplate":  	if (children [c].HasChildNodes) {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  	}  	else {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  	break;  case "scaleAnimation":  	emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  	break;  case "sfxSpawner":  	emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  	break;  case "zAnimation":  	emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (children [c].Name) {  case "boxSpawner":  	emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  	break;  case "burstSpawner":  	emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  	break;  case "burstInSpawner":  	emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  	break;  case "colorAnimation":  	var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  	var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		startColor.A = (byte)buff [3];  	buff = XmlUtilities.GetIntArray (children [c]' "endColor");  	var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		endColor.A = (byte)buff [3];  	emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  	break;  case "colorPicker":  	var cps = new ColorPickerSpawner ();  	var colors = children [c].SelectNodes ("./color");  	for (int i = 0; i < colors.Count; i++) {  		var color = XmlUtilities.GetIntArray (colors [i]' "select");  		switch (color.Length) {  		case 3:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  			break;  		case 4:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  			break;  		default:  			break;  		}  	}  	emitter.AddVariator (cps);  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  	break;  case "fade":  	emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  	break;  case "gravity":  	emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  	break;  case "gridSpawner":  	emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  	break;  case "lightSpawner":  	buff = XmlUtilities.GetIntArray (children [c]' "color");  	var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		lightColor.A = (byte)buff [3];  	emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  	break;  case "particleTemplate":  	if (children [c].HasChildNodes) {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  	}  	else {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  	break;  case "scaleAnimation":  	emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  	break;  case "sfxSpawner":  	emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  	break;  case "zAnimation":  	emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (children [c].Name) {  case "boxSpawner":  	emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  	break;  case "burstSpawner":  	emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  	break;  case "burstInSpawner":  	emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  	break;  case "colorAnimation":  	var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  	var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		startColor.A = (byte)buff [3];  	buff = XmlUtilities.GetIntArray (children [c]' "endColor");  	var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		endColor.A = (byte)buff [3];  	emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  	break;  case "colorPicker":  	var cps = new ColorPickerSpawner ();  	var colors = children [c].SelectNodes ("./color");  	for (int i = 0; i < colors.Count; i++) {  		var color = XmlUtilities.GetIntArray (colors [i]' "select");  		switch (color.Length) {  		case 3:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  			break;  		case 4:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  			break;  		default:  			break;  		}  	}  	emitter.AddVariator (cps);  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  	break;  case "fade":  	emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  	break;  case "gravity":  	emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  	break;  case "gridSpawner":  	emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  	break;  case "lightSpawner":  	buff = XmlUtilities.GetIntArray (children [c]' "color");  	var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		lightColor.A = (byte)buff [3];  	emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  	break;  case "particleTemplate":  	if (children [c].HasChildNodes) {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  	}  	else {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  	break;  case "scaleAnimation":  	emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  	break;  case "sfxSpawner":  	emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  	break;  case "zAnimation":  	emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (children [c].Name) {  case "boxSpawner":  	emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  	break;  case "burstSpawner":  	emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  	break;  case "burstInSpawner":  	emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  	break;  case "colorAnimation":  	var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  	var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		startColor.A = (byte)buff [3];  	buff = XmlUtilities.GetIntArray (children [c]' "endColor");  	var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		endColor.A = (byte)buff [3];  	emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  	break;  case "colorPicker":  	var cps = new ColorPickerSpawner ();  	var colors = children [c].SelectNodes ("./color");  	for (int i = 0; i < colors.Count; i++) {  		var color = XmlUtilities.GetIntArray (colors [i]' "select");  		switch (color.Length) {  		case 3:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  			break;  		case 4:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  			break;  		default:  			break;  		}  	}  	emitter.AddVariator (cps);  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  	break;  case "fade":  	emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  	break;  case "gravity":  	emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  	break;  case "gridSpawner":  	emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  	break;  case "lightSpawner":  	buff = XmlUtilities.GetIntArray (children [c]' "color");  	var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		lightColor.A = (byte)buff [3];  	emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  	break;  case "particleTemplate":  	if (children [c].HasChildNodes) {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  	}  	else {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  	break;  case "scaleAnimation":  	emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  	break;  case "sfxSpawner":  	emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  	break;  case "zAnimation":  	emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (children [c].Name) {  case "boxSpawner":  	emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  	break;  case "burstSpawner":  	emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  	break;  case "burstInSpawner":  	emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  	break;  case "colorAnimation":  	var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  	var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		startColor.A = (byte)buff [3];  	buff = XmlUtilities.GetIntArray (children [c]' "endColor");  	var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		endColor.A = (byte)buff [3];  	emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  	break;  case "colorPicker":  	var cps = new ColorPickerSpawner ();  	var colors = children [c].SelectNodes ("./color");  	for (int i = 0; i < colors.Count; i++) {  		var color = XmlUtilities.GetIntArray (colors [i]' "select");  		switch (color.Length) {  		case 3:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  			break;  		case 4:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  			break;  		default:  			break;  		}  	}  	emitter.AddVariator (cps);  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  	break;  case "fade":  	emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  	break;  case "gravity":  	emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  	break;  case "gridSpawner":  	emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  	break;  case "lightSpawner":  	buff = XmlUtilities.GetIntArray (children [c]' "color");  	var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		lightColor.A = (byte)buff [3];  	emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  	break;  case "particleTemplate":  	if (children [c].HasChildNodes) {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  	}  	else {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  	break;  case "scaleAnimation":  	emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  	break;  case "sfxSpawner":  	emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  	break;  case "zAnimation":  	emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (children [c].Name) {  case "boxSpawner":  	emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  	break;  case "burstSpawner":  	emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  	break;  case "burstInSpawner":  	emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  	break;  case "colorAnimation":  	var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  	var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		startColor.A = (byte)buff [3];  	buff = XmlUtilities.GetIntArray (children [c]' "endColor");  	var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		endColor.A = (byte)buff [3];  	emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  	break;  case "colorPicker":  	var cps = new ColorPickerSpawner ();  	var colors = children [c].SelectNodes ("./color");  	for (int i = 0; i < colors.Count; i++) {  		var color = XmlUtilities.GetIntArray (colors [i]' "select");  		switch (color.Length) {  		case 3:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  			break;  		case 4:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  			break;  		default:  			break;  		}  	}  	emitter.AddVariator (cps);  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  	break;  case "fade":  	emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  	break;  case "gravity":  	emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  	break;  case "gridSpawner":  	emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  	break;  case "lightSpawner":  	buff = XmlUtilities.GetIntArray (children [c]' "color");  	var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		lightColor.A = (byte)buff [3];  	emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  	break;  case "particleTemplate":  	if (children [c].HasChildNodes) {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  	}  	else {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  	break;  case "scaleAnimation":  	emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  	break;  case "sfxSpawner":  	emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  	break;  case "zAnimation":  	emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (children [c].Name) {  case "boxSpawner":  	emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  	break;  case "burstSpawner":  	emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  	break;  case "burstInSpawner":  	emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  	break;  case "colorAnimation":  	var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  	var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		startColor.A = (byte)buff [3];  	buff = XmlUtilities.GetIntArray (children [c]' "endColor");  	var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		endColor.A = (byte)buff [3];  	emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  	break;  case "colorPicker":  	var cps = new ColorPickerSpawner ();  	var colors = children [c].SelectNodes ("./color");  	for (int i = 0; i < colors.Count; i++) {  		var color = XmlUtilities.GetIntArray (colors [i]' "select");  		switch (color.Length) {  		case 3:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  			break;  		case 4:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  			break;  		default:  			break;  		}  	}  	emitter.AddVariator (cps);  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  	break;  case "fade":  	emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  	break;  case "gravity":  	emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  	break;  case "gridSpawner":  	emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  	break;  case "lightSpawner":  	buff = XmlUtilities.GetIntArray (children [c]' "color");  	var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		lightColor.A = (byte)buff [3];  	emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  	break;  case "particleTemplate":  	if (children [c].HasChildNodes) {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  	}  	else {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  	break;  case "scaleAnimation":  	emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  	break;  case "sfxSpawner":  	emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  	break;  case "zAnimation":  	emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (children [c].Name) {  case "boxSpawner":  	emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  	break;  case "burstSpawner":  	emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  	break;  case "burstInSpawner":  	emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  	break;  case "colorAnimation":  	var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  	var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		startColor.A = (byte)buff [3];  	buff = XmlUtilities.GetIntArray (children [c]' "endColor");  	var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		endColor.A = (byte)buff [3];  	emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  	break;  case "colorPicker":  	var cps = new ColorPickerSpawner ();  	var colors = children [c].SelectNodes ("./color");  	for (int i = 0; i < colors.Count; i++) {  		var color = XmlUtilities.GetIntArray (colors [i]' "select");  		switch (color.Length) {  		case 3:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  			break;  		case 4:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  			break;  		default:  			break;  		}  	}  	emitter.AddVariator (cps);  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  	break;  case "fade":  	emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  	break;  case "gravity":  	emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  	break;  case "gridSpawner":  	emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  	break;  case "lightSpawner":  	buff = XmlUtilities.GetIntArray (children [c]' "color");  	var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		lightColor.A = (byte)buff [3];  	emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  	break;  case "particleTemplate":  	if (children [c].HasChildNodes) {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  	}  	else {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  	break;  case "scaleAnimation":  	emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  	break;  case "sfxSpawner":  	emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  	break;  case "zAnimation":  	emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (children [c].Name) {  case "boxSpawner":  	emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  	break;  case "burstSpawner":  	emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  	break;  case "burstInSpawner":  	emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  	break;  case "colorAnimation":  	var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  	var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		startColor.A = (byte)buff [3];  	buff = XmlUtilities.GetIntArray (children [c]' "endColor");  	var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		endColor.A = (byte)buff [3];  	emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  	break;  case "colorPicker":  	var cps = new ColorPickerSpawner ();  	var colors = children [c].SelectNodes ("./color");  	for (int i = 0; i < colors.Count; i++) {  		var color = XmlUtilities.GetIntArray (colors [i]' "select");  		switch (color.Length) {  		case 3:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  			break;  		case 4:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  			break;  		default:  			break;  		}  	}  	emitter.AddVariator (cps);  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  	break;  case "fade":  	emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  	break;  case "gravity":  	emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  	break;  case "gridSpawner":  	emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  	break;  case "lightSpawner":  	buff = XmlUtilities.GetIntArray (children [c]' "color");  	var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		lightColor.A = (byte)buff [3];  	emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  	break;  case "particleTemplate":  	if (children [c].HasChildNodes) {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  	}  	else {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  	break;  case "scaleAnimation":  	emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  	break;  case "sfxSpawner":  	emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  	break;  case "zAnimation":  	emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (children [c].Name) {  case "boxSpawner":  	emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  	break;  case "burstSpawner":  	emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  	break;  case "burstInSpawner":  	emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  	break;  case "colorAnimation":  	var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  	var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		startColor.A = (byte)buff [3];  	buff = XmlUtilities.GetIntArray (children [c]' "endColor");  	var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		endColor.A = (byte)buff [3];  	emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  	break;  case "colorPicker":  	var cps = new ColorPickerSpawner ();  	var colors = children [c].SelectNodes ("./color");  	for (int i = 0; i < colors.Count; i++) {  		var color = XmlUtilities.GetIntArray (colors [i]' "select");  		switch (color.Length) {  		case 3:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  			break;  		case 4:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  			break;  		default:  			break;  		}  	}  	emitter.AddVariator (cps);  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  	break;  case "fade":  	emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  	break;  case "gravity":  	emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  	break;  case "gridSpawner":  	emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  	break;  case "lightSpawner":  	buff = XmlUtilities.GetIntArray (children [c]' "color");  	var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		lightColor.A = (byte)buff [3];  	emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  	break;  case "particleTemplate":  	if (children [c].HasChildNodes) {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  	}  	else {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  	break;  case "scaleAnimation":  	emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  	break;  case "sfxSpawner":  	emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  	break;  case "zAnimation":  	emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (children [c].Name) {  case "boxSpawner":  	emitter.AddVariator (new BoxSpawner (XmlUtilities.GetFloat (children [c]' "width")' XmlUtilities.GetFloat (children [c]' "height")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BoxSpawner: " + children [c].ToString ());  	break;  case "burstSpawner":  	emitter.AddVariator (new BurstSpawner (XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstSpawner: " + children [c].ToString ());  	break;  case "burstInSpawner":  	emitter.AddVariator (new BurstInSpawner (XmlUtilities.GetFloat (children [c]' "maxRadius")' XmlUtilities.GetFloat (children [c]' "minRadius")' XmlUtilities.GetFloat (children [c]' "maxForce")' XmlUtilities.GetFloat (children [c]' "minForce")' XmlUtilities.GetFloat (children [c]' "maxAngle") + angleCoeff' XmlUtilities.GetFloat (children [c]' "minAngle") + angleCoeff));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New BurstInSpawner: " + children [c].ToString ());  	break;  case "colorAnimation":  	var buff = XmlUtilities.GetIntArray (children [c]' "startColor");  	var startColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		startColor.A = (byte)buff [3];  	buff = XmlUtilities.GetIntArray (children [c]' "endColor");  	var endColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		endColor.A = (byte)buff [3];  	emitter.AddAnimator (new ColorAnimation (startColor' endColor' XmlUtilities.GetInt (children [c]' "duration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorAnimator: " + children [c].ToString ());  	break;  case "colorPicker":  	var cps = new ColorPickerSpawner ();  	var colors = children [c].SelectNodes ("./color");  	for (int i = 0; i < colors.Count; i++) {  		var color = XmlUtilities.GetIntArray (colors [i]' "select");  		switch (color.Length) {  		case 3:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  			break;  		case 4:  			cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  			break;  		default:  			break;  		}  	}  	emitter.AddVariator (cps);  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ColorPickerSpawner: " + children [c].ToString ());  	break;  case "fade":  	emitter.AddAnimator (new FadeAnimation (XmlUtilities.GetInt (children [c]' "fadeInDuration")' XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "fadeOutDuration")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New FadeAnimator: " + children [c].ToString ());  	break;  case "gravity":  	emitter.AddAnimator (new GravityAnimation (new Vector2f (XmlUtilities.GetFloat (children [c]' "forceX") * xCoeff' XmlUtilities.GetFloat (children [c]' "forceY"))));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GravityAnimation: " + children [c].ToString ());  	break;  case "gridSpawner":  	emitter.AddVariator (new GridSpawner (XmlUtilities.GetInt (children [c]' "gridWidth")' XmlUtilities.GetInt (children [c]' "gridHeight")' XmlUtilities.GetFloat (children [c]' "cellWidth") * xCoeff' XmlUtilities.GetFloat (children [c]' "cellHeight")' XmlUtilities.GetFloat (children [c]' "deltaX"' 0f)' XmlUtilities.GetFloat (children [c]' "deltaY"' 0f)));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New GridSpawner: " + children [c].ToString ());  	break;  case "lightSpawner":  	buff = XmlUtilities.GetIntArray (children [c]' "color");  	var lightColor = new Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		lightColor.A = (byte)buff [3];  	emitter.AddVariator (new LightSpawner (lightColor' XmlUtilities.GetInt (children [c]' "radius")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New LightSpawner: " + children [c].ToString ());  	break;  case "particleTemplate":  	if (children [c].HasChildNodes) {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f)' LoadAnimationDefinition (children [c]));  	}  	else {  		emitter.AddParticleTemplate (XmlUtilities.GetString (children [c]' "texture")' XmlUtilities.GetInt (children [c]' "x")' XmlUtilities.GetInt (children [c]' "y")' XmlUtilities.GetInt (children [c]' "width")' XmlUtilities.GetInt (children [c]' "height")' XmlUtilities.GetFloat (children [c]' "scale"' 1f));  	}  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New particle: " + children [c].ToString ());  	break;  case "scaleAnimation":  	emitter.AddAnimator (new ScaleAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetFloat (children [c]' "start")' XmlUtilities.GetFloat (children [c]' "end")));  	break;  case "sfxSpawner":  	emitter.AddVariator (new SfxSpawner (XmlUtilities.GetString (children [c]' "sfx")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New SfxSpawner: " + children [c].ToString ());  	break;  case "zAnimation":  	emitter.AddAnimator (new ZAnimation (XmlUtilities.GetInt (children [c]' "duration")' XmlUtilities.GetInt (children [c]' "start")' XmlUtilities.GetInt (children [c]' "end")));  	Logger.Debug ("GameFactory"' "LoadParticleFromTemplate"' "New ZAnimation: " + children [c].ToString ());  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: if (buff.Length > 3)  	startColor.A = (byte)buff [3];  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: if (buff.Length > 3)  	startColor.A = (byte)buff [3];  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: startColor.A = (byte)buff [3];  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: if (buff.Length > 3)  	endColor.A = (byte)buff [3];  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: if (buff.Length > 3)  	endColor.A = (byte)buff [3];  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: endColor.A = (byte)buff [3];  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int i = 0; i < colors.Count; i++) {  	var color = XmlUtilities.GetIntArray (colors [i]' "select");  	switch (color.Length) {  	case 3:  		cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  		break;  	case 4:  		cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int i = 0; i < colors.Count; i++) {  	var color = XmlUtilities.GetIntArray (colors [i]' "select");  	switch (color.Length) {  	case 3:  		cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  		break;  	case 4:  		cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int i = 0; i < colors.Count; i++) {  	var color = XmlUtilities.GetIntArray (colors [i]' "select");  	switch (color.Length) {  	case 3:  		cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  		break;  	case 4:  		cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int i = 0; i < colors.Count; i++) {  	var color = XmlUtilities.GetIntArray (colors [i]' "select");  	switch (color.Length) {  	case 3:  		cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  		break;  	case 4:  		cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: for (int i = 0; i < colors.Count; i++) {  	var color = XmlUtilities.GetIntArray (colors [i]' "select");  	switch (color.Length) {  	case 3:  		cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  		break;  	case 4:  		cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (color.Length) {  case 3:  	cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  	break;  case 4:  	cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (color.Length) {  case 3:  	cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  	break;  case 4:  	cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (color.Length) {  case 3:  	cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  	break;  case 4:  	cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (color.Length) {  case 3:  	cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  	break;  case 4:  	cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: switch (color.Length) {  case 3:  	cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  	break;  case 4:  	cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]));  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: cps.AddColor (new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]));  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: if (buff.Length > 3)  	lightColor.A = (byte)buff [3];  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: if (buff.Length > 3)  	lightColor.A = (byte)buff [3];  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,LoadParticleFromTemplate,The following statement contains a magic number: lightColor.A = (byte)buff [3];  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,ParseEffect,The following statement contains a magic number: switch (script [i]) {  case "BURN":  	res = new BurningEffect ();  	var bres = res as BurningEffect;  	bres.Duration = Simulator.ROUND_LENGTH * int.Parse (script [i + 1]) + 1;  	bres.Strength = int.Parse (script [i + 2]);  	break;  case "FREEZE":  	res = new FreezeEffect ();  	var fres = res as FreezeEffect;  	fres.Duration = Simulator.ROUND_LENGTH * int.Parse (script [i + 1]) + 1;  	break;  case "GUARD":  	res = new GuardEffect ();  	var gres = res as GuardEffect;  	gres.Duration = Simulator.ROUND_LENGTH * int.Parse (script [i + 1]) + 1;  	gres.Strength = int.Parse (script [i + 2]);  	break;  case "VULNERABLE":  	res = new VulnerableEffect (float.Parse (script [i + 2])' script [i + 1]);  	break;  default:  	res = new Effect ();  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,ParseEffect,The following statement contains a magic number: switch (script [i]) {  case "BURN":  	res = new BurningEffect ();  	var bres = res as BurningEffect;  	bres.Duration = Simulator.ROUND_LENGTH * int.Parse (script [i + 1]) + 1;  	bres.Strength = int.Parse (script [i + 2]);  	break;  case "FREEZE":  	res = new FreezeEffect ();  	var fres = res as FreezeEffect;  	fres.Duration = Simulator.ROUND_LENGTH * int.Parse (script [i + 1]) + 1;  	break;  case "GUARD":  	res = new GuardEffect ();  	var gres = res as GuardEffect;  	gres.Duration = Simulator.ROUND_LENGTH * int.Parse (script [i + 1]) + 1;  	gres.Strength = int.Parse (script [i + 2]);  	break;  case "VULNERABLE":  	res = new VulnerableEffect (float.Parse (script [i + 2])' script [i + 1]);  	break;  default:  	res = new Effect ();  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,ParseEffect,The following statement contains a magic number: switch (script [i]) {  case "BURN":  	res = new BurningEffect ();  	var bres = res as BurningEffect;  	bres.Duration = Simulator.ROUND_LENGTH * int.Parse (script [i + 1]) + 1;  	bres.Strength = int.Parse (script [i + 2]);  	break;  case "FREEZE":  	res = new FreezeEffect ();  	var fres = res as FreezeEffect;  	fres.Duration = Simulator.ROUND_LENGTH * int.Parse (script [i + 1]) + 1;  	break;  case "GUARD":  	res = new GuardEffect ();  	var gres = res as GuardEffect;  	gres.Duration = Simulator.ROUND_LENGTH * int.Parse (script [i + 1]) + 1;  	gres.Strength = int.Parse (script [i + 2]);  	break;  case "VULNERABLE":  	res = new VulnerableEffect (float.Parse (script [i + 2])' script [i + 1]);  	break;  default:  	res = new Effect ();  	break;  }  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,ParseEffect,The following statement contains a magic number: bres.Strength = int.Parse (script [i + 2]);  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,ParseEffect,The following statement contains a magic number: gres.Strength = int.Parse (script [i + 2]);  
Magic Number,WizardsDuel.Game,GameFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\GameFactory.cs,ParseEffect,The following statement contains a magic number: res = new VulnerableEffect (float.Parse (script [i + 2])' script [i + 1]);  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,DoLogic,The following statement contains a magic number: if (this.waitIcon.Alpha < 255 && p.OutObject.IsInIdle && this.events.NextActor != p && this.waitCountdown < 1) {  	this.waitIcon.AddAnimator (new ColorAnimation (this.waitIcon.Color' Color.White' 250));  }  else if (this.waitIcon.Alpha != 0) {  	this.waitIcon.AddAnimator (new ColorAnimation (this.waitIcon.Color' Color.Transparent' 250));  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,DoLogic,The following statement contains a magic number: if (this.waitIcon.Alpha < 255 && p.OutObject.IsInIdle && this.events.NextActor != p && this.waitCountdown < 1) {  	this.waitIcon.AddAnimator (new ColorAnimation (this.waitIcon.Color' Color.White' 250));  }  else if (this.waitIcon.Alpha != 0) {  	this.waitIcon.AddAnimator (new ColorAnimation (this.waitIcon.Color' Color.Transparent' 250));  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,DoLogic,The following statement contains a magic number: if (this.waitIcon.Alpha < 255 && p.OutObject.IsInIdle && this.events.NextActor != p && this.waitCountdown < 1) {  	this.waitIcon.AddAnimator (new ColorAnimation (this.waitIcon.Color' Color.White' 250));  }  else if (this.waitIcon.Alpha != 0) {  	this.waitIcon.AddAnimator (new ColorAnimation (this.waitIcon.Color' Color.Transparent' 250));  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,DoLogic,The following statement contains a magic number: this.waitIcon.AddAnimator (new ColorAnimation (this.waitIcon.Color' Color.White' 250));  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,DoLogic,The following statement contains a magic number: if (this.waitIcon.Alpha != 0) {  	this.waitIcon.AddAnimator (new ColorAnimation (this.waitIcon.Color' Color.Transparent' 250));  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,DoLogic,The following statement contains a magic number: this.waitIcon.AddAnimator (new ColorAnimation (this.waitIcon.Color' Color.Transparent' 250));  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,InitializeUserInterface,The following statement contains a magic number: this.waitIcon = new Icon ("00_base_pc_fx.png"' new IntRect (592' 24' 16' 16));  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,InitializeUserInterface,The following statement contains a magic number: this.waitIcon = new Icon ("00_base_pc_fx.png"' new IntRect (592' 24' 16' 16));  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,InitializeUserInterface,The following statement contains a magic number: this.waitIcon = new Icon ("00_base_pc_fx.png"' new IntRect (592' 24' 16' 16));  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,InitializeUserInterface,The following statement contains a magic number: this.waitIcon = new Icon ("00_base_pc_fx.png"' new IntRect (592' 24' 16' 16));  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,InitializeUserInterface,The following statement contains a magic number: this.waitIcon.Position = new Vector2f (IoManager.Width / 2 + 12' IoManager.Height / 2 - 64);  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,InitializeUserInterface,The following statement contains a magic number: this.waitIcon.Position = new Vector2f (IoManager.Width / 2 + 12' IoManager.Height / 2 - 64);  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,InitializeUserInterface,The following statement contains a magic number: this.waitIcon.Position = new Vector2f (IoManager.Width / 2 + 12' IoManager.Height / 2 - 64);  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,InitializeUserInterface,The following statement contains a magic number: this.waitIcon.Position = new Vector2f (IoManager.Width / 2 + 12' IoManager.Height / 2 - 64);  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.Visible == true) {  	if (target.DeathAnimation == String.Empty) {  		//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  		var ps = new ParticleSystem ("DEATH");  		ps.TTL = 2000;  		ps.Layer = this.world.worldView.ObjectsLayer;  		ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  		var emitter = new Emitter (ps' 0);  		//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  		emitter.ParticleTTL = 800;  		emitter.SpawnCount = 64;  		emitter.SpawnDeltaTime = 50;  		emitter.StartDelay = 250;  		emitter.TTL = 90;  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  		emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  		emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  		emitter.AddAnimator (new FadeAnimation (0' 0' 800));  		emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  		emitter.AddVariator (new BurstSpawner (0.05f));  		var cps = new ColorPickerSpawner ();  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathMain);  		cps.AddColor (target.DeathSecundary);  		emitter.AddVariator (cps);  		ps.AddEmitter (emitter);  		//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  		IoManager.AddWidget (ps);  		target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  	}  	else {  		SetAnimation (target' target.DeathAnimation);  	}  	this.events.WaitAndRun (delayMillis/* + 500*/' new DestroyEvent (target.ID));  }  else {  	this.DestroyObject (target.ID);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: if (target.DeathAnimation == String.Empty) {  	//CreateParticleAt (SPAWN_PARTICLE' target.X' target.Y);  	var ps = new ParticleSystem ("DEATH");  	ps.TTL = 2000;  	ps.Layer = this.world.worldView.ObjectsLayer;  	ps.Position = new Vector2f (target.X * this.CellWidth + target.DeathRect.Left' target.Y * this.CellHeight + target.DeathRect.Top);  	var emitter = new Emitter (ps' 0);  	//emitter.Offset = new Vector2f (target.DeathRect.Top' target.DeathRect.Left);  	emitter.ParticleTTL = 800;  	emitter.SpawnCount = 64;  	emitter.SpawnDeltaTime = 50;  	emitter.StartDelay = 250;  	emitter.TTL = 90;  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  	emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  	emitter.AddAnimator (new GravityAnimation (new Vector2f (0f' 0.0002f)));  	emitter.AddAnimator (new FadeAnimation (0' 0' 800));  	emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  	emitter.AddVariator (new BurstSpawner (0.05f));  	var cps = new ColorPickerSpawner ();  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathMain);  	cps.AddColor (target.DeathSecundary);  	emitter.AddVariator (cps);  	ps.AddEmitter (emitter);  	//var ps = GameFactory.LoadParticleFromTemplate (pid' target.X * this.CellWidth' target.Y * this.CellHeight' this.world.worldView.ObjectsLayer);  	IoManager.AddWidget (ps);  	target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  }  else {  	SetAnimation (target' target.DeathAnimation);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: ps.TTL = 2000;  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: emitter.ParticleTTL = 800;  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: emitter.SpawnCount = 64;  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: emitter.SpawnDeltaTime = 50;  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: emitter.StartDelay = 250;  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: emitter.TTL = 90;  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 2);  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: emitter.AddParticleTemplate ("00_base_pc_fx.png"' 576' 0' 1' 1' 4);  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: emitter.AddAnimator (new FadeAnimation (0' 0' 800));  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: emitter.AddVariator (new GridSpawner (target.DeathRect.Width' target.DeathRect.Height' 4' 4));  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Kill,The following statement contains a magic number: target.OutObject.AddAnimator (new FadeAnimation (0' delayMillis' 500));  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,LoadArea,The following statement contains a magic number: this.events.QueueObject (this.world' 15);  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,LoadArea,The following statement contains a magic number: if (!this.world.entities.ContainsKey (PLAYER_ID)) {  	if (Random (100) < 50) {  		this.CreateObject (PLAYER_ID' "bp_exekiel");  	}  	else {  		this.CreateObject (PLAYER_ID' "bp_exekiel");  	}  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,LoadArea,The following statement contains a magic number: if (!this.world.entities.ContainsKey (PLAYER_ID)) {  	if (Random (100) < 50) {  		this.CreateObject (PLAYER_ID' "bp_exekiel");  	}  	else {  		this.CreateObject (PLAYER_ID' "bp_exekiel");  	}  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,LoadArea,The following statement contains a magic number: if (Random (100) < 50) {  	this.CreateObject (PLAYER_ID' "bp_exekiel");  }  else {  	this.CreateObject (PLAYER_ID' "bp_exekiel");  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,LoadArea,The following statement contains a magic number: if (Random (100) < 50) {  	this.CreateObject (PLAYER_ID' "bp_exekiel");  }  else {  	this.CreateObject (PLAYER_ID' "bp_exekiel");  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,LoadArea,The following statement contains a magic number: this.world.CalculateFoV (playerObject.X' playerObject.Y' 6);  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,LoadArea,The following statement contains a magic number: IoManager.FadeTo (Color.Transparent' 1500);  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Shift,The following statement contains a magic number: if (this.world.entities.TryGetValue (oid' out res)) {  	//Logger.Debug ("Simulator"' "Shift"' "Shifting 1");  	if (res.OutObject.IsAnimating) {  		return;  	}  	;  	//Logger.Debug ("Simulator"' "Shift"' "Shifting 2");  	var endX = res.X + dx;  	var endY = res.Y + dy;  	//var bufferId = GetObjectAt (endX' endY);  	//if (bufferId == null || GetObject (bufferId).Dressing == true) {  	// nothing in the way' move around  	res.X = endX;  	res.Y = endY;  	if (dx < 0) {  		res.OutObject.Facing = Io.Facing.LEFT;  	}  	else if (dx > 0) {  		res.OutObject.Facing = Io.Facing.RIGHT;  	}  	if (res.Visible == true) {  		SetAnimation (res' "SHIFT");  		var ta = new TranslateAnimation (res.OutObject.GetAnimationLength ("SHIFT")' dx * this.CellWidth' dy * this.CellHeight);  		res.OutObject.AddAnimator (ta);  	}  	else {  		var ta = new TranslateAnimation (150' dx * this.CellWidth' dy * this.CellHeight);  		res.OutObject.AddAnimator (ta);  	}  	// goto new area  	Logger.Debug ("Simulator"' "Shift"' "Moving to " + endX.ToString () + "'" + endY.ToString () + " vs " + world.EndCell.ToString ());  	if (oid == PLAYER_ID && world.EndCell.X == endX && world.EndCell.Y == endY) {  		Logger.Debug ("Simulator"' "Shift"' "Starting fade out at " + IoManager.Time.ToString ());  		IoManager.FadeTo (Color.Black' 500);  		this.SelectedSkill = 1;  		events.WaitAndRun (500' new MethodEvent (LoadArea));  		//LoadArea ();  	}  	/*} else if (res.Faction != GetObject (bufferId).Faction) { 					// something on my path' attack it 					Logger.Debug ("Simulator"' "Shift"' "Found entity " + res.ToString () + " at " + endX.ToString () + "'" + endY.ToString ()); 					res.skills[0].OnTarget(res' GetObjectsAt(endX' endY).Find(x => x.Faction != "NUTRAL")); 					//this.Attack (oid' bufferId' 1' Simulator.DAMAGE_TYPE_PHYSICAL); 				}*///Logger.Debug ("Simulator"' "Shift"' "Shifting 4");  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Shift,The following statement contains a magic number: if (this.world.entities.TryGetValue (oid' out res)) {  	//Logger.Debug ("Simulator"' "Shift"' "Shifting 1");  	if (res.OutObject.IsAnimating) {  		return;  	}  	;  	//Logger.Debug ("Simulator"' "Shift"' "Shifting 2");  	var endX = res.X + dx;  	var endY = res.Y + dy;  	//var bufferId = GetObjectAt (endX' endY);  	//if (bufferId == null || GetObject (bufferId).Dressing == true) {  	// nothing in the way' move around  	res.X = endX;  	res.Y = endY;  	if (dx < 0) {  		res.OutObject.Facing = Io.Facing.LEFT;  	}  	else if (dx > 0) {  		res.OutObject.Facing = Io.Facing.RIGHT;  	}  	if (res.Visible == true) {  		SetAnimation (res' "SHIFT");  		var ta = new TranslateAnimation (res.OutObject.GetAnimationLength ("SHIFT")' dx * this.CellWidth' dy * this.CellHeight);  		res.OutObject.AddAnimator (ta);  	}  	else {  		var ta = new TranslateAnimation (150' dx * this.CellWidth' dy * this.CellHeight);  		res.OutObject.AddAnimator (ta);  	}  	// goto new area  	Logger.Debug ("Simulator"' "Shift"' "Moving to " + endX.ToString () + "'" + endY.ToString () + " vs " + world.EndCell.ToString ());  	if (oid == PLAYER_ID && world.EndCell.X == endX && world.EndCell.Y == endY) {  		Logger.Debug ("Simulator"' "Shift"' "Starting fade out at " + IoManager.Time.ToString ());  		IoManager.FadeTo (Color.Black' 500);  		this.SelectedSkill = 1;  		events.WaitAndRun (500' new MethodEvent (LoadArea));  		//LoadArea ();  	}  	/*} else if (res.Faction != GetObject (bufferId).Faction) { 					// something on my path' attack it 					Logger.Debug ("Simulator"' "Shift"' "Found entity " + res.ToString () + " at " + endX.ToString () + "'" + endY.ToString ()); 					res.skills[0].OnTarget(res' GetObjectsAt(endX' endY).Find(x => x.Faction != "NUTRAL")); 					//this.Attack (oid' bufferId' 1' Simulator.DAMAGE_TYPE_PHYSICAL); 				}*///Logger.Debug ("Simulator"' "Shift"' "Shifting 4");  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Shift,The following statement contains a magic number: if (this.world.entities.TryGetValue (oid' out res)) {  	//Logger.Debug ("Simulator"' "Shift"' "Shifting 1");  	if (res.OutObject.IsAnimating) {  		return;  	}  	;  	//Logger.Debug ("Simulator"' "Shift"' "Shifting 2");  	var endX = res.X + dx;  	var endY = res.Y + dy;  	//var bufferId = GetObjectAt (endX' endY);  	//if (bufferId == null || GetObject (bufferId).Dressing == true) {  	// nothing in the way' move around  	res.X = endX;  	res.Y = endY;  	if (dx < 0) {  		res.OutObject.Facing = Io.Facing.LEFT;  	}  	else if (dx > 0) {  		res.OutObject.Facing = Io.Facing.RIGHT;  	}  	if (res.Visible == true) {  		SetAnimation (res' "SHIFT");  		var ta = new TranslateAnimation (res.OutObject.GetAnimationLength ("SHIFT")' dx * this.CellWidth' dy * this.CellHeight);  		res.OutObject.AddAnimator (ta);  	}  	else {  		var ta = new TranslateAnimation (150' dx * this.CellWidth' dy * this.CellHeight);  		res.OutObject.AddAnimator (ta);  	}  	// goto new area  	Logger.Debug ("Simulator"' "Shift"' "Moving to " + endX.ToString () + "'" + endY.ToString () + " vs " + world.EndCell.ToString ());  	if (oid == PLAYER_ID && world.EndCell.X == endX && world.EndCell.Y == endY) {  		Logger.Debug ("Simulator"' "Shift"' "Starting fade out at " + IoManager.Time.ToString ());  		IoManager.FadeTo (Color.Black' 500);  		this.SelectedSkill = 1;  		events.WaitAndRun (500' new MethodEvent (LoadArea));  		//LoadArea ();  	}  	/*} else if (res.Faction != GetObject (bufferId).Faction) { 					// something on my path' attack it 					Logger.Debug ("Simulator"' "Shift"' "Found entity " + res.ToString () + " at " + endX.ToString () + "'" + endY.ToString ()); 					res.skills[0].OnTarget(res' GetObjectsAt(endX' endY).Find(x => x.Faction != "NUTRAL")); 					//this.Attack (oid' bufferId' 1' Simulator.DAMAGE_TYPE_PHYSICAL); 				}*///Logger.Debug ("Simulator"' "Shift"' "Shifting 4");  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Shift,The following statement contains a magic number: if (res.Visible == true) {  	SetAnimation (res' "SHIFT");  	var ta = new TranslateAnimation (res.OutObject.GetAnimationLength ("SHIFT")' dx * this.CellWidth' dy * this.CellHeight);  	res.OutObject.AddAnimator (ta);  }  else {  	var ta = new TranslateAnimation (150' dx * this.CellWidth' dy * this.CellHeight);  	res.OutObject.AddAnimator (ta);  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Shift,The following statement contains a magic number: if (oid == PLAYER_ID && world.EndCell.X == endX && world.EndCell.Y == endY) {  	Logger.Debug ("Simulator"' "Shift"' "Starting fade out at " + IoManager.Time.ToString ());  	IoManager.FadeTo (Color.Black' 500);  	this.SelectedSkill = 1;  	events.WaitAndRun (500' new MethodEvent (LoadArea));  	//LoadArea ();  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Shift,The following statement contains a magic number: if (oid == PLAYER_ID && world.EndCell.X == endX && world.EndCell.Y == endY) {  	Logger.Debug ("Simulator"' "Shift"' "Starting fade out at " + IoManager.Time.ToString ());  	IoManager.FadeTo (Color.Black' 500);  	this.SelectedSkill = 1;  	events.WaitAndRun (500' new MethodEvent (LoadArea));  	//LoadArea ();  }  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Shift,The following statement contains a magic number: IoManager.FadeTo (Color.Black' 500);  
Magic Number,WizardsDuel.Game,Simulator,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Simulator.cs,Shift,The following statement contains a magic number: events.WaitAndRun (500' new MethodEvent (LoadArea));  
Magic Number,WizardsDuel.Game,WorldFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,BuildAI,The following statement contains a magic number: res.MaxThreatLevel = XmlUtilities.GetInt (xenemies' "maxThreat"' 255);  
Magic Number,WizardsDuel.Game,WorldFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,Generate,The following statement contains a magic number: while (level == null) {  	var iter = 0;  	level = new BufferLevel (MaxWidth' MaxHeight' this.DefaultTile);  	level.CloseTile = this.DefaultTile;  	// Place the first block  	var last = this.blocksById [this.StartBlock];  	var x = Simulator.Instance.Random (MaxWidth' 1);  	var y = Simulator.Instance.Random (MaxHeight' 1);  	level.PlaceBlock (last' x' y);  	// place the other blocks  	while (level.UsedArea < this.MinArea && iter < 1000) {  		if (level.AddRandomBlock (this.blocks) == false) {  			level = null;  			break;  		}  	}  	if (level != null && level.AddBlock (this.blocksById [this.EndBlock]) == false) {  		level = null;  		Logger.Debug ("WorldFactory"' "Generate"' "Invalid level' regenerating...");  	}  }  
Magic Number,WizardsDuel.Game,WorldFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,Generate,The following statement contains a magic number: while (level.UsedArea < this.MinArea && iter < 1000) {  	if (level.AddRandomBlock (this.blocks) == false) {  		level = null;  		break;  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (this.VisibleThreatLevel < 1 || this.AlwaysIncreaseThreat) {  	this.ThreatLevel += this.progression [this.progressionIndex];  	this.ThreatLevel = Math.Min (this.ThreatLevel' this.MaxThreatLevel);  	this.progressionIndex++;  	this.progressionIndex %= this.progression.Length;  	var deltaThreat = this.ThreatLevel - this.CurrentThreatLevel;  	if (deltaThreat > 0) {  		Logger.Info ("AreaAI"' "OnRound"' "Threat " + deltaThreat.ToString () + " spawning");  		var sim = Simulator.Instance;  		// let's find a group of enemies at this threat level  		var encounter = new List<EnemyBlueprint> ();  		var encounterLevel = 0;  		var i = 0;  		var MAX_ITER = 5;  		while (encounterLevel < deltaThreat) {  			var e = this.enemyBlueprints [sim.Random (this.enemyBlueprints.Count)];  			if (encounterLevel + e.ThreatLevel <= deltaThreat) {  				encounterLevel += e.ThreatLevel;  				encounter.Add (e);  				continue;  			}  			if (i++ >= MAX_ITER) {  				Logger.Info ("AreaAI"' "OnRound"' "Unable to generate correct group");  				return;  			}  		}  		if (encounter.Count > 0) {  			// find a place where to spawn them  			var p = sim.GetPlayer ();  			var minX = p.X - World.FOV_UPDATE_RADIUS;  			var minY = p.Y - World.FOV_UPDATE_RADIUS;  			var maxX = p.X + World.FOV_UPDATE_RADIUS;  			var maxY = p.Y + World.FOV_UPDATE_RADIUS;  			var sminX = p.X - Parent.lastSightRadius;  			var sminY = p.Y - Parent.lastSightRadius;  			var smaxX = p.X + Parent.lastSightRadius;  			var smaxY = p.Y + Parent.lastSightRadius;  			var possibleCells = new List<Vector2i> ();  			//Logger.Info ("AreaAI"' "OnRound"' "Spawn center " + new {p.X' p.Y}.ToString());  			for (int y = minY; y < maxY; y++) {  				for (int x = minX; x < maxX; x++) {  					// must spawn outside sight  					// TODO if not specified differently?  					if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  						continue;  					}  					if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  						//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  						possibleCells.Add (new Vector2i (x' y));  					}  				}  			}  			// finally spawn  			foreach (var e in encounter) {  				if (possibleCells.Count > 0) {  					var position = possibleCells [sim.Random (possibleCells.Count)];  					possibleCells.Remove (position);  					sim.CreateObject (e.TemplateID' position.X' position.Y);  					this.CurrentThreatLevel += e.ThreatLevel;  					//Logger.Info ("AreaAI"' "OnRound"' "Created object " + e.TemplateID + " at " + position.ToString());  				}  			}  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (this.VisibleThreatLevel < 1 || this.AlwaysIncreaseThreat) {  	this.ThreatLevel += this.progression [this.progressionIndex];  	this.ThreatLevel = Math.Min (this.ThreatLevel' this.MaxThreatLevel);  	this.progressionIndex++;  	this.progressionIndex %= this.progression.Length;  	var deltaThreat = this.ThreatLevel - this.CurrentThreatLevel;  	if (deltaThreat > 0) {  		Logger.Info ("AreaAI"' "OnRound"' "Threat " + deltaThreat.ToString () + " spawning");  		var sim = Simulator.Instance;  		// let's find a group of enemies at this threat level  		var encounter = new List<EnemyBlueprint> ();  		var encounterLevel = 0;  		var i = 0;  		var MAX_ITER = 5;  		while (encounterLevel < deltaThreat) {  			var e = this.enemyBlueprints [sim.Random (this.enemyBlueprints.Count)];  			if (encounterLevel + e.ThreatLevel <= deltaThreat) {  				encounterLevel += e.ThreatLevel;  				encounter.Add (e);  				continue;  			}  			if (i++ >= MAX_ITER) {  				Logger.Info ("AreaAI"' "OnRound"' "Unable to generate correct group");  				return;  			}  		}  		if (encounter.Count > 0) {  			// find a place where to spawn them  			var p = sim.GetPlayer ();  			var minX = p.X - World.FOV_UPDATE_RADIUS;  			var minY = p.Y - World.FOV_UPDATE_RADIUS;  			var maxX = p.X + World.FOV_UPDATE_RADIUS;  			var maxY = p.Y + World.FOV_UPDATE_RADIUS;  			var sminX = p.X - Parent.lastSightRadius;  			var sminY = p.Y - Parent.lastSightRadius;  			var smaxX = p.X + Parent.lastSightRadius;  			var smaxY = p.Y + Parent.lastSightRadius;  			var possibleCells = new List<Vector2i> ();  			//Logger.Info ("AreaAI"' "OnRound"' "Spawn center " + new {p.X' p.Y}.ToString());  			for (int y = minY; y < maxY; y++) {  				for (int x = minX; x < maxX; x++) {  					// must spawn outside sight  					// TODO if not specified differently?  					if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  						continue;  					}  					if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  						//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  						possibleCells.Add (new Vector2i (x' y));  					}  				}  			}  			// finally spawn  			foreach (var e in encounter) {  				if (possibleCells.Count > 0) {  					var position = possibleCells [sim.Random (possibleCells.Count)];  					possibleCells.Remove (position);  					sim.CreateObject (e.TemplateID' position.X' position.Y);  					this.CurrentThreatLevel += e.ThreatLevel;  					//Logger.Info ("AreaAI"' "OnRound"' "Created object " + e.TemplateID + " at " + position.ToString());  				}  			}  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (this.VisibleThreatLevel < 1 || this.AlwaysIncreaseThreat) {  	this.ThreatLevel += this.progression [this.progressionIndex];  	this.ThreatLevel = Math.Min (this.ThreatLevel' this.MaxThreatLevel);  	this.progressionIndex++;  	this.progressionIndex %= this.progression.Length;  	var deltaThreat = this.ThreatLevel - this.CurrentThreatLevel;  	if (deltaThreat > 0) {  		Logger.Info ("AreaAI"' "OnRound"' "Threat " + deltaThreat.ToString () + " spawning");  		var sim = Simulator.Instance;  		// let's find a group of enemies at this threat level  		var encounter = new List<EnemyBlueprint> ();  		var encounterLevel = 0;  		var i = 0;  		var MAX_ITER = 5;  		while (encounterLevel < deltaThreat) {  			var e = this.enemyBlueprints [sim.Random (this.enemyBlueprints.Count)];  			if (encounterLevel + e.ThreatLevel <= deltaThreat) {  				encounterLevel += e.ThreatLevel;  				encounter.Add (e);  				continue;  			}  			if (i++ >= MAX_ITER) {  				Logger.Info ("AreaAI"' "OnRound"' "Unable to generate correct group");  				return;  			}  		}  		if (encounter.Count > 0) {  			// find a place where to spawn them  			var p = sim.GetPlayer ();  			var minX = p.X - World.FOV_UPDATE_RADIUS;  			var minY = p.Y - World.FOV_UPDATE_RADIUS;  			var maxX = p.X + World.FOV_UPDATE_RADIUS;  			var maxY = p.Y + World.FOV_UPDATE_RADIUS;  			var sminX = p.X - Parent.lastSightRadius;  			var sminY = p.Y - Parent.lastSightRadius;  			var smaxX = p.X + Parent.lastSightRadius;  			var smaxY = p.Y + Parent.lastSightRadius;  			var possibleCells = new List<Vector2i> ();  			//Logger.Info ("AreaAI"' "OnRound"' "Spawn center " + new {p.X' p.Y}.ToString());  			for (int y = minY; y < maxY; y++) {  				for (int x = minX; x < maxX; x++) {  					// must spawn outside sight  					// TODO if not specified differently?  					if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  						continue;  					}  					if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  						//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  						possibleCells.Add (new Vector2i (x' y));  					}  				}  			}  			// finally spawn  			foreach (var e in encounter) {  				if (possibleCells.Count > 0) {  					var position = possibleCells [sim.Random (possibleCells.Count)];  					possibleCells.Remove (position);  					sim.CreateObject (e.TemplateID' position.X' position.Y);  					this.CurrentThreatLevel += e.ThreatLevel;  					//Logger.Info ("AreaAI"' "OnRound"' "Created object " + e.TemplateID + " at " + position.ToString());  				}  			}  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (this.VisibleThreatLevel < 1 || this.AlwaysIncreaseThreat) {  	this.ThreatLevel += this.progression [this.progressionIndex];  	this.ThreatLevel = Math.Min (this.ThreatLevel' this.MaxThreatLevel);  	this.progressionIndex++;  	this.progressionIndex %= this.progression.Length;  	var deltaThreat = this.ThreatLevel - this.CurrentThreatLevel;  	if (deltaThreat > 0) {  		Logger.Info ("AreaAI"' "OnRound"' "Threat " + deltaThreat.ToString () + " spawning");  		var sim = Simulator.Instance;  		// let's find a group of enemies at this threat level  		var encounter = new List<EnemyBlueprint> ();  		var encounterLevel = 0;  		var i = 0;  		var MAX_ITER = 5;  		while (encounterLevel < deltaThreat) {  			var e = this.enemyBlueprints [sim.Random (this.enemyBlueprints.Count)];  			if (encounterLevel + e.ThreatLevel <= deltaThreat) {  				encounterLevel += e.ThreatLevel;  				encounter.Add (e);  				continue;  			}  			if (i++ >= MAX_ITER) {  				Logger.Info ("AreaAI"' "OnRound"' "Unable to generate correct group");  				return;  			}  		}  		if (encounter.Count > 0) {  			// find a place where to spawn them  			var p = sim.GetPlayer ();  			var minX = p.X - World.FOV_UPDATE_RADIUS;  			var minY = p.Y - World.FOV_UPDATE_RADIUS;  			var maxX = p.X + World.FOV_UPDATE_RADIUS;  			var maxY = p.Y + World.FOV_UPDATE_RADIUS;  			var sminX = p.X - Parent.lastSightRadius;  			var sminY = p.Y - Parent.lastSightRadius;  			var smaxX = p.X + Parent.lastSightRadius;  			var smaxY = p.Y + Parent.lastSightRadius;  			var possibleCells = new List<Vector2i> ();  			//Logger.Info ("AreaAI"' "OnRound"' "Spawn center " + new {p.X' p.Y}.ToString());  			for (int y = minY; y < maxY; y++) {  				for (int x = minX; x < maxX; x++) {  					// must spawn outside sight  					// TODO if not specified differently?  					if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  						continue;  					}  					if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  						//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  						possibleCells.Add (new Vector2i (x' y));  					}  				}  			}  			// finally spawn  			foreach (var e in encounter) {  				if (possibleCells.Count > 0) {  					var position = possibleCells [sim.Random (possibleCells.Count)];  					possibleCells.Remove (position);  					sim.CreateObject (e.TemplateID' position.X' position.Y);  					this.CurrentThreatLevel += e.ThreatLevel;  					//Logger.Info ("AreaAI"' "OnRound"' "Created object " + e.TemplateID + " at " + position.ToString());  				}  			}  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (this.VisibleThreatLevel < 1 || this.AlwaysIncreaseThreat) {  	this.ThreatLevel += this.progression [this.progressionIndex];  	this.ThreatLevel = Math.Min (this.ThreatLevel' this.MaxThreatLevel);  	this.progressionIndex++;  	this.progressionIndex %= this.progression.Length;  	var deltaThreat = this.ThreatLevel - this.CurrentThreatLevel;  	if (deltaThreat > 0) {  		Logger.Info ("AreaAI"' "OnRound"' "Threat " + deltaThreat.ToString () + " spawning");  		var sim = Simulator.Instance;  		// let's find a group of enemies at this threat level  		var encounter = new List<EnemyBlueprint> ();  		var encounterLevel = 0;  		var i = 0;  		var MAX_ITER = 5;  		while (encounterLevel < deltaThreat) {  			var e = this.enemyBlueprints [sim.Random (this.enemyBlueprints.Count)];  			if (encounterLevel + e.ThreatLevel <= deltaThreat) {  				encounterLevel += e.ThreatLevel;  				encounter.Add (e);  				continue;  			}  			if (i++ >= MAX_ITER) {  				Logger.Info ("AreaAI"' "OnRound"' "Unable to generate correct group");  				return;  			}  		}  		if (encounter.Count > 0) {  			// find a place where to spawn them  			var p = sim.GetPlayer ();  			var minX = p.X - World.FOV_UPDATE_RADIUS;  			var minY = p.Y - World.FOV_UPDATE_RADIUS;  			var maxX = p.X + World.FOV_UPDATE_RADIUS;  			var maxY = p.Y + World.FOV_UPDATE_RADIUS;  			var sminX = p.X - Parent.lastSightRadius;  			var sminY = p.Y - Parent.lastSightRadius;  			var smaxX = p.X + Parent.lastSightRadius;  			var smaxY = p.Y + Parent.lastSightRadius;  			var possibleCells = new List<Vector2i> ();  			//Logger.Info ("AreaAI"' "OnRound"' "Spawn center " + new {p.X' p.Y}.ToString());  			for (int y = minY; y < maxY; y++) {  				for (int x = minX; x < maxX; x++) {  					// must spawn outside sight  					// TODO if not specified differently?  					if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  						continue;  					}  					if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  						//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  						possibleCells.Add (new Vector2i (x' y));  					}  				}  			}  			// finally spawn  			foreach (var e in encounter) {  				if (possibleCells.Count > 0) {  					var position = possibleCells [sim.Random (possibleCells.Count)];  					possibleCells.Remove (position);  					sim.CreateObject (e.TemplateID' position.X' position.Y);  					this.CurrentThreatLevel += e.ThreatLevel;  					//Logger.Info ("AreaAI"' "OnRound"' "Created object " + e.TemplateID + " at " + position.ToString());  				}  			}  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (deltaThreat > 0) {  	Logger.Info ("AreaAI"' "OnRound"' "Threat " + deltaThreat.ToString () + " spawning");  	var sim = Simulator.Instance;  	// let's find a group of enemies at this threat level  	var encounter = new List<EnemyBlueprint> ();  	var encounterLevel = 0;  	var i = 0;  	var MAX_ITER = 5;  	while (encounterLevel < deltaThreat) {  		var e = this.enemyBlueprints [sim.Random (this.enemyBlueprints.Count)];  		if (encounterLevel + e.ThreatLevel <= deltaThreat) {  			encounterLevel += e.ThreatLevel;  			encounter.Add (e);  			continue;  		}  		if (i++ >= MAX_ITER) {  			Logger.Info ("AreaAI"' "OnRound"' "Unable to generate correct group");  			return;  		}  	}  	if (encounter.Count > 0) {  		// find a place where to spawn them  		var p = sim.GetPlayer ();  		var minX = p.X - World.FOV_UPDATE_RADIUS;  		var minY = p.Y - World.FOV_UPDATE_RADIUS;  		var maxX = p.X + World.FOV_UPDATE_RADIUS;  		var maxY = p.Y + World.FOV_UPDATE_RADIUS;  		var sminX = p.X - Parent.lastSightRadius;  		var sminY = p.Y - Parent.lastSightRadius;  		var smaxX = p.X + Parent.lastSightRadius;  		var smaxY = p.Y + Parent.lastSightRadius;  		var possibleCells = new List<Vector2i> ();  		//Logger.Info ("AreaAI"' "OnRound"' "Spawn center " + new {p.X' p.Y}.ToString());  		for (int y = minY; y < maxY; y++) {  			for (int x = minX; x < maxX; x++) {  				// must spawn outside sight  				// TODO if not specified differently?  				if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  					continue;  				}  				if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  					//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  					possibleCells.Add (new Vector2i (x' y));  				}  			}  		}  		// finally spawn  		foreach (var e in encounter) {  			if (possibleCells.Count > 0) {  				var position = possibleCells [sim.Random (possibleCells.Count)];  				possibleCells.Remove (position);  				sim.CreateObject (e.TemplateID' position.X' position.Y);  				this.CurrentThreatLevel += e.ThreatLevel;  				//Logger.Info ("AreaAI"' "OnRound"' "Created object " + e.TemplateID + " at " + position.ToString());  			}  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (deltaThreat > 0) {  	Logger.Info ("AreaAI"' "OnRound"' "Threat " + deltaThreat.ToString () + " spawning");  	var sim = Simulator.Instance;  	// let's find a group of enemies at this threat level  	var encounter = new List<EnemyBlueprint> ();  	var encounterLevel = 0;  	var i = 0;  	var MAX_ITER = 5;  	while (encounterLevel < deltaThreat) {  		var e = this.enemyBlueprints [sim.Random (this.enemyBlueprints.Count)];  		if (encounterLevel + e.ThreatLevel <= deltaThreat) {  			encounterLevel += e.ThreatLevel;  			encounter.Add (e);  			continue;  		}  		if (i++ >= MAX_ITER) {  			Logger.Info ("AreaAI"' "OnRound"' "Unable to generate correct group");  			return;  		}  	}  	if (encounter.Count > 0) {  		// find a place where to spawn them  		var p = sim.GetPlayer ();  		var minX = p.X - World.FOV_UPDATE_RADIUS;  		var minY = p.Y - World.FOV_UPDATE_RADIUS;  		var maxX = p.X + World.FOV_UPDATE_RADIUS;  		var maxY = p.Y + World.FOV_UPDATE_RADIUS;  		var sminX = p.X - Parent.lastSightRadius;  		var sminY = p.Y - Parent.lastSightRadius;  		var smaxX = p.X + Parent.lastSightRadius;  		var smaxY = p.Y + Parent.lastSightRadius;  		var possibleCells = new List<Vector2i> ();  		//Logger.Info ("AreaAI"' "OnRound"' "Spawn center " + new {p.X' p.Y}.ToString());  		for (int y = minY; y < maxY; y++) {  			for (int x = minX; x < maxX; x++) {  				// must spawn outside sight  				// TODO if not specified differently?  				if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  					continue;  				}  				if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  					//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  					possibleCells.Add (new Vector2i (x' y));  				}  			}  		}  		// finally spawn  		foreach (var e in encounter) {  			if (possibleCells.Count > 0) {  				var position = possibleCells [sim.Random (possibleCells.Count)];  				possibleCells.Remove (position);  				sim.CreateObject (e.TemplateID' position.X' position.Y);  				this.CurrentThreatLevel += e.ThreatLevel;  				//Logger.Info ("AreaAI"' "OnRound"' "Created object " + e.TemplateID + " at " + position.ToString());  			}  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (deltaThreat > 0) {  	Logger.Info ("AreaAI"' "OnRound"' "Threat " + deltaThreat.ToString () + " spawning");  	var sim = Simulator.Instance;  	// let's find a group of enemies at this threat level  	var encounter = new List<EnemyBlueprint> ();  	var encounterLevel = 0;  	var i = 0;  	var MAX_ITER = 5;  	while (encounterLevel < deltaThreat) {  		var e = this.enemyBlueprints [sim.Random (this.enemyBlueprints.Count)];  		if (encounterLevel + e.ThreatLevel <= deltaThreat) {  			encounterLevel += e.ThreatLevel;  			encounter.Add (e);  			continue;  		}  		if (i++ >= MAX_ITER) {  			Logger.Info ("AreaAI"' "OnRound"' "Unable to generate correct group");  			return;  		}  	}  	if (encounter.Count > 0) {  		// find a place where to spawn them  		var p = sim.GetPlayer ();  		var minX = p.X - World.FOV_UPDATE_RADIUS;  		var minY = p.Y - World.FOV_UPDATE_RADIUS;  		var maxX = p.X + World.FOV_UPDATE_RADIUS;  		var maxY = p.Y + World.FOV_UPDATE_RADIUS;  		var sminX = p.X - Parent.lastSightRadius;  		var sminY = p.Y - Parent.lastSightRadius;  		var smaxX = p.X + Parent.lastSightRadius;  		var smaxY = p.Y + Parent.lastSightRadius;  		var possibleCells = new List<Vector2i> ();  		//Logger.Info ("AreaAI"' "OnRound"' "Spawn center " + new {p.X' p.Y}.ToString());  		for (int y = minY; y < maxY; y++) {  			for (int x = minX; x < maxX; x++) {  				// must spawn outside sight  				// TODO if not specified differently?  				if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  					continue;  				}  				if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  					//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  					possibleCells.Add (new Vector2i (x' y));  				}  			}  		}  		// finally spawn  		foreach (var e in encounter) {  			if (possibleCells.Count > 0) {  				var position = possibleCells [sim.Random (possibleCells.Count)];  				possibleCells.Remove (position);  				sim.CreateObject (e.TemplateID' position.X' position.Y);  				this.CurrentThreatLevel += e.ThreatLevel;  				//Logger.Info ("AreaAI"' "OnRound"' "Created object " + e.TemplateID + " at " + position.ToString());  			}  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (deltaThreat > 0) {  	Logger.Info ("AreaAI"' "OnRound"' "Threat " + deltaThreat.ToString () + " spawning");  	var sim = Simulator.Instance;  	// let's find a group of enemies at this threat level  	var encounter = new List<EnemyBlueprint> ();  	var encounterLevel = 0;  	var i = 0;  	var MAX_ITER = 5;  	while (encounterLevel < deltaThreat) {  		var e = this.enemyBlueprints [sim.Random (this.enemyBlueprints.Count)];  		if (encounterLevel + e.ThreatLevel <= deltaThreat) {  			encounterLevel += e.ThreatLevel;  			encounter.Add (e);  			continue;  		}  		if (i++ >= MAX_ITER) {  			Logger.Info ("AreaAI"' "OnRound"' "Unable to generate correct group");  			return;  		}  	}  	if (encounter.Count > 0) {  		// find a place where to spawn them  		var p = sim.GetPlayer ();  		var minX = p.X - World.FOV_UPDATE_RADIUS;  		var minY = p.Y - World.FOV_UPDATE_RADIUS;  		var maxX = p.X + World.FOV_UPDATE_RADIUS;  		var maxY = p.Y + World.FOV_UPDATE_RADIUS;  		var sminX = p.X - Parent.lastSightRadius;  		var sminY = p.Y - Parent.lastSightRadius;  		var smaxX = p.X + Parent.lastSightRadius;  		var smaxY = p.Y + Parent.lastSightRadius;  		var possibleCells = new List<Vector2i> ();  		//Logger.Info ("AreaAI"' "OnRound"' "Spawn center " + new {p.X' p.Y}.ToString());  		for (int y = minY; y < maxY; y++) {  			for (int x = minX; x < maxX; x++) {  				// must spawn outside sight  				// TODO if not specified differently?  				if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  					continue;  				}  				if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  					//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  					possibleCells.Add (new Vector2i (x' y));  				}  			}  		}  		// finally spawn  		foreach (var e in encounter) {  			if (possibleCells.Count > 0) {  				var position = possibleCells [sim.Random (possibleCells.Count)];  				possibleCells.Remove (position);  				sim.CreateObject (e.TemplateID' position.X' position.Y);  				this.CurrentThreatLevel += e.ThreatLevel;  				//Logger.Info ("AreaAI"' "OnRound"' "Created object " + e.TemplateID + " at " + position.ToString());  			}  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (deltaThreat > 0) {  	Logger.Info ("AreaAI"' "OnRound"' "Threat " + deltaThreat.ToString () + " spawning");  	var sim = Simulator.Instance;  	// let's find a group of enemies at this threat level  	var encounter = new List<EnemyBlueprint> ();  	var encounterLevel = 0;  	var i = 0;  	var MAX_ITER = 5;  	while (encounterLevel < deltaThreat) {  		var e = this.enemyBlueprints [sim.Random (this.enemyBlueprints.Count)];  		if (encounterLevel + e.ThreatLevel <= deltaThreat) {  			encounterLevel += e.ThreatLevel;  			encounter.Add (e);  			continue;  		}  		if (i++ >= MAX_ITER) {  			Logger.Info ("AreaAI"' "OnRound"' "Unable to generate correct group");  			return;  		}  	}  	if (encounter.Count > 0) {  		// find a place where to spawn them  		var p = sim.GetPlayer ();  		var minX = p.X - World.FOV_UPDATE_RADIUS;  		var minY = p.Y - World.FOV_UPDATE_RADIUS;  		var maxX = p.X + World.FOV_UPDATE_RADIUS;  		var maxY = p.Y + World.FOV_UPDATE_RADIUS;  		var sminX = p.X - Parent.lastSightRadius;  		var sminY = p.Y - Parent.lastSightRadius;  		var smaxX = p.X + Parent.lastSightRadius;  		var smaxY = p.Y + Parent.lastSightRadius;  		var possibleCells = new List<Vector2i> ();  		//Logger.Info ("AreaAI"' "OnRound"' "Spawn center " + new {p.X' p.Y}.ToString());  		for (int y = minY; y < maxY; y++) {  			for (int x = minX; x < maxX; x++) {  				// must spawn outside sight  				// TODO if not specified differently?  				if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  					continue;  				}  				if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  					//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  					possibleCells.Add (new Vector2i (x' y));  				}  			}  		}  		// finally spawn  		foreach (var e in encounter) {  			if (possibleCells.Count > 0) {  				var position = possibleCells [sim.Random (possibleCells.Count)];  				possibleCells.Remove (position);  				sim.CreateObject (e.TemplateID' position.X' position.Y);  				this.CurrentThreatLevel += e.ThreatLevel;  				//Logger.Info ("AreaAI"' "OnRound"' "Created object " + e.TemplateID + " at " + position.ToString());  			}  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (encounter.Count > 0) {  	// find a place where to spawn them  	var p = sim.GetPlayer ();  	var minX = p.X - World.FOV_UPDATE_RADIUS;  	var minY = p.Y - World.FOV_UPDATE_RADIUS;  	var maxX = p.X + World.FOV_UPDATE_RADIUS;  	var maxY = p.Y + World.FOV_UPDATE_RADIUS;  	var sminX = p.X - Parent.lastSightRadius;  	var sminY = p.Y - Parent.lastSightRadius;  	var smaxX = p.X + Parent.lastSightRadius;  	var smaxY = p.Y + Parent.lastSightRadius;  	var possibleCells = new List<Vector2i> ();  	//Logger.Info ("AreaAI"' "OnRound"' "Spawn center " + new {p.X' p.Y}.ToString());  	for (int y = minY; y < maxY; y++) {  		for (int x = minX; x < maxX; x++) {  			// must spawn outside sight  			// TODO if not specified differently?  			if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  				continue;  			}  			if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  				//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  				possibleCells.Add (new Vector2i (x' y));  			}  		}  	}  	// finally spawn  	foreach (var e in encounter) {  		if (possibleCells.Count > 0) {  			var position = possibleCells [sim.Random (possibleCells.Count)];  			possibleCells.Remove (position);  			sim.CreateObject (e.TemplateID' position.X' position.Y);  			this.CurrentThreatLevel += e.ThreatLevel;  			//Logger.Info ("AreaAI"' "OnRound"' "Created object " + e.TemplateID + " at " + position.ToString());  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (encounter.Count > 0) {  	// find a place where to spawn them  	var p = sim.GetPlayer ();  	var minX = p.X - World.FOV_UPDATE_RADIUS;  	var minY = p.Y - World.FOV_UPDATE_RADIUS;  	var maxX = p.X + World.FOV_UPDATE_RADIUS;  	var maxY = p.Y + World.FOV_UPDATE_RADIUS;  	var sminX = p.X - Parent.lastSightRadius;  	var sminY = p.Y - Parent.lastSightRadius;  	var smaxX = p.X + Parent.lastSightRadius;  	var smaxY = p.Y + Parent.lastSightRadius;  	var possibleCells = new List<Vector2i> ();  	//Logger.Info ("AreaAI"' "OnRound"' "Spawn center " + new {p.X' p.Y}.ToString());  	for (int y = minY; y < maxY; y++) {  		for (int x = minX; x < maxX; x++) {  			// must spawn outside sight  			// TODO if not specified differently?  			if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  				continue;  			}  			if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  				//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  				possibleCells.Add (new Vector2i (x' y));  			}  		}  	}  	// finally spawn  	foreach (var e in encounter) {  		if (possibleCells.Count > 0) {  			var position = possibleCells [sim.Random (possibleCells.Count)];  			possibleCells.Remove (position);  			sim.CreateObject (e.TemplateID' position.X' position.Y);  			this.CurrentThreatLevel += e.ThreatLevel;  			//Logger.Info ("AreaAI"' "OnRound"' "Created object " + e.TemplateID + " at " + position.ToString());  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (encounter.Count > 0) {  	// find a place where to spawn them  	var p = sim.GetPlayer ();  	var minX = p.X - World.FOV_UPDATE_RADIUS;  	var minY = p.Y - World.FOV_UPDATE_RADIUS;  	var maxX = p.X + World.FOV_UPDATE_RADIUS;  	var maxY = p.Y + World.FOV_UPDATE_RADIUS;  	var sminX = p.X - Parent.lastSightRadius;  	var sminY = p.Y - Parent.lastSightRadius;  	var smaxX = p.X + Parent.lastSightRadius;  	var smaxY = p.Y + Parent.lastSightRadius;  	var possibleCells = new List<Vector2i> ();  	//Logger.Info ("AreaAI"' "OnRound"' "Spawn center " + new {p.X' p.Y}.ToString());  	for (int y = minY; y < maxY; y++) {  		for (int x = minX; x < maxX; x++) {  			// must spawn outside sight  			// TODO if not specified differently?  			if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  				continue;  			}  			if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  				//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  				possibleCells.Add (new Vector2i (x' y));  			}  		}  	}  	// finally spawn  	foreach (var e in encounter) {  		if (possibleCells.Count > 0) {  			var position = possibleCells [sim.Random (possibleCells.Count)];  			possibleCells.Remove (position);  			sim.CreateObject (e.TemplateID' position.X' position.Y);  			this.CurrentThreatLevel += e.ThreatLevel;  			//Logger.Info ("AreaAI"' "OnRound"' "Created object " + e.TemplateID + " at " + position.ToString());  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (encounter.Count > 0) {  	// find a place where to spawn them  	var p = sim.GetPlayer ();  	var minX = p.X - World.FOV_UPDATE_RADIUS;  	var minY = p.Y - World.FOV_UPDATE_RADIUS;  	var maxX = p.X + World.FOV_UPDATE_RADIUS;  	var maxY = p.Y + World.FOV_UPDATE_RADIUS;  	var sminX = p.X - Parent.lastSightRadius;  	var sminY = p.Y - Parent.lastSightRadius;  	var smaxX = p.X + Parent.lastSightRadius;  	var smaxY = p.Y + Parent.lastSightRadius;  	var possibleCells = new List<Vector2i> ();  	//Logger.Info ("AreaAI"' "OnRound"' "Spawn center " + new {p.X' p.Y}.ToString());  	for (int y = minY; y < maxY; y++) {  		for (int x = minX; x < maxX; x++) {  			// must spawn outside sight  			// TODO if not specified differently?  			if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  				continue;  			}  			if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  				//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  				possibleCells.Add (new Vector2i (x' y));  			}  		}  	}  	// finally spawn  	foreach (var e in encounter) {  		if (possibleCells.Count > 0) {  			var position = possibleCells [sim.Random (possibleCells.Count)];  			possibleCells.Remove (position);  			sim.CreateObject (e.TemplateID' position.X' position.Y);  			this.CurrentThreatLevel += e.ThreatLevel;  			//Logger.Info ("AreaAI"' "OnRound"' "Created object " + e.TemplateID + " at " + position.ToString());  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: for (int y = minY; y < maxY; y++) {  	for (int x = minX; x < maxX; x++) {  		// must spawn outside sight  		// TODO if not specified differently?  		if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  			continue;  		}  		if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  			//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  			possibleCells.Add (new Vector2i (x' y));  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: for (int y = minY; y < maxY; y++) {  	for (int x = minX; x < maxX; x++) {  		// must spawn outside sight  		// TODO if not specified differently?  		if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  			continue;  		}  		if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  			//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  			possibleCells.Add (new Vector2i (x' y));  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: for (int y = minY; y < maxY; y++) {  	for (int x = minX; x < maxX; x++) {  		// must spawn outside sight  		// TODO if not specified differently?  		if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  			continue;  		}  		if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  			//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  			possibleCells.Add (new Vector2i (x' y));  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: for (int y = minY; y < maxY; y++) {  	for (int x = minX; x < maxX; x++) {  		// must spawn outside sight  		// TODO if not specified differently?  		if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  			continue;  		}  		if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  			//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  			possibleCells.Add (new Vector2i (x' y));  		}  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: for (int x = minX; x < maxX; x++) {  	// must spawn outside sight  	// TODO if not specified differently?  	if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  		continue;  	}  	if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  		//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  		possibleCells.Add (new Vector2i (x' y));  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: for (int x = minX; x < maxX; x++) {  	// must spawn outside sight  	// TODO if not specified differently?  	if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  		continue;  	}  	if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  		//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  		possibleCells.Add (new Vector2i (x' y));  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: for (int x = minX; x < maxX; x++) {  	// must spawn outside sight  	// TODO if not specified differently?  	if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  		continue;  	}  	if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  		//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  		possibleCells.Add (new Vector2i (x' y));  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: for (int x = minX; x < maxX; x++) {  	// must spawn outside sight  	// TODO if not specified differently?  	if (x > sminX && x < smaxX && y > sminY && y < smaxY) {  		continue;  	}  	if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  		//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  		possibleCells.Add (new Vector2i (x' y));  	}  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  	//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  	possibleCells.Add (new Vector2i (x' y));  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  	//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  	possibleCells.Add (new Vector2i (x' y));  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  	//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  	possibleCells.Add (new Vector2i (x' y));  }  
Magic Number,WizardsDuel.Game,AreaAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (x > 3 && y > 3 && x < sim.world.GridWidth - 2 && y < sim.world.GridHeight - 2 && sim.world.IsWalkable (x' y) && sim.GetObjectAt (x' y) == null) {  	//Logger.Info ("AreaAI"' "OnRound"' "Adding possible cell " + new {x' y}.ToString());  	possibleCells.Add (new Vector2i (x' y));  }  
Magic Number,WizardsDuel.Game,DestructibleAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnDeath,The following statement contains a magic number: foreach (var e in objInRadius) {  	if (e != this.Parent) {  		Simulator.Instance.events.WaitAndRun (200' new MethodEvent (() => e.Damage (this.Damage' this.DamageType)));  	}  }  
Magic Number,WizardsDuel.Game,DestructibleAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnDeath,The following statement contains a magic number: if (e != this.Parent) {  	Simulator.Instance.events.WaitAndRun (200' new MethodEvent (() => e.Damage (this.Damage' this.DamageType)));  }  
Magic Number,WizardsDuel.Game,DestructibleAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnDeath,The following statement contains a magic number: Simulator.Instance.events.WaitAndRun (200' new MethodEvent (() => e.Damage (this.Damage' this.DamageType)));  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (this.Parent.Visible == true && skill != null && enemiesInRange.Count > 0 && skill.OnTargetScript != null && skill.OnTargetScript.Count > 0) {  	if (enemiesInRange.Count > 0 && skill != null) {  		Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying tageted skill " + skill.Name + " on " + enemiesInRange [0].ID);  		Simulator.Instance.TrySkill (skill' this.Parent' enemiesInRange [0]);  	}  }  else if (this.Parent.Visible == true && skill != null && skill.OnSelfScript != null && skill.OnSelfScript.Count > 0) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying self skill " + skill.Name);  	Simulator.Instance.TrySkill (skill' this.Parent);  }  else if (!Parent.HasTag ("FIXED")) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying to move");  	enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  	var target = (enemiesInRange.Count > 0) ? enemiesInRange [0] : Simulator.Instance.GetPlayer ();  	if (target.Health > 0) {  		var dx = Math.Sign (target.X - this.Parent.X);  		var dy = Math.Sign (target.Y - this.Parent.Y);  		var ex = this.Parent.X + dx;  		var ey = this.Parent.Y + dy;  		var world = Simulator.Instance.world;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  			Simulator.Instance.Shift (this.Parent.ID' dx' dy);  		}  		else if (dx == 0) {  			ex -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  				return;  			}  		}  		else if (dy == 0) {  			ey -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  				return;  			}  		}  		else {  			dx = Simulator.Instance.Random (3) - 1;  			dy = Simulator.Instance.Random (3) - 1;  			Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  		}  	}  }  else {  	Logger.Debug ("MeleeAI"' "OnRound"' "Should not happen for " + this.Parent.ID);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (this.Parent.Visible == true && skill != null && enemiesInRange.Count > 0 && skill.OnTargetScript != null && skill.OnTargetScript.Count > 0) {  	if (enemiesInRange.Count > 0 && skill != null) {  		Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying tageted skill " + skill.Name + " on " + enemiesInRange [0].ID);  		Simulator.Instance.TrySkill (skill' this.Parent' enemiesInRange [0]);  	}  }  else if (this.Parent.Visible == true && skill != null && skill.OnSelfScript != null && skill.OnSelfScript.Count > 0) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying self skill " + skill.Name);  	Simulator.Instance.TrySkill (skill' this.Parent);  }  else if (!Parent.HasTag ("FIXED")) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying to move");  	enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  	var target = (enemiesInRange.Count > 0) ? enemiesInRange [0] : Simulator.Instance.GetPlayer ();  	if (target.Health > 0) {  		var dx = Math.Sign (target.X - this.Parent.X);  		var dy = Math.Sign (target.Y - this.Parent.Y);  		var ex = this.Parent.X + dx;  		var ey = this.Parent.Y + dy;  		var world = Simulator.Instance.world;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  			Simulator.Instance.Shift (this.Parent.ID' dx' dy);  		}  		else if (dx == 0) {  			ex -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  				return;  			}  		}  		else if (dy == 0) {  			ey -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  				return;  			}  		}  		else {  			dx = Simulator.Instance.Random (3) - 1;  			dy = Simulator.Instance.Random (3) - 1;  			Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  		}  	}  }  else {  	Logger.Debug ("MeleeAI"' "OnRound"' "Should not happen for " + this.Parent.ID);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (this.Parent.Visible == true && skill != null && enemiesInRange.Count > 0 && skill.OnTargetScript != null && skill.OnTargetScript.Count > 0) {  	if (enemiesInRange.Count > 0 && skill != null) {  		Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying tageted skill " + skill.Name + " on " + enemiesInRange [0].ID);  		Simulator.Instance.TrySkill (skill' this.Parent' enemiesInRange [0]);  	}  }  else if (this.Parent.Visible == true && skill != null && skill.OnSelfScript != null && skill.OnSelfScript.Count > 0) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying self skill " + skill.Name);  	Simulator.Instance.TrySkill (skill' this.Parent);  }  else if (!Parent.HasTag ("FIXED")) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying to move");  	enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  	var target = (enemiesInRange.Count > 0) ? enemiesInRange [0] : Simulator.Instance.GetPlayer ();  	if (target.Health > 0) {  		var dx = Math.Sign (target.X - this.Parent.X);  		var dy = Math.Sign (target.Y - this.Parent.Y);  		var ex = this.Parent.X + dx;  		var ey = this.Parent.Y + dy;  		var world = Simulator.Instance.world;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  			Simulator.Instance.Shift (this.Parent.ID' dx' dy);  		}  		else if (dx == 0) {  			ex -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  				return;  			}  		}  		else if (dy == 0) {  			ey -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  				return;  			}  		}  		else {  			dx = Simulator.Instance.Random (3) - 1;  			dy = Simulator.Instance.Random (3) - 1;  			Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  		}  	}  }  else {  	Logger.Debug ("MeleeAI"' "OnRound"' "Should not happen for " + this.Parent.ID);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (this.Parent.Visible == true && skill != null && enemiesInRange.Count > 0 && skill.OnTargetScript != null && skill.OnTargetScript.Count > 0) {  	if (enemiesInRange.Count > 0 && skill != null) {  		Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying tageted skill " + skill.Name + " on " + enemiesInRange [0].ID);  		Simulator.Instance.TrySkill (skill' this.Parent' enemiesInRange [0]);  	}  }  else if (this.Parent.Visible == true && skill != null && skill.OnSelfScript != null && skill.OnSelfScript.Count > 0) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying self skill " + skill.Name);  	Simulator.Instance.TrySkill (skill' this.Parent);  }  else if (!Parent.HasTag ("FIXED")) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying to move");  	enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  	var target = (enemiesInRange.Count > 0) ? enemiesInRange [0] : Simulator.Instance.GetPlayer ();  	if (target.Health > 0) {  		var dx = Math.Sign (target.X - this.Parent.X);  		var dy = Math.Sign (target.Y - this.Parent.Y);  		var ex = this.Parent.X + dx;  		var ey = this.Parent.Y + dy;  		var world = Simulator.Instance.world;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  			Simulator.Instance.Shift (this.Parent.ID' dx' dy);  		}  		else if (dx == 0) {  			ex -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  				return;  			}  		}  		else if (dy == 0) {  			ey -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  				return;  			}  		}  		else {  			dx = Simulator.Instance.Random (3) - 1;  			dy = Simulator.Instance.Random (3) - 1;  			Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  		}  	}  }  else {  	Logger.Debug ("MeleeAI"' "OnRound"' "Should not happen for " + this.Parent.ID);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (this.Parent.Visible == true && skill != null && enemiesInRange.Count > 0 && skill.OnTargetScript != null && skill.OnTargetScript.Count > 0) {  	if (enemiesInRange.Count > 0 && skill != null) {  		Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying tageted skill " + skill.Name + " on " + enemiesInRange [0].ID);  		Simulator.Instance.TrySkill (skill' this.Parent' enemiesInRange [0]);  	}  }  else if (this.Parent.Visible == true && skill != null && skill.OnSelfScript != null && skill.OnSelfScript.Count > 0) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying self skill " + skill.Name);  	Simulator.Instance.TrySkill (skill' this.Parent);  }  else if (!Parent.HasTag ("FIXED")) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying to move");  	enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  	var target = (enemiesInRange.Count > 0) ? enemiesInRange [0] : Simulator.Instance.GetPlayer ();  	if (target.Health > 0) {  		var dx = Math.Sign (target.X - this.Parent.X);  		var dy = Math.Sign (target.Y - this.Parent.Y);  		var ex = this.Parent.X + dx;  		var ey = this.Parent.Y + dy;  		var world = Simulator.Instance.world;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  			Simulator.Instance.Shift (this.Parent.ID' dx' dy);  		}  		else if (dx == 0) {  			ex -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  				return;  			}  		}  		else if (dy == 0) {  			ey -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  				return;  			}  		}  		else {  			dx = Simulator.Instance.Random (3) - 1;  			dy = Simulator.Instance.Random (3) - 1;  			Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  		}  	}  }  else {  	Logger.Debug ("MeleeAI"' "OnRound"' "Should not happen for " + this.Parent.ID);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (this.Parent.Visible == true && skill != null && skill.OnSelfScript != null && skill.OnSelfScript.Count > 0) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying self skill " + skill.Name);  	Simulator.Instance.TrySkill (skill' this.Parent);  }  else if (!Parent.HasTag ("FIXED")) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying to move");  	enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  	var target = (enemiesInRange.Count > 0) ? enemiesInRange [0] : Simulator.Instance.GetPlayer ();  	if (target.Health > 0) {  		var dx = Math.Sign (target.X - this.Parent.X);  		var dy = Math.Sign (target.Y - this.Parent.Y);  		var ex = this.Parent.X + dx;  		var ey = this.Parent.Y + dy;  		var world = Simulator.Instance.world;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  			Simulator.Instance.Shift (this.Parent.ID' dx' dy);  		}  		else if (dx == 0) {  			ex -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  				return;  			}  		}  		else if (dy == 0) {  			ey -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  				return;  			}  		}  		else {  			dx = Simulator.Instance.Random (3) - 1;  			dy = Simulator.Instance.Random (3) - 1;  			Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  		}  	}  }  else {  	Logger.Debug ("MeleeAI"' "OnRound"' "Should not happen for " + this.Parent.ID);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (this.Parent.Visible == true && skill != null && skill.OnSelfScript != null && skill.OnSelfScript.Count > 0) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying self skill " + skill.Name);  	Simulator.Instance.TrySkill (skill' this.Parent);  }  else if (!Parent.HasTag ("FIXED")) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying to move");  	enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  	var target = (enemiesInRange.Count > 0) ? enemiesInRange [0] : Simulator.Instance.GetPlayer ();  	if (target.Health > 0) {  		var dx = Math.Sign (target.X - this.Parent.X);  		var dy = Math.Sign (target.Y - this.Parent.Y);  		var ex = this.Parent.X + dx;  		var ey = this.Parent.Y + dy;  		var world = Simulator.Instance.world;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  			Simulator.Instance.Shift (this.Parent.ID' dx' dy);  		}  		else if (dx == 0) {  			ex -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  				return;  			}  		}  		else if (dy == 0) {  			ey -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  				return;  			}  		}  		else {  			dx = Simulator.Instance.Random (3) - 1;  			dy = Simulator.Instance.Random (3) - 1;  			Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  		}  	}  }  else {  	Logger.Debug ("MeleeAI"' "OnRound"' "Should not happen for " + this.Parent.ID);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (this.Parent.Visible == true && skill != null && skill.OnSelfScript != null && skill.OnSelfScript.Count > 0) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying self skill " + skill.Name);  	Simulator.Instance.TrySkill (skill' this.Parent);  }  else if (!Parent.HasTag ("FIXED")) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying to move");  	enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  	var target = (enemiesInRange.Count > 0) ? enemiesInRange [0] : Simulator.Instance.GetPlayer ();  	if (target.Health > 0) {  		var dx = Math.Sign (target.X - this.Parent.X);  		var dy = Math.Sign (target.Y - this.Parent.Y);  		var ex = this.Parent.X + dx;  		var ey = this.Parent.Y + dy;  		var world = Simulator.Instance.world;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  			Simulator.Instance.Shift (this.Parent.ID' dx' dy);  		}  		else if (dx == 0) {  			ex -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  				return;  			}  		}  		else if (dy == 0) {  			ey -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  				return;  			}  		}  		else {  			dx = Simulator.Instance.Random (3) - 1;  			dy = Simulator.Instance.Random (3) - 1;  			Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  		}  	}  }  else {  	Logger.Debug ("MeleeAI"' "OnRound"' "Should not happen for " + this.Parent.ID);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (this.Parent.Visible == true && skill != null && skill.OnSelfScript != null && skill.OnSelfScript.Count > 0) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying self skill " + skill.Name);  	Simulator.Instance.TrySkill (skill' this.Parent);  }  else if (!Parent.HasTag ("FIXED")) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying to move");  	enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  	var target = (enemiesInRange.Count > 0) ? enemiesInRange [0] : Simulator.Instance.GetPlayer ();  	if (target.Health > 0) {  		var dx = Math.Sign (target.X - this.Parent.X);  		var dy = Math.Sign (target.Y - this.Parent.Y);  		var ex = this.Parent.X + dx;  		var ey = this.Parent.Y + dy;  		var world = Simulator.Instance.world;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  			Simulator.Instance.Shift (this.Parent.ID' dx' dy);  		}  		else if (dx == 0) {  			ex -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  				return;  			}  		}  		else if (dy == 0) {  			ey -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  				return;  			}  		}  		else {  			dx = Simulator.Instance.Random (3) - 1;  			dy = Simulator.Instance.Random (3) - 1;  			Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  		}  	}  }  else {  	Logger.Debug ("MeleeAI"' "OnRound"' "Should not happen for " + this.Parent.ID);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (this.Parent.Visible == true && skill != null && skill.OnSelfScript != null && skill.OnSelfScript.Count > 0) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying self skill " + skill.Name);  	Simulator.Instance.TrySkill (skill' this.Parent);  }  else if (!Parent.HasTag ("FIXED")) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying to move");  	enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  	var target = (enemiesInRange.Count > 0) ? enemiesInRange [0] : Simulator.Instance.GetPlayer ();  	if (target.Health > 0) {  		var dx = Math.Sign (target.X - this.Parent.X);  		var dy = Math.Sign (target.Y - this.Parent.Y);  		var ex = this.Parent.X + dx;  		var ey = this.Parent.Y + dy;  		var world = Simulator.Instance.world;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  			Simulator.Instance.Shift (this.Parent.ID' dx' dy);  		}  		else if (dx == 0) {  			ex -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  				return;  			}  		}  		else if (dy == 0) {  			ey -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  				return;  			}  		}  		else {  			dx = Simulator.Instance.Random (3) - 1;  			dy = Simulator.Instance.Random (3) - 1;  			Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  		}  	}  }  else {  	Logger.Debug ("MeleeAI"' "OnRound"' "Should not happen for " + this.Parent.ID);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (!Parent.HasTag ("FIXED")) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying to move");  	enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  	var target = (enemiesInRange.Count > 0) ? enemiesInRange [0] : Simulator.Instance.GetPlayer ();  	if (target.Health > 0) {  		var dx = Math.Sign (target.X - this.Parent.X);  		var dy = Math.Sign (target.Y - this.Parent.Y);  		var ex = this.Parent.X + dx;  		var ey = this.Parent.Y + dy;  		var world = Simulator.Instance.world;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  			Simulator.Instance.Shift (this.Parent.ID' dx' dy);  		}  		else if (dx == 0) {  			ex -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  				return;  			}  		}  		else if (dy == 0) {  			ey -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  				return;  			}  		}  		else {  			dx = Simulator.Instance.Random (3) - 1;  			dy = Simulator.Instance.Random (3) - 1;  			Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  		}  	}  }  else {  	Logger.Debug ("MeleeAI"' "OnRound"' "Should not happen for " + this.Parent.ID);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (!Parent.HasTag ("FIXED")) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying to move");  	enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  	var target = (enemiesInRange.Count > 0) ? enemiesInRange [0] : Simulator.Instance.GetPlayer ();  	if (target.Health > 0) {  		var dx = Math.Sign (target.X - this.Parent.X);  		var dy = Math.Sign (target.Y - this.Parent.Y);  		var ex = this.Parent.X + dx;  		var ey = this.Parent.Y + dy;  		var world = Simulator.Instance.world;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  			Simulator.Instance.Shift (this.Parent.ID' dx' dy);  		}  		else if (dx == 0) {  			ex -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  				return;  			}  		}  		else if (dy == 0) {  			ey -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  				return;  			}  		}  		else {  			dx = Simulator.Instance.Random (3) - 1;  			dy = Simulator.Instance.Random (3) - 1;  			Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  		}  	}  }  else {  	Logger.Debug ("MeleeAI"' "OnRound"' "Should not happen for " + this.Parent.ID);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (!Parent.HasTag ("FIXED")) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying to move");  	enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  	var target = (enemiesInRange.Count > 0) ? enemiesInRange [0] : Simulator.Instance.GetPlayer ();  	if (target.Health > 0) {  		var dx = Math.Sign (target.X - this.Parent.X);  		var dy = Math.Sign (target.Y - this.Parent.Y);  		var ex = this.Parent.X + dx;  		var ey = this.Parent.Y + dy;  		var world = Simulator.Instance.world;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  			Simulator.Instance.Shift (this.Parent.ID' dx' dy);  		}  		else if (dx == 0) {  			ex -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  				return;  			}  		}  		else if (dy == 0) {  			ey -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  				return;  			}  		}  		else {  			dx = Simulator.Instance.Random (3) - 1;  			dy = Simulator.Instance.Random (3) - 1;  			Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  		}  	}  }  else {  	Logger.Debug ("MeleeAI"' "OnRound"' "Should not happen for " + this.Parent.ID);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (!Parent.HasTag ("FIXED")) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying to move");  	enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  	var target = (enemiesInRange.Count > 0) ? enemiesInRange [0] : Simulator.Instance.GetPlayer ();  	if (target.Health > 0) {  		var dx = Math.Sign (target.X - this.Parent.X);  		var dy = Math.Sign (target.Y - this.Parent.Y);  		var ex = this.Parent.X + dx;  		var ey = this.Parent.Y + dy;  		var world = Simulator.Instance.world;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  			Simulator.Instance.Shift (this.Parent.ID' dx' dy);  		}  		else if (dx == 0) {  			ex -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  				return;  			}  		}  		else if (dy == 0) {  			ey -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  				return;  			}  		}  		else {  			dx = Simulator.Instance.Random (3) - 1;  			dy = Simulator.Instance.Random (3) - 1;  			Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  		}  	}  }  else {  	Logger.Debug ("MeleeAI"' "OnRound"' "Should not happen for " + this.Parent.ID);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (!Parent.HasTag ("FIXED")) {  	Logger.Debug ("MeleeAI"' "OnRound"' this.Parent.ID + " Trying to move");  	enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  	var target = (enemiesInRange.Count > 0) ? enemiesInRange [0] : Simulator.Instance.GetPlayer ();  	if (target.Health > 0) {  		var dx = Math.Sign (target.X - this.Parent.X);  		var dy = Math.Sign (target.Y - this.Parent.Y);  		var ex = this.Parent.X + dx;  		var ey = this.Parent.Y + dy;  		var world = Simulator.Instance.world;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  			Simulator.Instance.Shift (this.Parent.ID' dx' dy);  		}  		else if (dx == 0) {  			ex -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  				return;  			}  		}  		else if (dy == 0) {  			ey -= 1;  			if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  				return;  			}  			else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  				Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  				return;  			}  		}  		else {  			dx = Simulator.Instance.Random (3) - 1;  			dy = Simulator.Instance.Random (3) - 1;  			Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  		}  	}  }  else {  	Logger.Debug ("MeleeAI"' "OnRound"' "Should not happen for " + this.Parent.ID);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: enemiesInRange = Simulator.Instance.GetEnemiesAt (enemyFaction' this.Parent.X' this.Parent.Y' 7);  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (target.Health > 0) {  	var dx = Math.Sign (target.X - this.Parent.X);  	var dy = Math.Sign (target.Y - this.Parent.Y);  	var ex = this.Parent.X + dx;  	var ey = this.Parent.Y + dy;  	var world = Simulator.Instance.world;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  		Simulator.Instance.Shift (this.Parent.ID' dx' dy);  	}  	else if (dx == 0) {  		ex -= 1;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  			return;  		}  		else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  			Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  			return;  		}  	}  	else if (dy == 0) {  		ey -= 1;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  			return;  		}  		else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  			Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  			return;  		}  	}  	else {  		dx = Simulator.Instance.Random (3) - 1;  		dy = Simulator.Instance.Random (3) - 1;  		Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  	}  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (target.Health > 0) {  	var dx = Math.Sign (target.X - this.Parent.X);  	var dy = Math.Sign (target.Y - this.Parent.Y);  	var ex = this.Parent.X + dx;  	var ey = this.Parent.Y + dy;  	var world = Simulator.Instance.world;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  		Simulator.Instance.Shift (this.Parent.ID' dx' dy);  	}  	else if (dx == 0) {  		ex -= 1;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  			return;  		}  		else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  			Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  			return;  		}  	}  	else if (dy == 0) {  		ey -= 1;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  			return;  		}  		else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  			Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  			return;  		}  	}  	else {  		dx = Simulator.Instance.Random (3) - 1;  		dy = Simulator.Instance.Random (3) - 1;  		Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  	}  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (target.Health > 0) {  	var dx = Math.Sign (target.X - this.Parent.X);  	var dy = Math.Sign (target.Y - this.Parent.Y);  	var ex = this.Parent.X + dx;  	var ey = this.Parent.Y + dy;  	var world = Simulator.Instance.world;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  		Simulator.Instance.Shift (this.Parent.ID' dx' dy);  	}  	else if (dx == 0) {  		ex -= 1;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  			return;  		}  		else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  			Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  			return;  		}  	}  	else if (dy == 0) {  		ey -= 1;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  			return;  		}  		else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  			Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  			return;  		}  	}  	else {  		dx = Simulator.Instance.Random (3) - 1;  		dy = Simulator.Instance.Random (3) - 1;  		Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  	}  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (target.Health > 0) {  	var dx = Math.Sign (target.X - this.Parent.X);  	var dy = Math.Sign (target.Y - this.Parent.Y);  	var ex = this.Parent.X + dx;  	var ey = this.Parent.Y + dy;  	var world = Simulator.Instance.world;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  		Simulator.Instance.Shift (this.Parent.ID' dx' dy);  	}  	else if (dx == 0) {  		ex -= 1;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  			return;  		}  		else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  			Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  			return;  		}  	}  	else if (dy == 0) {  		ey -= 1;  		if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  			Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  			return;  		}  		else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  			Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  			return;  		}  	}  	else {  		dx = Simulator.Instance.Random (3) - 1;  		dy = Simulator.Instance.Random (3) - 1;  		Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  	}  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  	Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  	Simulator.Instance.Shift (this.Parent.ID' dx' dy);  }  else if (dx == 0) {  	ex -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  		return;  	}  }  else if (dy == 0) {  	ey -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  		return;  	}  }  else {  	dx = Simulator.Instance.Random (3) - 1;  	dy = Simulator.Instance.Random (3) - 1;  	Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  	Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  	Simulator.Instance.Shift (this.Parent.ID' dx' dy);  }  else if (dx == 0) {  	ex -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  		return;  	}  }  else if (dy == 0) {  	ey -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  		return;  	}  }  else {  	dx = Simulator.Instance.Random (3) - 1;  	dy = Simulator.Instance.Random (3) - 1;  	Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  	Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  	Simulator.Instance.Shift (this.Parent.ID' dx' dy);  }  else if (dx == 0) {  	ex -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  		return;  	}  }  else if (dy == 0) {  	ey -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  		return;  	}  }  else {  	dx = Simulator.Instance.Random (3) - 1;  	dy = Simulator.Instance.Random (3) - 1;  	Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  	Logger.Debug ("MeleeAI"' "OnRound"' "Moving " + Parent.ID.ToString ());  	Simulator.Instance.Shift (this.Parent.ID' dx' dy);  }  else if (dx == 0) {  	ex -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  		return;  	}  }  else if (dy == 0) {  	ey -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  		return;  	}  }  else {  	dx = Simulator.Instance.Random (3) - 1;  	dy = Simulator.Instance.Random (3) - 1;  	Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (dx == 0) {  	ex -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  		return;  	}  }  else if (dy == 0) {  	ey -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  		return;  	}  }  else {  	dx = Simulator.Instance.Random (3) - 1;  	dy = Simulator.Instance.Random (3) - 1;  	Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (dx == 0) {  	ex -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  		return;  	}  }  else if (dy == 0) {  	ey -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  		return;  	}  }  else {  	dx = Simulator.Instance.Random (3) - 1;  	dy = Simulator.Instance.Random (3) - 1;  	Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (dx == 0) {  	ex -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  		return;  	}  }  else if (dy == 0) {  	ey -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  		return;  	}  }  else {  	dx = Simulator.Instance.Random (3) - 1;  	dy = Simulator.Instance.Random (3) - 1;  	Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (dx == 0) {  	ex -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  		return;  	}  }  else if (dy == 0) {  	ey -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  		return;  	}  }  else {  	dx = Simulator.Instance.Random (3) - 1;  	dy = Simulator.Instance.Random (3) - 1;  	Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  	Simulator.Instance.Shift (this.Parent.ID' dx - 1' dy);  	return;  }  else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  	Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  	return;  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (Simulator.Instance.IsSafeToWalk (this.Parent' ex + 2' ey)) {  	Simulator.Instance.Shift (this.Parent.ID' dx + 1' dy);  	return;  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (dy == 0) {  	ey -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  		return;  	}  }  else {  	dx = Simulator.Instance.Random (3) - 1;  	dy = Simulator.Instance.Random (3) - 1;  	Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (dy == 0) {  	ey -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  		return;  	}  }  else {  	dx = Simulator.Instance.Random (3) - 1;  	dy = Simulator.Instance.Random (3) - 1;  	Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (dy == 0) {  	ey -= 1;  	if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  		return;  	}  	else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  		Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  		return;  	}  }  else {  	dx = Simulator.Instance.Random (3) - 1;  	dy = Simulator.Instance.Random (3) - 1;  	Simulator.Instance.CanShift (this.Parent.ID' dx' dy' true);  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey)) {  	Simulator.Instance.Shift (this.Parent.ID' dx' dy - 1);  	return;  }  else if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  	Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  	return;  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: if (Simulator.Instance.IsSafeToWalk (this.Parent' ex' ey + 2)) {  	Simulator.Instance.Shift (this.Parent.ID' dx' dy + 1);  	return;  }  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: dx = Simulator.Instance.Random (3) - 1;  
Magic Number,WizardsDuel.Game,MeleeAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnRound,The following statement contains a magic number: dy = Simulator.Instance.Random (3) - 1;  
Magic Number,WizardsDuel.Game,IceAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnCreate,The following statement contains a magic number: foreach (var entity in entitiesOverMe) {  	if (entity.HasTag ("HAZARD") && entity.HasTag ("GROUND")) {  		entity.Damage (5' Simulator.DAMAGE_TYPE_COLD);  		/*if (entity.HasTag ("ACTIVE") && entity.HasTag ("FIRE")) { 						 					} else { 						Simulator.Instance.Kill (entity); 					}*/}  }  
Magic Number,WizardsDuel.Game,IceAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnCreate,The following statement contains a magic number: if (entity.HasTag ("HAZARD") && entity.HasTag ("GROUND")) {  	entity.Damage (5' Simulator.DAMAGE_TYPE_COLD);  	/*if (entity.HasTag ("ACTIVE") && entity.HasTag ("FIRE")) { 						 					} else { 						Simulator.Instance.Kill (entity); 					}*/}  
Magic Number,WizardsDuel.Game,IceAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnCreate,The following statement contains a magic number: entity.Damage (5' Simulator.DAMAGE_TYPE_COLD);  
Magic Number,WizardsDuel.Game,UserAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnDeath,The following statement contains a magic number: label = new Label ("Press SPACE to restart"' 48);  
Magic Number,WizardsDuel.Game,UserAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnDeath,The following statement contains a magic number: position.Y += 50;  
Magic Number,WizardsDuel.Game,UserAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnDeath,The following statement contains a magic number: label = new Label ("Thank you for playing this Alpha release"' 32);  
Magic Number,WizardsDuel.Game,UserAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnDeath,The following statement contains a magic number: position.Y += 160;  
Magic Number,WizardsDuel.Game,UserAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnDeath,The following statement contains a magic number: label = new Label ("An entire world will be developed in the next versions!"' 32);  
Magic Number,WizardsDuel.Game,UserAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnDeath,The following statement contains a magic number: position.Y += 80;  
Magic Number,WizardsDuel.Game,UserAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnDeath,The following statement contains a magic number: label = new Label ("With new levels' bosses' hordes of enemies and new spells and combinations!"' 32);  
Magic Number,WizardsDuel.Game,UserAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnDeath,The following statement contains a magic number: position.Y += 40;  
Magic Number,WizardsDuel.Game,UserAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnDeath,The following statement contains a magic number: label = new Label ("But we would gladly accept your comments and critiques!"' 32);  
Magic Number,WizardsDuel.Game,UserAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnDeath,The following statement contains a magic number: position.Y += 40;  
Magic Number,WizardsDuel.Game,UserAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnDeath,The following statement contains a magic number: label = new Label ("Contact us on http://www.wizardsofunica.com!"' 32);  
Magic Number,WizardsDuel.Game,UserAI,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\ArtificialIntelligence.cs,OnDeath,The following statement contains a magic number: position.Y += 40;  
Magic Number,WizardsDuel.Game,Entity,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Entity.cs,Run,The following statement contains a magic number: if (sim.world.InLos (this.X' this.Y)) {  	this.LastSeen = this.Initiative;  	if (this.Visible == false) {  		//Logger.Debug ("Entity"' "Run"' "Showing " + this.ID);  		this.Visible = true;  		this.OutObject.AddAnimator (new WizardsDuel.Io.ColorAnimation (Color.Transparent' Color.White' 300));  	}  }  else {  	if (this.Visible == true && this.LastSeen + Simulator.ROUND_LENGTH < this.Initiative) {  		this.Visible = false;  		this.OutObject.AddAnimator (new WizardsDuel.Io.ColorAnimation (Color.White' Color.Transparent' 300));  	}  }  
Magic Number,WizardsDuel.Game,Entity,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Entity.cs,Run,The following statement contains a magic number: if (sim.world.InLos (this.X' this.Y)) {  	this.LastSeen = this.Initiative;  	if (this.Visible == false) {  		//Logger.Debug ("Entity"' "Run"' "Showing " + this.ID);  		this.Visible = true;  		this.OutObject.AddAnimator (new WizardsDuel.Io.ColorAnimation (Color.Transparent' Color.White' 300));  	}  }  else {  	if (this.Visible == true && this.LastSeen + Simulator.ROUND_LENGTH < this.Initiative) {  		this.Visible = false;  		this.OutObject.AddAnimator (new WizardsDuel.Io.ColorAnimation (Color.White' Color.Transparent' 300));  	}  }  
Magic Number,WizardsDuel.Game,Entity,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Entity.cs,Run,The following statement contains a magic number: if (this.Visible == false) {  	//Logger.Debug ("Entity"' "Run"' "Showing " + this.ID);  	this.Visible = true;  	this.OutObject.AddAnimator (new WizardsDuel.Io.ColorAnimation (Color.Transparent' Color.White' 300));  }  
Magic Number,WizardsDuel.Game,Entity,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Entity.cs,Run,The following statement contains a magic number: this.OutObject.AddAnimator (new WizardsDuel.Io.ColorAnimation (Color.Transparent' Color.White' 300));  
Magic Number,WizardsDuel.Game,Entity,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Entity.cs,Run,The following statement contains a magic number: if (this.Visible == true && this.LastSeen + Simulator.ROUND_LENGTH < this.Initiative) {  	this.Visible = false;  	this.OutObject.AddAnimator (new WizardsDuel.Io.ColorAnimation (Color.White' Color.Transparent' 300));  }  
Magic Number,WizardsDuel.Game,Entity,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Entity.cs,Run,The following statement contains a magic number: this.OutObject.AddAnimator (new WizardsDuel.Io.ColorAnimation (Color.White' Color.Transparent' 300));  
Magic Number,WizardsDuel.Game,BurningEffect,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Effects.cs,OnAdded,The following statement contains a magic number: this.Parent.OutObject.Color = new SFML.Graphics.Color (255' 127' 127);  
Magic Number,WizardsDuel.Game,BurningEffect,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Effects.cs,OnAdded,The following statement contains a magic number: this.Parent.OutObject.Color = new SFML.Graphics.Color (255' 127' 127);  
Magic Number,WizardsDuel.Game,BurningEffect,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Effects.cs,OnAdded,The following statement contains a magic number: this.Parent.OutObject.Color = new SFML.Graphics.Color (255' 127' 127);  
Magic Number,WizardsDuel.Game,FreezeEffect,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Effects.cs,OnAdded,The following statement contains a magic number: this.Parent.OutObject.Color = new SFML.Graphics.Color (127' 255' 255);  
Magic Number,WizardsDuel.Game,FreezeEffect,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Effects.cs,OnAdded,The following statement contains a magic number: this.Parent.OutObject.Color = new SFML.Graphics.Color (127' 255' 255);  
Magic Number,WizardsDuel.Game,FreezeEffect,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Effects.cs,OnAdded,The following statement contains a magic number: this.Parent.OutObject.Color = new SFML.Graphics.Color (127' 255' 255);  
Magic Number,WizardsDuel.Game,GuardEffect,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\Effects.cs,GuardEffect,The following statement contains a magic number: this.Duration = Simulator.ROUND_LENGTH * 3 + 1;  
Magic Number,WizardsDuel.Io,OutObject,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\AdvancedWidgets.cs,SetAnimation,The following statement contains a magic number: if (this.Alpha > 5) {  	AnimationDefinition anim;  	if (this.animations.TryGetValue (id' out anim) == true) {  		this.CurrentAnimation = id;  		this.animators.RemoveAll (x => x is SpriteAnimation);  		anim.SetAnimation (this);  		this.IsInIdle = (id == this.IdleAnimation);  	}  }  
Magic Number,WizardsDuel.Io,FadeAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: if (this.refTime > this.endTime) {  	this.k = 1.0f;  	p.Alpha = 0;  	this.hasEnded = true;  }  else if (this.refTime > this.fadeOutStartTime) {  	var refTime1 = this.refTime - this.fadeOutStartTime;  	this.k = 1.0f - (float)(this.fadeOutDuration - refTime1) / (float)(this.fadeOutDuration);  	p.Alpha = (int)(255 * (1 - k));  }  else if (this.refTime > this.fadeInEndTime) {  	p.Alpha = 255;  }  else {  	this.k = 1.0f - (float)(this.fadeInEndTime - this.refTime) / (float)(this.fadeInEndTime);  	p.Alpha = (int)(255 * k);  }  
Magic Number,WizardsDuel.Io,FadeAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: if (this.refTime > this.endTime) {  	this.k = 1.0f;  	p.Alpha = 0;  	this.hasEnded = true;  }  else if (this.refTime > this.fadeOutStartTime) {  	var refTime1 = this.refTime - this.fadeOutStartTime;  	this.k = 1.0f - (float)(this.fadeOutDuration - refTime1) / (float)(this.fadeOutDuration);  	p.Alpha = (int)(255 * (1 - k));  }  else if (this.refTime > this.fadeInEndTime) {  	p.Alpha = 255;  }  else {  	this.k = 1.0f - (float)(this.fadeInEndTime - this.refTime) / (float)(this.fadeInEndTime);  	p.Alpha = (int)(255 * k);  }  
Magic Number,WizardsDuel.Io,FadeAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: if (this.refTime > this.endTime) {  	this.k = 1.0f;  	p.Alpha = 0;  	this.hasEnded = true;  }  else if (this.refTime > this.fadeOutStartTime) {  	var refTime1 = this.refTime - this.fadeOutStartTime;  	this.k = 1.0f - (float)(this.fadeOutDuration - refTime1) / (float)(this.fadeOutDuration);  	p.Alpha = (int)(255 * (1 - k));  }  else if (this.refTime > this.fadeInEndTime) {  	p.Alpha = 255;  }  else {  	this.k = 1.0f - (float)(this.fadeInEndTime - this.refTime) / (float)(this.fadeInEndTime);  	p.Alpha = (int)(255 * k);  }  
Magic Number,WizardsDuel.Io,FadeAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: if (this.refTime > this.fadeOutStartTime) {  	var refTime1 = this.refTime - this.fadeOutStartTime;  	this.k = 1.0f - (float)(this.fadeOutDuration - refTime1) / (float)(this.fadeOutDuration);  	p.Alpha = (int)(255 * (1 - k));  }  else if (this.refTime > this.fadeInEndTime) {  	p.Alpha = 255;  }  else {  	this.k = 1.0f - (float)(this.fadeInEndTime - this.refTime) / (float)(this.fadeInEndTime);  	p.Alpha = (int)(255 * k);  }  
Magic Number,WizardsDuel.Io,FadeAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: if (this.refTime > this.fadeOutStartTime) {  	var refTime1 = this.refTime - this.fadeOutStartTime;  	this.k = 1.0f - (float)(this.fadeOutDuration - refTime1) / (float)(this.fadeOutDuration);  	p.Alpha = (int)(255 * (1 - k));  }  else if (this.refTime > this.fadeInEndTime) {  	p.Alpha = 255;  }  else {  	this.k = 1.0f - (float)(this.fadeInEndTime - this.refTime) / (float)(this.fadeInEndTime);  	p.Alpha = (int)(255 * k);  }  
Magic Number,WizardsDuel.Io,FadeAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: if (this.refTime > this.fadeOutStartTime) {  	var refTime1 = this.refTime - this.fadeOutStartTime;  	this.k = 1.0f - (float)(this.fadeOutDuration - refTime1) / (float)(this.fadeOutDuration);  	p.Alpha = (int)(255 * (1 - k));  }  else if (this.refTime > this.fadeInEndTime) {  	p.Alpha = 255;  }  else {  	this.k = 1.0f - (float)(this.fadeInEndTime - this.refTime) / (float)(this.fadeInEndTime);  	p.Alpha = (int)(255 * k);  }  
Magic Number,WizardsDuel.Io,FadeAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: p.Alpha = (int)(255 * (1 - k));  
Magic Number,WizardsDuel.Io,FadeAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: if (this.refTime > this.fadeInEndTime) {  	p.Alpha = 255;  }  else {  	this.k = 1.0f - (float)(this.fadeInEndTime - this.refTime) / (float)(this.fadeInEndTime);  	p.Alpha = (int)(255 * k);  }  
Magic Number,WizardsDuel.Io,FadeAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: if (this.refTime > this.fadeInEndTime) {  	p.Alpha = 255;  }  else {  	this.k = 1.0f - (float)(this.fadeInEndTime - this.refTime) / (float)(this.fadeInEndTime);  	p.Alpha = (int)(255 * k);  }  
Magic Number,WizardsDuel.Io,FadeAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: p.Alpha = 255;  
Magic Number,WizardsDuel.Io,FadeAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: p.Alpha = (int)(255 * k);  
Magic Number,WizardsDuel.Io,SpringAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: if (this.currRef > this.endRef) {  	this.currRef = this.currRef - this.endRef;  	this.k = 0.0f;  	if (--this.loops < 1) {  		this.hasEnded = true;  	}  }  else if (this.currRef <= this.endRef / 2) {  	this.k = 1.0f - (float)(this.endRef - this.currRef * 2) / (float)(this.endRef);  	move = (int)(this.maxExtension * k);  }  else {  	this.k = (1.0f - (float)(this.endRef - this.currRef * 2)) / (float)(this.endRef);  	move = this.maxExtension - (int)(this.maxExtension * k);  }  
Magic Number,WizardsDuel.Io,SpringAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: if (this.currRef > this.endRef) {  	this.currRef = this.currRef - this.endRef;  	this.k = 0.0f;  	if (--this.loops < 1) {  		this.hasEnded = true;  	}  }  else if (this.currRef <= this.endRef / 2) {  	this.k = 1.0f - (float)(this.endRef - this.currRef * 2) / (float)(this.endRef);  	move = (int)(this.maxExtension * k);  }  else {  	this.k = (1.0f - (float)(this.endRef - this.currRef * 2)) / (float)(this.endRef);  	move = this.maxExtension - (int)(this.maxExtension * k);  }  
Magic Number,WizardsDuel.Io,SpringAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: if (this.currRef > this.endRef) {  	this.currRef = this.currRef - this.endRef;  	this.k = 0.0f;  	if (--this.loops < 1) {  		this.hasEnded = true;  	}  }  else if (this.currRef <= this.endRef / 2) {  	this.k = 1.0f - (float)(this.endRef - this.currRef * 2) / (float)(this.endRef);  	move = (int)(this.maxExtension * k);  }  else {  	this.k = (1.0f - (float)(this.endRef - this.currRef * 2)) / (float)(this.endRef);  	move = this.maxExtension - (int)(this.maxExtension * k);  }  
Magic Number,WizardsDuel.Io,SpringAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: if (this.currRef <= this.endRef / 2) {  	this.k = 1.0f - (float)(this.endRef - this.currRef * 2) / (float)(this.endRef);  	move = (int)(this.maxExtension * k);  }  else {  	this.k = (1.0f - (float)(this.endRef - this.currRef * 2)) / (float)(this.endRef);  	move = this.maxExtension - (int)(this.maxExtension * k);  }  
Magic Number,WizardsDuel.Io,SpringAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: if (this.currRef <= this.endRef / 2) {  	this.k = 1.0f - (float)(this.endRef - this.currRef * 2) / (float)(this.endRef);  	move = (int)(this.maxExtension * k);  }  else {  	this.k = (1.0f - (float)(this.endRef - this.currRef * 2)) / (float)(this.endRef);  	move = this.maxExtension - (int)(this.maxExtension * k);  }  
Magic Number,WizardsDuel.Io,SpringAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: if (this.currRef <= this.endRef / 2) {  	this.k = 1.0f - (float)(this.endRef - this.currRef * 2) / (float)(this.endRef);  	move = (int)(this.maxExtension * k);  }  else {  	this.k = (1.0f - (float)(this.endRef - this.currRef * 2)) / (float)(this.endRef);  	move = this.maxExtension - (int)(this.maxExtension * k);  }  
Magic Number,WizardsDuel.Io,SpringAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: this.k = 1.0f - (float)(this.endRef - this.currRef * 2) / (float)(this.endRef);  
Magic Number,WizardsDuel.Io,SpringAnimation,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Animation.cs,Update,The following statement contains a magic number: this.k = (1.0f - (float)(this.endRef - this.currRef * 2)) / (float)(this.endRef);  
Magic Number,WizardsDuel.Io,BackgroundMusic,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\BackgroundMusic.cs,BackgroundMusic,The following statement contains a magic number: this.AddLoop (MAIN_LOOP' 0' 100);  
Magic Number,WizardsDuel.Io,BackgroundLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.bgRepeat = new Vector2i (3 + (int)(this.Width / this.bgSize.X)' 3 + (int)(this.Height / this.bgSize.Y));  
Magic Number,WizardsDuel.Io,BackgroundLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.bgRepeat = new Vector2i (3 + (int)(this.Width / this.bgSize.X)' 3 + (int)(this.Height / this.bgSize.Y));  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,GridLayer,The following statement contains a magic number: this.GridPadding = 2;  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,GridLayer,The following statement contains a magic number: this.GridBorder = 2;  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Width = (int)(this.Width / this.cellSize.X) + 3;  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Height = (int)(this.Height / this.cellSize.Y) + 3;  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Left = (int)((this.Width / 2 - this.center.X) / this.cellSize.X) - (this.maskDrawRange.Width - 2) / 2 - 1;  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Left = (int)((this.Width / 2 - this.center.X) / this.cellSize.X) - (this.maskDrawRange.Width - 2) / 2 - 1;  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Left = (int)((this.Width / 2 - this.center.X) / this.cellSize.X) - (this.maskDrawRange.Width - 2) / 2 - 1;  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Top = (int)((this.Height / 2 - this.center.Y) / this.cellSize.Y) - (this.maskDrawRange.Height - 2) / 2 - 1;  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Top = (int)((this.Height / 2 - this.center.Y) / this.cellSize.Y) - (this.maskDrawRange.Height - 2) / 2 - 1;  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Top = (int)((this.Height / 2 - this.center.Y) / this.cellSize.Y) - (this.maskDrawRange.Height - 2) / 2 - 1;  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,GridLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: if (this.Enabled) {  	states.Transform.Translate (this.center);  	states.BlendMode = this.Blend;  	var bufferPosition = new Vector2f (this.GridPadding + this.GridBorder' this.GridPadding + this.GridBorder);  	bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  	bufferPosition.Y += this.maskDrawRange.Top * this.cellSize.Y;  	var selectedColor = new Color (255' 255' 64' 127);  	var losColor = new Color (255' 255' 255' 64);  	var enColor = new Color (255' 64' 64' 127);  	var playerColor = new Color (64' 255' 64' 127);  	var player = WizardsDuel.Game.Simulator.Instance.GetPlayer ();  	for (var y = this.maskDrawRange.Top; y < this.maskDrawRange.Height + this.maskDrawRange.Top; y++) {  		for (var x = this.maskDrawRange.Left; x < this.maskDrawRange.Width + this.maskDrawRange.Left; x++) {  			try {  				if (this.drawGrid [y' x] == true && this.Selected.X == x && this.Selected.Y == y) {  					this.tile.FillColor = selectedColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (player.X == x && player.Y == y) {  					this.tile.FillColor = playerColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  				else if (this.drawGrid [y' x] == true && this.inLosGrid [y' x] == true) {  					this.tile.FillColor = (WizardsDuel.Game.Simulator.Instance.GetTargetable (player' x' y) != null) ? enColor : losColor;  					this.tile.Position = bufferPosition;  					target.Draw (this.tile' states);  				}  			}  			catch {  				/*this.tile.FillColor = Color.Transparent; 							this.tile.Position = bufferPosition; 							target.Draw(this.tile' states);*/}  			bufferPosition.X += this.cellSize.X;  		}  		bufferPosition.X = this.GridPadding + this.GridBorder;  		bufferPosition.X += this.maskDrawRange.Left * this.cellSize.X;  		bufferPosition.Y += this.cellSize.Y;  	}  }  
Magic Number,WizardsDuel.Io,Light,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,SetPosition,The following statement contains a magic number: this.position = new Vector2f (cx - this.Radius / 2' cy - this.Radius / 2);  
Magic Number,WizardsDuel.Io,Light,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,SetPosition,The following statement contains a magic number: this.position = new Vector2f (cx - this.Radius / 2' cy - this.Radius / 2);  
Magic Number,WizardsDuel.Io,LightLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,LightLayer,The following statement contains a magic number: this.AmbientLight = new Color (255' 255' 255);  
Magic Number,WizardsDuel.Io,LightLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,LightLayer,The following statement contains a magic number: this.AmbientLight = new Color (255' 255' 255);  
Magic Number,WizardsDuel.Io,LightLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,LightLayer,The following statement contains a magic number: this.AmbientLight = new Color (255' 255' 255);  
Magic Number,WizardsDuel.Io,LightLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,Draw,The following statement contains a magic number: this.lights.RemoveAll (x => x.Radius < 2);  
Magic Number,WizardsDuel.Io,TiledLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Width = (int)(this.Width / this.cellSize.X) + 3;  
Magic Number,WizardsDuel.Io,TiledLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Height = (int)(this.Height / this.cellSize.Y) + 3;  
Magic Number,WizardsDuel.Io,TiledLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Left = (int)((this.Width / 2 - this.center.X) / this.cellSize.X) - (this.maskDrawRange.Width - 2) / 2 - 1;  
Magic Number,WizardsDuel.Io,TiledLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Left = (int)((this.Width / 2 - this.center.X) / this.cellSize.X) - (this.maskDrawRange.Width - 2) / 2 - 1;  
Magic Number,WizardsDuel.Io,TiledLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Left = (int)((this.Width / 2 - this.center.X) / this.cellSize.X) - (this.maskDrawRange.Width - 2) / 2 - 1;  
Magic Number,WizardsDuel.Io,TiledLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Top = (int)((this.Height / 2 - this.center.Y) / this.cellSize.Y) - (this.maskDrawRange.Height - 2) / 2 - 1;  
Magic Number,WizardsDuel.Io,TiledLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Top = (int)((this.Height / 2 - this.center.Y) / this.cellSize.Y) - (this.maskDrawRange.Height - 2) / 2 - 1;  
Magic Number,WizardsDuel.Io,TiledLayer,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\Layers.cs,AdjustLayer,The following statement contains a magic number: this.maskDrawRange.Top = (int)((this.Height / 2 - this.center.Y) / this.cellSize.Y) - (this.maskDrawRange.Height - 2) / 2 - 1;  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: try {  	var layers = widget.ChildNodes;  	for (var i = 0; i < layers.Count; i++) {  		var xlayer = layers [i];  		switch (xlayer.Name) {  		case "backgroundLayer":  			var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  			try {  				var color = XmlUtilities.GetIntArray (xlayer' "color");  				bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  				Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  			}  			catch {  			}  			bl.Static = XmlUtilities.GetBool (xlayer' "static");  			bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			bl.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (bl' LayerType.UNDEFINED);  			break;  		case "lightLayer":  			var ll = new LightLayer (width' height);  			ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  			ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  			/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (ll' LayerType.LIGHTS);  			break;  		case "objectsLayer":  			var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  			gl.GridBorder = 3;  			gl.GridPadding = 2;  			gl.OutColor = new Color (0' 0' 0' 128);  			view.AddLayer (gl);  			var ol = new ObjectsLayer ();  			ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			ol.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (ol' LayerType.OBJECTS);  			break;  		case "tiledLayer":  			var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  			var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  			view.AddLayer (ml' name);  			var maskId = XmlUtilities.GetString (xlayer' "mask");  			var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  			ml.SetTilemask (1' // XXX will be updated later on  			1' // XXX will be updated later on  			XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  			ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  			UiFactory.LoadTilemask (tileMask' name' view);  			ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  			ml.Blend = UiFactory.GetBlend (xlayer);  			ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  			break;  		default:  			break;  		}  	}  }  catch (Exception ex) {  	Logger.Warning ("UiFactory"' "LoadWorldView"' ex.ToString ());  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: try {  	var layers = widget.ChildNodes;  	for (var i = 0; i < layers.Count; i++) {  		var xlayer = layers [i];  		switch (xlayer.Name) {  		case "backgroundLayer":  			var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  			try {  				var color = XmlUtilities.GetIntArray (xlayer' "color");  				bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  				Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  			}  			catch {  			}  			bl.Static = XmlUtilities.GetBool (xlayer' "static");  			bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			bl.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (bl' LayerType.UNDEFINED);  			break;  		case "lightLayer":  			var ll = new LightLayer (width' height);  			ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  			ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  			/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (ll' LayerType.LIGHTS);  			break;  		case "objectsLayer":  			var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  			gl.GridBorder = 3;  			gl.GridPadding = 2;  			gl.OutColor = new Color (0' 0' 0' 128);  			view.AddLayer (gl);  			var ol = new ObjectsLayer ();  			ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			ol.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (ol' LayerType.OBJECTS);  			break;  		case "tiledLayer":  			var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  			var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  			view.AddLayer (ml' name);  			var maskId = XmlUtilities.GetString (xlayer' "mask");  			var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  			ml.SetTilemask (1' // XXX will be updated later on  			1' // XXX will be updated later on  			XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  			ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  			UiFactory.LoadTilemask (tileMask' name' view);  			ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  			ml.Blend = UiFactory.GetBlend (xlayer);  			ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  			break;  		default:  			break;  		}  	}  }  catch (Exception ex) {  	Logger.Warning ("UiFactory"' "LoadWorldView"' ex.ToString ());  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: try {  	var layers = widget.ChildNodes;  	for (var i = 0; i < layers.Count; i++) {  		var xlayer = layers [i];  		switch (xlayer.Name) {  		case "backgroundLayer":  			var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  			try {  				var color = XmlUtilities.GetIntArray (xlayer' "color");  				bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  				Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  			}  			catch {  			}  			bl.Static = XmlUtilities.GetBool (xlayer' "static");  			bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			bl.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (bl' LayerType.UNDEFINED);  			break;  		case "lightLayer":  			var ll = new LightLayer (width' height);  			ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  			ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  			/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (ll' LayerType.LIGHTS);  			break;  		case "objectsLayer":  			var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  			gl.GridBorder = 3;  			gl.GridPadding = 2;  			gl.OutColor = new Color (0' 0' 0' 128);  			view.AddLayer (gl);  			var ol = new ObjectsLayer ();  			ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			ol.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (ol' LayerType.OBJECTS);  			break;  		case "tiledLayer":  			var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  			var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  			view.AddLayer (ml' name);  			var maskId = XmlUtilities.GetString (xlayer' "mask");  			var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  			ml.SetTilemask (1' // XXX will be updated later on  			1' // XXX will be updated later on  			XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  			ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  			UiFactory.LoadTilemask (tileMask' name' view);  			ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  			ml.Blend = UiFactory.GetBlend (xlayer);  			ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  			break;  		default:  			break;  		}  	}  }  catch (Exception ex) {  	Logger.Warning ("UiFactory"' "LoadWorldView"' ex.ToString ());  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: try {  	var layers = widget.ChildNodes;  	for (var i = 0; i < layers.Count; i++) {  		var xlayer = layers [i];  		switch (xlayer.Name) {  		case "backgroundLayer":  			var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  			try {  				var color = XmlUtilities.GetIntArray (xlayer' "color");  				bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  				Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  			}  			catch {  			}  			bl.Static = XmlUtilities.GetBool (xlayer' "static");  			bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			bl.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (bl' LayerType.UNDEFINED);  			break;  		case "lightLayer":  			var ll = new LightLayer (width' height);  			ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  			ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  			/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (ll' LayerType.LIGHTS);  			break;  		case "objectsLayer":  			var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  			gl.GridBorder = 3;  			gl.GridPadding = 2;  			gl.OutColor = new Color (0' 0' 0' 128);  			view.AddLayer (gl);  			var ol = new ObjectsLayer ();  			ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			ol.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (ol' LayerType.OBJECTS);  			break;  		case "tiledLayer":  			var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  			var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  			view.AddLayer (ml' name);  			var maskId = XmlUtilities.GetString (xlayer' "mask");  			var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  			ml.SetTilemask (1' // XXX will be updated later on  			1' // XXX will be updated later on  			XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  			ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  			UiFactory.LoadTilemask (tileMask' name' view);  			ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  			ml.Blend = UiFactory.GetBlend (xlayer);  			ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  			break;  		default:  			break;  		}  	}  }  catch (Exception ex) {  	Logger.Warning ("UiFactory"' "LoadWorldView"' ex.ToString ());  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: try {  	var layers = widget.ChildNodes;  	for (var i = 0; i < layers.Count; i++) {  		var xlayer = layers [i];  		switch (xlayer.Name) {  		case "backgroundLayer":  			var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  			try {  				var color = XmlUtilities.GetIntArray (xlayer' "color");  				bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  				Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  			}  			catch {  			}  			bl.Static = XmlUtilities.GetBool (xlayer' "static");  			bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			bl.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (bl' LayerType.UNDEFINED);  			break;  		case "lightLayer":  			var ll = new LightLayer (width' height);  			ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  			ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  			/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (ll' LayerType.LIGHTS);  			break;  		case "objectsLayer":  			var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  			gl.GridBorder = 3;  			gl.GridPadding = 2;  			gl.OutColor = new Color (0' 0' 0' 128);  			view.AddLayer (gl);  			var ol = new ObjectsLayer ();  			ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			ol.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (ol' LayerType.OBJECTS);  			break;  		case "tiledLayer":  			var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  			var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  			view.AddLayer (ml' name);  			var maskId = XmlUtilities.GetString (xlayer' "mask");  			var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  			ml.SetTilemask (1' // XXX will be updated later on  			1' // XXX will be updated later on  			XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  			ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  			UiFactory.LoadTilemask (tileMask' name' view);  			ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  			ml.Blend = UiFactory.GetBlend (xlayer);  			ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  			break;  		default:  			break;  		}  	}  }  catch (Exception ex) {  	Logger.Warning ("UiFactory"' "LoadWorldView"' ex.ToString ());  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: try {  	var layers = widget.ChildNodes;  	for (var i = 0; i < layers.Count; i++) {  		var xlayer = layers [i];  		switch (xlayer.Name) {  		case "backgroundLayer":  			var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  			try {  				var color = XmlUtilities.GetIntArray (xlayer' "color");  				bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  				Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  			}  			catch {  			}  			bl.Static = XmlUtilities.GetBool (xlayer' "static");  			bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			bl.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (bl' LayerType.UNDEFINED);  			break;  		case "lightLayer":  			var ll = new LightLayer (width' height);  			ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  			ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  			/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (ll' LayerType.LIGHTS);  			break;  		case "objectsLayer":  			var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  			gl.GridBorder = 3;  			gl.GridPadding = 2;  			gl.OutColor = new Color (0' 0' 0' 128);  			view.AddLayer (gl);  			var ol = new ObjectsLayer ();  			ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			ol.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (ol' LayerType.OBJECTS);  			break;  		case "tiledLayer":  			var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  			var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  			view.AddLayer (ml' name);  			var maskId = XmlUtilities.GetString (xlayer' "mask");  			var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  			ml.SetTilemask (1' // XXX will be updated later on  			1' // XXX will be updated later on  			XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  			ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  			UiFactory.LoadTilemask (tileMask' name' view);  			ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  			ml.Blend = UiFactory.GetBlend (xlayer);  			ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  			break;  		default:  			break;  		}  	}  }  catch (Exception ex) {  	Logger.Warning ("UiFactory"' "LoadWorldView"' ex.ToString ());  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: try {  	var layers = widget.ChildNodes;  	for (var i = 0; i < layers.Count; i++) {  		var xlayer = layers [i];  		switch (xlayer.Name) {  		case "backgroundLayer":  			var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  			try {  				var color = XmlUtilities.GetIntArray (xlayer' "color");  				bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  				Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  			}  			catch {  			}  			bl.Static = XmlUtilities.GetBool (xlayer' "static");  			bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			bl.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (bl' LayerType.UNDEFINED);  			break;  		case "lightLayer":  			var ll = new LightLayer (width' height);  			ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  			ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  			/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (ll' LayerType.LIGHTS);  			break;  		case "objectsLayer":  			var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  			gl.GridBorder = 3;  			gl.GridPadding = 2;  			gl.OutColor = new Color (0' 0' 0' 128);  			view.AddLayer (gl);  			var ol = new ObjectsLayer ();  			ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			ol.Blend = UiFactory.GetBlend (xlayer);  			view.AddLayer (ol' LayerType.OBJECTS);  			break;  		case "tiledLayer":  			var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  			var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  			view.AddLayer (ml' name);  			var maskId = XmlUtilities.GetString (xlayer' "mask");  			var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  			ml.SetTilemask (1' // XXX will be updated later on  			1' // XXX will be updated later on  			XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  			ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  			UiFactory.LoadTilemask (tileMask' name' view);  			ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  			ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  			ml.Blend = UiFactory.GetBlend (xlayer);  			ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  			break;  		default:  			break;  		}  	}  }  catch (Exception ex) {  	Logger.Warning ("UiFactory"' "LoadWorldView"' ex.ToString ());  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: for (var i = 0; i < layers.Count; i++) {  	var xlayer = layers [i];  	switch (xlayer.Name) {  	case "backgroundLayer":  		var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  		try {  			var color = XmlUtilities.GetIntArray (xlayer' "color");  			bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  			Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  		}  		catch {  		}  		bl.Static = XmlUtilities.GetBool (xlayer' "static");  		bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		bl.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (bl' LayerType.UNDEFINED);  		break;  	case "lightLayer":  		var ll = new LightLayer (width' height);  		ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  		ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  		/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (ll' LayerType.LIGHTS);  		break;  	case "objectsLayer":  		var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  		gl.GridBorder = 3;  		gl.GridPadding = 2;  		gl.OutColor = new Color (0' 0' 0' 128);  		view.AddLayer (gl);  		var ol = new ObjectsLayer ();  		ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		ol.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (ol' LayerType.OBJECTS);  		break;  	case "tiledLayer":  		var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  		var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  		view.AddLayer (ml' name);  		var maskId = XmlUtilities.GetString (xlayer' "mask");  		var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  		ml.SetTilemask (1' // XXX will be updated later on  		1' // XXX will be updated later on  		XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  		ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  		UiFactory.LoadTilemask (tileMask' name' view);  		ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  		ml.Blend = UiFactory.GetBlend (xlayer);  		ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: for (var i = 0; i < layers.Count; i++) {  	var xlayer = layers [i];  	switch (xlayer.Name) {  	case "backgroundLayer":  		var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  		try {  			var color = XmlUtilities.GetIntArray (xlayer' "color");  			bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  			Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  		}  		catch {  		}  		bl.Static = XmlUtilities.GetBool (xlayer' "static");  		bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		bl.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (bl' LayerType.UNDEFINED);  		break;  	case "lightLayer":  		var ll = new LightLayer (width' height);  		ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  		ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  		/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (ll' LayerType.LIGHTS);  		break;  	case "objectsLayer":  		var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  		gl.GridBorder = 3;  		gl.GridPadding = 2;  		gl.OutColor = new Color (0' 0' 0' 128);  		view.AddLayer (gl);  		var ol = new ObjectsLayer ();  		ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		ol.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (ol' LayerType.OBJECTS);  		break;  	case "tiledLayer":  		var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  		var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  		view.AddLayer (ml' name);  		var maskId = XmlUtilities.GetString (xlayer' "mask");  		var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  		ml.SetTilemask (1' // XXX will be updated later on  		1' // XXX will be updated later on  		XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  		ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  		UiFactory.LoadTilemask (tileMask' name' view);  		ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  		ml.Blend = UiFactory.GetBlend (xlayer);  		ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: for (var i = 0; i < layers.Count; i++) {  	var xlayer = layers [i];  	switch (xlayer.Name) {  	case "backgroundLayer":  		var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  		try {  			var color = XmlUtilities.GetIntArray (xlayer' "color");  			bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  			Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  		}  		catch {  		}  		bl.Static = XmlUtilities.GetBool (xlayer' "static");  		bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		bl.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (bl' LayerType.UNDEFINED);  		break;  	case "lightLayer":  		var ll = new LightLayer (width' height);  		ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  		ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  		/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (ll' LayerType.LIGHTS);  		break;  	case "objectsLayer":  		var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  		gl.GridBorder = 3;  		gl.GridPadding = 2;  		gl.OutColor = new Color (0' 0' 0' 128);  		view.AddLayer (gl);  		var ol = new ObjectsLayer ();  		ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		ol.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (ol' LayerType.OBJECTS);  		break;  	case "tiledLayer":  		var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  		var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  		view.AddLayer (ml' name);  		var maskId = XmlUtilities.GetString (xlayer' "mask");  		var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  		ml.SetTilemask (1' // XXX will be updated later on  		1' // XXX will be updated later on  		XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  		ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  		UiFactory.LoadTilemask (tileMask' name' view);  		ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  		ml.Blend = UiFactory.GetBlend (xlayer);  		ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: for (var i = 0; i < layers.Count; i++) {  	var xlayer = layers [i];  	switch (xlayer.Name) {  	case "backgroundLayer":  		var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  		try {  			var color = XmlUtilities.GetIntArray (xlayer' "color");  			bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  			Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  		}  		catch {  		}  		bl.Static = XmlUtilities.GetBool (xlayer' "static");  		bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		bl.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (bl' LayerType.UNDEFINED);  		break;  	case "lightLayer":  		var ll = new LightLayer (width' height);  		ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  		ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  		/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (ll' LayerType.LIGHTS);  		break;  	case "objectsLayer":  		var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  		gl.GridBorder = 3;  		gl.GridPadding = 2;  		gl.OutColor = new Color (0' 0' 0' 128);  		view.AddLayer (gl);  		var ol = new ObjectsLayer ();  		ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		ol.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (ol' LayerType.OBJECTS);  		break;  	case "tiledLayer":  		var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  		var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  		view.AddLayer (ml' name);  		var maskId = XmlUtilities.GetString (xlayer' "mask");  		var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  		ml.SetTilemask (1' // XXX will be updated later on  		1' // XXX will be updated later on  		XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  		ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  		UiFactory.LoadTilemask (tileMask' name' view);  		ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  		ml.Blend = UiFactory.GetBlend (xlayer);  		ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: for (var i = 0; i < layers.Count; i++) {  	var xlayer = layers [i];  	switch (xlayer.Name) {  	case "backgroundLayer":  		var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  		try {  			var color = XmlUtilities.GetIntArray (xlayer' "color");  			bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  			Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  		}  		catch {  		}  		bl.Static = XmlUtilities.GetBool (xlayer' "static");  		bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		bl.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (bl' LayerType.UNDEFINED);  		break;  	case "lightLayer":  		var ll = new LightLayer (width' height);  		ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  		ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  		/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (ll' LayerType.LIGHTS);  		break;  	case "objectsLayer":  		var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  		gl.GridBorder = 3;  		gl.GridPadding = 2;  		gl.OutColor = new Color (0' 0' 0' 128);  		view.AddLayer (gl);  		var ol = new ObjectsLayer ();  		ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		ol.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (ol' LayerType.OBJECTS);  		break;  	case "tiledLayer":  		var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  		var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  		view.AddLayer (ml' name);  		var maskId = XmlUtilities.GetString (xlayer' "mask");  		var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  		ml.SetTilemask (1' // XXX will be updated later on  		1' // XXX will be updated later on  		XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  		ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  		UiFactory.LoadTilemask (tileMask' name' view);  		ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  		ml.Blend = UiFactory.GetBlend (xlayer);  		ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: for (var i = 0; i < layers.Count; i++) {  	var xlayer = layers [i];  	switch (xlayer.Name) {  	case "backgroundLayer":  		var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  		try {  			var color = XmlUtilities.GetIntArray (xlayer' "color");  			bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  			Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  		}  		catch {  		}  		bl.Static = XmlUtilities.GetBool (xlayer' "static");  		bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		bl.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (bl' LayerType.UNDEFINED);  		break;  	case "lightLayer":  		var ll = new LightLayer (width' height);  		ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  		ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  		/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (ll' LayerType.LIGHTS);  		break;  	case "objectsLayer":  		var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  		gl.GridBorder = 3;  		gl.GridPadding = 2;  		gl.OutColor = new Color (0' 0' 0' 128);  		view.AddLayer (gl);  		var ol = new ObjectsLayer ();  		ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		ol.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (ol' LayerType.OBJECTS);  		break;  	case "tiledLayer":  		var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  		var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  		view.AddLayer (ml' name);  		var maskId = XmlUtilities.GetString (xlayer' "mask");  		var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  		ml.SetTilemask (1' // XXX will be updated later on  		1' // XXX will be updated later on  		XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  		ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  		UiFactory.LoadTilemask (tileMask' name' view);  		ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  		ml.Blend = UiFactory.GetBlend (xlayer);  		ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: for (var i = 0; i < layers.Count; i++) {  	var xlayer = layers [i];  	switch (xlayer.Name) {  	case "backgroundLayer":  		var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  		try {  			var color = XmlUtilities.GetIntArray (xlayer' "color");  			bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  			Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  		}  		catch {  		}  		bl.Static = XmlUtilities.GetBool (xlayer' "static");  		bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		bl.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (bl' LayerType.UNDEFINED);  		break;  	case "lightLayer":  		var ll = new LightLayer (width' height);  		ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  		ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  		/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (ll' LayerType.LIGHTS);  		break;  	case "objectsLayer":  		var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  		gl.GridBorder = 3;  		gl.GridPadding = 2;  		gl.OutColor = new Color (0' 0' 0' 128);  		view.AddLayer (gl);  		var ol = new ObjectsLayer ();  		ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		ol.Blend = UiFactory.GetBlend (xlayer);  		view.AddLayer (ol' LayerType.OBJECTS);  		break;  	case "tiledLayer":  		var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  		var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  		view.AddLayer (ml' name);  		var maskId = XmlUtilities.GetString (xlayer' "mask");  		var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  		ml.SetTilemask (1' // XXX will be updated later on  		1' // XXX will be updated later on  		XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  		ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  		UiFactory.LoadTilemask (tileMask' name' view);  		ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  		ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  		ml.Blend = UiFactory.GetBlend (xlayer);  		ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  		break;  	default:  		break;  	}  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: switch (xlayer.Name) {  case "backgroundLayer":  	var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  	try {  		var color = XmlUtilities.GetIntArray (xlayer' "color");  		bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  		Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  	}  	catch {  	}  	bl.Static = XmlUtilities.GetBool (xlayer' "static");  	bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	bl.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (bl' LayerType.UNDEFINED);  	break;  case "lightLayer":  	var ll = new LightLayer (width' height);  	ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  	ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  	/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (ll' LayerType.LIGHTS);  	break;  case "objectsLayer":  	var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  	gl.GridBorder = 3;  	gl.GridPadding = 2;  	gl.OutColor = new Color (0' 0' 0' 128);  	view.AddLayer (gl);  	var ol = new ObjectsLayer ();  	ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	ol.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (ol' LayerType.OBJECTS);  	break;  case "tiledLayer":  	var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  	var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  	view.AddLayer (ml' name);  	var maskId = XmlUtilities.GetString (xlayer' "mask");  	var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  	ml.SetTilemask (1' // XXX will be updated later on  	1' // XXX will be updated later on  	XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  	ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  	UiFactory.LoadTilemask (tileMask' name' view);  	ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  	ml.Blend = UiFactory.GetBlend (xlayer);  	ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: switch (xlayer.Name) {  case "backgroundLayer":  	var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  	try {  		var color = XmlUtilities.GetIntArray (xlayer' "color");  		bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  		Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  	}  	catch {  	}  	bl.Static = XmlUtilities.GetBool (xlayer' "static");  	bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	bl.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (bl' LayerType.UNDEFINED);  	break;  case "lightLayer":  	var ll = new LightLayer (width' height);  	ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  	ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  	/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (ll' LayerType.LIGHTS);  	break;  case "objectsLayer":  	var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  	gl.GridBorder = 3;  	gl.GridPadding = 2;  	gl.OutColor = new Color (0' 0' 0' 128);  	view.AddLayer (gl);  	var ol = new ObjectsLayer ();  	ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	ol.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (ol' LayerType.OBJECTS);  	break;  case "tiledLayer":  	var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  	var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  	view.AddLayer (ml' name);  	var maskId = XmlUtilities.GetString (xlayer' "mask");  	var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  	ml.SetTilemask (1' // XXX will be updated later on  	1' // XXX will be updated later on  	XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  	ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  	UiFactory.LoadTilemask (tileMask' name' view);  	ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  	ml.Blend = UiFactory.GetBlend (xlayer);  	ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: switch (xlayer.Name) {  case "backgroundLayer":  	var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  	try {  		var color = XmlUtilities.GetIntArray (xlayer' "color");  		bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  		Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  	}  	catch {  	}  	bl.Static = XmlUtilities.GetBool (xlayer' "static");  	bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	bl.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (bl' LayerType.UNDEFINED);  	break;  case "lightLayer":  	var ll = new LightLayer (width' height);  	ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  	ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  	/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (ll' LayerType.LIGHTS);  	break;  case "objectsLayer":  	var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  	gl.GridBorder = 3;  	gl.GridPadding = 2;  	gl.OutColor = new Color (0' 0' 0' 128);  	view.AddLayer (gl);  	var ol = new ObjectsLayer ();  	ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	ol.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (ol' LayerType.OBJECTS);  	break;  case "tiledLayer":  	var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  	var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  	view.AddLayer (ml' name);  	var maskId = XmlUtilities.GetString (xlayer' "mask");  	var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  	ml.SetTilemask (1' // XXX will be updated later on  	1' // XXX will be updated later on  	XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  	ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  	UiFactory.LoadTilemask (tileMask' name' view);  	ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  	ml.Blend = UiFactory.GetBlend (xlayer);  	ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: switch (xlayer.Name) {  case "backgroundLayer":  	var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  	try {  		var color = XmlUtilities.GetIntArray (xlayer' "color");  		bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  		Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  	}  	catch {  	}  	bl.Static = XmlUtilities.GetBool (xlayer' "static");  	bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	bl.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (bl' LayerType.UNDEFINED);  	break;  case "lightLayer":  	var ll = new LightLayer (width' height);  	ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  	ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  	/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (ll' LayerType.LIGHTS);  	break;  case "objectsLayer":  	var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  	gl.GridBorder = 3;  	gl.GridPadding = 2;  	gl.OutColor = new Color (0' 0' 0' 128);  	view.AddLayer (gl);  	var ol = new ObjectsLayer ();  	ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	ol.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (ol' LayerType.OBJECTS);  	break;  case "tiledLayer":  	var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  	var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  	view.AddLayer (ml' name);  	var maskId = XmlUtilities.GetString (xlayer' "mask");  	var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  	ml.SetTilemask (1' // XXX will be updated later on  	1' // XXX will be updated later on  	XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  	ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  	UiFactory.LoadTilemask (tileMask' name' view);  	ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  	ml.Blend = UiFactory.GetBlend (xlayer);  	ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: switch (xlayer.Name) {  case "backgroundLayer":  	var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  	try {  		var color = XmlUtilities.GetIntArray (xlayer' "color");  		bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  		Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  	}  	catch {  	}  	bl.Static = XmlUtilities.GetBool (xlayer' "static");  	bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	bl.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (bl' LayerType.UNDEFINED);  	break;  case "lightLayer":  	var ll = new LightLayer (width' height);  	ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  	ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  	/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (ll' LayerType.LIGHTS);  	break;  case "objectsLayer":  	var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  	gl.GridBorder = 3;  	gl.GridPadding = 2;  	gl.OutColor = new Color (0' 0' 0' 128);  	view.AddLayer (gl);  	var ol = new ObjectsLayer ();  	ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	ol.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (ol' LayerType.OBJECTS);  	break;  case "tiledLayer":  	var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  	var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  	view.AddLayer (ml' name);  	var maskId = XmlUtilities.GetString (xlayer' "mask");  	var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  	ml.SetTilemask (1' // XXX will be updated later on  	1' // XXX will be updated later on  	XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  	ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  	UiFactory.LoadTilemask (tileMask' name' view);  	ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  	ml.Blend = UiFactory.GetBlend (xlayer);  	ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: switch (xlayer.Name) {  case "backgroundLayer":  	var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  	try {  		var color = XmlUtilities.GetIntArray (xlayer' "color");  		bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  		Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  	}  	catch {  	}  	bl.Static = XmlUtilities.GetBool (xlayer' "static");  	bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	bl.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (bl' LayerType.UNDEFINED);  	break;  case "lightLayer":  	var ll = new LightLayer (width' height);  	ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  	ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  	/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (ll' LayerType.LIGHTS);  	break;  case "objectsLayer":  	var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  	gl.GridBorder = 3;  	gl.GridPadding = 2;  	gl.OutColor = new Color (0' 0' 0' 128);  	view.AddLayer (gl);  	var ol = new ObjectsLayer ();  	ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	ol.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (ol' LayerType.OBJECTS);  	break;  case "tiledLayer":  	var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  	var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  	view.AddLayer (ml' name);  	var maskId = XmlUtilities.GetString (xlayer' "mask");  	var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  	ml.SetTilemask (1' // XXX will be updated later on  	1' // XXX will be updated later on  	XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  	ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  	UiFactory.LoadTilemask (tileMask' name' view);  	ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  	ml.Blend = UiFactory.GetBlend (xlayer);  	ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: switch (xlayer.Name) {  case "backgroundLayer":  	var bl = new BackgroundLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  	try {  		var color = XmlUtilities.GetIntArray (xlayer' "color");  		bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  		Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  	}  	catch {  	}  	bl.Static = XmlUtilities.GetBool (xlayer' "static");  	bl.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	bl.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (bl' LayerType.UNDEFINED);  	break;  case "lightLayer":  	var ll = new LightLayer (width' height);  	ll.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	//var lcolor = XmlUtilities.GetColor(xlayer' "color"' Color.White);  	ll.AmbientLight = XmlUtilities.GetColor (xlayer' "ambient"' Color.White);  	/*ll.AmbientLight = new SFML.Graphics.Color( 							(byte)XmlUtilities.GetInt (xlayer' "ambientRed")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientGreen")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientBlue")' 							(byte)XmlUtilities.GetInt (xlayer' "ambientAlpha"' 255) 						);*/ll.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (ll' LayerType.LIGHTS);  	break;  case "objectsLayer":  	var gl = new GridLayer (width' height' 200' 200' cellWidth' cellHeight);  	gl.GridBorder = 3;  	gl.GridPadding = 2;  	gl.OutColor = new Color (0' 0' 0' 128);  	view.AddLayer (gl);  	var ol = new ObjectsLayer ();  	ol.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	ol.Blend = UiFactory.GetBlend (xlayer);  	view.AddLayer (ol' LayerType.OBJECTS);  	break;  case "tiledLayer":  	var ml = new TiledLayer (width' height' XmlUtilities.GetString (xlayer' "texture"));  	var name = XmlUtilities.GetString (xlayer' "name"' WorldView.UNNAMED_LAYER);  	view.AddLayer (ml' name);  	var maskId = XmlUtilities.GetString (xlayer' "mask");  	var tileMask = page.SelectSingleNode ("//tileMasks[@id='" + maskId + "']");  	ml.SetTilemask (1' // XXX will be updated later on  	1' // XXX will be updated later on  	XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH")' XmlUtilities.GetString (tileMask' "texture"));  	ml.SetDefaultTile (XmlUtilities.GetInt (tileMask' "defaultX")' XmlUtilities.GetInt (tileMask' "defaultY")' XmlUtilities.GetInt (tileMask' "defaultW")' XmlUtilities.GetInt (tileMask' "defaultH"));  	UiFactory.LoadTilemask (tileMask' name' view);  	ml.Scale = XmlUtilities.GetFloat (xlayer' "scale"' 1f);  	ml.TileScale = XmlUtilities.GetFloat (xlayer' "tileScale"' 1f);  	ml.Blend = UiFactory.GetBlend (xlayer);  	ml.MaskBlend = UiFactory.GetBlend (xlayer' "maskBlend");  	break;  default:  	break;  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: try {  	var color = XmlUtilities.GetIntArray (xlayer' "color");  	bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  	Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  }  catch {  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: try {  	var color = XmlUtilities.GetIntArray (xlayer' "color");  	bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  	Logger.Info ("UiFactory"' "LoadWorldView"' "SET COLOR TO BG " + color.ToString ());  }  catch {  }  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: bl.Color = new Color ((byte)color [0]' (byte)color [1]' (byte)color [2]' (byte)color [3]);  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: gl.GridBorder = 3;  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: gl.GridPadding = 2;  
Magic Number,WizardsDuel.Io,UiFactory,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\UiFactory.cs,LoadWorldView,The following statement contains a magic number: gl.OutColor = new Color (0' 0' 0' 128);  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,WorldView,The following statement contains a magic number: this.HalfWidth = width / 2;  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,WorldView,The following statement contains a magic number: this.HalfHeight = height / 2;  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,WorldView,The following statement contains a magic number: this.CellObjectOffset = -cellHeight / 4;  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: if (this.ShowGuides) {  	var rect = new RectangleShape (new Vector2f (32' 32));  	rect.FillColor = Color.Transparent;  	rect.OutlineThickness = 0.5f;  	rect.OutlineColor = Color.Cyan;  	for (var y = 0; y < this.HalfHeight * 2; y += 32) {  		for (var x = 0; x < this.HalfWidth * 2; x += 32) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  	rect.Size = new Vector2f (128' 128);  	rect.OutlineColor = Color.Blue;  	for (var y = 0; y < this.HalfHeight * 2; y += 128) {  		for (var x = 0; x < this.HalfWidth * 2; x += 128) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: if (this.ShowGuides) {  	var rect = new RectangleShape (new Vector2f (32' 32));  	rect.FillColor = Color.Transparent;  	rect.OutlineThickness = 0.5f;  	rect.OutlineColor = Color.Cyan;  	for (var y = 0; y < this.HalfHeight * 2; y += 32) {  		for (var x = 0; x < this.HalfWidth * 2; x += 32) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  	rect.Size = new Vector2f (128' 128);  	rect.OutlineColor = Color.Blue;  	for (var y = 0; y < this.HalfHeight * 2; y += 128) {  		for (var x = 0; x < this.HalfWidth * 2; x += 128) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: if (this.ShowGuides) {  	var rect = new RectangleShape (new Vector2f (32' 32));  	rect.FillColor = Color.Transparent;  	rect.OutlineThickness = 0.5f;  	rect.OutlineColor = Color.Cyan;  	for (var y = 0; y < this.HalfHeight * 2; y += 32) {  		for (var x = 0; x < this.HalfWidth * 2; x += 32) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  	rect.Size = new Vector2f (128' 128);  	rect.OutlineColor = Color.Blue;  	for (var y = 0; y < this.HalfHeight * 2; y += 128) {  		for (var x = 0; x < this.HalfWidth * 2; x += 128) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: if (this.ShowGuides) {  	var rect = new RectangleShape (new Vector2f (32' 32));  	rect.FillColor = Color.Transparent;  	rect.OutlineThickness = 0.5f;  	rect.OutlineColor = Color.Cyan;  	for (var y = 0; y < this.HalfHeight * 2; y += 32) {  		for (var x = 0; x < this.HalfWidth * 2; x += 32) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  	rect.Size = new Vector2f (128' 128);  	rect.OutlineColor = Color.Blue;  	for (var y = 0; y < this.HalfHeight * 2; y += 128) {  		for (var x = 0; x < this.HalfWidth * 2; x += 128) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: if (this.ShowGuides) {  	var rect = new RectangleShape (new Vector2f (32' 32));  	rect.FillColor = Color.Transparent;  	rect.OutlineThickness = 0.5f;  	rect.OutlineColor = Color.Cyan;  	for (var y = 0; y < this.HalfHeight * 2; y += 32) {  		for (var x = 0; x < this.HalfWidth * 2; x += 32) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  	rect.Size = new Vector2f (128' 128);  	rect.OutlineColor = Color.Blue;  	for (var y = 0; y < this.HalfHeight * 2; y += 128) {  		for (var x = 0; x < this.HalfWidth * 2; x += 128) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: if (this.ShowGuides) {  	var rect = new RectangleShape (new Vector2f (32' 32));  	rect.FillColor = Color.Transparent;  	rect.OutlineThickness = 0.5f;  	rect.OutlineColor = Color.Cyan;  	for (var y = 0; y < this.HalfHeight * 2; y += 32) {  		for (var x = 0; x < this.HalfWidth * 2; x += 32) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  	rect.Size = new Vector2f (128' 128);  	rect.OutlineColor = Color.Blue;  	for (var y = 0; y < this.HalfHeight * 2; y += 128) {  		for (var x = 0; x < this.HalfWidth * 2; x += 128) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: if (this.ShowGuides) {  	var rect = new RectangleShape (new Vector2f (32' 32));  	rect.FillColor = Color.Transparent;  	rect.OutlineThickness = 0.5f;  	rect.OutlineColor = Color.Cyan;  	for (var y = 0; y < this.HalfHeight * 2; y += 32) {  		for (var x = 0; x < this.HalfWidth * 2; x += 32) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  	rect.Size = new Vector2f (128' 128);  	rect.OutlineColor = Color.Blue;  	for (var y = 0; y < this.HalfHeight * 2; y += 128) {  		for (var x = 0; x < this.HalfWidth * 2; x += 128) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: if (this.ShowGuides) {  	var rect = new RectangleShape (new Vector2f (32' 32));  	rect.FillColor = Color.Transparent;  	rect.OutlineThickness = 0.5f;  	rect.OutlineColor = Color.Cyan;  	for (var y = 0; y < this.HalfHeight * 2; y += 32) {  		for (var x = 0; x < this.HalfWidth * 2; x += 32) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  	rect.Size = new Vector2f (128' 128);  	rect.OutlineColor = Color.Blue;  	for (var y = 0; y < this.HalfHeight * 2; y += 128) {  		for (var x = 0; x < this.HalfWidth * 2; x += 128) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: if (this.ShowGuides) {  	var rect = new RectangleShape (new Vector2f (32' 32));  	rect.FillColor = Color.Transparent;  	rect.OutlineThickness = 0.5f;  	rect.OutlineColor = Color.Cyan;  	for (var y = 0; y < this.HalfHeight * 2; y += 32) {  		for (var x = 0; x < this.HalfWidth * 2; x += 32) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  	rect.Size = new Vector2f (128' 128);  	rect.OutlineColor = Color.Blue;  	for (var y = 0; y < this.HalfHeight * 2; y += 128) {  		for (var x = 0; x < this.HalfWidth * 2; x += 128) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: if (this.ShowGuides) {  	var rect = new RectangleShape (new Vector2f (32' 32));  	rect.FillColor = Color.Transparent;  	rect.OutlineThickness = 0.5f;  	rect.OutlineColor = Color.Cyan;  	for (var y = 0; y < this.HalfHeight * 2; y += 32) {  		for (var x = 0; x < this.HalfWidth * 2; x += 32) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  	rect.Size = new Vector2f (128' 128);  	rect.OutlineColor = Color.Blue;  	for (var y = 0; y < this.HalfHeight * 2; y += 128) {  		for (var x = 0; x < this.HalfWidth * 2; x += 128) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: if (this.ShowGuides) {  	var rect = new RectangleShape (new Vector2f (32' 32));  	rect.FillColor = Color.Transparent;  	rect.OutlineThickness = 0.5f;  	rect.OutlineColor = Color.Cyan;  	for (var y = 0; y < this.HalfHeight * 2; y += 32) {  		for (var x = 0; x < this.HalfWidth * 2; x += 32) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  	rect.Size = new Vector2f (128' 128);  	rect.OutlineColor = Color.Blue;  	for (var y = 0; y < this.HalfHeight * 2; y += 128) {  		for (var x = 0; x < this.HalfWidth * 2; x += 128) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: if (this.ShowGuides) {  	var rect = new RectangleShape (new Vector2f (32' 32));  	rect.FillColor = Color.Transparent;  	rect.OutlineThickness = 0.5f;  	rect.OutlineColor = Color.Cyan;  	for (var y = 0; y < this.HalfHeight * 2; y += 32) {  		for (var x = 0; x < this.HalfWidth * 2; x += 32) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  	rect.Size = new Vector2f (128' 128);  	rect.OutlineColor = Color.Blue;  	for (var y = 0; y < this.HalfHeight * 2; y += 128) {  		for (var x = 0; x < this.HalfWidth * 2; x += 128) {  			rect.Position = new Vector2f (x' y);  			target.Draw (rect' states);  		}  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: for (var y = 0; y < this.HalfHeight * 2; y += 32) {  	for (var x = 0; x < this.HalfWidth * 2; x += 32) {  		rect.Position = new Vector2f (x' y);  		target.Draw (rect' states);  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: for (var y = 0; y < this.HalfHeight * 2; y += 32) {  	for (var x = 0; x < this.HalfWidth * 2; x += 32) {  		rect.Position = new Vector2f (x' y);  		target.Draw (rect' states);  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: for (var y = 0; y < this.HalfHeight * 2; y += 32) {  	for (var x = 0; x < this.HalfWidth * 2; x += 32) {  		rect.Position = new Vector2f (x' y);  		target.Draw (rect' states);  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: for (var y = 0; y < this.HalfHeight * 2; y += 32) {  	for (var x = 0; x < this.HalfWidth * 2; x += 32) {  		rect.Position = new Vector2f (x' y);  		target.Draw (rect' states);  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: y += 32
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: for (var x = 0; x < this.HalfWidth * 2; x += 32) {  	rect.Position = new Vector2f (x' y);  	target.Draw (rect' states);  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: for (var x = 0; x < this.HalfWidth * 2; x += 32) {  	rect.Position = new Vector2f (x' y);  	target.Draw (rect' states);  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: x += 32
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: rect.Size = new Vector2f (128' 128);  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: rect.Size = new Vector2f (128' 128);  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: for (var y = 0; y < this.HalfHeight * 2; y += 128) {  	for (var x = 0; x < this.HalfWidth * 2; x += 128) {  		rect.Position = new Vector2f (x' y);  		target.Draw (rect' states);  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: for (var y = 0; y < this.HalfHeight * 2; y += 128) {  	for (var x = 0; x < this.HalfWidth * 2; x += 128) {  		rect.Position = new Vector2f (x' y);  		target.Draw (rect' states);  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: for (var y = 0; y < this.HalfHeight * 2; y += 128) {  	for (var x = 0; x < this.HalfWidth * 2; x += 128) {  		rect.Position = new Vector2f (x' y);  		target.Draw (rect' states);  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: for (var y = 0; y < this.HalfHeight * 2; y += 128) {  	for (var x = 0; x < this.HalfWidth * 2; x += 128) {  		rect.Position = new Vector2f (x' y);  		target.Draw (rect' states);  	}  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: y += 128
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: for (var x = 0; x < this.HalfWidth * 2; x += 128) {  	rect.Position = new Vector2f (x' y);  	target.Draw (rect' states);  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: for (var x = 0; x < this.HalfWidth * 2; x += 128) {  	rect.Position = new Vector2f (x' y);  	target.Draw (rect' states);  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,Draw,The following statement contains a magic number: x += 128
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: switch (e.Code) {  case Keyboard.Key.Num1:  case Keyboard.Key.Numpad1:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 1;  	}  	else {  		Simulator.Instance.SelectedSkill = 1;  	}  	return;  case Keyboard.Key.Num2:  case Keyboard.Key.Numpad2:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 2;  	}  	else {  		Simulator.Instance.SelectedSkill = 2;  	}  	break;  case Keyboard.Key.Num3:  case Keyboard.Key.Numpad3:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 3;  	}  	else {  		Simulator.Instance.SelectedSkill = 3;  	}  	break;  case Keyboard.Key.Num4:  case Keyboard.Key.Numpad4:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 4;  	}  	else {  		Simulator.Instance.SelectedSkill = 4;  	}  	break;  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: switch (e.Code) {  case Keyboard.Key.Num1:  case Keyboard.Key.Numpad1:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 1;  	}  	else {  		Simulator.Instance.SelectedSkill = 1;  	}  	return;  case Keyboard.Key.Num2:  case Keyboard.Key.Numpad2:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 2;  	}  	else {  		Simulator.Instance.SelectedSkill = 2;  	}  	break;  case Keyboard.Key.Num3:  case Keyboard.Key.Numpad3:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 3;  	}  	else {  		Simulator.Instance.SelectedSkill = 3;  	}  	break;  case Keyboard.Key.Num4:  case Keyboard.Key.Numpad4:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 4;  	}  	else {  		Simulator.Instance.SelectedSkill = 4;  	}  	break;  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: switch (e.Code) {  case Keyboard.Key.Num1:  case Keyboard.Key.Numpad1:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 1;  	}  	else {  		Simulator.Instance.SelectedSkill = 1;  	}  	return;  case Keyboard.Key.Num2:  case Keyboard.Key.Numpad2:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 2;  	}  	else {  		Simulator.Instance.SelectedSkill = 2;  	}  	break;  case Keyboard.Key.Num3:  case Keyboard.Key.Numpad3:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 3;  	}  	else {  		Simulator.Instance.SelectedSkill = 3;  	}  	break;  case Keyboard.Key.Num4:  case Keyboard.Key.Numpad4:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 4;  	}  	else {  		Simulator.Instance.SelectedSkill = 4;  	}  	break;  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: switch (e.Code) {  case Keyboard.Key.Num1:  case Keyboard.Key.Numpad1:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 1;  	}  	else {  		Simulator.Instance.SelectedSkill = 1;  	}  	return;  case Keyboard.Key.Num2:  case Keyboard.Key.Numpad2:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 2;  	}  	else {  		Simulator.Instance.SelectedSkill = 2;  	}  	break;  case Keyboard.Key.Num3:  case Keyboard.Key.Numpad3:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 3;  	}  	else {  		Simulator.Instance.SelectedSkill = 3;  	}  	break;  case Keyboard.Key.Num4:  case Keyboard.Key.Numpad4:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 4;  	}  	else {  		Simulator.Instance.SelectedSkill = 4;  	}  	break;  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: switch (e.Code) {  case Keyboard.Key.Num1:  case Keyboard.Key.Numpad1:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 1;  	}  	else {  		Simulator.Instance.SelectedSkill = 1;  	}  	return;  case Keyboard.Key.Num2:  case Keyboard.Key.Numpad2:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 2;  	}  	else {  		Simulator.Instance.SelectedSkill = 2;  	}  	break;  case Keyboard.Key.Num3:  case Keyboard.Key.Numpad3:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 3;  	}  	else {  		Simulator.Instance.SelectedSkill = 3;  	}  	break;  case Keyboard.Key.Num4:  case Keyboard.Key.Numpad4:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 4;  	}  	else {  		Simulator.Instance.SelectedSkill = 4;  	}  	break;  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: switch (e.Code) {  case Keyboard.Key.Num1:  case Keyboard.Key.Numpad1:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 1;  	}  	else {  		Simulator.Instance.SelectedSkill = 1;  	}  	return;  case Keyboard.Key.Num2:  case Keyboard.Key.Numpad2:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 2;  	}  	else {  		Simulator.Instance.SelectedSkill = 2;  	}  	break;  case Keyboard.Key.Num3:  case Keyboard.Key.Numpad3:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 3;  	}  	else {  		Simulator.Instance.SelectedSkill = 3;  	}  	break;  case Keyboard.Key.Num4:  case Keyboard.Key.Numpad4:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 4;  	}  	else {  		Simulator.Instance.SelectedSkill = 4;  	}  	break;  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: if (e.Control || e.Shift) {  	Simulator.Instance.MultiSelectedSkill = 2;  }  else {  	Simulator.Instance.SelectedSkill = 2;  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: if (e.Control || e.Shift) {  	Simulator.Instance.MultiSelectedSkill = 2;  }  else {  	Simulator.Instance.SelectedSkill = 2;  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: Simulator.Instance.MultiSelectedSkill = 2;  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: Simulator.Instance.SelectedSkill = 2;  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: if (e.Control || e.Shift) {  	Simulator.Instance.MultiSelectedSkill = 3;  }  else {  	Simulator.Instance.SelectedSkill = 3;  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: if (e.Control || e.Shift) {  	Simulator.Instance.MultiSelectedSkill = 3;  }  else {  	Simulator.Instance.SelectedSkill = 3;  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: Simulator.Instance.MultiSelectedSkill = 3;  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: Simulator.Instance.SelectedSkill = 3;  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: if (e.Control || e.Shift) {  	Simulator.Instance.MultiSelectedSkill = 4;  }  else {  	Simulator.Instance.SelectedSkill = 4;  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: if (e.Control || e.Shift) {  	Simulator.Instance.MultiSelectedSkill = 4;  }  else {  	Simulator.Instance.SelectedSkill = 4;  }  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: Simulator.Instance.MultiSelectedSkill = 4;  
Magic Number,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following statement contains a magic number: Simulator.Instance.SelectedSkill = 4;  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: if (IoManager.textures.TryGetValue (IoManager.LIGHT_TEXTURE_ID' out tex) == false) {  	var R_MAX = IoManager.LIGHT_TEXTRE_MAX_RADIUS;  	var r_min = IoManager.LIGHT_TEXTRE_MIN_RADIUS;  	var image = new Image ((uint)R_MAX * 2' (uint)R_MAX * 2' Color.Black);  	// fill with a shaded circle  	// of course this is not optimized (no simmetry' no reuse of variables...)  	// but it should be more clear this way  	for (uint y = 0; y < R_MAX * 2; y++) {  		for (uint x = 0; x < R_MAX * 2; x++) {  			var dx = (R_MAX - x);  			var dy = (R_MAX - y);  			var r = (int)Math.Sqrt (dx * dx + dy * dy);  			if (r > R_MAX) {  				r = R_MAX;  			}  			else if (r < r_min) {  				r = 0;  			}  			else {  				r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  			}  			var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  			var color = new Color (255' 255' 255' c);  			image.SetPixel (x' y' color);  		}  	}  	tex = new Texture (image);  	tex.Smooth = true;  	IoManager.textures.Add (IoManager.LIGHT_TEXTURE_ID' tex);  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: if (IoManager.textures.TryGetValue (IoManager.LIGHT_TEXTURE_ID' out tex) == false) {  	var R_MAX = IoManager.LIGHT_TEXTRE_MAX_RADIUS;  	var r_min = IoManager.LIGHT_TEXTRE_MIN_RADIUS;  	var image = new Image ((uint)R_MAX * 2' (uint)R_MAX * 2' Color.Black);  	// fill with a shaded circle  	// of course this is not optimized (no simmetry' no reuse of variables...)  	// but it should be more clear this way  	for (uint y = 0; y < R_MAX * 2; y++) {  		for (uint x = 0; x < R_MAX * 2; x++) {  			var dx = (R_MAX - x);  			var dy = (R_MAX - y);  			var r = (int)Math.Sqrt (dx * dx + dy * dy);  			if (r > R_MAX) {  				r = R_MAX;  			}  			else if (r < r_min) {  				r = 0;  			}  			else {  				r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  			}  			var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  			var color = new Color (255' 255' 255' c);  			image.SetPixel (x' y' color);  		}  	}  	tex = new Texture (image);  	tex.Smooth = true;  	IoManager.textures.Add (IoManager.LIGHT_TEXTURE_ID' tex);  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: if (IoManager.textures.TryGetValue (IoManager.LIGHT_TEXTURE_ID' out tex) == false) {  	var R_MAX = IoManager.LIGHT_TEXTRE_MAX_RADIUS;  	var r_min = IoManager.LIGHT_TEXTRE_MIN_RADIUS;  	var image = new Image ((uint)R_MAX * 2' (uint)R_MAX * 2' Color.Black);  	// fill with a shaded circle  	// of course this is not optimized (no simmetry' no reuse of variables...)  	// but it should be more clear this way  	for (uint y = 0; y < R_MAX * 2; y++) {  		for (uint x = 0; x < R_MAX * 2; x++) {  			var dx = (R_MAX - x);  			var dy = (R_MAX - y);  			var r = (int)Math.Sqrt (dx * dx + dy * dy);  			if (r > R_MAX) {  				r = R_MAX;  			}  			else if (r < r_min) {  				r = 0;  			}  			else {  				r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  			}  			var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  			var color = new Color (255' 255' 255' c);  			image.SetPixel (x' y' color);  		}  	}  	tex = new Texture (image);  	tex.Smooth = true;  	IoManager.textures.Add (IoManager.LIGHT_TEXTURE_ID' tex);  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: if (IoManager.textures.TryGetValue (IoManager.LIGHT_TEXTURE_ID' out tex) == false) {  	var R_MAX = IoManager.LIGHT_TEXTRE_MAX_RADIUS;  	var r_min = IoManager.LIGHT_TEXTRE_MIN_RADIUS;  	var image = new Image ((uint)R_MAX * 2' (uint)R_MAX * 2' Color.Black);  	// fill with a shaded circle  	// of course this is not optimized (no simmetry' no reuse of variables...)  	// but it should be more clear this way  	for (uint y = 0; y < R_MAX * 2; y++) {  		for (uint x = 0; x < R_MAX * 2; x++) {  			var dx = (R_MAX - x);  			var dy = (R_MAX - y);  			var r = (int)Math.Sqrt (dx * dx + dy * dy);  			if (r > R_MAX) {  				r = R_MAX;  			}  			else if (r < r_min) {  				r = 0;  			}  			else {  				r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  			}  			var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  			var color = new Color (255' 255' 255' c);  			image.SetPixel (x' y' color);  		}  	}  	tex = new Texture (image);  	tex.Smooth = true;  	IoManager.textures.Add (IoManager.LIGHT_TEXTURE_ID' tex);  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: if (IoManager.textures.TryGetValue (IoManager.LIGHT_TEXTURE_ID' out tex) == false) {  	var R_MAX = IoManager.LIGHT_TEXTRE_MAX_RADIUS;  	var r_min = IoManager.LIGHT_TEXTRE_MIN_RADIUS;  	var image = new Image ((uint)R_MAX * 2' (uint)R_MAX * 2' Color.Black);  	// fill with a shaded circle  	// of course this is not optimized (no simmetry' no reuse of variables...)  	// but it should be more clear this way  	for (uint y = 0; y < R_MAX * 2; y++) {  		for (uint x = 0; x < R_MAX * 2; x++) {  			var dx = (R_MAX - x);  			var dy = (R_MAX - y);  			var r = (int)Math.Sqrt (dx * dx + dy * dy);  			if (r > R_MAX) {  				r = R_MAX;  			}  			else if (r < r_min) {  				r = 0;  			}  			else {  				r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  			}  			var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  			var color = new Color (255' 255' 255' c);  			image.SetPixel (x' y' color);  		}  	}  	tex = new Texture (image);  	tex.Smooth = true;  	IoManager.textures.Add (IoManager.LIGHT_TEXTURE_ID' tex);  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: if (IoManager.textures.TryGetValue (IoManager.LIGHT_TEXTURE_ID' out tex) == false) {  	var R_MAX = IoManager.LIGHT_TEXTRE_MAX_RADIUS;  	var r_min = IoManager.LIGHT_TEXTRE_MIN_RADIUS;  	var image = new Image ((uint)R_MAX * 2' (uint)R_MAX * 2' Color.Black);  	// fill with a shaded circle  	// of course this is not optimized (no simmetry' no reuse of variables...)  	// but it should be more clear this way  	for (uint y = 0; y < R_MAX * 2; y++) {  		for (uint x = 0; x < R_MAX * 2; x++) {  			var dx = (R_MAX - x);  			var dy = (R_MAX - y);  			var r = (int)Math.Sqrt (dx * dx + dy * dy);  			if (r > R_MAX) {  				r = R_MAX;  			}  			else if (r < r_min) {  				r = 0;  			}  			else {  				r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  			}  			var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  			var color = new Color (255' 255' 255' c);  			image.SetPixel (x' y' color);  		}  	}  	tex = new Texture (image);  	tex.Smooth = true;  	IoManager.textures.Add (IoManager.LIGHT_TEXTURE_ID' tex);  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: if (IoManager.textures.TryGetValue (IoManager.LIGHT_TEXTURE_ID' out tex) == false) {  	var R_MAX = IoManager.LIGHT_TEXTRE_MAX_RADIUS;  	var r_min = IoManager.LIGHT_TEXTRE_MIN_RADIUS;  	var image = new Image ((uint)R_MAX * 2' (uint)R_MAX * 2' Color.Black);  	// fill with a shaded circle  	// of course this is not optimized (no simmetry' no reuse of variables...)  	// but it should be more clear this way  	for (uint y = 0; y < R_MAX * 2; y++) {  		for (uint x = 0; x < R_MAX * 2; x++) {  			var dx = (R_MAX - x);  			var dy = (R_MAX - y);  			var r = (int)Math.Sqrt (dx * dx + dy * dy);  			if (r > R_MAX) {  				r = R_MAX;  			}  			else if (r < r_min) {  				r = 0;  			}  			else {  				r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  			}  			var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  			var color = new Color (255' 255' 255' c);  			image.SetPixel (x' y' color);  		}  	}  	tex = new Texture (image);  	tex.Smooth = true;  	IoManager.textures.Add (IoManager.LIGHT_TEXTURE_ID' tex);  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: if (IoManager.textures.TryGetValue (IoManager.LIGHT_TEXTURE_ID' out tex) == false) {  	var R_MAX = IoManager.LIGHT_TEXTRE_MAX_RADIUS;  	var r_min = IoManager.LIGHT_TEXTRE_MIN_RADIUS;  	var image = new Image ((uint)R_MAX * 2' (uint)R_MAX * 2' Color.Black);  	// fill with a shaded circle  	// of course this is not optimized (no simmetry' no reuse of variables...)  	// but it should be more clear this way  	for (uint y = 0; y < R_MAX * 2; y++) {  		for (uint x = 0; x < R_MAX * 2; x++) {  			var dx = (R_MAX - x);  			var dy = (R_MAX - y);  			var r = (int)Math.Sqrt (dx * dx + dy * dy);  			if (r > R_MAX) {  				r = R_MAX;  			}  			else if (r < r_min) {  				r = 0;  			}  			else {  				r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  			}  			var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  			var color = new Color (255' 255' 255' c);  			image.SetPixel (x' y' color);  		}  	}  	tex = new Texture (image);  	tex.Smooth = true;  	IoManager.textures.Add (IoManager.LIGHT_TEXTURE_ID' tex);  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: for (uint y = 0; y < R_MAX * 2; y++) {  	for (uint x = 0; x < R_MAX * 2; x++) {  		var dx = (R_MAX - x);  		var dy = (R_MAX - y);  		var r = (int)Math.Sqrt (dx * dx + dy * dy);  		if (r > R_MAX) {  			r = R_MAX;  		}  		else if (r < r_min) {  			r = 0;  		}  		else {  			r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  		}  		var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  		var color = new Color (255' 255' 255' c);  		image.SetPixel (x' y' color);  	}  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: for (uint y = 0; y < R_MAX * 2; y++) {  	for (uint x = 0; x < R_MAX * 2; x++) {  		var dx = (R_MAX - x);  		var dy = (R_MAX - y);  		var r = (int)Math.Sqrt (dx * dx + dy * dy);  		if (r > R_MAX) {  			r = R_MAX;  		}  		else if (r < r_min) {  			r = 0;  		}  		else {  			r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  		}  		var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  		var color = new Color (255' 255' 255' c);  		image.SetPixel (x' y' color);  	}  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: for (uint y = 0; y < R_MAX * 2; y++) {  	for (uint x = 0; x < R_MAX * 2; x++) {  		var dx = (R_MAX - x);  		var dy = (R_MAX - y);  		var r = (int)Math.Sqrt (dx * dx + dy * dy);  		if (r > R_MAX) {  			r = R_MAX;  		}  		else if (r < r_min) {  			r = 0;  		}  		else {  			r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  		}  		var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  		var color = new Color (255' 255' 255' c);  		image.SetPixel (x' y' color);  	}  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: for (uint y = 0; y < R_MAX * 2; y++) {  	for (uint x = 0; x < R_MAX * 2; x++) {  		var dx = (R_MAX - x);  		var dy = (R_MAX - y);  		var r = (int)Math.Sqrt (dx * dx + dy * dy);  		if (r > R_MAX) {  			r = R_MAX;  		}  		else if (r < r_min) {  			r = 0;  		}  		else {  			r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  		}  		var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  		var color = new Color (255' 255' 255' c);  		image.SetPixel (x' y' color);  	}  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: for (uint y = 0; y < R_MAX * 2; y++) {  	for (uint x = 0; x < R_MAX * 2; x++) {  		var dx = (R_MAX - x);  		var dy = (R_MAX - y);  		var r = (int)Math.Sqrt (dx * dx + dy * dy);  		if (r > R_MAX) {  			r = R_MAX;  		}  		else if (r < r_min) {  			r = 0;  		}  		else {  			r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  		}  		var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  		var color = new Color (255' 255' 255' c);  		image.SetPixel (x' y' color);  	}  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: for (uint y = 0; y < R_MAX * 2; y++) {  	for (uint x = 0; x < R_MAX * 2; x++) {  		var dx = (R_MAX - x);  		var dy = (R_MAX - y);  		var r = (int)Math.Sqrt (dx * dx + dy * dy);  		if (r > R_MAX) {  			r = R_MAX;  		}  		else if (r < r_min) {  			r = 0;  		}  		else {  			r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  		}  		var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  		var color = new Color (255' 255' 255' c);  		image.SetPixel (x' y' color);  	}  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: for (uint x = 0; x < R_MAX * 2; x++) {  	var dx = (R_MAX - x);  	var dy = (R_MAX - y);  	var r = (int)Math.Sqrt (dx * dx + dy * dy);  	if (r > R_MAX) {  		r = R_MAX;  	}  	else if (r < r_min) {  		r = 0;  	}  	else {  		r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  	}  	var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  	var color = new Color (255' 255' 255' c);  	image.SetPixel (x' y' color);  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: for (uint x = 0; x < R_MAX * 2; x++) {  	var dx = (R_MAX - x);  	var dy = (R_MAX - y);  	var r = (int)Math.Sqrt (dx * dx + dy * dy);  	if (r > R_MAX) {  		r = R_MAX;  	}  	else if (r < r_min) {  		r = 0;  	}  	else {  		r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  	}  	var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  	var color = new Color (255' 255' 255' c);  	image.SetPixel (x' y' color);  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: for (uint x = 0; x < R_MAX * 2; x++) {  	var dx = (R_MAX - x);  	var dy = (R_MAX - y);  	var r = (int)Math.Sqrt (dx * dx + dy * dy);  	if (r > R_MAX) {  		r = R_MAX;  	}  	else if (r < r_min) {  		r = 0;  	}  	else {  		r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  	}  	var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  	var color = new Color (255' 255' 255' c);  	image.SetPixel (x' y' color);  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: for (uint x = 0; x < R_MAX * 2; x++) {  	var dx = (R_MAX - x);  	var dy = (R_MAX - y);  	var r = (int)Math.Sqrt (dx * dx + dy * dy);  	if (r > R_MAX) {  		r = R_MAX;  	}  	else if (r < r_min) {  		r = 0;  	}  	else {  		r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  	}  	var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  	var color = new Color (255' 255' 255' c);  	image.SetPixel (x' y' color);  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,CreateShadedCircle,The following statement contains a magic number: for (uint x = 0; x < R_MAX * 2; x++) {  	var dx = (R_MAX - x);  	var dy = (R_MAX - y);  	var r = (int)Math.Sqrt (dx * dx + dy * dy);  	if (r > R_MAX) {  		r = R_MAX;  	}  	else if (r < r_min) {  		r = 0;  	}  	else {  		r = r * R_MAX / (R_MAX - r_min) - r_min * R_MAX / (R_MAX - r_min);  	}  	var c = (byte)(255 * (R_MAX - r) * (R_MAX - r) / (R_MAX * R_MAX));  	var color = new Color (255' 255' 255' c);  	image.SetPixel (x' y' color);  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,Initialize,The following statement contains a magic number: IoManager.window = new RenderWindow (new VideoMode ((uint)width' (uint)height' 32)' title);  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,Initialize,The following statement contains a magic number: IoManager.FPS = 60;  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,Initialize,The following statement contains a magic number: IoManager.pointer.ScaleX = 2;  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,Initialize,The following statement contains a magic number: IoManager.pointer.ScaleY = 2;  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,LoadMusic,The following statement contains a magic number: try {  	if (IoManager.music != null && IoManager.music.FileName == fileName) {  		Logger.Info ("IoManager"' "LoadMusic"' "Already loaded " + fileName);  	}  	else {  		var path = IoManager.GetAssetPath (fileName);  		var mus = new Sound ();  		mus.SoundBuffer = new SoundBuffer (path);  		mus.Volume = 15;  		IoManager.music = new BackgroundMusic (mus' fileName);  		Logger.Info ("IoManager"' "LoadMusic"' "loaded music " + fileName);  	}  	return IoManager.music;  }  catch (Exception ex) {  	Logger.Warning ("IoManager"' "LoadMusic"' "Unable to load " + fileName + ": " + ex.ToString ());  	return null;  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,LoadMusic,The following statement contains a magic number: if (IoManager.music != null && IoManager.music.FileName == fileName) {  	Logger.Info ("IoManager"' "LoadMusic"' "Already loaded " + fileName);  }  else {  	var path = IoManager.GetAssetPath (fileName);  	var mus = new Sound ();  	mus.SoundBuffer = new SoundBuffer (path);  	mus.Volume = 15;  	IoManager.music = new BackgroundMusic (mus' fileName);  	Logger.Info ("IoManager"' "LoadMusic"' "loaded music " + fileName);  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,LoadMusic,The following statement contains a magic number: mus.Volume = 15;  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,LoadSound,The following statement contains a magic number: if (IoManager.sounds.TryGetValue (fileName' out res) == false) {  	try {  		var path = IoManager.GetAssetPath (fileName);  		res = new Sound (new SoundBuffer (path));  		res.Volume = 5;  		IoManager.sounds.Add (fileName' res);  	}  	catch (Exception ex) {  		// TODO log exception  		Console.Write (ex.ToString ());  		res = null;  	}  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,LoadSound,The following statement contains a magic number: try {  	var path = IoManager.GetAssetPath (fileName);  	res = new Sound (new SoundBuffer (path));  	res.Volume = 5;  	IoManager.sounds.Add (fileName' res);  }  catch (Exception ex) {  	// TODO log exception  	Console.Write (ex.ToString ());  	res = null;  }  
Magic Number,WizardsDuel.Io,IoManager,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\IoManager.cs,LoadSound,The following statement contains a magic number: res.Volume = 5;  
Magic Number,WizardsDuel.States,TestState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.QUIT) {  	this.NextState = GameStates.QUIT;  }  else if (inputs.Command == InputCommands.UP) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 0' -1));  }  else if (inputs.Command == InputCommands.DOWN) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 0' 1));  }  else if (inputs.Command == InputCommands.LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' 0));  }  else if (inputs.Command == InputCommands.RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' 0));  }  else if (inputs.Command == InputCommands.UP_RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' -1));  }  else if (inputs.Command == InputCommands.DOWN_RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' 1));  }  else if (inputs.Command == InputCommands.UP_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' -1));  }  else if (inputs.Command == InputCommands.DOWN_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' 1));  }  else if (inputs.Command == InputCommands.SKIP) {  	if (Simulator.Instance.IsGameOver == true) {  		IoManager.FadeTo (Color.Black' 500);  		Simulator.Instance.LoadArea ();  	}  	else {  		Simulator.Instance.SetUserEvent (new SkipEvent (Simulator.PLAYER_ID));  	}  }  else if (inputs.Command == InputCommands.TOGGLE_GRID) {  	Simulator.Instance.ToggleGrid ();  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TestState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.UP) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 0' -1));  }  else if (inputs.Command == InputCommands.DOWN) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 0' 1));  }  else if (inputs.Command == InputCommands.LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' 0));  }  else if (inputs.Command == InputCommands.RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' 0));  }  else if (inputs.Command == InputCommands.UP_RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' -1));  }  else if (inputs.Command == InputCommands.DOWN_RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' 1));  }  else if (inputs.Command == InputCommands.UP_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' -1));  }  else if (inputs.Command == InputCommands.DOWN_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' 1));  }  else if (inputs.Command == InputCommands.SKIP) {  	if (Simulator.Instance.IsGameOver == true) {  		IoManager.FadeTo (Color.Black' 500);  		Simulator.Instance.LoadArea ();  	}  	else {  		Simulator.Instance.SetUserEvent (new SkipEvent (Simulator.PLAYER_ID));  	}  }  else if (inputs.Command == InputCommands.TOGGLE_GRID) {  	Simulator.Instance.ToggleGrid ();  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TestState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.DOWN) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 0' 1));  }  else if (inputs.Command == InputCommands.LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' 0));  }  else if (inputs.Command == InputCommands.RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' 0));  }  else if (inputs.Command == InputCommands.UP_RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' -1));  }  else if (inputs.Command == InputCommands.DOWN_RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' 1));  }  else if (inputs.Command == InputCommands.UP_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' -1));  }  else if (inputs.Command == InputCommands.DOWN_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' 1));  }  else if (inputs.Command == InputCommands.SKIP) {  	if (Simulator.Instance.IsGameOver == true) {  		IoManager.FadeTo (Color.Black' 500);  		Simulator.Instance.LoadArea ();  	}  	else {  		Simulator.Instance.SetUserEvent (new SkipEvent (Simulator.PLAYER_ID));  	}  }  else if (inputs.Command == InputCommands.TOGGLE_GRID) {  	Simulator.Instance.ToggleGrid ();  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TestState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' 0));  }  else if (inputs.Command == InputCommands.RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' 0));  }  else if (inputs.Command == InputCommands.UP_RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' -1));  }  else if (inputs.Command == InputCommands.DOWN_RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' 1));  }  else if (inputs.Command == InputCommands.UP_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' -1));  }  else if (inputs.Command == InputCommands.DOWN_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' 1));  }  else if (inputs.Command == InputCommands.SKIP) {  	if (Simulator.Instance.IsGameOver == true) {  		IoManager.FadeTo (Color.Black' 500);  		Simulator.Instance.LoadArea ();  	}  	else {  		Simulator.Instance.SetUserEvent (new SkipEvent (Simulator.PLAYER_ID));  	}  }  else if (inputs.Command == InputCommands.TOGGLE_GRID) {  	Simulator.Instance.ToggleGrid ();  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TestState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' 0));  }  else if (inputs.Command == InputCommands.UP_RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' -1));  }  else if (inputs.Command == InputCommands.DOWN_RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' 1));  }  else if (inputs.Command == InputCommands.UP_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' -1));  }  else if (inputs.Command == InputCommands.DOWN_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' 1));  }  else if (inputs.Command == InputCommands.SKIP) {  	if (Simulator.Instance.IsGameOver == true) {  		IoManager.FadeTo (Color.Black' 500);  		Simulator.Instance.LoadArea ();  	}  	else {  		Simulator.Instance.SetUserEvent (new SkipEvent (Simulator.PLAYER_ID));  	}  }  else if (inputs.Command == InputCommands.TOGGLE_GRID) {  	Simulator.Instance.ToggleGrid ();  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TestState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.UP_RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' -1));  }  else if (inputs.Command == InputCommands.DOWN_RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' 1));  }  else if (inputs.Command == InputCommands.UP_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' -1));  }  else if (inputs.Command == InputCommands.DOWN_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' 1));  }  else if (inputs.Command == InputCommands.SKIP) {  	if (Simulator.Instance.IsGameOver == true) {  		IoManager.FadeTo (Color.Black' 500);  		Simulator.Instance.LoadArea ();  	}  	else {  		Simulator.Instance.SetUserEvent (new SkipEvent (Simulator.PLAYER_ID));  	}  }  else if (inputs.Command == InputCommands.TOGGLE_GRID) {  	Simulator.Instance.ToggleGrid ();  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TestState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.DOWN_RIGHT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' 1' 1));  }  else if (inputs.Command == InputCommands.UP_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' -1));  }  else if (inputs.Command == InputCommands.DOWN_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' 1));  }  else if (inputs.Command == InputCommands.SKIP) {  	if (Simulator.Instance.IsGameOver == true) {  		IoManager.FadeTo (Color.Black' 500);  		Simulator.Instance.LoadArea ();  	}  	else {  		Simulator.Instance.SetUserEvent (new SkipEvent (Simulator.PLAYER_ID));  	}  }  else if (inputs.Command == InputCommands.TOGGLE_GRID) {  	Simulator.Instance.ToggleGrid ();  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TestState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.UP_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' -1));  }  else if (inputs.Command == InputCommands.DOWN_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' 1));  }  else if (inputs.Command == InputCommands.SKIP) {  	if (Simulator.Instance.IsGameOver == true) {  		IoManager.FadeTo (Color.Black' 500);  		Simulator.Instance.LoadArea ();  	}  	else {  		Simulator.Instance.SetUserEvent (new SkipEvent (Simulator.PLAYER_ID));  	}  }  else if (inputs.Command == InputCommands.TOGGLE_GRID) {  	Simulator.Instance.ToggleGrid ();  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TestState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.DOWN_LEFT) {  	Simulator.Instance.SetUserEvent (new ShiftEvent (Simulator.PLAYER_ID' -1' 1));  }  else if (inputs.Command == InputCommands.SKIP) {  	if (Simulator.Instance.IsGameOver == true) {  		IoManager.FadeTo (Color.Black' 500);  		Simulator.Instance.LoadArea ();  	}  	else {  		Simulator.Instance.SetUserEvent (new SkipEvent (Simulator.PLAYER_ID));  	}  }  else if (inputs.Command == InputCommands.TOGGLE_GRID) {  	Simulator.Instance.ToggleGrid ();  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TestState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.SKIP) {  	if (Simulator.Instance.IsGameOver == true) {  		IoManager.FadeTo (Color.Black' 500);  		Simulator.Instance.LoadArea ();  	}  	else {  		Simulator.Instance.SetUserEvent (new SkipEvent (Simulator.PLAYER_ID));  	}  }  else if (inputs.Command == InputCommands.TOGGLE_GRID) {  	Simulator.Instance.ToggleGrid ();  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TestState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (Simulator.Instance.IsGameOver == true) {  	IoManager.FadeTo (Color.Black' 500);  	Simulator.Instance.LoadArea ();  }  else {  	Simulator.Instance.SetUserEvent (new SkipEvent (Simulator.PLAYER_ID));  }  
Magic Number,WizardsDuel.States,TestState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: IoManager.FadeTo (Color.Black' 500);  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,TitleState,The following statement contains a magic number: IoManager.AddWidget (new Icon ("0startscreen01_big.jpg"' new IntRect (0' 0' 1280' 720)));  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,TitleState,The following statement contains a magic number: IoManager.AddWidget (new Icon ("0startscreen01_big.jpg"' new IntRect (0' 0' 1280' 720)));  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,TitleState,The following statement contains a magic number: label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height - 64);  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,TitleState,The following statement contains a magic number: label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height - 64);  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.QUIT) {  	this.NextState = GameStates.QUIT;  }  else if (inputs.Command != InputCommands.NONE) {  	switch (this.page) {  	case 0:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	case 1:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	default:  		IoManager.Clear ();  		var label = new Label ("Loading"' 32' "munro.ttf");  		label.AlignCenter = true;  		label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  		IoManager.AddWidget (label);  		IoManager.ForceDraw ();  		this.NextState = GameStates.TEST;  		break;  	}  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.QUIT) {  	this.NextState = GameStates.QUIT;  }  else if (inputs.Command != InputCommands.NONE) {  	switch (this.page) {  	case 0:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	case 1:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	default:  		IoManager.Clear ();  		var label = new Label ("Loading"' 32' "munro.ttf");  		label.AlignCenter = true;  		label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  		IoManager.AddWidget (label);  		IoManager.ForceDraw ();  		this.NextState = GameStates.TEST;  		break;  	}  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.QUIT) {  	this.NextState = GameStates.QUIT;  }  else if (inputs.Command != InputCommands.NONE) {  	switch (this.page) {  	case 0:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	case 1:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	default:  		IoManager.Clear ();  		var label = new Label ("Loading"' 32' "munro.ttf");  		label.AlignCenter = true;  		label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  		IoManager.AddWidget (label);  		IoManager.ForceDraw ();  		this.NextState = GameStates.TEST;  		break;  	}  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.QUIT) {  	this.NextState = GameStates.QUIT;  }  else if (inputs.Command != InputCommands.NONE) {  	switch (this.page) {  	case 0:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	case 1:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	default:  		IoManager.Clear ();  		var label = new Label ("Loading"' 32' "munro.ttf");  		label.AlignCenter = true;  		label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  		IoManager.AddWidget (label);  		IoManager.ForceDraw ();  		this.NextState = GameStates.TEST;  		break;  	}  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.QUIT) {  	this.NextState = GameStates.QUIT;  }  else if (inputs.Command != InputCommands.NONE) {  	switch (this.page) {  	case 0:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	case 1:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	default:  		IoManager.Clear ();  		var label = new Label ("Loading"' 32' "munro.ttf");  		label.AlignCenter = true;  		label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  		IoManager.AddWidget (label);  		IoManager.ForceDraw ();  		this.NextState = GameStates.TEST;  		break;  	}  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.QUIT) {  	this.NextState = GameStates.QUIT;  }  else if (inputs.Command != InputCommands.NONE) {  	switch (this.page) {  	case 0:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	case 1:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	default:  		IoManager.Clear ();  		var label = new Label ("Loading"' 32' "munro.ttf");  		label.AlignCenter = true;  		label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  		IoManager.AddWidget (label);  		IoManager.ForceDraw ();  		this.NextState = GameStates.TEST;  		break;  	}  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command == InputCommands.QUIT) {  	this.NextState = GameStates.QUIT;  }  else if (inputs.Command != InputCommands.NONE) {  	switch (this.page) {  	case 0:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	case 1:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	default:  		IoManager.Clear ();  		var label = new Label ("Loading"' 32' "munro.ttf");  		label.AlignCenter = true;  		label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  		IoManager.AddWidget (label);  		IoManager.ForceDraw ();  		this.NextState = GameStates.TEST;  		break;  	}  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command != InputCommands.NONE) {  	switch (this.page) {  	case 0:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	case 1:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	default:  		IoManager.Clear ();  		var label = new Label ("Loading"' 32' "munro.ttf");  		label.AlignCenter = true;  		label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  		IoManager.AddWidget (label);  		IoManager.ForceDraw ();  		this.NextState = GameStates.TEST;  		break;  	}  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command != InputCommands.NONE) {  	switch (this.page) {  	case 0:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	case 1:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	default:  		IoManager.Clear ();  		var label = new Label ("Loading"' 32' "munro.ttf");  		label.AlignCenter = true;  		label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  		IoManager.AddWidget (label);  		IoManager.ForceDraw ();  		this.NextState = GameStates.TEST;  		break;  	}  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command != InputCommands.NONE) {  	switch (this.page) {  	case 0:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	case 1:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	default:  		IoManager.Clear ();  		var label = new Label ("Loading"' 32' "munro.ttf");  		label.AlignCenter = true;  		label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  		IoManager.AddWidget (label);  		IoManager.ForceDraw ();  		this.NextState = GameStates.TEST;  		break;  	}  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command != InputCommands.NONE) {  	switch (this.page) {  	case 0:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	case 1:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	default:  		IoManager.Clear ();  		var label = new Label ("Loading"' 32' "munro.ttf");  		label.AlignCenter = true;  		label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  		IoManager.AddWidget (label);  		IoManager.ForceDraw ();  		this.NextState = GameStates.TEST;  		break;  	}  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command != InputCommands.NONE) {  	switch (this.page) {  	case 0:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	case 1:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	default:  		IoManager.Clear ();  		var label = new Label ("Loading"' 32' "munro.ttf");  		label.AlignCenter = true;  		label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  		IoManager.AddWidget (label);  		IoManager.ForceDraw ();  		this.NextState = GameStates.TEST;  		break;  	}  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command != InputCommands.NONE) {  	switch (this.page) {  	case 0:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	case 1:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	default:  		IoManager.Clear ();  		var label = new Label ("Loading"' 32' "munro.ttf");  		label.AlignCenter = true;  		label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  		IoManager.AddWidget (label);  		IoManager.ForceDraw ();  		this.NextState = GameStates.TEST;  		break;  	}  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: if (inputs.Command != InputCommands.NONE) {  	switch (this.page) {  	case 0:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	case 1:  		this.page++;  		IoManager.Clear ();  		IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  		break;  	default:  		IoManager.Clear ();  		var label = new Label ("Loading"' 32' "munro.ttf");  		label.AlignCenter = true;  		label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  		IoManager.AddWidget (label);  		IoManager.ForceDraw ();  		this.NextState = GameStates.TEST;  		break;  	}  }  else {  	//Logger.Debug ("TestState"' "Logic"' "Inputs: " + inputs.Command.ToString ());  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: switch (this.page) {  case 0:  	this.page++;  	IoManager.Clear ();  	IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  	break;  case 1:  	this.page++;  	IoManager.Clear ();  	IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  	break;  default:  	IoManager.Clear ();  	var label = new Label ("Loading"' 32' "munro.ttf");  	label.AlignCenter = true;  	label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  	IoManager.AddWidget (label);  	IoManager.ForceDraw ();  	this.NextState = GameStates.TEST;  	break;  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: switch (this.page) {  case 0:  	this.page++;  	IoManager.Clear ();  	IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  	break;  case 1:  	this.page++;  	IoManager.Clear ();  	IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  	break;  default:  	IoManager.Clear ();  	var label = new Label ("Loading"' 32' "munro.ttf");  	label.AlignCenter = true;  	label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  	IoManager.AddWidget (label);  	IoManager.ForceDraw ();  	this.NextState = GameStates.TEST;  	break;  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: switch (this.page) {  case 0:  	this.page++;  	IoManager.Clear ();  	IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  	break;  case 1:  	this.page++;  	IoManager.Clear ();  	IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  	break;  default:  	IoManager.Clear ();  	var label = new Label ("Loading"' 32' "munro.ttf");  	label.AlignCenter = true;  	label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  	IoManager.AddWidget (label);  	IoManager.ForceDraw ();  	this.NextState = GameStates.TEST;  	break;  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: switch (this.page) {  case 0:  	this.page++;  	IoManager.Clear ();  	IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  	break;  case 1:  	this.page++;  	IoManager.Clear ();  	IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  	break;  default:  	IoManager.Clear ();  	var label = new Label ("Loading"' 32' "munro.ttf");  	label.AlignCenter = true;  	label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  	IoManager.AddWidget (label);  	IoManager.ForceDraw ();  	this.NextState = GameStates.TEST;  	break;  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: switch (this.page) {  case 0:  	this.page++;  	IoManager.Clear ();  	IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  	break;  case 1:  	this.page++;  	IoManager.Clear ();  	IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  	break;  default:  	IoManager.Clear ();  	var label = new Label ("Loading"' 32' "munro.ttf");  	label.AlignCenter = true;  	label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  	IoManager.AddWidget (label);  	IoManager.ForceDraw ();  	this.NextState = GameStates.TEST;  	break;  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: switch (this.page) {  case 0:  	this.page++;  	IoManager.Clear ();  	IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  	break;  case 1:  	this.page++;  	IoManager.Clear ();  	IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  	break;  default:  	IoManager.Clear ();  	var label = new Label ("Loading"' 32' "munro.ttf");  	label.AlignCenter = true;  	label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  	IoManager.AddWidget (label);  	IoManager.ForceDraw ();  	this.NextState = GameStates.TEST;  	break;  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: switch (this.page) {  case 0:  	this.page++;  	IoManager.Clear ();  	IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  	break;  case 1:  	this.page++;  	IoManager.Clear ();  	IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  	break;  default:  	IoManager.Clear ();  	var label = new Label ("Loading"' 32' "munro.ttf");  	label.AlignCenter = true;  	label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  	IoManager.AddWidget (label);  	IoManager.ForceDraw ();  	this.NextState = GameStates.TEST;  	break;  }  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: IoManager.AddWidget (new Icon ("00_tutorial.png"' new IntRect (0' 0' 1280' 720)));  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: IoManager.AddWidget (new Icon ("01_tutorial.png"' new IntRect (0' 0' 1280' 720)));  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  
Magic Number,WizardsDuel.States,TitleState,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\States\GameState.cs,Logic,The following statement contains a magic number: label.Position = new SFML.Window.Vector2f (IoManager.Width / 2' IoManager.Height / 2);  
Magic Number,WizardsDuel.Utils,XmlUtilities,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Utils\XmlUtilities.cs,GetColor,The following statement contains a magic number: try {  	var buff = XmlUtilities.GetIntArray (node' attributeName);  	var res = new SFML.Graphics.Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		res.A = (byte)buff [3];  	return res;  }  catch {  	return def;  }  
Magic Number,WizardsDuel.Utils,XmlUtilities,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Utils\XmlUtilities.cs,GetColor,The following statement contains a magic number: try {  	var buff = XmlUtilities.GetIntArray (node' attributeName);  	var res = new SFML.Graphics.Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		res.A = (byte)buff [3];  	return res;  }  catch {  	return def;  }  
Magic Number,WizardsDuel.Utils,XmlUtilities,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Utils\XmlUtilities.cs,GetColor,The following statement contains a magic number: try {  	var buff = XmlUtilities.GetIntArray (node' attributeName);  	var res = new SFML.Graphics.Color ((byte)buff [0]' (byte)buff [1]' (byte)buff [2]);  	if (buff.Length > 3)  		res.A = (byte)buff [3];  	return res;  }  catch {  	return def;  }  
Magic Number,WizardsDuel.Utils,XmlUtilities,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Utils\XmlUtilities.cs,GetColor,The following statement contains a magic number: if (buff.Length > 3)  	res.A = (byte)buff [3];  
Magic Number,WizardsDuel.Utils,XmlUtilities,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Utils\XmlUtilities.cs,GetColor,The following statement contains a magic number: if (buff.Length > 3)  	res.A = (byte)buff [3];  
Magic Number,WizardsDuel.Utils,XmlUtilities,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Utils\XmlUtilities.cs,GetColor,The following statement contains a magic number: res.A = (byte)buff [3];  
Magic Number,WizardsDuel.Utils,XmlUtilities,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Utils\XmlUtilities.cs,GetIntRect,The following statement contains a magic number: try {  	var buff = XmlUtilities.GetIntArray (node' attributeName);  	var res = new SFML.Graphics.IntRect (buff [0]' buff [1]' buff [2]' buff [3]);  	return res;  }  catch {  	return def;  }  
Magic Number,WizardsDuel.Utils,XmlUtilities,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Utils\XmlUtilities.cs,GetIntRect,The following statement contains a magic number: try {  	var buff = XmlUtilities.GetIntArray (node' attributeName);  	var res = new SFML.Graphics.IntRect (buff [0]' buff [1]' buff [2]' buff [3]);  	return res;  }  catch {  	return def;  }  
Missing Default,WizardsDuel.Game,BufferLevel,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Game\WorldFactory.cs,IsOpenExit,The following switch statement is missing a default case: switch (direction) {  case "N":  	if (this.IsUsed [x' y - 1] == false)  		return true;  	break;  case "S":  	if (this.IsUsed [x' y + 1] == false)  		return true;  	break;  case "W":  	if (this.IsUsed [x - 1' y] == false)  		return true;  	break;  case "E":  	if (this.IsUsed [x + 1' y] == false)  		return true;  	break;  }  
Missing Default,WizardsDuel.Io,WorldView,C:\repos\tndwolf_Wizards_Duel\Wizards_Duel\Wizards_Duel\Io\WorldView.cs,OnKeyPressed,The following switch statement is missing a default case: switch (e.Code) {  case Keyboard.Key.Num1:  case Keyboard.Key.Numpad1:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 1;  	}  	else {  		Simulator.Instance.SelectedSkill = 1;  	}  	return;  case Keyboard.Key.Num2:  case Keyboard.Key.Numpad2:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 2;  	}  	else {  		Simulator.Instance.SelectedSkill = 2;  	}  	break;  case Keyboard.Key.Num3:  case Keyboard.Key.Numpad3:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 3;  	}  	else {  		Simulator.Instance.SelectedSkill = 3;  	}  	break;  case Keyboard.Key.Num4:  case Keyboard.Key.Numpad4:  	if (e.Control || e.Shift) {  		Simulator.Instance.MultiSelectedSkill = 4;  	}  	else {  		Simulator.Instance.SelectedSkill = 4;  	}  	break;  }  
