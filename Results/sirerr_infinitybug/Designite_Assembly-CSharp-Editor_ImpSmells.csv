Implementation smell,Namespace,Class,File,Method,Description
Long Method,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The method has 115 lines of code.
Long Method,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The method has 112 lines of code.
Long Method,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnEnable,The method has 110 lines of code.
Long Method,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The method has 170 lines of code.
Complex Method,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,Cyclomatic complexity of the method is 23
Complex Method,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,Cyclomatic complexity of the method is 23
Complex Method,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,Cyclomatic complexity of the method is 20
Complex Method,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,DropAreaGUI,Cyclomatic complexity of the method is 14
Complex Method,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,OnGUI,Cyclomatic complexity of the method is 15
Complex Method,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,Cyclomatic complexity of the method is 20
Complex Method,StateMachine,GraphEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GraphEditor.cs,DragGraph,Cyclomatic complexity of the method is 13
Complex Method,StateMachine,StateMachineBehaviourInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineBehaviourInspector.cs,OnInspectorGUI,Cyclomatic complexity of the method is 9
Complex Method,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,HandleKeyEvents,Cyclomatic complexity of the method is 19
Complex Method,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,Cyclomatic complexity of the method is 17
Complex Method,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,ValidateState,Cyclomatic complexity of the method is 17
Complex Method,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DragStates,Cyclomatic complexity of the method is 17
Complex Method,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,AutoPan,Cyclomatic complexity of the method is 10
Complex Method,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,SelectStates,Cyclomatic complexity of the method is 36
Complex Method,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawElement,Cyclomatic complexity of the method is 16
Complex Method,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawParameter,Cyclomatic complexity of the method is 13
Complex Method,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,GetReflectionTypeNames,Cyclomatic complexity of the method is 12
Complex Method,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawField,Cyclomatic complexity of the method is 9
Complex Method,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,Cyclomatic complexity of the method is 10
Complex Method,StateMachine,StateMachineUtility,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineUtility.cs,RecordUndo,Cyclomatic complexity of the method is 12
Complex Method,StateMachine,StateMachineWindow,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineWindow.cs,DoEvents,Cyclomatic complexity of the method is 13
Long Parameter List,StateMachine,GraphEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GraphEditor.cs,DrawConnection,The method has 5 parameters.
Long Parameter List,StateMachine,GraphEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GraphEditor.cs,DrawArrow,The method has 5 parameters.
Long Parameter List,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnEnable,The method has 6 parameters.
Long Parameter List,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,GetParameterReferenceNames,The method has 13 parameters.
Long Parameter List,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The method has 9 parameters.
Long Parameter List,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DoToggleForward,The method has 5 parameters.
Long Statement,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The length of the statement  "		menu.AddItem (new GUIContent ("Close after adding action")' PreferencesEditor.GetBool (Preference.CloseActionBrowserOnAdd' false)' delegate () { " is 144.
Long Statement,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The length of the statement  "			PreferencesEditor.SetBool (Preference.CloseActionBrowserOnAdd' !PreferencesEditor.GetBool (Preference.CloseActionBrowserOnAdd)); " is 128.
Long Statement,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The length of the statement  "		menu.AddItem (new GUIContent ("Show Preview")' PreferencesEditor.GetBool (Preference.ActionBrowserShowPreview' true)' delegate () { " is 131.
Long Statement,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The length of the statement  "			PreferencesEditor.SetBool (Preference.ActionBrowserShowPreview' !PreferencesEditor.GetBool (Preference.ActionBrowserShowPreview)); " is 130.
Long Statement,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The length of the statement  "				if (!string.IsNullOrEmpty (searchString) && !actionType.ToString ().Split ('.').Last ().ToLower ().StartsWith (searchString.ToLower ())) { " is 138.
Long Statement,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The length of the statement  "				GUI.contentColor = (selectedAction != null && actionType == selectedAction.GetType () ? EditorStyles.foldout.focused.textColor : color); " is 136.
Long Statement,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The length of the statement  "				if (GUILayout.Button (string.IsNullOrEmpty (searchString) ? actionType.ToString ().Split ('.').Last () : actionType.GetCategory () + "." + actionType.ToString ().Split ('.').Last ()' "label"' GUILayout.ExpandWidth (true))) { " is 224.
Long Statement,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The length of the statement  "		if (!string.IsNullOrEmpty (selectedAction.GetInfoUrl ()) && GUILayout.Button (EditorGUIUtility.FindTexture ("_help")' labelStyle' GUILayout.Width (20))) { " is 154.
Long Statement,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,GetActionTypes,The length of the statement  "	List<Type> types = AppDomain.CurrentDomain.GetAssemblies ().SelectMany (assembly => assembly.GetTypes ()).Where (type => type.IsSubclassOf (typeof(StateAction))).ToList (); " is 172.
Long Statement,StateMachine,AssetCreator,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\AssetCreator.cs,CreateAsset,The length of the statement  "		string mPath = EditorUtility.SaveFilePanelInProject ("Create Asset of type " + typeof(T).ToString ()' "New " + typeof(T).ToString () + ".asset"' "asset"' ""); " is 158.
Long Statement,StateMachine,AssetCreator,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\AssetCreator.cs,CreateAsset,The length of the statement  "	string assetPathAndName = AssetDatabase.GenerateUniqueAssetPath (path + "/New " + typeof(T).ToString ().Split ('.').Last () + ".asset"); " is 136.
Long Statement,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The length of the statement  "		menu.AddItem (new GUIContent ("Close after adding condition")' PreferencesEditor.GetBool (Preference.CloseConditionBrowserOnAdd' false)' delegate () { " is 150.
Long Statement,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The length of the statement  "			PreferencesEditor.SetBool (Preference.CloseConditionBrowserOnAdd' !PreferencesEditor.GetBool (Preference.CloseConditionBrowserOnAdd)); " is 134.
Long Statement,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The length of the statement  "		menu.AddItem (new GUIContent ("Show Preview")' PreferencesEditor.GetBool (Preference.ConditionBrowserShowPreview' true)' delegate () { " is 134.
Long Statement,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The length of the statement  "			PreferencesEditor.SetBool (Preference.ConditionBrowserShowPreview' !PreferencesEditor.GetBool (Preference.ConditionBrowserShowPreview)); " is 136.
Long Statement,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The length of the statement  "				if (!string.IsNullOrEmpty (searchString) && !conditionType.ToString ().Split ('.').Last ().ToLower ().StartsWith (searchString.ToLower ())) { " is 141.
Long Statement,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The length of the statement  "				GUI.contentColor = (selectedCondition != null && conditionType == selectedCondition.GetType () ? EditorStyles.foldout.focused.textColor : color); " is 145.
Long Statement,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The length of the statement  "				if (GUILayout.Button (string.IsNullOrEmpty (searchString) ? conditionType.ToString ().Split ('.').Last () : conditionType.GetCategory () + "." + conditionType.ToString ().Split ('.').Last ()' "label"' GUILayout.ExpandWidth (true))) { " is 233.
Long Statement,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The length of the statement  "								StateMachineUtility.CreateCondition (StateMachineWindow.StateMachineEditor.selectedStates [0].transitions [StateMachineWindow.StateMachineEditor.transitionIndex]' conditionType); " is 178.
Long Statement,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The length of the statement  "		if (!string.IsNullOrEmpty (selectedCondition.GetInfoUrl ()) && GUILayout.Button (EditorGUIUtility.FindTexture ("_help")' labelStyle' GUILayout.Width (20))) { " is 157.
Long Statement,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The length of the statement  "			if (GUILayout.Button (selectedStatesCount > 0 && StateMachineWindow.StateMachineEditor.selectedStates [0].transitions.Count > 0 ? "Add to transition" : "Select a transition to add") && selectedStatesCount > 0 && StateMachineWindow.StateMachineEditor.selectedStates [0].transitions.Count > 0) { " is 293.
Long Statement,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The length of the statement  "				StateMachineUtility.CreateCondition (StateMachineWindow.StateMachineEditor.selectedStates [0].transitions [StateMachineWindow.StateMachineEditor.transitionIndex]' selectedCondition.GetType ()); " is 193.
Long Statement,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,GetConditionTypes,The length of the statement  "	List<Type> types = AppDomain.CurrentDomain.GetAssemblies ().SelectMany (assembly => assembly.GetTypes ()).Where (type => type.IsSubclassOf (typeof(StateCondition))).ToList (); " is 175.
Long Statement,StateMachine,CreateAction,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CreateAction.cs,CreateActionScript,The length of the statement  "	streamWriter.Write (string.Concat ("using UnityEngine;\n\nnamespace StateMachine.Action{\n\t[Info (category = \"Category\"'\n\tdescription = \"Description\"' \n\turl = \"Link\")]\n\tpublic class "' fileNameWithoutExtension' " : StateAction\n\t{\n\t\tpublic override void OnEnter()\n\t\t{\n\t\t\n\t\t}\n\n\t\tpublic override void OnUpdate()\n\t\t{\n\t\t\n\t\t}\n\t}\n}")); " is 371.
Long Statement,StateMachine,CreateCondition,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CreateCondition.cs,CreateConditionScript,The length of the statement  "	streamWriter.Write (string.Concat ("using UnityEngine;\n\nnamespace StateMachine.Condition{\n\t[Info (category = \"Category\"'\n\tdescription = \"Description\"' \n\turl = \"Link\")]\n\tpublic class "' fileNameWithoutExtension' " : StateCondition\n\t{\n\t\tpublic override void OnEnter()\n\t\t{\n\t\t\n\t\t}\n\n\t\tpublic override bool Validate()\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n}")); " is 391.
Long Statement,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,DropAreaGUI,The length of the statement  "	GUIContent content = new GUIContent ("Drag and drop an existing StateMachine to add it as layer or click to create a new layer."); " is 130.
Long Statement,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,DropAreaGUI,The length of the statement  "			StateMachineUtility.CreateAnyState (new Vector2 (GraphEditor.MaxCanvasSize' GraphEditor.MaxCanvasSize) * 0.5f' layerStateMachine); " is 130.
Long Statement,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,OnGUI,The length of the statement  "		IEnumerable<Type> types = AppDomain.CurrentDomain.GetAssemblies ().SelectMany (assembly => assembly.GetTypes ()).Where (type => type.IsSubclassOf (typeof(NamedParameter))); " is 172.
Long Statement,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,OnGUI,The length of the statement  "			genericMenu.AddItem (new GUIContent (type.ToString ().Split ('.').Last ().Replace ("Parameter"' ""))' false' this.SelectParameterType' type); " is 141.
Long Statement,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,Update,The length of the statement  "			paramterCollection = AssetCreator.CreateAsset<GlobalParameterCollection> ("Assets/State Machine/Resources/GlobalParameterCollection.asset"); " is 140.
Long Statement,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,Update,The length of the statement  "			EditorUtility.DisplayDialog ("Created GlobalParameterCollection!"' "Do not delete or rename the Resource folder and the GlobalParameterCollection asset."' "Ok"); " is 161.
Long Statement,StateMachine,GraphEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GraphEditor.cs,DrawGridLines,The length of the statement  "	for (float i = this.graphRect.x + (offset.x < 0f ? gridSize : 0f) + this.offset.x % gridSize; i < this.graphRect.x + this.graphRect.width; i = i + gridSize) { " is 158.
Long Statement,StateMachine,GraphEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GraphEditor.cs,DrawGridLines,The length of the statement  "	for (float j = this.graphRect.y + (offset.y < 0f ? gridSize : 0f) + this.offset.y % gridSize; j < this.graphRect.y + this.graphRect.height; j = j + gridSize) { " is 159.
Long Statement,StateMachine,GraphEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GraphEditor.cs,CreateMaterial,The length of the statement  "	material = new Material ("Shader \"Lines/Colored Blended\" {" + "SubShader { Pass { " + "    Blend SrcAlpha OneMinusSrcAlpha " + "    ZWrite Off Cull Off Fog { Mode Off } " + "    BindChannels {" + "      Bind \"vertex\"' vertex Bind \"color\"' color }" + "} } }"); " is 265.
Long Statement,StateMachine,MainToolbar,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MainToolbar.cs,OnGUI,The length of the statement  "	if (GUILayout.Button ("Lock"' (lockSelection ? (GUIStyle)"TE toolbarbutton" : EditorStyles.toolbarButton)' GUILayout.Width (50))) { " is 131.
Long Statement,StateMachine,MainToolbar,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MainToolbar.cs,SelectGameObject,The length of the statement  "	if (GUILayout.Button (StateMachineWindow.StateMachineEditor.ActiveGameObject != null ? StateMachineWindow.StateMachineEditor.ActiveGameObject.name : "[None Selected]"' EditorStyles.toolbarDropDown' GUILayout.Width (100))) { " is 223.
Long Statement,StateMachine,MainToolbar,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MainToolbar.cs,SelectGameObject,The length of the statement  "				StateMachine mStateMachine = ((EditorApplication.isPlaying && !EditorApplication.isPaused) ? behaviour.executingStateMachine : behaviour.stateMachine); " is 151.
Long Statement,StateMachine,MainToolbar,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MainToolbar.cs,SelectGameObject,The length of the statement  "		toolsMenu.DropDown (new Rect (Event.current.mousePosition.x' Event.current.mousePosition.y' 0' Event.current.mousePosition.y)); " is 127.
Long Statement,StateMachine,MainToolbar,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MainToolbar.cs,SelectStateMachine,The length of the statement  "	if (GUILayout.Button (StateMachineWindow.StateMachineEditor.ActiveStateMachine != null ? StateMachineWindow.StateMachineEditor.ActiveStateMachine.name : "[None Selected]"' EditorStyles.toolbarDropDown' GUILayout.Width (100))) { " is 227.
Long Statement,StateMachine,MainToolbar,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MainToolbar.cs,SelectStateMachine,The length of the statement  "			foreach (StateMachineBehaviour behaviour in StateMachineWindow.StateMachineEditor.ActiveGameObject.GetComponents<StateMachineBehaviour> ()) { " is 141.
Long Statement,StateMachine,MainToolbar,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MainToolbar.cs,SelectStateMachine,The length of the statement  "					StateMachine mStateMachine = ((EditorApplication.isPlaying && !EditorApplication.isPaused) ? behaviour.executingStateMachine : behaviour.stateMachine); " is 151.
Long Statement,StateMachine,MainToolbar,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MainToolbar.cs,SelectStateMachine,The length of the statement  "		toolsMenu.DropDown (new Rect (Event.current.mousePosition.x' Event.current.mousePosition.y' 0' Event.current.mousePosition.y)); " is 127.
Long Statement,StateMachine,MouseInstruction,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MouseInstruction.cs,DoMouseInstruction,The length of the statement  "		GUI.Label (new Rect (Event.current.mousePosition.x + 10' Event.current.mousePosition.y - height * 0.5f + 10' 200' height)' content' FsmStyles.WrappedLabel); " is 156.
Long Statement,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnEnable,The length of the statement  "							NamedParameter paramter = (NamedParameter)ScriptableObject.Instantiate ((UnityEngine.Object)fields [i].GetValue (action)); " is 122.
Long Statement,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnEnable,The length of the statement  "							NamedParameter paramter = (NamedParameter)ScriptableObject.Instantiate ((UnityEngine.Object)fields [i].GetValue (action)); " is 122.
Long Statement,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,RebuildConditionList,The length of the statement  "			StateMachineUtility.RemoveCondition (state.transitions [transitionIndex]' state.transitions [transitionIndex].conditions [index]); " is 130.
Long Statement,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,RebuildConditionList,The length of the statement  "								NamedParameter paramter = (NamedParameter)ScriptableObject.Instantiate ((UnityEngine.Object)fields [i].GetValue (condition)); " is 125.
Long Statement,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,RebuildConditionList,The length of the statement  "								NamedParameter paramter = (NamedParameter)ScriptableObject.Instantiate ((UnityEngine.Object)fields [i].GetValue (condition)); " is 125.
Long Statement,StateMachine,StateMachineBehaviourInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineBehaviourInspector.cs,OnInspectorGUI,The length of the statement  "		behaviour.stateMachine.description = EditorGUILayout.TextArea (behaviour.stateMachine.description' GUILayout.MinHeight (60)); " is 125.
Long Statement,StateMachine,StateMachineBehaviourInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineBehaviourInspector.cs,OnInspectorGUI,The length of the statement  "		EditorGUILayout.HelpBox ("Bind the state machine to a GameObject to interact with the scene. Use GameObjects from your scene in the state machine directly."' MessageType.Info' true); " is 182.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The length of the statement  "	Rect preferencesRect = PreferencesEditor.GetBool (Preference.ShowPreference) ? new Rect (position.width - 202' 18' 200' 142) : new Rect (); " is 139.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The length of the statement  "	DoInfo (PreferencesEditor.GetBool (Preference.ShowShortcuts) ? new Rect (position.width - 260 - 265' 0' 260' position.height) : new Rect (position.width - 260' 0' 260' position.height)); " is 186.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The length of the statement  "	Rect rect = GUILayoutUtility.GetRect (new GUIContent ("Parameters")' "flow overlay header lower left"' GUILayout.ExpandWidth (true)); " is 133.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The length of the statement  "		IEnumerable<Type> types = AppDomain.CurrentDomain.GetAssemblies ().SelectMany (assembly => assembly.GetTypes ()).Where (type => type.IsSubclassOf (typeof(NamedParameter))); " is 172.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The length of the statement  "			genericMenu.AddItem (new GUIContent (type.ToString ().Split ('.').Last ().Replace ("Parameter"' ""))' false' delegate () { " is 122.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,OnSelectionChange,The length of the statement  "			StateMachine mStateMachine = ((EditorApplication.isPlaying && !EditorApplication.isPaused) ? behaviour.executingStateMachine : behaviour.stateMachine); " is 151.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,OnPlayModeStateChanged,The length of the statement  "		StateMachine mStateMachine = ((EditorApplication.isPlayingOrWillChangePlaymode && EditorApplication.isPlaying && !EditorApplication.isPaused) ? ActiveStateMachine.behaviour.executingStateMachine : ActiveStateMachine.behaviour.stateMachine); " is 240.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,OnPlayModeStateChanged,The length of the statement  "				StateMachine mStateMachine = ((EditorApplication.isPlaying && !EditorApplication.isPaused) ? behaviour.executingStateMachine : behaviour.stateMachine); " is 151.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,CenterView,The length of the statement  "		scrollTo += new Vector2 (state.position.center.x - graphRect.width * 0.5f' state.position.center.y - graphRect.height * 0.5f); " is 126.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DrawState,The length of the statement  "		GUI.Box (state.position' state.name' FsmStyles.GetNodeStyle (state.isDefaultState ? FsmStyles.Color.Orange : state.GetType () == typeof(AnyState) ? FsmStyles.Color.Aqua : (FsmStyles.Color)state.color' selectedStates.Contains (state)' false)); " is 242.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,ValidateState,The length of the statement  "						if (parameter != null && !parameter.IsConstant && fields [i].IsFieldRequired () && parameter.Reference == fields [i].GetDefaultReference ().ToString ()) { " is 154.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,ValidateState,The length of the statement  "	if (state.transitions != null && state.transitions.Count > transitionIndex && state.transitions [transitionIndex].conditions != null) { " is 135.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,ValidateState,The length of the statement  "					if (parameter != null && !parameter.IsConstant && fields [i].IsFieldRequired () && parameter.Reference == fields [i].GetDefaultReference ().ToString ()) { " is 154.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoTransitions,The length of the statement  "		DrawConnection (ActiveStateMachine.states [connectionIndex].position.center' Event.current.mousePosition' Color.green' 1' false); " is 129.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoTransitions,The length of the statement  "						DoTransition (target' HasMultipleTransitions (node' target)' (selectedStates.Count > 0 && ActiveStateMachine.states.Find (x => x == node) == selectedStates [0] && node.transitions [transitionIndex].toState == target.toState ? Color.cyan : Color.white)); " is 253.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoTransition,The length of the statement  "			bool doOffset = target.toState.transitions != null && target.toState.transitions.Find (x => x.toState == target.fromState) != null; " is 131.
Long Statement,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoTransition,The length of the statement  "			DrawConnection (target.fromState.position.center' target.toState.position.center' color' (hasMultiple ? 3 : 1)' doOffset); " is 122.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawElement,The length of the statement  "		FieldInfo[] fields = node.GetType ().GetFields (BindingFlags.Instance | BindingFlags.Public).OrderBy (field => field.MetadataToken).ToArray (); " is 143.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawElement,The length of the statement  "						if (!hasAlready && type != null && (fields [i].GetReflectionReturnType ().IsAssignableFrom (type) || IsAssignableToGenericType (type' fields [i].GetReflectionReturnType ()))) { " is 176.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawParameter,The length of the statement  "					valueProp.objectReferenceValue = EditorGUILayout.ObjectField (content' valueProp.objectReferenceValue' type' !EditorUtility.IsPersistent (parameter)); " is 150.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,GetReflectionTypeNames,The length of the statement  "		names = reflectionReferenceType.GetFieldNames (true' typeof(string)' typeof(Color)' typeof(Vector3)' typeof(UnityEngine.Object)' typeof(KeyCode)' typeof(List<>)' typeof(System.Object)); " is 185.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,GetReflectionTypeNames,The length of the statement  "		names = reflectionReferenceType.GetPropertyNames (true' requiresWrite' typeof(string)' typeof(Color)' typeof(Vector3)' typeof(UnityEngine.Object)' typeof(KeyCode)' typeof(List<>)' typeof(System.Object)); " is 203.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,GetReflectionTypeNames,The length of the statement  "		names = reflectionReferenceType.GetPropertyAndFieldNames (true' requiresWrite' typeof(string)' typeof(Color)' typeof(Vector3)' typeof(UnityEngine.Object)' typeof(KeyCode)' typeof(List<>)' typeof(System.Object)); " is 211.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,GetParameterReferenceNames,The length of the statement  "			names.AddRange (stateMachine.parameters.Where (n => n.GetType () == typeof(IntParameter)).Select (p => p.Name).ToList ()); " is 122.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,GetParameterReferenceNames,The length of the statement  "			names.AddRange (stateMachine.parameters.Where (n => n.GetType () == typeof(FloatParameter)).Select (p => p.Name).ToList ()); " is 124.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,GetParameterReferenceNames,The length of the statement  "			names.AddRange (stateMachine.parameters.Where (n => n.GetType () == typeof(Vector2Parameter)).Select (p => p.Name).ToList ()); " is 126.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,GetParameterReferenceNames,The length of the statement  "			names.AddRange (stateMachine.parameters.Where (n => n.GetType () == typeof(Vector3Parameter)).Select (p => p.Name).ToList ()); " is 126.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawField,The length of the statement  "		EditorGUILayout.PropertyField (StateMachineGUI.GetSerializedProperty (obj' info.Name)' info.GetInspectorGUIContent ()' true); " is 125.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,ValidateNode,The length of the statement  "			if (!parameter.IsConstant && fields [i].IsFieldRequired () && parameter.Reference == fields [i].GetDefaultReference ().ToString ()) { " is 133.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The length of the statement  "	Rect rect = new Rect (position.x + (float)inspectorTitlebar.padding.left' position.y + (float)inspectorTitlebar.padding.top' 16f' 16f); " is 135.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The length of the statement  "		if (copiedNode != null && (copiedNode is StateAction && node is StateAction || copiedNode is StateCondition && node is StateCondition)) { " is 137.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The length of the statement  "						NamedParameter paramter = (NamedParameter)ScriptableObject.Instantiate ((UnityEngine.Object)fields [i].GetValue (copiedNode)); " is 126.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The length of the statement  "					int curIndex = state.transitions [StateMachineWindow.StateMachineEditor.transitionIndex].conditions.FindIndex (x => x == node); " is 127.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The length of the statement  "					state.transitions [StateMachineWindow.StateMachineEditor.transitionIndex].conditions.Insert (curIndex + 1' copy as StateCondition); " is 131.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The length of the statement  "						NamedParameter paramter = (NamedParameter)ScriptableObject.Instantiate ((UnityEngine.Object)fields [i].GetValue (copiedNode)); " is 126.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The length of the statement  "					int curIndex = state.transitions [StateMachineWindow.StateMachineEditor.transitionIndex].conditions.FindIndex (x => x == node); " is 127.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The length of the statement  "					state.transitions [StateMachineWindow.StateMachineEditor.transitionIndex].conditions.Insert (curIndex' copy as StateCondition); " is 127.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The length of the statement  "						NamedParameter paramter = (NamedParameter)ScriptableObject.Instantiate ((UnityEngine.Object)fields [i].GetValue (copiedNode)); " is 126.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The length of the statement  "					int curIndex = state.transitions [StateMachineWindow.StateMachineEditor.transitionIndex].conditions.FindIndex (x => x == node); " is 127.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The length of the statement  "					state.transitions [StateMachineWindow.StateMachineEditor.transitionIndex].conditions.Insert (curIndex' copy as StateCondition); " is 127.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,MainActionKeyForControl,The length of the statement  "	return (evt.type != EventType.KeyDown || evt.keyCode != KeyCode.Space && evt.keyCode != KeyCode.Return && evt.keyCode != KeyCode.KeypadEnter ? false : !flag); " is 158.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,StateContextMenu,The length of the statement  "	if (!state.position.Contains (Event.current.mousePosition) || Event.current.type != EventType.MouseDown || Event.current.button != 1 || Event.current.clickCount != 1) { " is 168.
Long Statement,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,CanvasContextMenu,The length of the statement  "						NamedParameter paramter = (NamedParameter)ScriptableObject.Instantiate ((UnityEngine.Object)fields [i].GetValue (action)); " is 122.
Long Statement,StateMachine,StateMachineInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineInspector.cs,OnDoubleClickItem,The length of the statement  "	if (Event.current.type == EventType.MouseDown && Event.current.clickCount == 2 && r.Contains (Event.current.mousePosition)) { " is 125.
Long Statement,StateMachine,StateMachineUtility,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineUtility.cs,AddParameter,The length of the statement  "	IEnumerable<Type> types = AppDomain.CurrentDomain.GetAssemblies ().SelectMany (assembly => assembly.GetTypes ()).Where (type => type.IsSubclassOf (typeof(NamedParameter))); " is 172.
Long Statement,StateMachine,StateMachineUtility,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineUtility.cs,AddParameter,The length of the statement  "		genericMenu.AddItem (new GUIContent (type.ToString ().Split ('.').Last ().Replace ("Parameter"' ""))' false' delegate () { " is 122.
Long Statement,StateMachine,StateMachineUtility,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineUtility.cs,AddAction,The length of the statement  "	IEnumerable<Type> types = AppDomain.CurrentDomain.GetAssemblies ().SelectMany (assembly => assembly.GetTypes ()).Where (type => type.IsSubclassOf (typeof(StateAction))); " is 169.
Long Statement,StateMachine,StateMachineUtility,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineUtility.cs,AddAction,The length of the statement  "		genericMenu.AddItem (new GUIContent (type.GetCategory () + "/" + type.ToString ().Split ('.').Last ())' false' delegate () { " is 124.
Long Statement,StateMachine,StateMachineUtility,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineUtility.cs,AddCondition,The length of the statement  "	IEnumerable<Type> types = AppDomain.CurrentDomain.GetAssemblies ().SelectMany (assembly => assembly.GetTypes ()).Where (type => type.IsSubclassOf (typeof(StateCondition))); " is 172.
Long Statement,StateMachine,StateMachineUtility,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineUtility.cs,AddCondition,The length of the statement  "		genericMenu.AddItem (new GUIContent (type.GetCategory () + "/" + type.ToString ().Split ('.').Last ())' false' delegate () { " is 124.
Long Statement,StateMachine,StateMachineUtility,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineUtility.cs,ReserveEvent,The length of the statement  "		if ((area.Contains (Event.current.mousePosition) && (eventType == EventType.MouseDown || eventType == EventType.ScrollWheel))) { " is 128.
Long Statement,StateMachine,WelcomeWindow,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\WelcomeWindow.cs,OnGUI,The length of the statement  "		if (this.contactIconRect.Contains (mousePosition) || this.contactHeaderRect.Contains (mousePosition) || this.contactTextRect.Contains (mousePosition)) { " is 152.
Long Statement,StateMachine,WelcomeWindow,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\WelcomeWindow.cs,OnGUI,The length of the statement  "		if (this.downloadIconRect.Contains (mousePosition) || this.downloadHeaderRect.Contains (mousePosition) || this.downloadTextRect.Contains (mousePosition)) { " is 155.
Long Statement,StateMachine,WelcomeWindow,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\WelcomeWindow.cs,OnGUI,The length of the statement  "		if (this.documentationIconRect.Contains (mousePosition) || this.documentationHeaderRect.Contains (mousePosition) || this.documenationTextRect.Contains (mousePosition)) { " is 169.
Long Statement,StateMachine,WelcomeWindow,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\WelcomeWindow.cs,OnGUI,The length of the statement  "		if (this.forumIconRect.Contains (mousePosition) || this.forumHeaderRect.Contains (mousePosition) || this.forumTextRect.Contains (mousePosition)) { " is 146.
Long Statement,StateMachine,WelcomeWindow,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\WelcomeWindow.cs,OnGUI,The length of the statement  "		if (this.addonIconRect.Contains (mousePosition) || this.addonHeaderRect.Contains (mousePosition) || this.addonTextRect.Contains (mousePosition)) { " is 146.
Complex Conditional,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The conditional expression  "GUILayout.Button (selectedStatesCount > 0 && StateMachineWindow.StateMachineEditor.selectedStates [0].transitions.Count > 0 ? "Add to transition" : "Select a transition to add") && selectedStatesCount > 0 && StateMachineWindow.StateMachineEditor.selectedStates [0].transitions.Count > 0"  is complex.
Complex Conditional,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The conditional expression  "prop != null && prop.isArray && prop.isExpanded && parameter.GetType () != typeof(StringParameter)"  is complex.
Complex Conditional,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,ValidateState,The conditional expression  "parameter != null && !parameter.IsConstant && fields [i].IsFieldRequired () && parameter.Reference == fields [i].GetDefaultReference ().ToString ()"  is complex.
Complex Conditional,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,ValidateState,The conditional expression  "parameter != null && !parameter.IsConstant && fields [i].IsFieldRequired () && parameter.Reference == fields [i].GetDefaultReference ().ToString ()"  is complex.
Complex Conditional,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,SelectStatesInRect,The conditional expression  "rect.xMax < r.x || rect.x > r.xMax || rect.yMax < r.y || rect.y > r.yMax"  is complex.
Complex Conditional,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawElement,The conditional expression  "!hasAlready && type != null && (fields [i].GetReflectionReturnType ().IsAssignableFrom (type) || IsAssignableToGenericType (type' fields [i].GetReflectionReturnType ()))"  is complex.
Complex Conditional,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The conditional expression  "copiedNode != null && (copiedNode is StateAction && node is StateAction || copiedNode is StateCondition && node is StateCondition)"  is complex.
Complex Conditional,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,StateContextMenu,The conditional expression  "!state.position.Contains (Event.current.mousePosition) || Event.current.type != EventType.MouseDown || Event.current.button != 1 || Event.current.clickCount != 1"  is complex.
Magic Number,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The following statement contains a magic number: labelStyle1.contentOffset = new Vector2 (0' 2);  
Magic Number,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The following statement contains a magic number: if (GUILayout.Button (EditorGUIUtility.FindTexture ("_popup")' labelStyle1' GUILayout.Width (20))) {  	GenericMenu menu = new GenericMenu ();  	menu.AddItem (new GUIContent ("Close after adding action")' PreferencesEditor.GetBool (Preference.CloseActionBrowserOnAdd' false)' delegate () {  		PreferencesEditor.SetBool (Preference.CloseActionBrowserOnAdd' !PreferencesEditor.GetBool (Preference.CloseActionBrowserOnAdd));  	});  	menu.AddItem (new GUIContent ("Show Preview")' PreferencesEditor.GetBool (Preference.ActionBrowserShowPreview' true)' delegate () {  		PreferencesEditor.SetBool (Preference.ActionBrowserShowPreview' !PreferencesEditor.GetBool (Preference.ActionBrowserShowPreview));  	});  	menu.ShowAsContext ();  }  
Magic Number,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The following statement contains a magic number: if (selectedAction != null) {  	GUIStyle style = new GUIStyle ("IN BigTitle");  	style.padding.top = 0;  	GUILayout.BeginVertical (style);  	GUILayout.BeginHorizontal ();  	GUILayout.Label (selectedAction.name' EditorStyles.boldLabel);  	GUILayout.FlexibleSpace ();  	GUIStyle labelStyle = new GUIStyle ("label");  	labelStyle.contentOffset = new Vector2 (0' 5);  	if (!string.IsNullOrEmpty (selectedAction.GetInfoUrl ()) && GUILayout.Button (EditorGUIUtility.FindTexture ("_help")' labelStyle' GUILayout.Width (20))) {  		Application.OpenURL (selectedAction.GetInfoUrl ());  	}  	GUILayout.EndHorizontal ();  	GUILayout.Space (3f);  	GUILayout.Label (selectedAction.GetDescription ()' FsmStyles.WrappedLabel);  	GUILayout.BeginHorizontal ();  	GUILayout.FlexibleSpace ();  	if (StateMachineWindow.StateMachineEditor.ActiveStateMachine != null) {  		int selectedStatesCount = StateMachineWindow.StateMachineEditor.selectedStates.Count;  		if (GUILayout.Button (selectedStatesCount > 0 ? "Add to state" : "Select a state to add") && selectedStatesCount > 0) {  			StateMachineUtility.CreateAction (StateMachineWindow.StateMachineEditor.selectedStates [0]' selectedAction.GetType ());  			if (PreferencesEditor.GetBool (Preference.CloseActionBrowserOnAdd' false)) {  				Close ();  			}  		}  	}  	GUILayout.EndHorizontal ();  	GUILayout.EndVertical ();  	if (PreferencesEditor.GetBool (Preference.ActionBrowserShowPreview' true)) {  		EditorGUI.BeginDisabledGroup (true);  		StateMachineGUI.DrawElement (selectedAction' false' false);  		EditorGUI.EndDisabledGroup ();  		GUILayout.Space (5);  	}  }  
Magic Number,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The following statement contains a magic number: if (selectedAction != null) {  	GUIStyle style = new GUIStyle ("IN BigTitle");  	style.padding.top = 0;  	GUILayout.BeginVertical (style);  	GUILayout.BeginHorizontal ();  	GUILayout.Label (selectedAction.name' EditorStyles.boldLabel);  	GUILayout.FlexibleSpace ();  	GUIStyle labelStyle = new GUIStyle ("label");  	labelStyle.contentOffset = new Vector2 (0' 5);  	if (!string.IsNullOrEmpty (selectedAction.GetInfoUrl ()) && GUILayout.Button (EditorGUIUtility.FindTexture ("_help")' labelStyle' GUILayout.Width (20))) {  		Application.OpenURL (selectedAction.GetInfoUrl ());  	}  	GUILayout.EndHorizontal ();  	GUILayout.Space (3f);  	GUILayout.Label (selectedAction.GetDescription ()' FsmStyles.WrappedLabel);  	GUILayout.BeginHorizontal ();  	GUILayout.FlexibleSpace ();  	if (StateMachineWindow.StateMachineEditor.ActiveStateMachine != null) {  		int selectedStatesCount = StateMachineWindow.StateMachineEditor.selectedStates.Count;  		if (GUILayout.Button (selectedStatesCount > 0 ? "Add to state" : "Select a state to add") && selectedStatesCount > 0) {  			StateMachineUtility.CreateAction (StateMachineWindow.StateMachineEditor.selectedStates [0]' selectedAction.GetType ());  			if (PreferencesEditor.GetBool (Preference.CloseActionBrowserOnAdd' false)) {  				Close ();  			}  		}  	}  	GUILayout.EndHorizontal ();  	GUILayout.EndVertical ();  	if (PreferencesEditor.GetBool (Preference.ActionBrowserShowPreview' true)) {  		EditorGUI.BeginDisabledGroup (true);  		StateMachineGUI.DrawElement (selectedAction' false' false);  		EditorGUI.EndDisabledGroup ();  		GUILayout.Space (5);  	}  }  
Magic Number,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The following statement contains a magic number: if (selectedAction != null) {  	GUIStyle style = new GUIStyle ("IN BigTitle");  	style.padding.top = 0;  	GUILayout.BeginVertical (style);  	GUILayout.BeginHorizontal ();  	GUILayout.Label (selectedAction.name' EditorStyles.boldLabel);  	GUILayout.FlexibleSpace ();  	GUIStyle labelStyle = new GUIStyle ("label");  	labelStyle.contentOffset = new Vector2 (0' 5);  	if (!string.IsNullOrEmpty (selectedAction.GetInfoUrl ()) && GUILayout.Button (EditorGUIUtility.FindTexture ("_help")' labelStyle' GUILayout.Width (20))) {  		Application.OpenURL (selectedAction.GetInfoUrl ());  	}  	GUILayout.EndHorizontal ();  	GUILayout.Space (3f);  	GUILayout.Label (selectedAction.GetDescription ()' FsmStyles.WrappedLabel);  	GUILayout.BeginHorizontal ();  	GUILayout.FlexibleSpace ();  	if (StateMachineWindow.StateMachineEditor.ActiveStateMachine != null) {  		int selectedStatesCount = StateMachineWindow.StateMachineEditor.selectedStates.Count;  		if (GUILayout.Button (selectedStatesCount > 0 ? "Add to state" : "Select a state to add") && selectedStatesCount > 0) {  			StateMachineUtility.CreateAction (StateMachineWindow.StateMachineEditor.selectedStates [0]' selectedAction.GetType ());  			if (PreferencesEditor.GetBool (Preference.CloseActionBrowserOnAdd' false)) {  				Close ();  			}  		}  	}  	GUILayout.EndHorizontal ();  	GUILayout.EndVertical ();  	if (PreferencesEditor.GetBool (Preference.ActionBrowserShowPreview' true)) {  		EditorGUI.BeginDisabledGroup (true);  		StateMachineGUI.DrawElement (selectedAction' false' false);  		EditorGUI.EndDisabledGroup ();  		GUILayout.Space (5);  	}  }  
Magic Number,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The following statement contains a magic number: labelStyle.contentOffset = new Vector2 (0' 5);  
Magic Number,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The following statement contains a magic number: if (!string.IsNullOrEmpty (selectedAction.GetInfoUrl ()) && GUILayout.Button (EditorGUIUtility.FindTexture ("_help")' labelStyle' GUILayout.Width (20))) {  	Application.OpenURL (selectedAction.GetInfoUrl ());  }  
Magic Number,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The following statement contains a magic number: if (PreferencesEditor.GetBool (Preference.ActionBrowserShowPreview' true)) {  	EditorGUI.BeginDisabledGroup (true);  	StateMachineGUI.DrawElement (selectedAction' false' false);  	EditorGUI.EndDisabledGroup ();  	GUILayout.Space (5);  }  
Magic Number,StateMachine,ActionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ActionBrowser.cs,OnGUI,The following statement contains a magic number: GUILayout.Space (5);  
Magic Number,StateMachine,AddStateMachine,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\AddStateMachine.cs,HierarchyWindowItemCallback,The following statement contains a magic number: if (go != null && go.GetComponent<StateMachineBehaviour> () != null) {  	Rect rect = new Rect (pRect.x + pRect.width - 25' pRect.y - 3' 25' 25);  	GUI.DrawTexture (rect' AddStateMachine.HierarchyIcon);  }  
Magic Number,StateMachine,AddStateMachine,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\AddStateMachine.cs,HierarchyWindowItemCallback,The following statement contains a magic number: if (go != null && go.GetComponent<StateMachineBehaviour> () != null) {  	Rect rect = new Rect (pRect.x + pRect.width - 25' pRect.y - 3' 25' 25);  	GUI.DrawTexture (rect' AddStateMachine.HierarchyIcon);  }  
Magic Number,StateMachine,AddStateMachine,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\AddStateMachine.cs,HierarchyWindowItemCallback,The following statement contains a magic number: if (go != null && go.GetComponent<StateMachineBehaviour> () != null) {  	Rect rect = new Rect (pRect.x + pRect.width - 25' pRect.y - 3' 25' 25);  	GUI.DrawTexture (rect' AddStateMachine.HierarchyIcon);  }  
Magic Number,StateMachine,AddStateMachine,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\AddStateMachine.cs,HierarchyWindowItemCallback,The following statement contains a magic number: if (go != null && go.GetComponent<StateMachineBehaviour> () != null) {  	Rect rect = new Rect (pRect.x + pRect.width - 25' pRect.y - 3' 25' 25);  	GUI.DrawTexture (rect' AddStateMachine.HierarchyIcon);  }  
Magic Number,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The following statement contains a magic number: labelStyle1.contentOffset = new Vector2 (0' 2);  
Magic Number,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The following statement contains a magic number: if (GUILayout.Button (EditorGUIUtility.FindTexture ("_popup")' labelStyle1' GUILayout.Width (20))) {  	GenericMenu menu = new GenericMenu ();  	menu.AddItem (new GUIContent ("Close after adding condition")' PreferencesEditor.GetBool (Preference.CloseConditionBrowserOnAdd' false)' delegate () {  		PreferencesEditor.SetBool (Preference.CloseConditionBrowserOnAdd' !PreferencesEditor.GetBool (Preference.CloseConditionBrowserOnAdd));  	});  	menu.AddItem (new GUIContent ("Show Preview")' PreferencesEditor.GetBool (Preference.ConditionBrowserShowPreview' true)' delegate () {  		PreferencesEditor.SetBool (Preference.ConditionBrowserShowPreview' !PreferencesEditor.GetBool (Preference.ConditionBrowserShowPreview));  	});  	menu.ShowAsContext ();  }  
Magic Number,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The following statement contains a magic number: if (selectedCondition != null) {  	GUIStyle style = new GUIStyle ("IN BigTitle");  	style.padding.top = 0;  	GUILayout.BeginVertical (style);  	GUILayout.BeginHorizontal ();  	GUILayout.Label (selectedCondition.name' EditorStyles.boldLabel);  	GUILayout.FlexibleSpace ();  	GUIStyle labelStyle = new GUIStyle ("label");  	labelStyle.contentOffset = new Vector2 (0' 5);  	if (!string.IsNullOrEmpty (selectedCondition.GetInfoUrl ()) && GUILayout.Button (EditorGUIUtility.FindTexture ("_help")' labelStyle' GUILayout.Width (20))) {  		Application.OpenURL (selectedCondition.GetInfoUrl ());  	}  	GUILayout.EndHorizontal ();  	GUILayout.Space (3f);  	GUILayout.Label (selectedCondition.GetDescription ()' FsmStyles.WrappedLabel);  	GUILayout.BeginHorizontal ();  	GUILayout.FlexibleSpace ();  	if (StateMachineWindow.StateMachineEditor.ActiveStateMachine != null) {  		int selectedStatesCount = StateMachineWindow.StateMachineEditor.selectedStates.Count;  		if (GUILayout.Button (selectedStatesCount > 0 && StateMachineWindow.StateMachineEditor.selectedStates [0].transitions.Count > 0 ? "Add to transition" : "Select a transition to add") && selectedStatesCount > 0 && StateMachineWindow.StateMachineEditor.selectedStates [0].transitions.Count > 0) {  			StateMachineUtility.CreateCondition (StateMachineWindow.StateMachineEditor.selectedStates [0].transitions [StateMachineWindow.StateMachineEditor.transitionIndex]' selectedCondition.GetType ());  			if (PreferencesEditor.GetBool (Preference.CloseConditionBrowserOnAdd' false)) {  				Close ();  			}  		}  	}  	GUILayout.EndHorizontal ();  	GUILayout.EndVertical ();  	if (PreferencesEditor.GetBool (Preference.ConditionBrowserShowPreview' true)) {  		EditorGUI.BeginDisabledGroup (true);  		StateMachineGUI.DrawElement (selectedCondition' false' false);  		EditorGUI.EndDisabledGroup ();  		GUILayout.Space (5);  	}  }  
Magic Number,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The following statement contains a magic number: if (selectedCondition != null) {  	GUIStyle style = new GUIStyle ("IN BigTitle");  	style.padding.top = 0;  	GUILayout.BeginVertical (style);  	GUILayout.BeginHorizontal ();  	GUILayout.Label (selectedCondition.name' EditorStyles.boldLabel);  	GUILayout.FlexibleSpace ();  	GUIStyle labelStyle = new GUIStyle ("label");  	labelStyle.contentOffset = new Vector2 (0' 5);  	if (!string.IsNullOrEmpty (selectedCondition.GetInfoUrl ()) && GUILayout.Button (EditorGUIUtility.FindTexture ("_help")' labelStyle' GUILayout.Width (20))) {  		Application.OpenURL (selectedCondition.GetInfoUrl ());  	}  	GUILayout.EndHorizontal ();  	GUILayout.Space (3f);  	GUILayout.Label (selectedCondition.GetDescription ()' FsmStyles.WrappedLabel);  	GUILayout.BeginHorizontal ();  	GUILayout.FlexibleSpace ();  	if (StateMachineWindow.StateMachineEditor.ActiveStateMachine != null) {  		int selectedStatesCount = StateMachineWindow.StateMachineEditor.selectedStates.Count;  		if (GUILayout.Button (selectedStatesCount > 0 && StateMachineWindow.StateMachineEditor.selectedStates [0].transitions.Count > 0 ? "Add to transition" : "Select a transition to add") && selectedStatesCount > 0 && StateMachineWindow.StateMachineEditor.selectedStates [0].transitions.Count > 0) {  			StateMachineUtility.CreateCondition (StateMachineWindow.StateMachineEditor.selectedStates [0].transitions [StateMachineWindow.StateMachineEditor.transitionIndex]' selectedCondition.GetType ());  			if (PreferencesEditor.GetBool (Preference.CloseConditionBrowserOnAdd' false)) {  				Close ();  			}  		}  	}  	GUILayout.EndHorizontal ();  	GUILayout.EndVertical ();  	if (PreferencesEditor.GetBool (Preference.ConditionBrowserShowPreview' true)) {  		EditorGUI.BeginDisabledGroup (true);  		StateMachineGUI.DrawElement (selectedCondition' false' false);  		EditorGUI.EndDisabledGroup ();  		GUILayout.Space (5);  	}  }  
Magic Number,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The following statement contains a magic number: if (selectedCondition != null) {  	GUIStyle style = new GUIStyle ("IN BigTitle");  	style.padding.top = 0;  	GUILayout.BeginVertical (style);  	GUILayout.BeginHorizontal ();  	GUILayout.Label (selectedCondition.name' EditorStyles.boldLabel);  	GUILayout.FlexibleSpace ();  	GUIStyle labelStyle = new GUIStyle ("label");  	labelStyle.contentOffset = new Vector2 (0' 5);  	if (!string.IsNullOrEmpty (selectedCondition.GetInfoUrl ()) && GUILayout.Button (EditorGUIUtility.FindTexture ("_help")' labelStyle' GUILayout.Width (20))) {  		Application.OpenURL (selectedCondition.GetInfoUrl ());  	}  	GUILayout.EndHorizontal ();  	GUILayout.Space (3f);  	GUILayout.Label (selectedCondition.GetDescription ()' FsmStyles.WrappedLabel);  	GUILayout.BeginHorizontal ();  	GUILayout.FlexibleSpace ();  	if (StateMachineWindow.StateMachineEditor.ActiveStateMachine != null) {  		int selectedStatesCount = StateMachineWindow.StateMachineEditor.selectedStates.Count;  		if (GUILayout.Button (selectedStatesCount > 0 && StateMachineWindow.StateMachineEditor.selectedStates [0].transitions.Count > 0 ? "Add to transition" : "Select a transition to add") && selectedStatesCount > 0 && StateMachineWindow.StateMachineEditor.selectedStates [0].transitions.Count > 0) {  			StateMachineUtility.CreateCondition (StateMachineWindow.StateMachineEditor.selectedStates [0].transitions [StateMachineWindow.StateMachineEditor.transitionIndex]' selectedCondition.GetType ());  			if (PreferencesEditor.GetBool (Preference.CloseConditionBrowserOnAdd' false)) {  				Close ();  			}  		}  	}  	GUILayout.EndHorizontal ();  	GUILayout.EndVertical ();  	if (PreferencesEditor.GetBool (Preference.ConditionBrowserShowPreview' true)) {  		EditorGUI.BeginDisabledGroup (true);  		StateMachineGUI.DrawElement (selectedCondition' false' false);  		EditorGUI.EndDisabledGroup ();  		GUILayout.Space (5);  	}  }  
Magic Number,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The following statement contains a magic number: labelStyle.contentOffset = new Vector2 (0' 5);  
Magic Number,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The following statement contains a magic number: if (!string.IsNullOrEmpty (selectedCondition.GetInfoUrl ()) && GUILayout.Button (EditorGUIUtility.FindTexture ("_help")' labelStyle' GUILayout.Width (20))) {  	Application.OpenURL (selectedCondition.GetInfoUrl ());  }  
Magic Number,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The following statement contains a magic number: if (PreferencesEditor.GetBool (Preference.ConditionBrowserShowPreview' true)) {  	EditorGUI.BeginDisabledGroup (true);  	StateMachineGUI.DrawElement (selectedCondition' false' false);  	EditorGUI.EndDisabledGroup ();  	GUILayout.Space (5);  }  
Magic Number,StateMachine,ConditionBrowser,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\ConditionBrowser.cs,OnGUI,The following statement contains a magic number: GUILayout.Space (5);  
Magic Number,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,The following statement contains a magic number: GUILayout.Space (12);  
Magic Number,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,The following statement contains a magic number: switch (selectedTool) {  case 0:  	StateMachine stateMachine = StateMachineWindow.StateMachineEditor.ActiveStateMachine;  	if (stateMachine != null) {  		GUILayout.BeginVertical ("IN BigTitle");  		GUILayout.BeginHorizontal ();  		EditorGUIUtility.labelWidth = 50;  		string oldName = AssetDatabase.GetAssetPath (stateMachine);  		string newName = stateMachine.name;  		newName = EditorGUILayout.TextField ("Name"' newName);  		if (oldName != newName)  			AssetDatabase.RenameAsset (oldName' newName);  		GUILayout.EndHorizontal ();  		GUILayout.Label ("Description:");  		stateMachine.description = EditorGUILayout.TextArea (stateMachine.description' GUILayout.MinHeight (45));  		GUILayout.EndVertical ();  		if (GUI.changed) {  			EditorUtility.SetDirty (stateMachine);  		}  	}  	break;  case 1:  	GUILayout.Space (5);  	if (SelectedStates.Count == 1 && editor != null) {  		editor.DrawHeader ();  		GUILayout.BeginVertical (EditorStyles.inspectorDefaultMargins);  		editor.OnInspectorGUI ();  		GUILayout.EndVertical ();  	}  	else if (SelectedStates.Count > 1) {  		GUILayout.Space (10f);  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10f);  		GUILayout.Label ("Multi-state editing not supported."' FsmStyles.WrappedLabel);  		GUILayout.EndHorizontal ();  	}  	else {  		GUILayout.Label ("Select a state.");  	}  	break;  case 2:  	GUILayout.Space (10);  	GUILayout.BeginVertical (EditorStyles.inspectorDefaultMargins);  	GUILayout.Label ("Coming Soon");  	//DropAreaGUI();  	GUILayout.Space (10);  	GUILayout.EndVertical ();  	break;  }  
Magic Number,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,The following statement contains a magic number: switch (selectedTool) {  case 0:  	StateMachine stateMachine = StateMachineWindow.StateMachineEditor.ActiveStateMachine;  	if (stateMachine != null) {  		GUILayout.BeginVertical ("IN BigTitle");  		GUILayout.BeginHorizontal ();  		EditorGUIUtility.labelWidth = 50;  		string oldName = AssetDatabase.GetAssetPath (stateMachine);  		string newName = stateMachine.name;  		newName = EditorGUILayout.TextField ("Name"' newName);  		if (oldName != newName)  			AssetDatabase.RenameAsset (oldName' newName);  		GUILayout.EndHorizontal ();  		GUILayout.Label ("Description:");  		stateMachine.description = EditorGUILayout.TextArea (stateMachine.description' GUILayout.MinHeight (45));  		GUILayout.EndVertical ();  		if (GUI.changed) {  			EditorUtility.SetDirty (stateMachine);  		}  	}  	break;  case 1:  	GUILayout.Space (5);  	if (SelectedStates.Count == 1 && editor != null) {  		editor.DrawHeader ();  		GUILayout.BeginVertical (EditorStyles.inspectorDefaultMargins);  		editor.OnInspectorGUI ();  		GUILayout.EndVertical ();  	}  	else if (SelectedStates.Count > 1) {  		GUILayout.Space (10f);  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10f);  		GUILayout.Label ("Multi-state editing not supported."' FsmStyles.WrappedLabel);  		GUILayout.EndHorizontal ();  	}  	else {  		GUILayout.Label ("Select a state.");  	}  	break;  case 2:  	GUILayout.Space (10);  	GUILayout.BeginVertical (EditorStyles.inspectorDefaultMargins);  	GUILayout.Label ("Coming Soon");  	//DropAreaGUI();  	GUILayout.Space (10);  	GUILayout.EndVertical ();  	break;  }  
Magic Number,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,The following statement contains a magic number: switch (selectedTool) {  case 0:  	StateMachine stateMachine = StateMachineWindow.StateMachineEditor.ActiveStateMachine;  	if (stateMachine != null) {  		GUILayout.BeginVertical ("IN BigTitle");  		GUILayout.BeginHorizontal ();  		EditorGUIUtility.labelWidth = 50;  		string oldName = AssetDatabase.GetAssetPath (stateMachine);  		string newName = stateMachine.name;  		newName = EditorGUILayout.TextField ("Name"' newName);  		if (oldName != newName)  			AssetDatabase.RenameAsset (oldName' newName);  		GUILayout.EndHorizontal ();  		GUILayout.Label ("Description:");  		stateMachine.description = EditorGUILayout.TextArea (stateMachine.description' GUILayout.MinHeight (45));  		GUILayout.EndVertical ();  		if (GUI.changed) {  			EditorUtility.SetDirty (stateMachine);  		}  	}  	break;  case 1:  	GUILayout.Space (5);  	if (SelectedStates.Count == 1 && editor != null) {  		editor.DrawHeader ();  		GUILayout.BeginVertical (EditorStyles.inspectorDefaultMargins);  		editor.OnInspectorGUI ();  		GUILayout.EndVertical ();  	}  	else if (SelectedStates.Count > 1) {  		GUILayout.Space (10f);  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10f);  		GUILayout.Label ("Multi-state editing not supported."' FsmStyles.WrappedLabel);  		GUILayout.EndHorizontal ();  	}  	else {  		GUILayout.Label ("Select a state.");  	}  	break;  case 2:  	GUILayout.Space (10);  	GUILayout.BeginVertical (EditorStyles.inspectorDefaultMargins);  	GUILayout.Label ("Coming Soon");  	//DropAreaGUI();  	GUILayout.Space (10);  	GUILayout.EndVertical ();  	break;  }  
Magic Number,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,The following statement contains a magic number: switch (selectedTool) {  case 0:  	StateMachine stateMachine = StateMachineWindow.StateMachineEditor.ActiveStateMachine;  	if (stateMachine != null) {  		GUILayout.BeginVertical ("IN BigTitle");  		GUILayout.BeginHorizontal ();  		EditorGUIUtility.labelWidth = 50;  		string oldName = AssetDatabase.GetAssetPath (stateMachine);  		string newName = stateMachine.name;  		newName = EditorGUILayout.TextField ("Name"' newName);  		if (oldName != newName)  			AssetDatabase.RenameAsset (oldName' newName);  		GUILayout.EndHorizontal ();  		GUILayout.Label ("Description:");  		stateMachine.description = EditorGUILayout.TextArea (stateMachine.description' GUILayout.MinHeight (45));  		GUILayout.EndVertical ();  		if (GUI.changed) {  			EditorUtility.SetDirty (stateMachine);  		}  	}  	break;  case 1:  	GUILayout.Space (5);  	if (SelectedStates.Count == 1 && editor != null) {  		editor.DrawHeader ();  		GUILayout.BeginVertical (EditorStyles.inspectorDefaultMargins);  		editor.OnInspectorGUI ();  		GUILayout.EndVertical ();  	}  	else if (SelectedStates.Count > 1) {  		GUILayout.Space (10f);  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10f);  		GUILayout.Label ("Multi-state editing not supported."' FsmStyles.WrappedLabel);  		GUILayout.EndHorizontal ();  	}  	else {  		GUILayout.Label ("Select a state.");  	}  	break;  case 2:  	GUILayout.Space (10);  	GUILayout.BeginVertical (EditorStyles.inspectorDefaultMargins);  	GUILayout.Label ("Coming Soon");  	//DropAreaGUI();  	GUILayout.Space (10);  	GUILayout.EndVertical ();  	break;  }  
Magic Number,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,The following statement contains a magic number: switch (selectedTool) {  case 0:  	StateMachine stateMachine = StateMachineWindow.StateMachineEditor.ActiveStateMachine;  	if (stateMachine != null) {  		GUILayout.BeginVertical ("IN BigTitle");  		GUILayout.BeginHorizontal ();  		EditorGUIUtility.labelWidth = 50;  		string oldName = AssetDatabase.GetAssetPath (stateMachine);  		string newName = stateMachine.name;  		newName = EditorGUILayout.TextField ("Name"' newName);  		if (oldName != newName)  			AssetDatabase.RenameAsset (oldName' newName);  		GUILayout.EndHorizontal ();  		GUILayout.Label ("Description:");  		stateMachine.description = EditorGUILayout.TextArea (stateMachine.description' GUILayout.MinHeight (45));  		GUILayout.EndVertical ();  		if (GUI.changed) {  			EditorUtility.SetDirty (stateMachine);  		}  	}  	break;  case 1:  	GUILayout.Space (5);  	if (SelectedStates.Count == 1 && editor != null) {  		editor.DrawHeader ();  		GUILayout.BeginVertical (EditorStyles.inspectorDefaultMargins);  		editor.OnInspectorGUI ();  		GUILayout.EndVertical ();  	}  	else if (SelectedStates.Count > 1) {  		GUILayout.Space (10f);  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10f);  		GUILayout.Label ("Multi-state editing not supported."' FsmStyles.WrappedLabel);  		GUILayout.EndHorizontal ();  	}  	else {  		GUILayout.Label ("Select a state.");  	}  	break;  case 2:  	GUILayout.Space (10);  	GUILayout.BeginVertical (EditorStyles.inspectorDefaultMargins);  	GUILayout.Label ("Coming Soon");  	//DropAreaGUI();  	GUILayout.Space (10);  	GUILayout.EndVertical ();  	break;  }  
Magic Number,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,The following statement contains a magic number: switch (selectedTool) {  case 0:  	StateMachine stateMachine = StateMachineWindow.StateMachineEditor.ActiveStateMachine;  	if (stateMachine != null) {  		GUILayout.BeginVertical ("IN BigTitle");  		GUILayout.BeginHorizontal ();  		EditorGUIUtility.labelWidth = 50;  		string oldName = AssetDatabase.GetAssetPath (stateMachine);  		string newName = stateMachine.name;  		newName = EditorGUILayout.TextField ("Name"' newName);  		if (oldName != newName)  			AssetDatabase.RenameAsset (oldName' newName);  		GUILayout.EndHorizontal ();  		GUILayout.Label ("Description:");  		stateMachine.description = EditorGUILayout.TextArea (stateMachine.description' GUILayout.MinHeight (45));  		GUILayout.EndVertical ();  		if (GUI.changed) {  			EditorUtility.SetDirty (stateMachine);  		}  	}  	break;  case 1:  	GUILayout.Space (5);  	if (SelectedStates.Count == 1 && editor != null) {  		editor.DrawHeader ();  		GUILayout.BeginVertical (EditorStyles.inspectorDefaultMargins);  		editor.OnInspectorGUI ();  		GUILayout.EndVertical ();  	}  	else if (SelectedStates.Count > 1) {  		GUILayout.Space (10f);  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10f);  		GUILayout.Label ("Multi-state editing not supported."' FsmStyles.WrappedLabel);  		GUILayout.EndHorizontal ();  	}  	else {  		GUILayout.Label ("Select a state.");  	}  	break;  case 2:  	GUILayout.Space (10);  	GUILayout.BeginVertical (EditorStyles.inspectorDefaultMargins);  	GUILayout.Label ("Coming Soon");  	//DropAreaGUI();  	GUILayout.Space (10);  	GUILayout.EndVertical ();  	break;  }  
Magic Number,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,The following statement contains a magic number: if (stateMachine != null) {  	GUILayout.BeginVertical ("IN BigTitle");  	GUILayout.BeginHorizontal ();  	EditorGUIUtility.labelWidth = 50;  	string oldName = AssetDatabase.GetAssetPath (stateMachine);  	string newName = stateMachine.name;  	newName = EditorGUILayout.TextField ("Name"' newName);  	if (oldName != newName)  		AssetDatabase.RenameAsset (oldName' newName);  	GUILayout.EndHorizontal ();  	GUILayout.Label ("Description:");  	stateMachine.description = EditorGUILayout.TextArea (stateMachine.description' GUILayout.MinHeight (45));  	GUILayout.EndVertical ();  	if (GUI.changed) {  		EditorUtility.SetDirty (stateMachine);  	}  }  
Magic Number,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,The following statement contains a magic number: if (stateMachine != null) {  	GUILayout.BeginVertical ("IN BigTitle");  	GUILayout.BeginHorizontal ();  	EditorGUIUtility.labelWidth = 50;  	string oldName = AssetDatabase.GetAssetPath (stateMachine);  	string newName = stateMachine.name;  	newName = EditorGUILayout.TextField ("Name"' newName);  	if (oldName != newName)  		AssetDatabase.RenameAsset (oldName' newName);  	GUILayout.EndHorizontal ();  	GUILayout.Label ("Description:");  	stateMachine.description = EditorGUILayout.TextArea (stateMachine.description' GUILayout.MinHeight (45));  	GUILayout.EndVertical ();  	if (GUI.changed) {  		EditorUtility.SetDirty (stateMachine);  	}  }  
Magic Number,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,The following statement contains a magic number: EditorGUIUtility.labelWidth = 50;  
Magic Number,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,The following statement contains a magic number: stateMachine.description = EditorGUILayout.TextArea (stateMachine.description' GUILayout.MinHeight (45));  
Magic Number,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,The following statement contains a magic number: GUILayout.Space (5);  
Magic Number,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,The following statement contains a magic number: GUILayout.Space (10);  
Magic Number,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,The following statement contains a magic number: GUILayout.Space (10);  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,OnGUI,The following statement contains a magic number: EditorGUIUtility.labelWidth = 84;  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,OnGUI,The following statement contains a magic number: GUILayout.Label ("Select Group"' GUILayout.Width (80));  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,OnGUI,The following statement contains a magic number: GUILayout.Label ("Type"' GUILayout.Width (80));  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,OnGUI,The following statement contains a magic number: if (GUILayout.Button ("Add"' EditorStyles.toolbarButton' GUILayout.Width (70))) {  	CreateParameter ();  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,OnGUI,The following statement contains a magic number: GUILayout.Space (5);  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,OnGUI,The following statement contains a magic number: GUILayout.Space (3);  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,OnGUI,The following statement contains a magic number: GUILayout.Box (GUIContent.none' "PopupCurveSwatchBackground"' GUILayout.Height (2)' GUILayout.ExpandWidth (true));  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: EditorGUIUtility.labelWidth = 140;  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: foreach (var kvp in groupParameters) {  	bool foldout = EditorPrefs.GetBool (kvp.Key' false);  	bool state = EditorGUILayout.Foldout (foldout' kvp.Key);  	if (state != foldout) {  		EditorPrefs.SetBool (kvp.Key' state);  	}  	if (foldout) {  		for (int i = 0; i < groupParameters [kvp.Key].Count; i++) {  			NamedParameter parameter = groupParameters [kvp.Key] [i];  			if (parameter != null) {  				SerializedObject paramObject = new SerializedObject (parameter);  				SerializedProperty prop = paramObject.FindProperty ("value");  				GUILayout.BeginHorizontal ();  				GUILayout.Space (16f);  				string name = paramObject.FindProperty ("parameterName").stringValue;  				if (parameter is ObjectParameter) {  					GUI.changed = false;  					ObjectParameter mParam = parameter as ObjectParameter;  					if (!mParam.FromSceneInstance) {  						mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  					}  					else {  						GUILayout.Label (name' GUILayout.Width (136));  						GUIStyle style = new GUIStyle ("label");  						style.fixedHeight = 0;  						style.wordWrap = true;  						style.alignment = TextAnchor.UpperLeft;  						GUILayout.Label (mParam.Reference' style);  						GUILayout.FlexibleSpace ();  					}  					if (GUI.changed) {  						if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  							mParam.FromSceneInstance = true;  							mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  							AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  							if (mTemp == null) {  								mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  							}  							mTemp.paramterName = mParam.Name;  						}  						EditorUtility.SetDirty (mParam);  					}  				}  				else {  					paramObject.Update ();  					if (prop != null) {  						EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  					}  					paramObject.ApplyModifiedProperties ();  				}  				if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  					if (i < groupParameters [kvp.Key].Count) {  						int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  						paramterCollection.parameters.Move (indexToMove' 0);  						EditorUtility.SetDirty (paramterCollection);  					}  				}  				if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  					if (i > 0) {  						int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  						paramterCollection.parameters.Move (indexToMove' 1);  						EditorUtility.SetDirty (paramterCollection);  					}  				}  				if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  					GenericMenu menu = new GenericMenu ();  					foreach (NamedParameter p in paramterCollection.parameters) {  						string group = p.Group;  						NamedParameter mParam = parameter;  						menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  							mParam.Group = group;  						});  					}  					menu.ShowAsContext ();  				}  				if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  					delete = parameter;  				}  				GUILayout.EndHorizontal ();  			}  		}  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: foreach (var kvp in groupParameters) {  	bool foldout = EditorPrefs.GetBool (kvp.Key' false);  	bool state = EditorGUILayout.Foldout (foldout' kvp.Key);  	if (state != foldout) {  		EditorPrefs.SetBool (kvp.Key' state);  	}  	if (foldout) {  		for (int i = 0; i < groupParameters [kvp.Key].Count; i++) {  			NamedParameter parameter = groupParameters [kvp.Key] [i];  			if (parameter != null) {  				SerializedObject paramObject = new SerializedObject (parameter);  				SerializedProperty prop = paramObject.FindProperty ("value");  				GUILayout.BeginHorizontal ();  				GUILayout.Space (16f);  				string name = paramObject.FindProperty ("parameterName").stringValue;  				if (parameter is ObjectParameter) {  					GUI.changed = false;  					ObjectParameter mParam = parameter as ObjectParameter;  					if (!mParam.FromSceneInstance) {  						mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  					}  					else {  						GUILayout.Label (name' GUILayout.Width (136));  						GUIStyle style = new GUIStyle ("label");  						style.fixedHeight = 0;  						style.wordWrap = true;  						style.alignment = TextAnchor.UpperLeft;  						GUILayout.Label (mParam.Reference' style);  						GUILayout.FlexibleSpace ();  					}  					if (GUI.changed) {  						if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  							mParam.FromSceneInstance = true;  							mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  							AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  							if (mTemp == null) {  								mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  							}  							mTemp.paramterName = mParam.Name;  						}  						EditorUtility.SetDirty (mParam);  					}  				}  				else {  					paramObject.Update ();  					if (prop != null) {  						EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  					}  					paramObject.ApplyModifiedProperties ();  				}  				if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  					if (i < groupParameters [kvp.Key].Count) {  						int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  						paramterCollection.parameters.Move (indexToMove' 0);  						EditorUtility.SetDirty (paramterCollection);  					}  				}  				if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  					if (i > 0) {  						int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  						paramterCollection.parameters.Move (indexToMove' 1);  						EditorUtility.SetDirty (paramterCollection);  					}  				}  				if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  					GenericMenu menu = new GenericMenu ();  					foreach (NamedParameter p in paramterCollection.parameters) {  						string group = p.Group;  						NamedParameter mParam = parameter;  						menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  							mParam.Group = group;  						});  					}  					menu.ShowAsContext ();  				}  				if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  					delete = parameter;  				}  				GUILayout.EndHorizontal ();  			}  		}  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: foreach (var kvp in groupParameters) {  	bool foldout = EditorPrefs.GetBool (kvp.Key' false);  	bool state = EditorGUILayout.Foldout (foldout' kvp.Key);  	if (state != foldout) {  		EditorPrefs.SetBool (kvp.Key' state);  	}  	if (foldout) {  		for (int i = 0; i < groupParameters [kvp.Key].Count; i++) {  			NamedParameter parameter = groupParameters [kvp.Key] [i];  			if (parameter != null) {  				SerializedObject paramObject = new SerializedObject (parameter);  				SerializedProperty prop = paramObject.FindProperty ("value");  				GUILayout.BeginHorizontal ();  				GUILayout.Space (16f);  				string name = paramObject.FindProperty ("parameterName").stringValue;  				if (parameter is ObjectParameter) {  					GUI.changed = false;  					ObjectParameter mParam = parameter as ObjectParameter;  					if (!mParam.FromSceneInstance) {  						mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  					}  					else {  						GUILayout.Label (name' GUILayout.Width (136));  						GUIStyle style = new GUIStyle ("label");  						style.fixedHeight = 0;  						style.wordWrap = true;  						style.alignment = TextAnchor.UpperLeft;  						GUILayout.Label (mParam.Reference' style);  						GUILayout.FlexibleSpace ();  					}  					if (GUI.changed) {  						if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  							mParam.FromSceneInstance = true;  							mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  							AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  							if (mTemp == null) {  								mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  							}  							mTemp.paramterName = mParam.Name;  						}  						EditorUtility.SetDirty (mParam);  					}  				}  				else {  					paramObject.Update ();  					if (prop != null) {  						EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  					}  					paramObject.ApplyModifiedProperties ();  				}  				if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  					if (i < groupParameters [kvp.Key].Count) {  						int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  						paramterCollection.parameters.Move (indexToMove' 0);  						EditorUtility.SetDirty (paramterCollection);  					}  				}  				if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  					if (i > 0) {  						int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  						paramterCollection.parameters.Move (indexToMove' 1);  						EditorUtility.SetDirty (paramterCollection);  					}  				}  				if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  					GenericMenu menu = new GenericMenu ();  					foreach (NamedParameter p in paramterCollection.parameters) {  						string group = p.Group;  						NamedParameter mParam = parameter;  						menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  							mParam.Group = group;  						});  					}  					menu.ShowAsContext ();  				}  				if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  					delete = parameter;  				}  				GUILayout.EndHorizontal ();  			}  		}  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: foreach (var kvp in groupParameters) {  	bool foldout = EditorPrefs.GetBool (kvp.Key' false);  	bool state = EditorGUILayout.Foldout (foldout' kvp.Key);  	if (state != foldout) {  		EditorPrefs.SetBool (kvp.Key' state);  	}  	if (foldout) {  		for (int i = 0; i < groupParameters [kvp.Key].Count; i++) {  			NamedParameter parameter = groupParameters [kvp.Key] [i];  			if (parameter != null) {  				SerializedObject paramObject = new SerializedObject (parameter);  				SerializedProperty prop = paramObject.FindProperty ("value");  				GUILayout.BeginHorizontal ();  				GUILayout.Space (16f);  				string name = paramObject.FindProperty ("parameterName").stringValue;  				if (parameter is ObjectParameter) {  					GUI.changed = false;  					ObjectParameter mParam = parameter as ObjectParameter;  					if (!mParam.FromSceneInstance) {  						mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  					}  					else {  						GUILayout.Label (name' GUILayout.Width (136));  						GUIStyle style = new GUIStyle ("label");  						style.fixedHeight = 0;  						style.wordWrap = true;  						style.alignment = TextAnchor.UpperLeft;  						GUILayout.Label (mParam.Reference' style);  						GUILayout.FlexibleSpace ();  					}  					if (GUI.changed) {  						if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  							mParam.FromSceneInstance = true;  							mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  							AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  							if (mTemp == null) {  								mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  							}  							mTemp.paramterName = mParam.Name;  						}  						EditorUtility.SetDirty (mParam);  					}  				}  				else {  					paramObject.Update ();  					if (prop != null) {  						EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  					}  					paramObject.ApplyModifiedProperties ();  				}  				if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  					if (i < groupParameters [kvp.Key].Count) {  						int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  						paramterCollection.parameters.Move (indexToMove' 0);  						EditorUtility.SetDirty (paramterCollection);  					}  				}  				if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  					if (i > 0) {  						int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  						paramterCollection.parameters.Move (indexToMove' 1);  						EditorUtility.SetDirty (paramterCollection);  					}  				}  				if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  					GenericMenu menu = new GenericMenu ();  					foreach (NamedParameter p in paramterCollection.parameters) {  						string group = p.Group;  						NamedParameter mParam = parameter;  						menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  							mParam.Group = group;  						});  					}  					menu.ShowAsContext ();  				}  				if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  					delete = parameter;  				}  				GUILayout.EndHorizontal ();  			}  		}  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: foreach (var kvp in groupParameters) {  	bool foldout = EditorPrefs.GetBool (kvp.Key' false);  	bool state = EditorGUILayout.Foldout (foldout' kvp.Key);  	if (state != foldout) {  		EditorPrefs.SetBool (kvp.Key' state);  	}  	if (foldout) {  		for (int i = 0; i < groupParameters [kvp.Key].Count; i++) {  			NamedParameter parameter = groupParameters [kvp.Key] [i];  			if (parameter != null) {  				SerializedObject paramObject = new SerializedObject (parameter);  				SerializedProperty prop = paramObject.FindProperty ("value");  				GUILayout.BeginHorizontal ();  				GUILayout.Space (16f);  				string name = paramObject.FindProperty ("parameterName").stringValue;  				if (parameter is ObjectParameter) {  					GUI.changed = false;  					ObjectParameter mParam = parameter as ObjectParameter;  					if (!mParam.FromSceneInstance) {  						mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  					}  					else {  						GUILayout.Label (name' GUILayout.Width (136));  						GUIStyle style = new GUIStyle ("label");  						style.fixedHeight = 0;  						style.wordWrap = true;  						style.alignment = TextAnchor.UpperLeft;  						GUILayout.Label (mParam.Reference' style);  						GUILayout.FlexibleSpace ();  					}  					if (GUI.changed) {  						if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  							mParam.FromSceneInstance = true;  							mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  							AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  							if (mTemp == null) {  								mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  							}  							mTemp.paramterName = mParam.Name;  						}  						EditorUtility.SetDirty (mParam);  					}  				}  				else {  					paramObject.Update ();  					if (prop != null) {  						EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  					}  					paramObject.ApplyModifiedProperties ();  				}  				if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  					if (i < groupParameters [kvp.Key].Count) {  						int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  						paramterCollection.parameters.Move (indexToMove' 0);  						EditorUtility.SetDirty (paramterCollection);  					}  				}  				if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  					if (i > 0) {  						int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  						paramterCollection.parameters.Move (indexToMove' 1);  						EditorUtility.SetDirty (paramterCollection);  					}  				}  				if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  					GenericMenu menu = new GenericMenu ();  					foreach (NamedParameter p in paramterCollection.parameters) {  						string group = p.Group;  						NamedParameter mParam = parameter;  						menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  							mParam.Group = group;  						});  					}  					menu.ShowAsContext ();  				}  				if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  					delete = parameter;  				}  				GUILayout.EndHorizontal ();  			}  		}  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (foldout) {  	for (int i = 0; i < groupParameters [kvp.Key].Count; i++) {  		NamedParameter parameter = groupParameters [kvp.Key] [i];  		if (parameter != null) {  			SerializedObject paramObject = new SerializedObject (parameter);  			SerializedProperty prop = paramObject.FindProperty ("value");  			GUILayout.BeginHorizontal ();  			GUILayout.Space (16f);  			string name = paramObject.FindProperty ("parameterName").stringValue;  			if (parameter is ObjectParameter) {  				GUI.changed = false;  				ObjectParameter mParam = parameter as ObjectParameter;  				if (!mParam.FromSceneInstance) {  					mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  				}  				else {  					GUILayout.Label (name' GUILayout.Width (136));  					GUIStyle style = new GUIStyle ("label");  					style.fixedHeight = 0;  					style.wordWrap = true;  					style.alignment = TextAnchor.UpperLeft;  					GUILayout.Label (mParam.Reference' style);  					GUILayout.FlexibleSpace ();  				}  				if (GUI.changed) {  					if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  						mParam.FromSceneInstance = true;  						mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  						AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  						if (mTemp == null) {  							mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  						}  						mTemp.paramterName = mParam.Name;  					}  					EditorUtility.SetDirty (mParam);  				}  			}  			else {  				paramObject.Update ();  				if (prop != null) {  					EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  				}  				paramObject.ApplyModifiedProperties ();  			}  			if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  				if (i < groupParameters [kvp.Key].Count) {  					int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  					paramterCollection.parameters.Move (indexToMove' 0);  					EditorUtility.SetDirty (paramterCollection);  				}  			}  			if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  				if (i > 0) {  					int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  					paramterCollection.parameters.Move (indexToMove' 1);  					EditorUtility.SetDirty (paramterCollection);  				}  			}  			if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  				GenericMenu menu = new GenericMenu ();  				foreach (NamedParameter p in paramterCollection.parameters) {  					string group = p.Group;  					NamedParameter mParam = parameter;  					menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  						mParam.Group = group;  					});  				}  				menu.ShowAsContext ();  			}  			if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  				delete = parameter;  			}  			GUILayout.EndHorizontal ();  		}  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (foldout) {  	for (int i = 0; i < groupParameters [kvp.Key].Count; i++) {  		NamedParameter parameter = groupParameters [kvp.Key] [i];  		if (parameter != null) {  			SerializedObject paramObject = new SerializedObject (parameter);  			SerializedProperty prop = paramObject.FindProperty ("value");  			GUILayout.BeginHorizontal ();  			GUILayout.Space (16f);  			string name = paramObject.FindProperty ("parameterName").stringValue;  			if (parameter is ObjectParameter) {  				GUI.changed = false;  				ObjectParameter mParam = parameter as ObjectParameter;  				if (!mParam.FromSceneInstance) {  					mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  				}  				else {  					GUILayout.Label (name' GUILayout.Width (136));  					GUIStyle style = new GUIStyle ("label");  					style.fixedHeight = 0;  					style.wordWrap = true;  					style.alignment = TextAnchor.UpperLeft;  					GUILayout.Label (mParam.Reference' style);  					GUILayout.FlexibleSpace ();  				}  				if (GUI.changed) {  					if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  						mParam.FromSceneInstance = true;  						mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  						AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  						if (mTemp == null) {  							mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  						}  						mTemp.paramterName = mParam.Name;  					}  					EditorUtility.SetDirty (mParam);  				}  			}  			else {  				paramObject.Update ();  				if (prop != null) {  					EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  				}  				paramObject.ApplyModifiedProperties ();  			}  			if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  				if (i < groupParameters [kvp.Key].Count) {  					int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  					paramterCollection.parameters.Move (indexToMove' 0);  					EditorUtility.SetDirty (paramterCollection);  				}  			}  			if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  				if (i > 0) {  					int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  					paramterCollection.parameters.Move (indexToMove' 1);  					EditorUtility.SetDirty (paramterCollection);  				}  			}  			if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  				GenericMenu menu = new GenericMenu ();  				foreach (NamedParameter p in paramterCollection.parameters) {  					string group = p.Group;  					NamedParameter mParam = parameter;  					menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  						mParam.Group = group;  					});  				}  				menu.ShowAsContext ();  			}  			if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  				delete = parameter;  			}  			GUILayout.EndHorizontal ();  		}  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (foldout) {  	for (int i = 0; i < groupParameters [kvp.Key].Count; i++) {  		NamedParameter parameter = groupParameters [kvp.Key] [i];  		if (parameter != null) {  			SerializedObject paramObject = new SerializedObject (parameter);  			SerializedProperty prop = paramObject.FindProperty ("value");  			GUILayout.BeginHorizontal ();  			GUILayout.Space (16f);  			string name = paramObject.FindProperty ("parameterName").stringValue;  			if (parameter is ObjectParameter) {  				GUI.changed = false;  				ObjectParameter mParam = parameter as ObjectParameter;  				if (!mParam.FromSceneInstance) {  					mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  				}  				else {  					GUILayout.Label (name' GUILayout.Width (136));  					GUIStyle style = new GUIStyle ("label");  					style.fixedHeight = 0;  					style.wordWrap = true;  					style.alignment = TextAnchor.UpperLeft;  					GUILayout.Label (mParam.Reference' style);  					GUILayout.FlexibleSpace ();  				}  				if (GUI.changed) {  					if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  						mParam.FromSceneInstance = true;  						mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  						AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  						if (mTemp == null) {  							mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  						}  						mTemp.paramterName = mParam.Name;  					}  					EditorUtility.SetDirty (mParam);  				}  			}  			else {  				paramObject.Update ();  				if (prop != null) {  					EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  				}  				paramObject.ApplyModifiedProperties ();  			}  			if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  				if (i < groupParameters [kvp.Key].Count) {  					int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  					paramterCollection.parameters.Move (indexToMove' 0);  					EditorUtility.SetDirty (paramterCollection);  				}  			}  			if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  				if (i > 0) {  					int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  					paramterCollection.parameters.Move (indexToMove' 1);  					EditorUtility.SetDirty (paramterCollection);  				}  			}  			if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  				GenericMenu menu = new GenericMenu ();  				foreach (NamedParameter p in paramterCollection.parameters) {  					string group = p.Group;  					NamedParameter mParam = parameter;  					menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  						mParam.Group = group;  					});  				}  				menu.ShowAsContext ();  			}  			if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  				delete = parameter;  			}  			GUILayout.EndHorizontal ();  		}  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (foldout) {  	for (int i = 0; i < groupParameters [kvp.Key].Count; i++) {  		NamedParameter parameter = groupParameters [kvp.Key] [i];  		if (parameter != null) {  			SerializedObject paramObject = new SerializedObject (parameter);  			SerializedProperty prop = paramObject.FindProperty ("value");  			GUILayout.BeginHorizontal ();  			GUILayout.Space (16f);  			string name = paramObject.FindProperty ("parameterName").stringValue;  			if (parameter is ObjectParameter) {  				GUI.changed = false;  				ObjectParameter mParam = parameter as ObjectParameter;  				if (!mParam.FromSceneInstance) {  					mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  				}  				else {  					GUILayout.Label (name' GUILayout.Width (136));  					GUIStyle style = new GUIStyle ("label");  					style.fixedHeight = 0;  					style.wordWrap = true;  					style.alignment = TextAnchor.UpperLeft;  					GUILayout.Label (mParam.Reference' style);  					GUILayout.FlexibleSpace ();  				}  				if (GUI.changed) {  					if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  						mParam.FromSceneInstance = true;  						mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  						AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  						if (mTemp == null) {  							mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  						}  						mTemp.paramterName = mParam.Name;  					}  					EditorUtility.SetDirty (mParam);  				}  			}  			else {  				paramObject.Update ();  				if (prop != null) {  					EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  				}  				paramObject.ApplyModifiedProperties ();  			}  			if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  				if (i < groupParameters [kvp.Key].Count) {  					int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  					paramterCollection.parameters.Move (indexToMove' 0);  					EditorUtility.SetDirty (paramterCollection);  				}  			}  			if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  				if (i > 0) {  					int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  					paramterCollection.parameters.Move (indexToMove' 1);  					EditorUtility.SetDirty (paramterCollection);  				}  			}  			if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  				GenericMenu menu = new GenericMenu ();  				foreach (NamedParameter p in paramterCollection.parameters) {  					string group = p.Group;  					NamedParameter mParam = parameter;  					menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  						mParam.Group = group;  					});  				}  				menu.ShowAsContext ();  			}  			if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  				delete = parameter;  			}  			GUILayout.EndHorizontal ();  		}  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (foldout) {  	for (int i = 0; i < groupParameters [kvp.Key].Count; i++) {  		NamedParameter parameter = groupParameters [kvp.Key] [i];  		if (parameter != null) {  			SerializedObject paramObject = new SerializedObject (parameter);  			SerializedProperty prop = paramObject.FindProperty ("value");  			GUILayout.BeginHorizontal ();  			GUILayout.Space (16f);  			string name = paramObject.FindProperty ("parameterName").stringValue;  			if (parameter is ObjectParameter) {  				GUI.changed = false;  				ObjectParameter mParam = parameter as ObjectParameter;  				if (!mParam.FromSceneInstance) {  					mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  				}  				else {  					GUILayout.Label (name' GUILayout.Width (136));  					GUIStyle style = new GUIStyle ("label");  					style.fixedHeight = 0;  					style.wordWrap = true;  					style.alignment = TextAnchor.UpperLeft;  					GUILayout.Label (mParam.Reference' style);  					GUILayout.FlexibleSpace ();  				}  				if (GUI.changed) {  					if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  						mParam.FromSceneInstance = true;  						mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  						AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  						if (mTemp == null) {  							mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  						}  						mTemp.paramterName = mParam.Name;  					}  					EditorUtility.SetDirty (mParam);  				}  			}  			else {  				paramObject.Update ();  				if (prop != null) {  					EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  				}  				paramObject.ApplyModifiedProperties ();  			}  			if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  				if (i < groupParameters [kvp.Key].Count) {  					int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  					paramterCollection.parameters.Move (indexToMove' 0);  					EditorUtility.SetDirty (paramterCollection);  				}  			}  			if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  				if (i > 0) {  					int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  					paramterCollection.parameters.Move (indexToMove' 1);  					EditorUtility.SetDirty (paramterCollection);  				}  			}  			if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  				GenericMenu menu = new GenericMenu ();  				foreach (NamedParameter p in paramterCollection.parameters) {  					string group = p.Group;  					NamedParameter mParam = parameter;  					menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  						mParam.Group = group;  					});  				}  				menu.ShowAsContext ();  			}  			if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  				delete = parameter;  			}  			GUILayout.EndHorizontal ();  		}  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: for (int i = 0; i < groupParameters [kvp.Key].Count; i++) {  	NamedParameter parameter = groupParameters [kvp.Key] [i];  	if (parameter != null) {  		SerializedObject paramObject = new SerializedObject (parameter);  		SerializedProperty prop = paramObject.FindProperty ("value");  		GUILayout.BeginHorizontal ();  		GUILayout.Space (16f);  		string name = paramObject.FindProperty ("parameterName").stringValue;  		if (parameter is ObjectParameter) {  			GUI.changed = false;  			ObjectParameter mParam = parameter as ObjectParameter;  			if (!mParam.FromSceneInstance) {  				mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  			}  			else {  				GUILayout.Label (name' GUILayout.Width (136));  				GUIStyle style = new GUIStyle ("label");  				style.fixedHeight = 0;  				style.wordWrap = true;  				style.alignment = TextAnchor.UpperLeft;  				GUILayout.Label (mParam.Reference' style);  				GUILayout.FlexibleSpace ();  			}  			if (GUI.changed) {  				if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  					mParam.FromSceneInstance = true;  					mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  					AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  					if (mTemp == null) {  						mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  					}  					mTemp.paramterName = mParam.Name;  				}  				EditorUtility.SetDirty (mParam);  			}  		}  		else {  			paramObject.Update ();  			if (prop != null) {  				EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  			}  			paramObject.ApplyModifiedProperties ();  		}  		if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  			if (i < groupParameters [kvp.Key].Count) {  				int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  				paramterCollection.parameters.Move (indexToMove' 0);  				EditorUtility.SetDirty (paramterCollection);  			}  		}  		if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  			if (i > 0) {  				int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  				paramterCollection.parameters.Move (indexToMove' 1);  				EditorUtility.SetDirty (paramterCollection);  			}  		}  		if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  			GenericMenu menu = new GenericMenu ();  			foreach (NamedParameter p in paramterCollection.parameters) {  				string group = p.Group;  				NamedParameter mParam = parameter;  				menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  					mParam.Group = group;  				});  			}  			menu.ShowAsContext ();  		}  		if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  			delete = parameter;  		}  		GUILayout.EndHorizontal ();  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: for (int i = 0; i < groupParameters [kvp.Key].Count; i++) {  	NamedParameter parameter = groupParameters [kvp.Key] [i];  	if (parameter != null) {  		SerializedObject paramObject = new SerializedObject (parameter);  		SerializedProperty prop = paramObject.FindProperty ("value");  		GUILayout.BeginHorizontal ();  		GUILayout.Space (16f);  		string name = paramObject.FindProperty ("parameterName").stringValue;  		if (parameter is ObjectParameter) {  			GUI.changed = false;  			ObjectParameter mParam = parameter as ObjectParameter;  			if (!mParam.FromSceneInstance) {  				mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  			}  			else {  				GUILayout.Label (name' GUILayout.Width (136));  				GUIStyle style = new GUIStyle ("label");  				style.fixedHeight = 0;  				style.wordWrap = true;  				style.alignment = TextAnchor.UpperLeft;  				GUILayout.Label (mParam.Reference' style);  				GUILayout.FlexibleSpace ();  			}  			if (GUI.changed) {  				if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  					mParam.FromSceneInstance = true;  					mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  					AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  					if (mTemp == null) {  						mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  					}  					mTemp.paramterName = mParam.Name;  				}  				EditorUtility.SetDirty (mParam);  			}  		}  		else {  			paramObject.Update ();  			if (prop != null) {  				EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  			}  			paramObject.ApplyModifiedProperties ();  		}  		if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  			if (i < groupParameters [kvp.Key].Count) {  				int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  				paramterCollection.parameters.Move (indexToMove' 0);  				EditorUtility.SetDirty (paramterCollection);  			}  		}  		if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  			if (i > 0) {  				int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  				paramterCollection.parameters.Move (indexToMove' 1);  				EditorUtility.SetDirty (paramterCollection);  			}  		}  		if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  			GenericMenu menu = new GenericMenu ();  			foreach (NamedParameter p in paramterCollection.parameters) {  				string group = p.Group;  				NamedParameter mParam = parameter;  				menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  					mParam.Group = group;  				});  			}  			menu.ShowAsContext ();  		}  		if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  			delete = parameter;  		}  		GUILayout.EndHorizontal ();  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: for (int i = 0; i < groupParameters [kvp.Key].Count; i++) {  	NamedParameter parameter = groupParameters [kvp.Key] [i];  	if (parameter != null) {  		SerializedObject paramObject = new SerializedObject (parameter);  		SerializedProperty prop = paramObject.FindProperty ("value");  		GUILayout.BeginHorizontal ();  		GUILayout.Space (16f);  		string name = paramObject.FindProperty ("parameterName").stringValue;  		if (parameter is ObjectParameter) {  			GUI.changed = false;  			ObjectParameter mParam = parameter as ObjectParameter;  			if (!mParam.FromSceneInstance) {  				mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  			}  			else {  				GUILayout.Label (name' GUILayout.Width (136));  				GUIStyle style = new GUIStyle ("label");  				style.fixedHeight = 0;  				style.wordWrap = true;  				style.alignment = TextAnchor.UpperLeft;  				GUILayout.Label (mParam.Reference' style);  				GUILayout.FlexibleSpace ();  			}  			if (GUI.changed) {  				if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  					mParam.FromSceneInstance = true;  					mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  					AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  					if (mTemp == null) {  						mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  					}  					mTemp.paramterName = mParam.Name;  				}  				EditorUtility.SetDirty (mParam);  			}  		}  		else {  			paramObject.Update ();  			if (prop != null) {  				EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  			}  			paramObject.ApplyModifiedProperties ();  		}  		if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  			if (i < groupParameters [kvp.Key].Count) {  				int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  				paramterCollection.parameters.Move (indexToMove' 0);  				EditorUtility.SetDirty (paramterCollection);  			}  		}  		if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  			if (i > 0) {  				int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  				paramterCollection.parameters.Move (indexToMove' 1);  				EditorUtility.SetDirty (paramterCollection);  			}  		}  		if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  			GenericMenu menu = new GenericMenu ();  			foreach (NamedParameter p in paramterCollection.parameters) {  				string group = p.Group;  				NamedParameter mParam = parameter;  				menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  					mParam.Group = group;  				});  			}  			menu.ShowAsContext ();  		}  		if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  			delete = parameter;  		}  		GUILayout.EndHorizontal ();  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: for (int i = 0; i < groupParameters [kvp.Key].Count; i++) {  	NamedParameter parameter = groupParameters [kvp.Key] [i];  	if (parameter != null) {  		SerializedObject paramObject = new SerializedObject (parameter);  		SerializedProperty prop = paramObject.FindProperty ("value");  		GUILayout.BeginHorizontal ();  		GUILayout.Space (16f);  		string name = paramObject.FindProperty ("parameterName").stringValue;  		if (parameter is ObjectParameter) {  			GUI.changed = false;  			ObjectParameter mParam = parameter as ObjectParameter;  			if (!mParam.FromSceneInstance) {  				mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  			}  			else {  				GUILayout.Label (name' GUILayout.Width (136));  				GUIStyle style = new GUIStyle ("label");  				style.fixedHeight = 0;  				style.wordWrap = true;  				style.alignment = TextAnchor.UpperLeft;  				GUILayout.Label (mParam.Reference' style);  				GUILayout.FlexibleSpace ();  			}  			if (GUI.changed) {  				if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  					mParam.FromSceneInstance = true;  					mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  					AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  					if (mTemp == null) {  						mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  					}  					mTemp.paramterName = mParam.Name;  				}  				EditorUtility.SetDirty (mParam);  			}  		}  		else {  			paramObject.Update ();  			if (prop != null) {  				EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  			}  			paramObject.ApplyModifiedProperties ();  		}  		if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  			if (i < groupParameters [kvp.Key].Count) {  				int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  				paramterCollection.parameters.Move (indexToMove' 0);  				EditorUtility.SetDirty (paramterCollection);  			}  		}  		if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  			if (i > 0) {  				int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  				paramterCollection.parameters.Move (indexToMove' 1);  				EditorUtility.SetDirty (paramterCollection);  			}  		}  		if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  			GenericMenu menu = new GenericMenu ();  			foreach (NamedParameter p in paramterCollection.parameters) {  				string group = p.Group;  				NamedParameter mParam = parameter;  				menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  					mParam.Group = group;  				});  			}  			menu.ShowAsContext ();  		}  		if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  			delete = parameter;  		}  		GUILayout.EndHorizontal ();  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: for (int i = 0; i < groupParameters [kvp.Key].Count; i++) {  	NamedParameter parameter = groupParameters [kvp.Key] [i];  	if (parameter != null) {  		SerializedObject paramObject = new SerializedObject (parameter);  		SerializedProperty prop = paramObject.FindProperty ("value");  		GUILayout.BeginHorizontal ();  		GUILayout.Space (16f);  		string name = paramObject.FindProperty ("parameterName").stringValue;  		if (parameter is ObjectParameter) {  			GUI.changed = false;  			ObjectParameter mParam = parameter as ObjectParameter;  			if (!mParam.FromSceneInstance) {  				mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  			}  			else {  				GUILayout.Label (name' GUILayout.Width (136));  				GUIStyle style = new GUIStyle ("label");  				style.fixedHeight = 0;  				style.wordWrap = true;  				style.alignment = TextAnchor.UpperLeft;  				GUILayout.Label (mParam.Reference' style);  				GUILayout.FlexibleSpace ();  			}  			if (GUI.changed) {  				if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  					mParam.FromSceneInstance = true;  					mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  					AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  					if (mTemp == null) {  						mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  					}  					mTemp.paramterName = mParam.Name;  				}  				EditorUtility.SetDirty (mParam);  			}  		}  		else {  			paramObject.Update ();  			if (prop != null) {  				EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  			}  			paramObject.ApplyModifiedProperties ();  		}  		if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  			if (i < groupParameters [kvp.Key].Count) {  				int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  				paramterCollection.parameters.Move (indexToMove' 0);  				EditorUtility.SetDirty (paramterCollection);  			}  		}  		if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  			if (i > 0) {  				int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  				paramterCollection.parameters.Move (indexToMove' 1);  				EditorUtility.SetDirty (paramterCollection);  			}  		}  		if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  			GenericMenu menu = new GenericMenu ();  			foreach (NamedParameter p in paramterCollection.parameters) {  				string group = p.Group;  				NamedParameter mParam = parameter;  				menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  					mParam.Group = group;  				});  			}  			menu.ShowAsContext ();  		}  		if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  			delete = parameter;  		}  		GUILayout.EndHorizontal ();  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (parameter != null) {  	SerializedObject paramObject = new SerializedObject (parameter);  	SerializedProperty prop = paramObject.FindProperty ("value");  	GUILayout.BeginHorizontal ();  	GUILayout.Space (16f);  	string name = paramObject.FindProperty ("parameterName").stringValue;  	if (parameter is ObjectParameter) {  		GUI.changed = false;  		ObjectParameter mParam = parameter as ObjectParameter;  		if (!mParam.FromSceneInstance) {  			mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  		}  		else {  			GUILayout.Label (name' GUILayout.Width (136));  			GUIStyle style = new GUIStyle ("label");  			style.fixedHeight = 0;  			style.wordWrap = true;  			style.alignment = TextAnchor.UpperLeft;  			GUILayout.Label (mParam.Reference' style);  			GUILayout.FlexibleSpace ();  		}  		if (GUI.changed) {  			if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  				mParam.FromSceneInstance = true;  				mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  				AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  				if (mTemp == null) {  					mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  				}  				mTemp.paramterName = mParam.Name;  			}  			EditorUtility.SetDirty (mParam);  		}  	}  	else {  		paramObject.Update ();  		if (prop != null) {  			EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  		}  		paramObject.ApplyModifiedProperties ();  	}  	if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  		if (i < groupParameters [kvp.Key].Count) {  			int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  			paramterCollection.parameters.Move (indexToMove' 0);  			EditorUtility.SetDirty (paramterCollection);  		}  	}  	if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  		if (i > 0) {  			int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  			paramterCollection.parameters.Move (indexToMove' 1);  			EditorUtility.SetDirty (paramterCollection);  		}  	}  	if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  		GenericMenu menu = new GenericMenu ();  		foreach (NamedParameter p in paramterCollection.parameters) {  			string group = p.Group;  			NamedParameter mParam = parameter;  			menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  				mParam.Group = group;  			});  		}  		menu.ShowAsContext ();  	}  	if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  		delete = parameter;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (parameter != null) {  	SerializedObject paramObject = new SerializedObject (parameter);  	SerializedProperty prop = paramObject.FindProperty ("value");  	GUILayout.BeginHorizontal ();  	GUILayout.Space (16f);  	string name = paramObject.FindProperty ("parameterName").stringValue;  	if (parameter is ObjectParameter) {  		GUI.changed = false;  		ObjectParameter mParam = parameter as ObjectParameter;  		if (!mParam.FromSceneInstance) {  			mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  		}  		else {  			GUILayout.Label (name' GUILayout.Width (136));  			GUIStyle style = new GUIStyle ("label");  			style.fixedHeight = 0;  			style.wordWrap = true;  			style.alignment = TextAnchor.UpperLeft;  			GUILayout.Label (mParam.Reference' style);  			GUILayout.FlexibleSpace ();  		}  		if (GUI.changed) {  			if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  				mParam.FromSceneInstance = true;  				mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  				AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  				if (mTemp == null) {  					mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  				}  				mTemp.paramterName = mParam.Name;  			}  			EditorUtility.SetDirty (mParam);  		}  	}  	else {  		paramObject.Update ();  		if (prop != null) {  			EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  		}  		paramObject.ApplyModifiedProperties ();  	}  	if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  		if (i < groupParameters [kvp.Key].Count) {  			int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  			paramterCollection.parameters.Move (indexToMove' 0);  			EditorUtility.SetDirty (paramterCollection);  		}  	}  	if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  		if (i > 0) {  			int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  			paramterCollection.parameters.Move (indexToMove' 1);  			EditorUtility.SetDirty (paramterCollection);  		}  	}  	if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  		GenericMenu menu = new GenericMenu ();  		foreach (NamedParameter p in paramterCollection.parameters) {  			string group = p.Group;  			NamedParameter mParam = parameter;  			menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  				mParam.Group = group;  			});  		}  		menu.ShowAsContext ();  	}  	if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  		delete = parameter;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (parameter != null) {  	SerializedObject paramObject = new SerializedObject (parameter);  	SerializedProperty prop = paramObject.FindProperty ("value");  	GUILayout.BeginHorizontal ();  	GUILayout.Space (16f);  	string name = paramObject.FindProperty ("parameterName").stringValue;  	if (parameter is ObjectParameter) {  		GUI.changed = false;  		ObjectParameter mParam = parameter as ObjectParameter;  		if (!mParam.FromSceneInstance) {  			mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  		}  		else {  			GUILayout.Label (name' GUILayout.Width (136));  			GUIStyle style = new GUIStyle ("label");  			style.fixedHeight = 0;  			style.wordWrap = true;  			style.alignment = TextAnchor.UpperLeft;  			GUILayout.Label (mParam.Reference' style);  			GUILayout.FlexibleSpace ();  		}  		if (GUI.changed) {  			if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  				mParam.FromSceneInstance = true;  				mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  				AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  				if (mTemp == null) {  					mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  				}  				mTemp.paramterName = mParam.Name;  			}  			EditorUtility.SetDirty (mParam);  		}  	}  	else {  		paramObject.Update ();  		if (prop != null) {  			EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  		}  		paramObject.ApplyModifiedProperties ();  	}  	if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  		if (i < groupParameters [kvp.Key].Count) {  			int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  			paramterCollection.parameters.Move (indexToMove' 0);  			EditorUtility.SetDirty (paramterCollection);  		}  	}  	if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  		if (i > 0) {  			int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  			paramterCollection.parameters.Move (indexToMove' 1);  			EditorUtility.SetDirty (paramterCollection);  		}  	}  	if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  		GenericMenu menu = new GenericMenu ();  		foreach (NamedParameter p in paramterCollection.parameters) {  			string group = p.Group;  			NamedParameter mParam = parameter;  			menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  				mParam.Group = group;  			});  		}  		menu.ShowAsContext ();  	}  	if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  		delete = parameter;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (parameter != null) {  	SerializedObject paramObject = new SerializedObject (parameter);  	SerializedProperty prop = paramObject.FindProperty ("value");  	GUILayout.BeginHorizontal ();  	GUILayout.Space (16f);  	string name = paramObject.FindProperty ("parameterName").stringValue;  	if (parameter is ObjectParameter) {  		GUI.changed = false;  		ObjectParameter mParam = parameter as ObjectParameter;  		if (!mParam.FromSceneInstance) {  			mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  		}  		else {  			GUILayout.Label (name' GUILayout.Width (136));  			GUIStyle style = new GUIStyle ("label");  			style.fixedHeight = 0;  			style.wordWrap = true;  			style.alignment = TextAnchor.UpperLeft;  			GUILayout.Label (mParam.Reference' style);  			GUILayout.FlexibleSpace ();  		}  		if (GUI.changed) {  			if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  				mParam.FromSceneInstance = true;  				mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  				AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  				if (mTemp == null) {  					mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  				}  				mTemp.paramterName = mParam.Name;  			}  			EditorUtility.SetDirty (mParam);  		}  	}  	else {  		paramObject.Update ();  		if (prop != null) {  			EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  		}  		paramObject.ApplyModifiedProperties ();  	}  	if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  		if (i < groupParameters [kvp.Key].Count) {  			int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  			paramterCollection.parameters.Move (indexToMove' 0);  			EditorUtility.SetDirty (paramterCollection);  		}  	}  	if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  		if (i > 0) {  			int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  			paramterCollection.parameters.Move (indexToMove' 1);  			EditorUtility.SetDirty (paramterCollection);  		}  	}  	if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  		GenericMenu menu = new GenericMenu ();  		foreach (NamedParameter p in paramterCollection.parameters) {  			string group = p.Group;  			NamedParameter mParam = parameter;  			menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  				mParam.Group = group;  			});  		}  		menu.ShowAsContext ();  	}  	if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  		delete = parameter;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (parameter != null) {  	SerializedObject paramObject = new SerializedObject (parameter);  	SerializedProperty prop = paramObject.FindProperty ("value");  	GUILayout.BeginHorizontal ();  	GUILayout.Space (16f);  	string name = paramObject.FindProperty ("parameterName").stringValue;  	if (parameter is ObjectParameter) {  		GUI.changed = false;  		ObjectParameter mParam = parameter as ObjectParameter;  		if (!mParam.FromSceneInstance) {  			mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  		}  		else {  			GUILayout.Label (name' GUILayout.Width (136));  			GUIStyle style = new GUIStyle ("label");  			style.fixedHeight = 0;  			style.wordWrap = true;  			style.alignment = TextAnchor.UpperLeft;  			GUILayout.Label (mParam.Reference' style);  			GUILayout.FlexibleSpace ();  		}  		if (GUI.changed) {  			if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  				mParam.FromSceneInstance = true;  				mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  				AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  				if (mTemp == null) {  					mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  				}  				mTemp.paramterName = mParam.Name;  			}  			EditorUtility.SetDirty (mParam);  		}  	}  	else {  		paramObject.Update ();  		if (prop != null) {  			EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  		}  		paramObject.ApplyModifiedProperties ();  	}  	if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  		if (i < groupParameters [kvp.Key].Count) {  			int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  			paramterCollection.parameters.Move (indexToMove' 0);  			EditorUtility.SetDirty (paramterCollection);  		}  	}  	if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  		if (i > 0) {  			int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  			paramterCollection.parameters.Move (indexToMove' 1);  			EditorUtility.SetDirty (paramterCollection);  		}  	}  	if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  		GenericMenu menu = new GenericMenu ();  		foreach (NamedParameter p in paramterCollection.parameters) {  			string group = p.Group;  			NamedParameter mParam = parameter;  			menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  				mParam.Group = group;  			});  		}  		menu.ShowAsContext ();  	}  	if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  		delete = parameter;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (parameter is ObjectParameter) {  	GUI.changed = false;  	ObjectParameter mParam = parameter as ObjectParameter;  	if (!mParam.FromSceneInstance) {  		mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  	}  	else {  		GUILayout.Label (name' GUILayout.Width (136));  		GUIStyle style = new GUIStyle ("label");  		style.fixedHeight = 0;  		style.wordWrap = true;  		style.alignment = TextAnchor.UpperLeft;  		GUILayout.Label (mParam.Reference' style);  		GUILayout.FlexibleSpace ();  	}  	if (GUI.changed) {  		if (!EditorUtility.IsPersistent (mParam.Value) && mParam.Value is GameObject) {  			mParam.FromSceneInstance = true;  			mParam.Reference = mParam.Value.name + "(" + EditorApplication.currentScene + ")";  			AddToParameterCollection mTemp = ((GameObject)mParam.Value).GetComponent<AddToParameterCollection> ();  			if (mTemp == null) {  				mTemp = ((GameObject)mParam.Value).AddComponent<AddToParameterCollection> ();  			}  			mTemp.paramterName = mParam.Name;  		}  		EditorUtility.SetDirty (mParam);  	}  }  else {  	paramObject.Update ();  	if (prop != null) {  		EditorGUILayout.PropertyField (prop' new GUIContent (name)' true);  	}  	paramObject.ApplyModifiedProperties ();  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (!mParam.FromSceneInstance) {  	mParam.Value = EditorGUILayout.ObjectField (name' mParam.Value' typeof(UnityEngine.Object)' true);  }  else {  	GUILayout.Label (name' GUILayout.Width (136));  	GUIStyle style = new GUIStyle ("label");  	style.fixedHeight = 0;  	style.wordWrap = true;  	style.alignment = TextAnchor.UpperLeft;  	GUILayout.Label (mParam.Reference' style);  	GUILayout.FlexibleSpace ();  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: GUILayout.Label (name' GUILayout.Width (136));  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (GUILayout.Button ("down"' EditorStyles.toolbarButton' GUILayout.Width (35))) {  	if (i < groupParameters [kvp.Key].Count) {  		int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  		paramterCollection.parameters.Move (indexToMove' 0);  		EditorUtility.SetDirty (paramterCollection);  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (GUILayout.Button ("up"' EditorStyles.toolbarButton' GUILayout.Width (20))) {  	if (i > 0) {  		int indexToMove = paramterCollection.parameters.FindIndex (x => x.Name == parameter.Name);  		paramterCollection.parameters.Move (indexToMove' 1);  		EditorUtility.SetDirty (paramterCollection);  	}  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (GUILayout.Button (parameter.Group' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  	GenericMenu menu = new GenericMenu ();  	foreach (NamedParameter p in paramterCollection.parameters) {  		string group = p.Group;  		NamedParameter mParam = parameter;  		menu.AddItem (new GUIContent (group)' mParam.Group == group' delegate () {  			mParam.Group = group;  		});  	}  	menu.ShowAsContext ();  }  
Magic Number,StateMachine,GlobalParameterEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GlobalParameterEditor.cs,DrawParameters,The following statement contains a magic number: if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label"' GUILayout.Width (20))) {  	delete = parameter;  }  
Magic Number,StateMachine,GraphEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GraphEditor.cs,DragGraph,The following statement contains a magic number: if (ev.button != 2) {  	return;  }  
Magic Number,StateMachine,GraphEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GraphEditor.cs,DrawConnection,The following statement contains a magic number: if (offset) {  	start = start + cross * 6;  	end = end + cross * 6;  }  
Magic Number,StateMachine,GraphEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GraphEditor.cs,DrawConnection,The following statement contains a magic number: if (offset) {  	start = start + cross * 6;  	end = end + cross * 6;  }  
Magic Number,StateMachine,GraphEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GraphEditor.cs,DrawConnection,The following statement contains a magic number: start = start + cross * 6;  
Magic Number,StateMachine,GraphEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GraphEditor.cs,DrawConnection,The following statement contains a magic number: end = end + cross * 6;  
Magic Number,StateMachine,GraphEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GraphEditor.cs,DrawArrow,The following statement contains a magic number: rect.y += scrollPosition.y - 15;  
Magic Number,StateMachine,GraphEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GraphEditor.cs,DrawArrow,The following statement contains a magic number: GL.Vertex (vector3Array [2]);  
Magic Number,StateMachine,MainToolbar,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MainToolbar.cs,OnGUI,The following statement contains a magic number: if (GUILayout.Button ("Lock"' (lockSelection ? (GUIStyle)"TE toolbarbutton" : EditorStyles.toolbarButton)' GUILayout.Width (50))) {  	lockSelection = !lockSelection;  	PreferencesEditor.SetBool (Preference.LockSelection' lockSelection);  }  
Magic Number,StateMachine,MainToolbar,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MainToolbar.cs,OnGUI,The following statement contains a magic number: if (GUILayout.Button ("Tools"' EditorStyles.toolbarDropDown' GUILayout.Width (50))) {  	GenericMenu menu = new GenericMenu ();  	menu.AddItem (new GUIContent ("Global Parameter Editor")' false' delegate () {  		GlobalParameterEditor.ShowWindow ();  	});  	menu.AddItem (new GUIContent ("Action Browser")' false' delegate () {  		ActionBrowser.ShowWindow ();  	});  	menu.AddItem (new GUIContent ("Condition Browser")' false' delegate () {  		ConditionBrowser.ShowWindow ();  	});  	menu.ShowAsContext ();  }  
Magic Number,StateMachine,MainToolbar,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MainToolbar.cs,SelectGameObject,The following statement contains a magic number: if (GUILayout.Button (StateMachineWindow.StateMachineEditor.ActiveGameObject != null ? StateMachineWindow.StateMachineEditor.ActiveGameObject.name : "[None Selected]"' EditorStyles.toolbarDropDown' GUILayout.Width (100))) {  	GenericMenu toolsMenu = new GenericMenu ();  	List<StateMachineBehaviour> behaviours = FindInScene<StateMachineBehaviour> ();  	foreach (StateMachineBehaviour behaviour in behaviours) {  		if (behaviour.stateMachine != null) {  			StateMachine mStateMachine = ((EditorApplication.isPlaying && !EditorApplication.isPaused) ? behaviour.executingStateMachine : behaviour.stateMachine);  			//behaviour.stateMachine;  			GameObject mGameObject = behaviour.gameObject;  			toolsMenu.AddItem (new GUIContent (behaviour.name)' false' delegate () {  				StateMachineWindow.StateMachineEditor.ActiveGameObject = mGameObject;  				StateMachineWindow.StateMachineEditor.ActiveStateMachine = mStateMachine;  			});  		}  	}  	toolsMenu.DropDown (new Rect (Event.current.mousePosition.x' Event.current.mousePosition.y' 0' Event.current.mousePosition.y));  	EditorGUIUtility.ExitGUI ();  }  
Magic Number,StateMachine,MainToolbar,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MainToolbar.cs,SelectStateMachine,The following statement contains a magic number: if (GUILayout.Button (StateMachineWindow.StateMachineEditor.ActiveStateMachine != null ? StateMachineWindow.StateMachineEditor.ActiveStateMachine.name : "[None Selected]"' EditorStyles.toolbarDropDown' GUILayout.Width (100))) {  	GenericMenu toolsMenu = new GenericMenu ();  	if (StateMachineWindow.StateMachineEditor.ActiveGameObject != null) {  		foreach (StateMachineBehaviour behaviour in StateMachineWindow.StateMachineEditor.ActiveGameObject.GetComponents<StateMachineBehaviour> ()) {  			if (behaviour.stateMachine != null) {  				StateMachine mStateMachine = ((EditorApplication.isPlaying && !EditorApplication.isPaused) ? behaviour.executingStateMachine : behaviour.stateMachine);  				// behaviour.stateMachine;  				toolsMenu.AddItem (new GUIContent (mStateMachine.name)' false' delegate () {  					StateMachineWindow.StateMachineEditor.ActiveStateMachine = mStateMachine;  				});  			}  		}  	}  	toolsMenu.AddItem (new GUIContent ("[Create New]")' false' delegate () {  		StateMachine stateMachine = StateMachineUtility.CreateStateMachine (true);  		StateMachineWindow.instance.SetStateMachine (stateMachine);  	});  	toolsMenu.DropDown (new Rect (Event.current.mousePosition.x' Event.current.mousePosition.y' 0' Event.current.mousePosition.y));  	EditorGUIUtility.ExitGUI ();  }  
Magic Number,StateMachine,MouseInstruction,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MouseInstruction.cs,DoMouseInstruction,The following statement contains a magic number: if (!string.IsNullOrEmpty (mouseInstruction)) {  	GUIContent content = new GUIContent (mouseInstruction);  	float height = FsmStyles.WrappedLabel.CalcHeight (content' 200);  	GUI.Label (new Rect (Event.current.mousePosition.x + 10' Event.current.mousePosition.y - height * 0.5f + 10' 200' height)' content' FsmStyles.WrappedLabel);  	return true;  }  
Magic Number,StateMachine,MouseInstruction,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MouseInstruction.cs,DoMouseInstruction,The following statement contains a magic number: if (!string.IsNullOrEmpty (mouseInstruction)) {  	GUIContent content = new GUIContent (mouseInstruction);  	float height = FsmStyles.WrappedLabel.CalcHeight (content' 200);  	GUI.Label (new Rect (Event.current.mousePosition.x + 10' Event.current.mousePosition.y - height * 0.5f + 10' 200' height)' content' FsmStyles.WrappedLabel);  	return true;  }  
Magic Number,StateMachine,MouseInstruction,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MouseInstruction.cs,DoMouseInstruction,The following statement contains a magic number: if (!string.IsNullOrEmpty (mouseInstruction)) {  	GUIContent content = new GUIContent (mouseInstruction);  	float height = FsmStyles.WrappedLabel.CalcHeight (content' 200);  	GUI.Label (new Rect (Event.current.mousePosition.x + 10' Event.current.mousePosition.y - height * 0.5f + 10' 200' height)' content' FsmStyles.WrappedLabel);  	return true;  }  
Magic Number,StateMachine,MouseInstruction,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MouseInstruction.cs,DoMouseInstruction,The following statement contains a magic number: if (!string.IsNullOrEmpty (mouseInstruction)) {  	GUIContent content = new GUIContent (mouseInstruction);  	float height = FsmStyles.WrappedLabel.CalcHeight (content' 200);  	GUI.Label (new Rect (Event.current.mousePosition.x + 10' Event.current.mousePosition.y - height * 0.5f + 10' 200' height)' content' FsmStyles.WrappedLabel);  	return true;  }  
Magic Number,StateMachine,MouseInstruction,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MouseInstruction.cs,DoMouseInstruction,The following statement contains a magic number: GUI.Label (new Rect (Event.current.mousePosition.x + 10' Event.current.mousePosition.y - height * 0.5f + 10' 200' height)' content' FsmStyles.WrappedLabel);  
Magic Number,StateMachine,MouseInstruction,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MouseInstruction.cs,DoMouseInstruction,The following statement contains a magic number: GUI.Label (new Rect (Event.current.mousePosition.x + 10' Event.current.mousePosition.y - height * 0.5f + 10' 200' height)' content' FsmStyles.WrappedLabel);  
Magic Number,StateMachine,MouseInstruction,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\MouseInstruction.cs,DoMouseInstruction,The following statement contains a magic number: GUI.Label (new Rect (Event.current.mousePosition.x + 10' Event.current.mousePosition.y - height * 0.5f + 10' 200' height)' content' FsmStyles.WrappedLabel);  
Magic Number,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnEnable,The following statement contains a magic number: transitionList.onDrawHeaderContent = delegate (Rect rect) {  	GUI.Label (new Rect (rect.width - 25' rect.y + 3' 50' 20)' "Mute");  };  
Magic Number,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnEnable,The following statement contains a magic number: transitionList.onDrawHeaderContent = delegate (Rect rect) {  	GUI.Label (new Rect (rect.width - 25' rect.y + 3' 50' 20)' "Mute");  };  
Magic Number,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnEnable,The following statement contains a magic number: transitionList.onDrawHeaderContent = delegate (Rect rect) {  	GUI.Label (new Rect (rect.width - 25' rect.y + 3' 50' 20)' "Mute");  };  
Magic Number,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnEnable,The following statement contains a magic number: transitionList.onDrawHeaderContent = delegate (Rect rect) {  	GUI.Label (new Rect (rect.width - 25' rect.y + 3' 50' 20)' "Mute");  };  
Magic Number,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnEnable,The following statement contains a magic number: GUI.Label (new Rect (rect.width - 25' rect.y + 3' 50' 20)' "Mute");  
Magic Number,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnEnable,The following statement contains a magic number: GUI.Label (new Rect (rect.width - 25' rect.y + 3' 50' 20)' "Mute");  
Magic Number,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnEnable,The following statement contains a magic number: GUI.Label (new Rect (rect.width - 25' rect.y + 3' 50' 20)' "Mute");  
Magic Number,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnEnable,The following statement contains a magic number: GUI.Label (new Rect (rect.width - 25' rect.y + 3' 50' 20)' "Mute");  
Magic Number,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnHeaderGUI,The following statement contains a magic number: EditorGUIUtility.labelWidth = 50;  
Magic Number,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnHeaderGUI,The following statement contains a magic number: if (!state.isDefaultState && !(state is AnyState)) {  	GUIStyle style = FsmStyles.GetNodeStyle ((FsmStyles.Color)state.color' false);  	Rect rect = GUILayoutUtility.GetRect (25' 17' style);  	rect.y += 1;  	if (GUI.Button (rect' GUIContent.none' style)) {  		GenericMenu menu = new GenericMenu ();  		foreach (FsmStyles.Color color in System.Enum.GetValues (typeof(FsmStyles.Color))) {  			if (color != FsmStyles.Color.Aqua && color != FsmStyles.Color.Orange) {  				int mColor = (int)color;  				menu.AddItem (new GUIContent (color.ToString ())' state.color == mColor' delegate () {  					state.color = mColor;  				});  			}  		}  		menu.ShowAsContext ();  	}  }  
Magic Number,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnHeaderGUI,The following statement contains a magic number: if (!state.isDefaultState && !(state is AnyState)) {  	GUIStyle style = FsmStyles.GetNodeStyle ((FsmStyles.Color)state.color' false);  	Rect rect = GUILayoutUtility.GetRect (25' 17' style);  	rect.y += 1;  	if (GUI.Button (rect' GUIContent.none' style)) {  		GenericMenu menu = new GenericMenu ();  		foreach (FsmStyles.Color color in System.Enum.GetValues (typeof(FsmStyles.Color))) {  			if (color != FsmStyles.Color.Aqua && color != FsmStyles.Color.Orange) {  				int mColor = (int)color;  				menu.AddItem (new GUIContent (color.ToString ())' state.color == mColor' delegate () {  					state.color = mColor;  				});  			}  		}  		menu.ShowAsContext ();  	}  }  
Magic Number,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnHeaderGUI,The following statement contains a magic number: state.description = EditorGUILayout.TextArea (state.description' GUILayout.MinHeight (45));  
Magic Number,StateMachine,StateMachineBehaviourInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineBehaviourInspector.cs,OnInspectorGUI,The following statement contains a magic number: if (behaviour.stateMachine != null) {  	GUILayout.Label ("Description:");  	behaviour.stateMachine.description = EditorGUILayout.TextArea (behaviour.stateMachine.description' GUILayout.MinHeight (60));  }  
Magic Number,StateMachine,StateMachineBehaviourInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineBehaviourInspector.cs,OnInspectorGUI,The following statement contains a magic number: behaviour.stateMachine.description = EditorGUILayout.TextArea (behaviour.stateMachine.description' GUILayout.MinHeight (60));  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: this.graphRect = new Rect (position.x' position.y + 18' position.width' position.height - 18);  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: this.graphRect = new Rect (position.x' position.y + 18' position.width' position.height - 18);  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: DoHelp (new Rect (position.width - 260' 0' 260' position.height));  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: DoHelp (new Rect (position.width - 260' 0' 260' position.height));  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: DoInfo (PreferencesEditor.GetBool (Preference.ShowShortcuts) ? new Rect (position.width - 260 - 265' 0' 260' position.height) : new Rect (position.width - 260' 0' 260' position.height));  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: DoInfo (PreferencesEditor.GetBool (Preference.ShowShortcuts) ? new Rect (position.width - 260 - 265' 0' 260' position.height) : new Rect (position.width - 260' 0' 260' position.height));  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: DoInfo (PreferencesEditor.GetBool (Preference.ShowShortcuts) ? new Rect (position.width - 260 - 265' 0' 260' position.height) : new Rect (position.width - 260' 0' 260' position.height));  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: DoInfo (PreferencesEditor.GetBool (Preference.ShowShortcuts) ? new Rect (position.width - 260 - 265' 0' 260' position.height) : new Rect (position.width - 260' 0' 260' position.height));  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: DoInfo (PreferencesEditor.GetBool (Preference.ShowShortcuts) ? new Rect (position.width - 260 - 265' 0' 260' position.height) : new Rect (position.width - 260' 0' 260' position.height));  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: if (ActiveStateMachine != null)  	GUI.Label (new Rect (5' 20' 300' 200)' ActiveStateMachine.description' FsmStyles.DescriptionLabel);  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: if (ActiveStateMachine != null)  	GUI.Label (new Rect (5' 20' 300' 200)' ActiveStateMachine.description' FsmStyles.DescriptionLabel);  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: if (ActiveStateMachine != null)  	GUI.Label (new Rect (5' 20' 300' 200)' ActiveStateMachine.description' FsmStyles.DescriptionLabel);  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: if (ActiveStateMachine != null)  	GUI.Label (new Rect (5' 20' 300' 200)' ActiveStateMachine.description' FsmStyles.DescriptionLabel);  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: GUI.Label (new Rect (5' 20' 300' 200)' ActiveStateMachine.description' FsmStyles.DescriptionLabel);  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: GUI.Label (new Rect (5' 20' 300' 200)' ActiveStateMachine.description' FsmStyles.DescriptionLabel);  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: GUI.Label (new Rect (5' 20' 300' 200)' ActiveStateMachine.description' FsmStyles.DescriptionLabel);  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoOnGUI,The following statement contains a magic number: GUI.Label (new Rect (5' 20' 300' 200)' ActiveStateMachine.description' FsmStyles.DescriptionLabel);  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,HelpGUI,The following statement contains a magic number: GUILayout.Label (title' FsmStyles.ShortcutLabel' GUILayout.Width (130));  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,InfoGUI,The following statement contains a magic number: GUILayout.Label (title' FsmStyles.ShortcutLabel' GUILayout.Width (130));  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,GetParametersHeight,The following statement contains a magic number: return 22 + (foldOut ? 22 * cnt + (cnt == 0 ? 1 : 0) * 22 : 0);  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,GetParametersHeight,The following statement contains a magic number: return 22 + (foldOut ? 22 * cnt + (cnt == 0 ? 1 : 0) * 22 : 0);  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,GetParametersHeight,The following statement contains a magic number: return 22 + (foldOut ? 22 * cnt + (cnt == 0 ? 1 : 0) * 22 : 0);  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The following statement contains a magic number: rect.width += 3;  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The following statement contains a magic number: if (state) {  	parameterScroll = GUILayout.BeginScrollView (parameterScroll);  	GUIStyle style = new GUIStyle ("PopupCurveSwatchBackground");  	style.padding = new RectOffset ();  	GUILayout.BeginVertical (style' GUILayout.ExpandWidth (true));  	int deleteIndex = -1;  	if (ActiveStateMachine.parameters != null && ActiveStateMachine.parameters.Count > 0) {  		for (int i = 0; i < ActiveStateMachine.parameters.Count; i++) {  			NamedParameter parameter = ActiveStateMachine.parameters [i];  			SerializedObject paramObject = new SerializedObject (parameter);  			SerializedProperty prop = paramObject.FindProperty ("value");  			GUILayout.BeginHorizontal ();  			paramObject.Update ();  			if (prop != null && prop.isArray && parameter.GetType () != typeof(StringParameter)) {  				prop.isExpanded = EditorGUILayout.Toggle (GUIContent.none' prop.isExpanded' "foldout"' GUILayout.Width (17));  			}  			EditorGUILayout.PropertyField (paramObject.FindProperty ("parameterName")' GUIContent.none' true);  			if (prop != null) {  				if (parameter is BoolParameter) {  					EditorGUILayout.PropertyField (prop' GUIContent.none' true' GUILayout.Width (20));  				}  				else {  					if (!prop.isArray || parameter.GetType () == typeof(StringParameter))  						EditorGUILayout.PropertyField (prop' GUIContent.none' false);  				}  			}  			GUILayout.FlexibleSpace ();  			if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label")) {  				deleteIndex = i;  			}  			GUILayout.EndHorizontal ();  			if (prop != null && prop.isArray && prop.isExpanded && parameter.GetType () != typeof(StringParameter)) {  				EditorGUILayout.PropertyField (prop.FindPropertyRelative ("Array.size"));  				for (int element = 0; element < prop.arraySize; element++) {  					SerializedProperty mProp = prop.GetArrayElementAtIndex (element);  					if (mProp != null)  						EditorGUILayout.PropertyField (mProp' GUIContent.none' true);  				}  			}  			paramObject.ApplyModifiedProperties ();  		}  	}  	else {  		GUILayout.Label ("List is Empty");  	}  	if (deleteIndex != -1) {  		StateMachineUtility.RecordUndo (ActiveStateMachine);  		DestroyImmediate (ActiveStateMachine.parameters [deleteIndex]' true);  		ActiveStateMachine.parameters.RemoveAt (deleteIndex);  		AssetDatabase.SaveAssets ();  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The following statement contains a magic number: if (state) {  	parameterScroll = GUILayout.BeginScrollView (parameterScroll);  	GUIStyle style = new GUIStyle ("PopupCurveSwatchBackground");  	style.padding = new RectOffset ();  	GUILayout.BeginVertical (style' GUILayout.ExpandWidth (true));  	int deleteIndex = -1;  	if (ActiveStateMachine.parameters != null && ActiveStateMachine.parameters.Count > 0) {  		for (int i = 0; i < ActiveStateMachine.parameters.Count; i++) {  			NamedParameter parameter = ActiveStateMachine.parameters [i];  			SerializedObject paramObject = new SerializedObject (parameter);  			SerializedProperty prop = paramObject.FindProperty ("value");  			GUILayout.BeginHorizontal ();  			paramObject.Update ();  			if (prop != null && prop.isArray && parameter.GetType () != typeof(StringParameter)) {  				prop.isExpanded = EditorGUILayout.Toggle (GUIContent.none' prop.isExpanded' "foldout"' GUILayout.Width (17));  			}  			EditorGUILayout.PropertyField (paramObject.FindProperty ("parameterName")' GUIContent.none' true);  			if (prop != null) {  				if (parameter is BoolParameter) {  					EditorGUILayout.PropertyField (prop' GUIContent.none' true' GUILayout.Width (20));  				}  				else {  					if (!prop.isArray || parameter.GetType () == typeof(StringParameter))  						EditorGUILayout.PropertyField (prop' GUIContent.none' false);  				}  			}  			GUILayout.FlexibleSpace ();  			if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label")) {  				deleteIndex = i;  			}  			GUILayout.EndHorizontal ();  			if (prop != null && prop.isArray && prop.isExpanded && parameter.GetType () != typeof(StringParameter)) {  				EditorGUILayout.PropertyField (prop.FindPropertyRelative ("Array.size"));  				for (int element = 0; element < prop.arraySize; element++) {  					SerializedProperty mProp = prop.GetArrayElementAtIndex (element);  					if (mProp != null)  						EditorGUILayout.PropertyField (mProp' GUIContent.none' true);  				}  			}  			paramObject.ApplyModifiedProperties ();  		}  	}  	else {  		GUILayout.Label ("List is Empty");  	}  	if (deleteIndex != -1) {  		StateMachineUtility.RecordUndo (ActiveStateMachine);  		DestroyImmediate (ActiveStateMachine.parameters [deleteIndex]' true);  		ActiveStateMachine.parameters.RemoveAt (deleteIndex);  		AssetDatabase.SaveAssets ();  	}  	GUILayout.EndVertical ();  	GUILayout.EndScrollView ();  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The following statement contains a magic number: if (ActiveStateMachine.parameters != null && ActiveStateMachine.parameters.Count > 0) {  	for (int i = 0; i < ActiveStateMachine.parameters.Count; i++) {  		NamedParameter parameter = ActiveStateMachine.parameters [i];  		SerializedObject paramObject = new SerializedObject (parameter);  		SerializedProperty prop = paramObject.FindProperty ("value");  		GUILayout.BeginHorizontal ();  		paramObject.Update ();  		if (prop != null && prop.isArray && parameter.GetType () != typeof(StringParameter)) {  			prop.isExpanded = EditorGUILayout.Toggle (GUIContent.none' prop.isExpanded' "foldout"' GUILayout.Width (17));  		}  		EditorGUILayout.PropertyField (paramObject.FindProperty ("parameterName")' GUIContent.none' true);  		if (prop != null) {  			if (parameter is BoolParameter) {  				EditorGUILayout.PropertyField (prop' GUIContent.none' true' GUILayout.Width (20));  			}  			else {  				if (!prop.isArray || parameter.GetType () == typeof(StringParameter))  					EditorGUILayout.PropertyField (prop' GUIContent.none' false);  			}  		}  		GUILayout.FlexibleSpace ();  		if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label")) {  			deleteIndex = i;  		}  		GUILayout.EndHorizontal ();  		if (prop != null && prop.isArray && prop.isExpanded && parameter.GetType () != typeof(StringParameter)) {  			EditorGUILayout.PropertyField (prop.FindPropertyRelative ("Array.size"));  			for (int element = 0; element < prop.arraySize; element++) {  				SerializedProperty mProp = prop.GetArrayElementAtIndex (element);  				if (mProp != null)  					EditorGUILayout.PropertyField (mProp' GUIContent.none' true);  			}  		}  		paramObject.ApplyModifiedProperties ();  	}  }  else {  	GUILayout.Label ("List is Empty");  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The following statement contains a magic number: if (ActiveStateMachine.parameters != null && ActiveStateMachine.parameters.Count > 0) {  	for (int i = 0; i < ActiveStateMachine.parameters.Count; i++) {  		NamedParameter parameter = ActiveStateMachine.parameters [i];  		SerializedObject paramObject = new SerializedObject (parameter);  		SerializedProperty prop = paramObject.FindProperty ("value");  		GUILayout.BeginHorizontal ();  		paramObject.Update ();  		if (prop != null && prop.isArray && parameter.GetType () != typeof(StringParameter)) {  			prop.isExpanded = EditorGUILayout.Toggle (GUIContent.none' prop.isExpanded' "foldout"' GUILayout.Width (17));  		}  		EditorGUILayout.PropertyField (paramObject.FindProperty ("parameterName")' GUIContent.none' true);  		if (prop != null) {  			if (parameter is BoolParameter) {  				EditorGUILayout.PropertyField (prop' GUIContent.none' true' GUILayout.Width (20));  			}  			else {  				if (!prop.isArray || parameter.GetType () == typeof(StringParameter))  					EditorGUILayout.PropertyField (prop' GUIContent.none' false);  			}  		}  		GUILayout.FlexibleSpace ();  		if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label")) {  			deleteIndex = i;  		}  		GUILayout.EndHorizontal ();  		if (prop != null && prop.isArray && prop.isExpanded && parameter.GetType () != typeof(StringParameter)) {  			EditorGUILayout.PropertyField (prop.FindPropertyRelative ("Array.size"));  			for (int element = 0; element < prop.arraySize; element++) {  				SerializedProperty mProp = prop.GetArrayElementAtIndex (element);  				if (mProp != null)  					EditorGUILayout.PropertyField (mProp' GUIContent.none' true);  			}  		}  		paramObject.ApplyModifiedProperties ();  	}  }  else {  	GUILayout.Label ("List is Empty");  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The following statement contains a magic number: for (int i = 0; i < ActiveStateMachine.parameters.Count; i++) {  	NamedParameter parameter = ActiveStateMachine.parameters [i];  	SerializedObject paramObject = new SerializedObject (parameter);  	SerializedProperty prop = paramObject.FindProperty ("value");  	GUILayout.BeginHorizontal ();  	paramObject.Update ();  	if (prop != null && prop.isArray && parameter.GetType () != typeof(StringParameter)) {  		prop.isExpanded = EditorGUILayout.Toggle (GUIContent.none' prop.isExpanded' "foldout"' GUILayout.Width (17));  	}  	EditorGUILayout.PropertyField (paramObject.FindProperty ("parameterName")' GUIContent.none' true);  	if (prop != null) {  		if (parameter is BoolParameter) {  			EditorGUILayout.PropertyField (prop' GUIContent.none' true' GUILayout.Width (20));  		}  		else {  			if (!prop.isArray || parameter.GetType () == typeof(StringParameter))  				EditorGUILayout.PropertyField (prop' GUIContent.none' false);  		}  	}  	GUILayout.FlexibleSpace ();  	if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label")) {  		deleteIndex = i;  	}  	GUILayout.EndHorizontal ();  	if (prop != null && prop.isArray && prop.isExpanded && parameter.GetType () != typeof(StringParameter)) {  		EditorGUILayout.PropertyField (prop.FindPropertyRelative ("Array.size"));  		for (int element = 0; element < prop.arraySize; element++) {  			SerializedProperty mProp = prop.GetArrayElementAtIndex (element);  			if (mProp != null)  				EditorGUILayout.PropertyField (mProp' GUIContent.none' true);  		}  	}  	paramObject.ApplyModifiedProperties ();  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The following statement contains a magic number: for (int i = 0; i < ActiveStateMachine.parameters.Count; i++) {  	NamedParameter parameter = ActiveStateMachine.parameters [i];  	SerializedObject paramObject = new SerializedObject (parameter);  	SerializedProperty prop = paramObject.FindProperty ("value");  	GUILayout.BeginHorizontal ();  	paramObject.Update ();  	if (prop != null && prop.isArray && parameter.GetType () != typeof(StringParameter)) {  		prop.isExpanded = EditorGUILayout.Toggle (GUIContent.none' prop.isExpanded' "foldout"' GUILayout.Width (17));  	}  	EditorGUILayout.PropertyField (paramObject.FindProperty ("parameterName")' GUIContent.none' true);  	if (prop != null) {  		if (parameter is BoolParameter) {  			EditorGUILayout.PropertyField (prop' GUIContent.none' true' GUILayout.Width (20));  		}  		else {  			if (!prop.isArray || parameter.GetType () == typeof(StringParameter))  				EditorGUILayout.PropertyField (prop' GUIContent.none' false);  		}  	}  	GUILayout.FlexibleSpace ();  	if (GUILayout.Button (EditorGUIUtility.FindTexture ("Toolbar Minus")' "label")) {  		deleteIndex = i;  	}  	GUILayout.EndHorizontal ();  	if (prop != null && prop.isArray && prop.isExpanded && parameter.GetType () != typeof(StringParameter)) {  		EditorGUILayout.PropertyField (prop.FindPropertyRelative ("Array.size"));  		for (int element = 0; element < prop.arraySize; element++) {  			SerializedProperty mProp = prop.GetArrayElementAtIndex (element);  			if (mProp != null)  				EditorGUILayout.PropertyField (mProp' GUIContent.none' true);  		}  	}  	paramObject.ApplyModifiedProperties ();  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The following statement contains a magic number: if (prop != null && prop.isArray && parameter.GetType () != typeof(StringParameter)) {  	prop.isExpanded = EditorGUILayout.Toggle (GUIContent.none' prop.isExpanded' "foldout"' GUILayout.Width (17));  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The following statement contains a magic number: prop.isExpanded = EditorGUILayout.Toggle (GUIContent.none' prop.isExpanded' "foldout"' GUILayout.Width (17));  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The following statement contains a magic number: if (prop != null) {  	if (parameter is BoolParameter) {  		EditorGUILayout.PropertyField (prop' GUIContent.none' true' GUILayout.Width (20));  	}  	else {  		if (!prop.isArray || parameter.GetType () == typeof(StringParameter))  			EditorGUILayout.PropertyField (prop' GUIContent.none' false);  	}  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The following statement contains a magic number: if (parameter is BoolParameter) {  	EditorGUILayout.PropertyField (prop' GUIContent.none' true' GUILayout.Width (20));  }  else {  	if (!prop.isArray || parameter.GetType () == typeof(StringParameter))  		EditorGUILayout.PropertyField (prop' GUIContent.none' false);  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoParameters,The following statement contains a magic number: EditorGUILayout.PropertyField (prop' GUIContent.none' true' GUILayout.Width (20));  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DrawState,The following statement contains a magic number: if (state != null) {  	GUI.Box (state.position' state.name' FsmStyles.GetNodeStyle (state.isDefaultState ? FsmStyles.Color.Orange : state.GetType () == typeof(AnyState) ? FsmStyles.Color.Aqua : (FsmStyles.Color)state.color' selectedStates.Contains (state)' false));  	if (!ValidateState (state) && Event.current.type != EventType.Layout) {  		GUI.Box (state.position' EditorGUIUtility.FindTexture ("console.warnicon")' "label");  	}  	DebugState (state);  	if (PreferencesEditor.GetBool (Preference.ShowStateDescription)) {  		GUILayout.BeginArea (new Rect (state.position.x' state.position.y + state.position.height' state.position.width' 500));  		GUILayout.Label (state.description' FsmStyles.WrappedLabel);  		GUILayout.EndArea ();  	}  	StateMachineGUI.StateContextMenu (state' this);  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DrawState,The following statement contains a magic number: if (PreferencesEditor.GetBool (Preference.ShowStateDescription)) {  	GUILayout.BeginArea (new Rect (state.position.x' state.position.y + state.position.height' state.position.width' 500));  	GUILayout.Label (state.description' FsmStyles.WrappedLabel);  	GUILayout.EndArea ();  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DrawState,The following statement contains a magic number: GUILayout.BeginArea (new Rect (state.position.x' state.position.y + state.position.height' state.position.width' 500));  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,Update,The following statement contains a magic number: if (EditorApplication.isPlaying) {  	debugProgress += Time.deltaTime * 30;  	if (debugProgress > 142) {  		debugProgress = 0;  	}  	StateMachineWindow.RepaintAll ();  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,Update,The following statement contains a magic number: if (EditorApplication.isPlaying) {  	debugProgress += Time.deltaTime * 30;  	if (debugProgress > 142) {  		debugProgress = 0;  	}  	StateMachineWindow.RepaintAll ();  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,Update,The following statement contains a magic number: debugProgress += Time.deltaTime * 30;  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,Update,The following statement contains a magic number: if (debugProgress > 142) {  	debugProgress = 0;  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DebugState,The following statement contains a magic number: if (currentState != null && EditorApplication.isPlaying && state.id == currentState.id) {  	if (debugState == null || debugState.id != state.id) {  		debugProgress = 0;  		debugState = state;  	}  	GUI.Box (new Rect (state.position.x + 5' state.position.y + 20' debugProgress' 5)' ""' "MeLivePlayBar");  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DebugState,The following statement contains a magic number: if (currentState != null && EditorApplication.isPlaying && state.id == currentState.id) {  	if (debugState == null || debugState.id != state.id) {  		debugProgress = 0;  		debugState = state;  	}  	GUI.Box (new Rect (state.position.x + 5' state.position.y + 20' debugProgress' 5)' ""' "MeLivePlayBar");  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DebugState,The following statement contains a magic number: if (currentState != null && EditorApplication.isPlaying && state.id == currentState.id) {  	if (debugState == null || debugState.id != state.id) {  		debugProgress = 0;  		debugState = state;  	}  	GUI.Box (new Rect (state.position.x + 5' state.position.y + 20' debugProgress' 5)' ""' "MeLivePlayBar");  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DebugState,The following statement contains a magic number: GUI.Box (new Rect (state.position.x + 5' state.position.y + 20' debugProgress' 5)' ""' "MeLivePlayBar");  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DebugState,The following statement contains a magic number: GUI.Box (new Rect (state.position.x + 5' state.position.y + 20' debugProgress' 5)' ""' "MeLivePlayBar");  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DebugState,The following statement contains a magic number: GUI.Box (new Rect (state.position.x + 5' state.position.y + 20' debugProgress' 5)' ""' "MeLivePlayBar");  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoTransition,The following statement contains a magic number: if (target != null && transitionIndex >= 0) {  	if (target.toState != null && target.fromState != null) {  		bool doOffset = target.toState.transitions != null && target.toState.transitions.Find (x => x.toState == target.fromState) != null;  		DrawConnection (target.fromState.position.center' target.toState.position.center' color' (hasMultiple ? 3 : 1)' doOffset);  	}  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoTransition,The following statement contains a magic number: if (target.toState != null && target.fromState != null) {  	bool doOffset = target.toState.transitions != null && target.toState.transitions.Find (x => x.toState == target.fromState) != null;  	DrawConnection (target.fromState.position.center' target.toState.position.center' color' (hasMultiple ? 3 : 1)' doOffset);  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DoTransition,The following statement contains a magic number: DrawConnection (target.fromState.position.center' target.toState.position.center' color' (hasMultiple ? 3 : 1)' doOffset);  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,AutoPan,The following statement contains a magic number: if (Event.current.mousePosition.x > graphRect.width + scrollPosition.x - 50) {  	offset.x -= speed;  	scrollPosition.x += speed;  	foreach (State state in selectedStates) {  		state.position.x += speed;  	}  	StateMachineWindow.RepaintAll ();  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,AutoPan,The following statement contains a magic number: if ((Event.current.mousePosition.x < scrollPosition.x + 50) && scrollPosition.x > 0) {  	offset.x += speed;  	scrollPosition.x -= speed;  	foreach (State state in selectedStates) {  		state.position.x -= speed;  	}  	StateMachineWindow.RepaintAll ();  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,AutoPan,The following statement contains a magic number: if (Event.current.mousePosition.y > graphRect.height + scrollPosition.y - 50) {  	offset.y -= speed;  	scrollPosition.y += speed;  	foreach (State state in selectedStates) {  		state.position.y += speed;  	}  	StateMachineWindow.RepaintAll ();  }  
Magic Number,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,AutoPan,The following statement contains a magic number: if ((Event.current.mousePosition.y < scrollPosition.y + 50) && scrollPosition.y > 0) {  	offset.y += speed;  	scrollPosition.y -= speed;  	foreach (State state in selectedStates) {  		state.position.y -= speed;  	}  	StateMachineWindow.RepaintAll ();  }  
Magic Number,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawTransition,The following statement contains a magic number: transition.mute = GUILayout.Toggle (transition.mute' GUIContent.none' GUILayout.Width (10));  
Magic Number,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawParameter,The following statement contains a magic number: if (!parameter.IsConstant) {  	StateMachine stateMachine = StateMachineWindow.StateMachineEditor.ActiveStateMachine;  	List<string> referenceNames = GetParameterReferenceNames (info' stateMachine);  	string postfix = string.Empty;  	Color color = GUI.backgroundColor;  	if (info.IsFieldRequired () && parameter.Reference == info.GetDefaultReference ().ToString ()) {  		GUI.backgroundColor = Color.red;  		postfix = " (" + info.FieldType.GetProperty ("Value").PropertyType.ToString ().Split ('.').Last () + ")";  		//" ("+info.FieldType.ToString().Split('.').Last()+")";  	}  	parameter.Reference = UnityEditorTools.StringPopup (content' parameter.Reference' postfix' referenceNames.ToArray ());  	GUI.backgroundColor = color;  }  else {  	SerializedObject parameterObject = GetSerializedObject (parameter);  	//new SerializedObject(parameter);  	parameterObject.Update ();  	SerializedProperty valueProp = StateMachineGUI.GetSerializedProperty (parameterObject' "value");  	//parameterObject.FindProperty("value");  	if (valueProp != null) {  		if (parameter is ObjectParameter) {  			Type type = info.GetObjectType ();  			if (type != null) {  				valueProp.objectReferenceValue = EditorGUILayout.ObjectField (content' valueProp.objectReferenceValue' type' !EditorUtility.IsPersistent (parameter));  			}  			else {  				EditorGUILayout.PropertyField (valueProp' content);  				parameter.Reference = string.Empty;  			}  		}  		else {  			EditorGUILayout.PropertyField (valueProp' content);  			parameter.Reference = string.Empty;  		}  	}  	parameterObject.ApplyModifiedProperties ();  	if (info.IsComponentInfo ()) {  		if (GUILayout.Button (GUIContent.none' "MiniPullDown"' GUILayout.Width (15))) {  			GenericMenu toolsMenu = new GenericMenu ();  			string[] names = ReflectionUtility.GetAllComponentNames ();  			foreach (string s in names) {  				string displayName = s.Split ('.').Last ();  				toolsMenu.AddItem (new GUIContent (displayName)' false' ApplyString' new object[] {  					parameter'  					s  				});  			}  			toolsMenu.DropDown (new Rect (Event.current.mousePosition.x' Event.current.mousePosition.y' 0' 0));  			EditorGUIUtility.ExitGUI ();  		}  	}  	Type reflectionReferenceType = info.GetReflectionReferenceFieldType (node);  	if (reflectionReferenceType != null && GUILayout.Button (GUIContent.none' "MiniPullDown"' GUILayout.Width (15))) {  		GenericMenu toolsMenu = new GenericMenu ();  		string[] names = GetReflectionTypeNames (info' true' reflectionReferenceType);  		foreach (string s in names) {  			toolsMenu.AddItem (new GUIContent (s)' false' ApplyString' new object[] {  				parameter'  				s  			});  		}  		if (names.Length == 0) {  			toolsMenu.AddItem (new GUIContent ("[None Found]")' false' delegate () {  			});  		}  		toolsMenu.DropDown (new Rect (Event.current.mousePosition.x' Event.current.mousePosition.y' 0' 0));  		EditorGUIUtility.ExitGUI ();  	}  }  
Magic Number,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawParameter,The following statement contains a magic number: if (!parameter.IsConstant) {  	StateMachine stateMachine = StateMachineWindow.StateMachineEditor.ActiveStateMachine;  	List<string> referenceNames = GetParameterReferenceNames (info' stateMachine);  	string postfix = string.Empty;  	Color color = GUI.backgroundColor;  	if (info.IsFieldRequired () && parameter.Reference == info.GetDefaultReference ().ToString ()) {  		GUI.backgroundColor = Color.red;  		postfix = " (" + info.FieldType.GetProperty ("Value").PropertyType.ToString ().Split ('.').Last () + ")";  		//" ("+info.FieldType.ToString().Split('.').Last()+")";  	}  	parameter.Reference = UnityEditorTools.StringPopup (content' parameter.Reference' postfix' referenceNames.ToArray ());  	GUI.backgroundColor = color;  }  else {  	SerializedObject parameterObject = GetSerializedObject (parameter);  	//new SerializedObject(parameter);  	parameterObject.Update ();  	SerializedProperty valueProp = StateMachineGUI.GetSerializedProperty (parameterObject' "value");  	//parameterObject.FindProperty("value");  	if (valueProp != null) {  		if (parameter is ObjectParameter) {  			Type type = info.GetObjectType ();  			if (type != null) {  				valueProp.objectReferenceValue = EditorGUILayout.ObjectField (content' valueProp.objectReferenceValue' type' !EditorUtility.IsPersistent (parameter));  			}  			else {  				EditorGUILayout.PropertyField (valueProp' content);  				parameter.Reference = string.Empty;  			}  		}  		else {  			EditorGUILayout.PropertyField (valueProp' content);  			parameter.Reference = string.Empty;  		}  	}  	parameterObject.ApplyModifiedProperties ();  	if (info.IsComponentInfo ()) {  		if (GUILayout.Button (GUIContent.none' "MiniPullDown"' GUILayout.Width (15))) {  			GenericMenu toolsMenu = new GenericMenu ();  			string[] names = ReflectionUtility.GetAllComponentNames ();  			foreach (string s in names) {  				string displayName = s.Split ('.').Last ();  				toolsMenu.AddItem (new GUIContent (displayName)' false' ApplyString' new object[] {  					parameter'  					s  				});  			}  			toolsMenu.DropDown (new Rect (Event.current.mousePosition.x' Event.current.mousePosition.y' 0' 0));  			EditorGUIUtility.ExitGUI ();  		}  	}  	Type reflectionReferenceType = info.GetReflectionReferenceFieldType (node);  	if (reflectionReferenceType != null && GUILayout.Button (GUIContent.none' "MiniPullDown"' GUILayout.Width (15))) {  		GenericMenu toolsMenu = new GenericMenu ();  		string[] names = GetReflectionTypeNames (info' true' reflectionReferenceType);  		foreach (string s in names) {  			toolsMenu.AddItem (new GUIContent (s)' false' ApplyString' new object[] {  				parameter'  				s  			});  		}  		if (names.Length == 0) {  			toolsMenu.AddItem (new GUIContent ("[None Found]")' false' delegate () {  			});  		}  		toolsMenu.DropDown (new Rect (Event.current.mousePosition.x' Event.current.mousePosition.y' 0' 0));  		EditorGUIUtility.ExitGUI ();  	}  }  
Magic Number,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawParameter,The following statement contains a magic number: if (info.IsComponentInfo ()) {  	if (GUILayout.Button (GUIContent.none' "MiniPullDown"' GUILayout.Width (15))) {  		GenericMenu toolsMenu = new GenericMenu ();  		string[] names = ReflectionUtility.GetAllComponentNames ();  		foreach (string s in names) {  			string displayName = s.Split ('.').Last ();  			toolsMenu.AddItem (new GUIContent (displayName)' false' ApplyString' new object[] {  				parameter'  				s  			});  		}  		toolsMenu.DropDown (new Rect (Event.current.mousePosition.x' Event.current.mousePosition.y' 0' 0));  		EditorGUIUtility.ExitGUI ();  	}  }  
Magic Number,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawParameter,The following statement contains a magic number: if (GUILayout.Button (GUIContent.none' "MiniPullDown"' GUILayout.Width (15))) {  	GenericMenu toolsMenu = new GenericMenu ();  	string[] names = ReflectionUtility.GetAllComponentNames ();  	foreach (string s in names) {  		string displayName = s.Split ('.').Last ();  		toolsMenu.AddItem (new GUIContent (displayName)' false' ApplyString' new object[] {  			parameter'  			s  		});  	}  	toolsMenu.DropDown (new Rect (Event.current.mousePosition.x' Event.current.mousePosition.y' 0' 0));  	EditorGUIUtility.ExitGUI ();  }  
Magic Number,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawParameter,The following statement contains a magic number: if (reflectionReferenceType != null && GUILayout.Button (GUIContent.none' "MiniPullDown"' GUILayout.Width (15))) {  	GenericMenu toolsMenu = new GenericMenu ();  	string[] names = GetReflectionTypeNames (info' true' reflectionReferenceType);  	foreach (string s in names) {  		toolsMenu.AddItem (new GUIContent (s)' false' ApplyString' new object[] {  			parameter'  			s  		});  	}  	if (names.Length == 0) {  		toolsMenu.AddItem (new GUIContent ("[None Found]")' false' delegate () {  		});  	}  	toolsMenu.DropDown (new Rect (Event.current.mousePosition.x' Event.current.mousePosition.y' 0' 0));  	EditorGUIUtility.ExitGUI ();  }  
Magic Number,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawParameter,The following statement contains a magic number: if (info.IsConstantValueAllowed () || (!EditorUtility.IsPersistent (node) && info.IsBindedConstantValueAllowed ())) {  	parameter.IsConstant = EditorGUILayout.Toggle (parameter.IsConstant' EditorStyles.radioButton' GUILayout.Width (20));  }  else {  	parameter.IsConstant = false;  	GUILayout.Space (24);  }  
Magic Number,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawParameter,The following statement contains a magic number: if (info.IsConstantValueAllowed () || (!EditorUtility.IsPersistent (node) && info.IsBindedConstantValueAllowed ())) {  	parameter.IsConstant = EditorGUILayout.Toggle (parameter.IsConstant' EditorStyles.radioButton' GUILayout.Width (20));  }  else {  	parameter.IsConstant = false;  	GUILayout.Space (24);  }  
Magic Number,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawParameter,The following statement contains a magic number: parameter.IsConstant = EditorGUILayout.Toggle (parameter.IsConstant' EditorStyles.radioButton' GUILayout.Width (20));  
Magic Number,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawParameter,The following statement contains a magic number: GUILayout.Space (24);  
Magic Number,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawField,The following statement contains a magic number: if (info.IsComponentInfo ()) {  	if (GUILayout.Button (GUIContent.none' "MiniPullDown"' GUILayout.Width (15))) {  		GenericMenu toolsMenu = new GenericMenu ();  		string[] names = ReflectionUtility.GetAllComponentNames ();  		foreach (string s in names) {  			string name = s;  			string displayName = s.Split ('.').Last ();  			toolsMenu.AddItem (new GUIContent (displayName)' false' delegate () {  				obj.Update ();  				prop.stringValue = name;  				obj.ApplyModifiedProperties ();  			});  		}  		toolsMenu.DropDown (new Rect (Event.current.mousePosition.x' Event.current.mousePosition.y' 0' 0));  		EditorGUIUtility.ExitGUI ();  	}  }  
Magic Number,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawField,The following statement contains a magic number: if (GUILayout.Button (GUIContent.none' "MiniPullDown"' GUILayout.Width (15))) {  	GenericMenu toolsMenu = new GenericMenu ();  	string[] names = ReflectionUtility.GetAllComponentNames ();  	foreach (string s in names) {  		string name = s;  		string displayName = s.Split ('.').Last ();  		toolsMenu.AddItem (new GUIContent (displayName)' false' delegate () {  			obj.Update ();  			prop.stringValue = name;  			obj.ApplyModifiedProperties ();  		});  	}  	toolsMenu.DropDown (new Rect (Event.current.mousePosition.x' Event.current.mousePosition.y' 0' 0));  	EditorGUIUtility.ExitGUI ();  }  
Magic Number,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawField,The following statement contains a magic number: if (reflectionReferenceType != null && GUILayout.Button (GUIContent.none' "MiniPullDown"' GUILayout.Width (15))) {  	GenericMenu toolsMenu = new GenericMenu ();  	string[] names = GetReflectionTypeNames (info' info.RequiresWrite ()' reflectionReferenceType);  	//Mark  	foreach (string s in names) {  		string name = s;  		toolsMenu.AddItem (new GUIContent (s)' false' delegate () {  			obj.Update ();  			prop.stringValue = name;  			obj.ApplyModifiedProperties ();  		});  	}  	if (names.Length == 0) {  		toolsMenu.AddItem (new GUIContent ("[None Found]")' false' delegate () {  		});  	}  	toolsMenu.DropDown (new Rect (Event.current.mousePosition.x' Event.current.mousePosition.y' 0' 0));  	EditorGUIUtility.ExitGUI ();  }  
Magic Number,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,DrawField,The following statement contains a magic number: GUILayout.Space (24);  
Magic Number,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The following statement contains a magic number: position.width = 15;  
Magic Number,StateMachine,StateMachineInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineInspector.cs,OnDoubleClickItem,The following statement contains a magic number: if (Event.current.type == EventType.MouseDown && Event.current.clickCount == 2 && r.Contains (Event.current.mousePosition)) {  	//StateMachineEditorOld.Show((StateMachine)target);  	StateMachineWindow window = EditorWindow.GetWindow<StateMachineWindow> ("StateMachine");  	window.SetStateMachine ((StateMachine)target);  }  
Magic Number,StateMachine,StateMachineInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineInspector.cs,OnHeaderGUI,The following statement contains a magic number: EditorGUIUtility.labelWidth = 50;  
Magic Number,StateMachine,StateMachineUtility,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineUtility.cs,DeleteState,The following statement contains a magic number: if (state.isDefaultState && stateMachine.states.Count > 2) {  	stateMachine.states.Find (x => x.isDefaultState == false && x.GetType () != typeof(AnyState)).isDefaultState = true;  }  
Magic Number,StateMachine,StateMachineWindow,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineWindow.cs,UpdateWindow,The following statement contains a magic number: resizeRect = new Rect (canvasRect.width - 5' canvasRect.y' 10' canvasRect.height);  
Magic Number,StateMachine,StateMachineWindow,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineWindow.cs,UpdateWindow,The following statement contains a magic number: resizeRect = new Rect (canvasRect.width - 5' canvasRect.y' 10' canvasRect.height);  
Magic Number,StateMachine,StateMachineWindow,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineWindow.cs,DrawGameObjectName,The following statement contains a magic number: if (behaviour != null && behaviour.currentState != null && behaviour.debug) {  	var centeredStyle = new GUIStyle (GUI.skin.GetStyle ("HelpBox"));  	centeredStyle.alignment = TextAnchor.UpperCenter;  	centeredStyle.fontSize = 21;  	Handles.Label (transform.position' behaviour.currentState.name' centeredStyle);  }  
Magic Number,StateMachine,StateMachineWindow,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineWindow.cs,DrawGameObjectName,The following statement contains a magic number: centeredStyle.fontSize = 21;  
Duplicate Code,StateMachine,StateInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateInspector.cs,OnEnable,The method contains a code clone-set at the following line numbers (starting from the method definition): ((26' 48)' (61' 83))
Duplicate Code,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The method contains a code clone-set at the following line numbers (starting from the method definition): ((53' 72)' (82' 101)' (111' 130))
Duplicate Code,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,Titlebar,The method contains a code clone-set at the following line numbers (starting from the method definition): ((82' 108)' (111' 137))
Missing Default,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,InspectorGUI,The following switch statement is missing a default case: switch (selectedTool) {  case 0:  	StateMachine stateMachine = StateMachineWindow.StateMachineEditor.ActiveStateMachine;  	if (stateMachine != null) {  		GUILayout.BeginVertical ("IN BigTitle");  		GUILayout.BeginHorizontal ();  		EditorGUIUtility.labelWidth = 50;  		string oldName = AssetDatabase.GetAssetPath (stateMachine);  		string newName = stateMachine.name;  		newName = EditorGUILayout.TextField ("Name"' newName);  		if (oldName != newName)  			AssetDatabase.RenameAsset (oldName' newName);  		GUILayout.EndHorizontal ();  		GUILayout.Label ("Description:");  		stateMachine.description = EditorGUILayout.TextArea (stateMachine.description' GUILayout.MinHeight (45));  		GUILayout.EndVertical ();  		if (GUI.changed) {  			EditorUtility.SetDirty (stateMachine);  		}  	}  	break;  case 1:  	GUILayout.Space (5);  	if (SelectedStates.Count == 1 && editor != null) {  		editor.DrawHeader ();  		GUILayout.BeginVertical (EditorStyles.inspectorDefaultMargins);  		editor.OnInspectorGUI ();  		GUILayout.EndVertical ();  	}  	else if (SelectedStates.Count > 1) {  		GUILayout.Space (10f);  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10f);  		GUILayout.Label ("Multi-state editing not supported."' FsmStyles.WrappedLabel);  		GUILayout.EndHorizontal ();  	}  	else {  		GUILayout.Label ("Select a state.");  	}  	break;  case 2:  	GUILayout.Space (10);  	GUILayout.BeginVertical (EditorStyles.inspectorDefaultMargins);  	GUILayout.Label ("Coming Soon");  	//DropAreaGUI();  	GUILayout.Space (10);  	GUILayout.EndVertical ();  	break;  }  
Missing Default,StateMachine,CustomInspector,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\CustomInspector.cs,DropAreaGUI,The following switch statement is missing a default case: switch (evt.type) {  case EventType.MouseDown:  	if (drop_area.Contains (evt.mousePosition)) {  		StateMachine stateMachine = StateMachineWindow.StateMachineEditor.ActiveStateMachine.root;  		StateMachine layerStateMachine = ScriptableObject.CreateInstance<StateMachine> ();  		layerStateMachine.root = stateMachine;  		layerStateMachine.layer = (stateMachine.layers.Count + 1);  		layerStateMachine.name = "Layer " + layerStateMachine.layer.ToString ();  		if (EditorUtility.IsPersistent (stateMachine)) {  			AssetDatabase.AddObjectToAsset (layerStateMachine' stateMachine);  			AssetDatabase.SaveAssets ();  		}  		StateMachineUtility.CreateAnyState (new Vector2 (GraphEditor.MaxCanvasSize' GraphEditor.MaxCanvasSize) * 0.5f' layerStateMachine);  		stateMachine.layers.Add (layerStateMachine);  		EditorUtility.SetDirty (stateMachine);  		Event.current.Use ();  	}  	break;  case EventType.DragUpdated:  case EventType.DragPerform:  	if (!drop_area.Contains (evt.mousePosition))  		return;  	DragAndDrop.visualMode = DragAndDropVisualMode.Copy;  	if (evt.type == EventType.DragPerform) {  		DragAndDrop.AcceptDrag ();  		foreach (Object dragged_object in DragAndDrop.objectReferences) {  			if (dragged_object is StateMachine) {  				Debug.Log (dragged_object);  			}  		}  	}  	break;  }  
Missing Default,StateMachine,GraphEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\GraphEditor.cs,DragGraph,The following switch statement is missing a default case: switch (ev.rawType) {  case EventType.mouseDown:  	GUIUtility.hotControl = controlID;  	ev.Use ();  	break;  case EventType.mouseUp:  	if (GUIUtility.hotControl == controlID) {  		GUIUtility.hotControl = 0;  		ev.Use ();  	}  	break;  case EventType.mouseDrag:  	if (GUIUtility.hotControl == controlID) {  		offset += ev.delta;  		scrollPosition -= ev.delta;  		ev.Use ();  	}  	break;  }  
Missing Default,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,HandleKeyEvents,The following switch statement is missing a default case: switch (ev.type) {  case EventType.KeyDown:  	if (ev.keyCode == KeyCode.F1) {  		showHelp = !showHelp;  		PreferencesEditor.SetBool (Preference.ShowShortcuts' showHelp);  		ev.Use ();  	}  	if (ev.keyCode == KeyCode.Tab) {  		CenterView ();  	}  	if (ev.keyCode == KeyCode.F2) {  		showInfo = !showInfo;  		PreferencesEditor.SetBool (Preference.ShowInfo' showInfo);  		ev.Use ();  	}  	if (ev.keyCode == KeyCode.F3) {  		if (selectedStates.Count == ActiveStateMachine.states.Count) {  			selectedStates.Clear ();  		}  		else {  			selectedStates.Clear ();  			selectedStates.AddRange (ActiveStateMachine.states);  		}  		UpdateSelection ();  		ev.Use ();  	}  	if (ev.keyCode == KeyCode.LeftAlt) {  		//GUIUtility.hotControl = GUIControl.GetID(Control.MakeTransition);  		eventMode = EventMode.MakeTransition;  		MouseInstruction.Set ("Select a state you want to transition from.");  		ev.Use ();  	}  	break;  case EventType.KeyUp:  	if (ev.control && ev.keyCode == KeyCode.A) {  		ActionBrowser.ShowWindow ();  		ev.Use ();  	}  	if (ev.control && ev.keyCode == KeyCode.C) {  		ConditionBrowser.ShowWindow ();  		ev.Use ();  	}  	break;  }  
Missing Default,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,DragStates,The following switch statement is missing a default case: switch (ev.rawType) {  case EventType.mouseDown:  	if (!graphRect.Contains (new Vector2 (ev.mousePosition.x - scrollPosition.x' ev.mousePosition.y - scrollPosition.y))) {  		return;  	}  	GUIUtility.hotControl = controlID;  	ev.Use ();  	break;  case EventType.mouseUp:  	if (GUIUtility.hotControl == controlID) {  		GUIUtility.hotControl = 0;  		ev.Use ();  	}  	break;  case EventType.mouseDrag:  	if (GUIUtility.hotControl == controlID) {  		foreach (State state in selectedStates) {  			state.position.x += Event.current.delta.x;  			state.position.y += Event.current.delta.y;  		}  		ev.Use ();  	}  	break;  }  
Missing Default,StateMachine,StateMachineEditor,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineEditor.cs,SelectStates,The following switch statement is missing a default case: switch (ev.rawType) {  case EventType.mouseDown:  	if (!graphRect.Contains (new Vector2 (ev.mousePosition.x - scrollPosition.x' ev.mousePosition.y - scrollPosition.y))) {  		return;  	}  	foreach (State state in ActiveStateMachine.states) {  		if (ev.button == 0 && state.position.Contains (ev.mousePosition)) {  			if (eventMode == EventMode.Connect) {  				StateMachineUtility.MakeTransition (ActiveStateMachine.states [connectionIndex]' state' ActiveStateMachine);  				eventMode = EventMode.None;  				MouseInstruction.Clear ();  			}  			else {  				if (eventMode == EventMode.MakeTransition) {  					connectionIndex = ActiveStateMachine.states.FindIndex (x => x == state);  					eventMode = EventMode.Connect;  					MouseInstruction.Set ("Select a state you want to transition to.");  				}  				if (EditorGUI.actionKey || ev.shift) {  					if (!this.selectedStates.Contains (state)) {  						this.selectedStates.Add (state);  					}  					else {  						this.selectedStates.Remove (state);  					}  					ev.Use ();  				}  				else {  					if (!this.selectedStates.Contains (state)) {  						this.selectedStates.Clear ();  						this.selectedStates.Add (state);  					}  					HandleUtility.Repaint ();  				}  				UpdateSelection ();  				GUIUtility.hotControl = 0;  				GUIUtility.keyboardControl = 0;  			}  			return;  		}  	}  	MouseInstruction.Clear ();  	GUIUtility.hotControl = controlID;  	selectionStartPoint = ev.mousePosition;  	if (!EditorGUI.actionKey && !ev.shift) {  		this.selectedStates.Clear ();  	}  	eventMode = EventMode.Pick;  	UpdateSelection ();  	ev.Use ();  	break;  case EventType.mouseUp:  	if (!graphRect.Contains (new Vector2 (ev.mousePosition.x - scrollPosition.x' ev.mousePosition.y - scrollPosition.y))) {  		eventMode = EventMode.None;  		StateMachineWindow.RepaintAll ();  		return;  	}  	if (GUIUtility.hotControl == controlID) {  		if (eventMode == EventMode.Pick && ev.control) {  			StateMachineUtility.CreateState (Event.current.mousePosition' ActiveStateMachine);  		}  		GUIUtility.hotControl = 0;  		eventMode = EventMode.None;  		ev.Use ();  	}  	break;  case EventType.mouseDrag:  	if (GUIUtility.hotControl == controlID && (eventMode == EventMode.Pick || eventMode == EventMode.Rect)) {  		eventMode = EventMode.Rect;  		SelectStatesInRect (FromToRect (selectionStartPoint' ev.mousePosition));  		ev.Use ();  	}  	break;  case EventType.Repaint:  	if (GUIUtility.hotControl == controlID && eventMode == EventMode.Rect) {  		((GUIStyle)"SelectionRect").Draw (FromToRect (this.selectionStartPoint' ev.mousePosition)' false' false' false' false);  	}  	break;  }  
Missing Default,StateMachine,StateMachineGUI,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineGUI.cs,GetReflectionTypeNames,The following switch statement is missing a default case: switch (popupType) {  case ReflectionType.Methods:  	names = reflectionReferenceType.GetMethodNames ();  	break;  case ReflectionType.Fields:  	names = reflectionReferenceType.GetFieldNames (true' typeof(string)' typeof(Color)' typeof(Vector3)' typeof(UnityEngine.Object)' typeof(KeyCode)' typeof(List<>)' typeof(System.Object));  	break;  case ReflectionType.Properties:  	names = reflectionReferenceType.GetPropertyNames (true' requiresWrite' typeof(string)' typeof(Color)' typeof(Vector3)' typeof(UnityEngine.Object)' typeof(KeyCode)' typeof(List<>)' typeof(System.Object));  	break;  case ReflectionType.FieldsAndProperties:  	names = reflectionReferenceType.GetPropertyAndFieldNames (true' requiresWrite' typeof(string)' typeof(Color)' typeof(Vector3)' typeof(UnityEngine.Object)' typeof(KeyCode)' typeof(List<>)' typeof(System.Object));  	break;  }  
Missing Default,StateMachine,StateMachineWindow,C:\repos\sirerr_infinitybug\IB-Unity\Assets\State Machine\Scripts\Editor\StateMachineWindow.cs,DoEvents,The following switch statement is missing a default case: switch (ev.type) {  case EventType.MouseDown:  	if (ev.button == 0 && resizeRect.Contains (ev.mousePosition)) {  		GUIUtility.hotControl = controlID;  		ev.Use ();  	}  	break;  case EventType.MouseUp:  	if (GUIUtility.hotControl == controlID) {  		GUIUtility.hotControl = 0;  		ev.Use ();  	}  	break;  case EventType.MouseDrag:  	if (GUIUtility.hotControl == controlID) {  		inspectorWidth = position.width - ev.mousePosition.x;  		inspectorWidth = Mathf.Clamp (inspectorWidth' inspectorMinWidth' inspectorMaxWidth);  		ev.Use ();  	}  	break;  }  
