Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Log4Slack,SlackAppender,C:\repos\jonfreeland_Log4Slack\Log4Slack\SlackAppender.cs,Append,Cyclomatic complexity of the method is 8
Long Parameter List,Log4Slack,SlackClient,C:\repos\jonfreeland_Log4Slack\Log4Slack\SlackClient.cs,SlackClient,The method has 5 parameters. Parameters: urlWithAccessToken' username' channel' iconUrl' iconEmoji
Long Parameter List,Log4Slack,SlackClient,C:\repos\jonfreeland_Log4Slack\Log4Slack\SlackClient.cs,PostMessageAsync,The method has 8 parameters. Parameters: text' proxyAddress' username' channel' iconUrl' iconEmoji' attachments' linknames
Long Parameter List,Log4Slack,SlackClient,C:\repos\jonfreeland_Log4Slack\Log4Slack\SlackClient.cs,BuildPayload,The method has 7 parameters. Parameters: text' username' channel' iconUrl' iconEmoji' attachments' linknames
Long Statement,Log4Slack,SlackAppender,C:\repos\jonfreeland_Log4Slack\Log4Slack\SlackAppender.cs,Append,The length of the statement  "                var theAttachment = new Attachment(string.Format("[{0}] {1} in {2} on {3}"' loggingEvent.Level.DisplayName' loggingEvent.LoggerName' _currentProcess.ProcessName' Environment.MachineName)); " is 188.
Long Statement,Log4Slack,SlackAppender,C:\repos\jonfreeland_Log4Slack\Log4Slack\SlackAppender.cs,Append,The length of the statement  "                var mapping = Mappings != null ? Mappings.FirstOrDefault(m => m.level.Equals(loggingEvent.Level.DisplayName'StringComparison.InvariantCultureIgnoreCase)) : null; " is 161.
Long Statement,Log4Slack,SlackAppender,C:\repos\jonfreeland_Log4Slack\Log4Slack\SlackAppender.cs,Append,The length of the statement  "            slackClient.PostMessageAsync(formattedMessage' Proxy' username' Channel.Expand()' IconUrl.Expand()' IconEmoji.Expand()' attachments' LinkNames); " is 144.
Long Statement,Log4Slack,Extensions,C:\repos\jonfreeland_Log4Slack\Log4Slack\SlackAppender.cs,SplitOn,The length of the statement  "            var SplitOnPattern = new Regex(string.Format(@"(?<line>.{{1'{0}}})([\r\n]|$)"' numChars)' RegexOptions.Singleline | RegexOptions.IgnoreCase); " is 141.
Magic Number,Log4Slack,SlackAppender,C:\repos\jonfreeland_Log4Slack\Log4Slack\SlackAppender.cs,Append,The following statement contains a magic number: if (AddAttachment) {                  // Set fallback string                  var theAttachment = new Attachment(string.Format("[{0}] {1} in {2} on {3}"' loggingEvent.Level.DisplayName' loggingEvent.LoggerName' _currentProcess.ProcessName' Environment.MachineName));                    // Determine attachment color                  switch (loggingEvent.Level.DisplayName.ToLowerInvariant()) {                      case "warn":                          theAttachment.Color = "warning";                          break;                      case "error":                      case "fatal":                          theAttachment.Color = "danger";                          break;                  }                    //override colors from config if available                  var mapping = Mappings != null ? Mappings.FirstOrDefault(m => m.level.Equals(loggingEvent.Level.DisplayName'StringComparison.InvariantCultureIgnoreCase)) : null;                  if (mapping != null)                  {                      var color = Color.FromName(mapping.backColor);                      var hex = color.IsKnownColor ? String.Format("#{0:X2}{1:X2}{2:X2}"' color.R' color.G' color.B) : mapping.backColor;                      theAttachment.Color = !string.IsNullOrEmpty(hex) ? hex : theAttachment.Color;                  }                    // Add attachment fields                  theAttachment.Fields = new List<Field> {                      new Field("Process"' Value: _currentProcess.ProcessName' Short: true)'                      new Field("Machine"' Value: Environment.MachineName' Short: true)                  };                  if (!UsernameAppendLoggerName)                      theAttachment.Fields.Insert(0' new Field("Logger"' Value: loggingEvent.LoggerName' Short: true));                    // Add exception fields if exception occurred                  var exception = loggingEvent.ExceptionObject;                  if (exception != null) {                      theAttachment.Fields.Insert(0' new Field("Exception Type"' Value: exception.GetType().Name' Short: true));                      if (AddExceptionTraceField && !string.IsNullOrWhiteSpace(exception.StackTrace)) {                          var parts = exception.StackTrace.SplitOn(1990).ToArray(); // Split call stack into consecutive fields of ~2k characters                          for (int idx = parts.Length - 1; idx >= 0; idx--) {                              var name = "Exception Trace" + (idx > 0 ? string.Format(" {0}"' idx + 1) : null);                              theAttachment.Fields.Insert(0' new Field(name' Value: "```" + parts[idx].Replace("```"' "'''") + "```"));                          }                      }                        theAttachment.Fields.Insert(0' new Field("Exception Message"' Value: exception.Message));                  }                    attachments.Add(theAttachment);              }
Missing Default,Log4Slack,SlackAppender,C:\repos\jonfreeland_Log4Slack\Log4Slack\SlackAppender.cs,Append,The following switch statement is missing a default case: switch (loggingEvent.Level.DisplayName.ToLowerInvariant()) {                      case "warn":                          theAttachment.Color = "warning";                          break;                      case "error":                      case "fatal":                          theAttachment.Color = "danger";                          break;                  }
