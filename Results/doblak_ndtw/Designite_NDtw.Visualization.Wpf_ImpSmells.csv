Implementation smell,Namespace,Class,File,Method,Description
Long Method,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The method has 110 lines of code.
Complex Method,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,Cyclomatic complexity of the method is 14
Long Statement,NDtw.Visualization.Wpf,DtwByVariablePlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwByVariablePlot.xaml.cs,OnDtwChanged,The length of the statement  "                plotModel.Axes.Add(new LinearAxis(AxisPosition.Left' axisTitleAndKey) { Key = axisTitleAndKey' PositionTier = variableIndex }); " is 127.
Long Statement,NDtw.Visualization.Wpf,DtwByVariablePlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwByVariablePlot.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/NDtw.Visualization.Wpf;component/dtwbyvariableplot.xaml"' System.UriKind.Relative); " is 129.
Long Statement,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The length of the statement  "                        var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue); " is 124.
Long Statement,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The length of the statement  "                    matrixSeriesA.Points.Add(new DataPoint(i' (-1 + normalizedSeriesA[i]) * seriesMatrixScale - 1 - seriesMatrixScale * (variableIndex + 1))); " is 138.
Long Statement,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The length of the statement  "                    matrixSeriesB.Points.Add(new DataPoint( -normalizedSeriesB[i] * seriesMatrixScale - 1 - seriesMatrixScale * (variableIndex + 1)' i)); " is 133.
Long Statement,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The length of the statement  "            plotModel.Axes.Add(new LinearAxis(AxisPosition.Bottom' "           Series A") { Maximum = Math.Max(xLength' yLength)' PositionAtZeroCrossing = true}); " is 150.
Long Statement,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The length of the statement  "            plotModel.Axes.Add(new LinearAxis(AxisPosition.Left' "                  Series B") { Maximum = Math.Max(xLength' yLength)' PositionAtZeroCrossing = true }); " is 156.
Long Statement,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/NDtw.Visualization.Wpf;component/dtwmatrixplot.xaml"' System.UriKind.Relative); " is 125.
Magic Number,NDtw.Visualization.Wpf,DtwByVariablePlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwByVariablePlot.xaml.cs,OnDtwChanged,The following statement contains a magic number: for (int variableIndex = 0; variableIndex < Dtw.SeriesVariables.Length; variableIndex++)              {                  var variableA = Dtw.SeriesVariables[variableIndex];                  var variableASeries = variableA.GetPreprocessedXSeries();                  var variableB = Dtw.SeriesVariables[variableIndex];                  var variableBSeries = variableB.GetPreprocessedYSeries();                    var axisTitleAndKey = String.Format("Value ({0})"' variableA.VariableName);                  plotModel.Axes.Add(new LinearAxis(AxisPosition.Left' axisTitleAndKey) { Key = axisTitleAndKey' PositionTier = variableIndex });                    var plotSeriesA = new LineSeries(variableA.VariableName) { YAxisKey = axisTitleAndKey };                  for (int i = 0; i < xLength; i++)                      plotSeriesA.Points.Add(new DataPoint(i' variableASeries[i]));                    var plotSeriesB = new LineSeries(variableB.VariableName) { YAxisKey = axisTitleAndKey };                  for (int i = 0; i < yLength; i++)                      plotSeriesB.Points.Add(new DataPoint(i' variableBSeries[i]));                    var plotSeriesPath = new LineSeries("Dtw")                                           {                                               YAxisKey = axisTitleAndKey'                                               StrokeThickness = 0.5'                                               Color = OxyColors.DimGray'                                           };                    for (int i = 0; i < dtwPath.Length; i++)                  {                      plotSeriesPath.Points.Add(new DataPoint(dtwPath[i].Item1' variableASeries[dtwPath[i].Item1]));                      plotSeriesPath.Points.Add(new DataPoint(dtwPath[i].Item2' variableBSeries[dtwPath[i].Item2]));                      plotSeriesPath.Points.Add(new DataPoint(double.NaN' double.NaN));                  }                    plotModel.Series.Add(plotSeriesA);                  plotModel.Series.Add(plotSeriesB);                  plotModel.Series.Add(plotSeriesPath);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: if (matrixValues != null)              {                  var maxMatrixValue = 0.0;                  for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                          maxMatrixValue = Math.Max(maxMatrixValue' Double.IsPositiveInfinity(matrixValues[i][j]) ? 0 : matrixValues[i][j]);                    for (int i = 0; i < xLength; i++)                      for (int j = 0; j < yLength; j++)                      {                          var value = matrixValues[i][j];                          var isValuePositiveInfinity = Double.IsPositiveInfinity(value);                            var intensityBytes = isValuePositiveInfinity ? new byte[] { 0' 0' 0 } : GetFauxColourRgbIntensity(value' 0' maxMatrixValue);                          //var intensityByte = (byte)(255 - Math.Floor(255 * intensity));                          plotModel.Annotations.Add(new PolygonAnnotation                          {                              Points =                                  new[]                                  {                                      new DataPoint(i - 0.5' j - 0.5)' new DataPoint(i + 0.5' j - 0.5)'                                      new DataPoint(i + 0.5' j + 0.5)' new DataPoint(i - 0.5' j + 0.5)'                                  }'                              StrokeThickness = 0'                              Selectable = false'                              Layer = AnnotationLayer.BelowAxes'                              Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])'                          });                      }                    for (int i = 0; i < 30; i++)                  {                      var intensityBytes = GetFauxColourRgbIntensity(i' 0' 29);                        plotModel.Annotations.Add(new RectangleAnnotation                      {                          MinimumX = -39'                          MaximumX = -25'                          MinimumY = -i - 6'                          MaximumY = -i - 5'                          Selectable = false'                          Fill = OxyColor.FromArgb(255' intensityBytes[0]' intensityBytes[1]' intensityBytes[2])                      });                                         }                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -5)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = "0"                  });                    plotModel.Annotations.Add(new TextAnnotation                  {                      Position = new DataPoint(-24' -34)'                      HorizontalAlignment = HorizontalTextAlign.Left'                      VerticalAlignment = VerticalTextAlign.Middle'                      StrokeThickness = 0'                      Text = String.Format("{0:0.00}"' maxMatrixValue)'                  });              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,OnDataChanged,The following statement contains a magic number: var seriesMatrixScale = (xLength + yLength) * 0.05;
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val <= 0.2)              {                  b = (byte)((val / 0.2) * 255);              }              else if (val > 0.2 && val <= 0.7)              {                  b = (byte)((1.0 - ((val - 0.2) / 0.5)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val <= 0.2)              {                  b = (byte)((val / 0.2) * 255);              }              else if (val > 0.2 && val <= 0.7)              {                  b = (byte)((1.0 - ((val - 0.2) / 0.5)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val <= 0.2)              {                  b = (byte)((val / 0.2) * 255);              }              else if (val > 0.2 && val <= 0.7)              {                  b = (byte)((1.0 - ((val - 0.2) / 0.5)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val <= 0.2)              {                  b = (byte)((val / 0.2) * 255);              }              else if (val > 0.2 && val <= 0.7)              {                  b = (byte)((1.0 - ((val - 0.2) / 0.5)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val <= 0.2)              {                  b = (byte)((val / 0.2) * 255);              }              else if (val > 0.2 && val <= 0.7)              {                  b = (byte)((1.0 - ((val - 0.2) / 0.5)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val <= 0.2)              {                  b = (byte)((val / 0.2) * 255);              }              else if (val > 0.2 && val <= 0.7)              {                  b = (byte)((1.0 - ((val - 0.2) / 0.5)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val <= 0.2)              {                  b = (byte)((val / 0.2) * 255);              }              else if (val > 0.2 && val <= 0.7)              {                  b = (byte)((1.0 - ((val - 0.2) / 0.5)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val <= 0.2)              {                  b = (byte)((val / 0.2) * 255);              }              else if (val > 0.2 && val <= 0.7)              {                  b = (byte)((1.0 - ((val - 0.2) / 0.5)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val >= 0.2 && val <= 0.6)              {                  g = (byte)(((val - 0.2) / 0.4) * 255);              }              else if (val > 0.6 && val <= 0.9)              {                  g = (byte)((1.0 - ((val - 0.6) / 0.3)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val >= 0.2 && val <= 0.6)              {                  g = (byte)(((val - 0.2) / 0.4) * 255);              }              else if (val > 0.6 && val <= 0.9)              {                  g = (byte)((1.0 - ((val - 0.6) / 0.3)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val >= 0.2 && val <= 0.6)              {                  g = (byte)(((val - 0.2) / 0.4) * 255);              }              else if (val > 0.6 && val <= 0.9)              {                  g = (byte)((1.0 - ((val - 0.6) / 0.3)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val >= 0.2 && val <= 0.6)              {                  g = (byte)(((val - 0.2) / 0.4) * 255);              }              else if (val > 0.6 && val <= 0.9)              {                  g = (byte)((1.0 - ((val - 0.6) / 0.3)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val >= 0.2 && val <= 0.6)              {                  g = (byte)(((val - 0.2) / 0.4) * 255);              }              else if (val > 0.6 && val <= 0.9)              {                  g = (byte)((1.0 - ((val - 0.6) / 0.3)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val >= 0.2 && val <= 0.6)              {                  g = (byte)(((val - 0.2) / 0.4) * 255);              }              else if (val > 0.6 && val <= 0.9)              {                  g = (byte)((1.0 - ((val - 0.6) / 0.3)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val >= 0.2 && val <= 0.6)              {                  g = (byte)(((val - 0.2) / 0.4) * 255);              }              else if (val > 0.6 && val <= 0.9)              {                  g = (byte)((1.0 - ((val - 0.6) / 0.3)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val >= 0.2 && val <= 0.6)              {                  g = (byte)(((val - 0.2) / 0.4) * 255);              }              else if (val > 0.6 && val <= 0.9)              {                  g = (byte)((1.0 - ((val - 0.6) / 0.3)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val >= 0.2 && val <= 0.6)              {                  g = (byte)(((val - 0.2) / 0.4) * 255);              }              else if (val > 0.6 && val <= 0.9)              {                  g = (byte)((1.0 - ((val - 0.6) / 0.3)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val >= 0.2 && val <= 0.6)              {                  g = (byte)(((val - 0.2) / 0.4) * 255);              }              else if (val > 0.6 && val <= 0.9)              {                  g = (byte)((1.0 - ((val - 0.6) / 0.3)) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val >= 0.5)              {                  r = (byte)(((val - 0.5) / 0.5) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val >= 0.5)              {                  r = (byte)(((val - 0.5) / 0.5) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val >= 0.5)              {                  r = (byte)(((val - 0.5) / 0.5) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetFauxColourRgbIntensity,The following statement contains a magic number: if (val >= 0.5)              {                  r = (byte)(((val - 0.5) / 0.5) * 255);              }
Magic Number,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,GetGrayscaleRgbIntensity,The following statement contains a magic number: y = (byte)((1.0 - val) * 255);
Missing Default,NDtw.Visualization.Wpf,DtwByVariablePlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwByVariablePlot.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.Plot = ((OxyPlot.Wpf.Plot)(target));              return;              }
Missing Default,NDtw.Visualization.Wpf,DtwMatrixPlot,C:\repos\doblak_ndtw\NDtw.Visualization.Wpf\DtwMatrixPlot.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.MatrixPlot = ((OxyPlot.Wpf.Plot)(target));              return;              }
