Implementation smell,Namespace,Class,File,Method,Description
Long Method,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,ParseLine,The method has 220 lines of code.
Long Method,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintLinePart,The method has 181 lines of code.
Long Method,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,OnMouseDown,The method has 103 lines of code.
Long Method,ICSharpCode.TextEditor,FoldMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\FoldMargin.cs,PaintFoldMarker,The method has 102 lines of code.
Long Method,ICSharpCode.TextEditor.Util,RtfWriter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\RtfWriter.cs,BuildFileContent,The method has 103 lines of code.
Complex Method,ICSharpCode.TextEditor.Document,DefaultDocument,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\DefaultDocument.cs,UpdateSegmentListOnDocumentChange,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TextEditor.Document,LineSegmentTree,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\LineManager\LineSegmentTree.cs,GetNodeByOffset,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.TextEditor.Document,TextUtilities,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\TextUtilities.cs,GetExpressionBeforeOffset,Cyclomatic complexity of the method is 17
Complex Method,ICSharpCode.TextEditor.Document,DefaultFormattingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FormattingStrategy\DefaultFormattingStrategy.cs,SmartReplaceLine,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.TextEditor.Document,DefaultFormattingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FormattingStrategy\DefaultFormattingStrategy.cs,SearchBracketBackward,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.TextEditor.Document,DefaultFormattingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FormattingStrategy\DefaultFormattingStrategy.cs,SearchBracketForward,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,ResolveRuleSetReferences,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,MarkTokens,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,MarkTokensInLine,Cyclomatic complexity of the method is 22
Complex Method,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,MarkTokens,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,ParseLine,Cyclomatic complexity of the method is 39
Complex Method,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,PushCurWord,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,GetRegString,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,MatchExpr,Cyclomatic complexity of the method is 22
Complex Method,ICSharpCode.TextEditor.Document,HighlightColor,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightColor.cs,HighlightColor,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TextEditor.Document,HighlightColor,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightColor.cs,HighlightColor,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TextEditor.Document,HighlightingDefinitionParser,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightingDefinitionParser.cs,Parse,Cyclomatic complexity of the method is 18
Complex Method,ICSharpCode.TextEditor.Document,HighlightRuleSet,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightRuleSet.cs,HighlightRuleSet,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.TextEditor.Document,Span,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\Span.cs,Span,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.TextEditor.Document,LineSegment,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\LineManager\LineSegment.cs,RemovedLinePart,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TextEditor.Document,SelectionManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\Selection\SelectionManager.cs,ExtendSelection,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.TextEditor.Document,SelectionManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\Selection\SelectionManager.cs,RemoveSelectedText,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TextEditor.Document,FoldingManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FoldingStrategy\FoldingManager.cs,UpdateFoldings,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TextEditor,Caret,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\Caret.cs,UpdateCaretPosition,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TextEditor,TextArea,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextArea.cs,SearchMatchingBracket,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TextEditor,TextArea,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextArea.cs,OnMouseMove,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.TextEditor,TextArea,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextArea.cs,OnPaint,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.TextEditor,TextArea,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextArea.cs,SimulateKeyPress,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.TextEditor,TextEditorControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextEditorControl.cs,CommitUpdateRequested,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.TextEditor,TextAreaClipboardHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaClipboardHandler.cs,Paste,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintDocumentLine,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintLinePart,Cyclomatic complexity of the method is 38
Complex Method,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,GetLogicalColumnInternal,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,CountColumns,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,GetDrawingXPos,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,OnToolTipRequest,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,TextAreaMouseMove,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,DoubleClickSelectionExtend,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,OnMouseDown,Cyclomatic complexity of the method is 17
Complex Method,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,HandleMouseDown,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.TextEditor,FoldMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\FoldMargin.cs,PaintFoldMarker,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.TextEditor,TextAreaDragDropHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaDragDropHandler.cs,OnDragDrop,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.TextEditor,BracketHighlightingSheme,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\BracketHighlighter.cs,GetHighlight,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.TextEditor,DrawableLine,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\DrawableLine.cs,SetBold,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TextEditor.Util,AugmentableRedBlackTree<T;Host>,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\AugmentableRedBlackTree.cs,RemoveNode,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.TextEditor.Util,AugmentableRedBlackTree<T;Host>,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\AugmentableRedBlackTree.cs,FixTreeOnDelete,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.TextEditor.Util,RtfWriter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\RtfWriter.cs,BuildFileContent,Cyclomatic complexity of the method is 21
Complex Method,ICSharpCode.TextEditor.Util,FileReader,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\FileReader.cs,AutoDetect,Cyclomatic complexity of the method is 16
Complex Method,ICSharpCode.TextEditor.Actions,ShiftTab,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,RemoveTabs,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.TextEditor.Actions,ToggleLineComment,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.TextEditor.Actions,ToggleBlockComment,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.TextEditor.Actions,ToggleBlockComment,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,FindSelectedCommentRegion,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.TextEditor.Actions,WordBackspace,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.TextEditor.Gui.CompletionWindow,CodeCompletionWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\CodeCompletionWindow.cs,ProcessTextAreaKey,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TextEditor.Gui.CompletionWindow,CodeCompletionListView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\CodeCompletionListView.cs,SelectItemWithStart,Cyclomatic complexity of the method is 13
Long Parameter List,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,GetColor,The method has 5 parameters. Parameters: ruleSet' document' currentSegment' currentOffset' currentLength
Long Parameter List,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,OverrideSpan,The method has 5 parameters. Parameters: spanBegin' document' words' span' lineOffset
Long Parameter List,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,MatchExpr,The method has 5 parameters. Parameters: lineSegment' expr' index' document' ignoreCase
Long Parameter List,ICSharpCode.TextEditor.Document,TextWord,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\TextWord.cs,TextWord,The method has 6 parameters. Parameters: document' line' offset' length' color' hasDefaultColor
Long Parameter List,ICSharpCode.TextEditor.Document,FoldMarker,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FoldingStrategy\FoldMarker.cs,FoldMarker,The method has 5 parameters. Parameters: document' offset' length' foldText' isFolded
Long Parameter List,ICSharpCode.TextEditor.Document,FoldMarker,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FoldingStrategy\FoldMarker.cs,FoldMarker,The method has 5 parameters. Parameters: document' startLine' startColumn' endLine' endColumn
Long Parameter List,ICSharpCode.TextEditor.Document,FoldMarker,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FoldingStrategy\FoldMarker.cs,FoldMarker,The method has 6 parameters. Parameters: document' startLine' startColumn' endLine' endColumn' foldType
Long Parameter List,ICSharpCode.TextEditor.Document,FoldMarker,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FoldingStrategy\FoldMarker.cs,FoldMarker,The method has 7 parameters. Parameters: document' startLine' startColumn' endLine' endColumn' foldType' foldText
Long Parameter List,ICSharpCode.TextEditor.Document,FoldMarker,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FoldingStrategy\FoldMarker.cs,FoldMarker,The method has 8 parameters. Parameters: document' startLine' startColumn' endLine' endColumn' foldType' foldText' isFolded
Long Parameter List,ICSharpCode.TextEditor.Document,TextMarker,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\MarkerStrategy\TextMarker.cs,TextMarker,The method has 5 parameters. Parameters: offset' length' textMarkerType' color' foreColor
Long Parameter List,ICSharpCode.TextEditor,TextEditorControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextEditorControl.cs,Advance,The method has 5 parameters. Parameters: x' y' maxWidth' size' fontHeight
Long Parameter List,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintFoldingText,The method has 6 parameters. Parameters: g' lineNumber' physicalXPos' lineRectangle' text' drawSelected
Long Parameter List,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintLinePart,The method has 6 parameters. Parameters: g' lineNumber' startColumn' endColumn' lineRectangle' physicalXPos
Long Parameter List,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawDocumentWord,The method has 6 parameters. Parameters: g' word' position' font' foreColor' backBrush
Long Parameter List,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,GetLogicalColumnInternal,The method has 6 parameters. Parameters: g' line' start' end' drawingPos' targetVisualPosX
Long Parameter List,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,CountColumns,The method has 5 parameters. Parameters: column' start' end' logicalLine' g
Long Parameter List,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawString,The method has 6 parameters. Parameters: g' text' font' color' x' y
Long Parameter List,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawEOLMarker,The method has 5 parameters. Parameters: g' color' backBrush' x' y
Long Parameter List,ICSharpCode.TextEditor,DrawableLine,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\DrawableLine.cs,DrawDocumentWord,The method has 5 parameters. Parameters: g' word' position' font' foreColor
Long Parameter List,ICSharpCode.TextEditor,DrawableLine,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\DrawableLine.cs,DrawLine,The method has 5 parameters. Parameters: g' xPos' xOffset' yPos' c
Long Parameter List,ICSharpCode.TextEditor.Util,AugmentableRedBlackTree<T;Host>,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\AugmentableRedBlackTree.cs,CheckNodeProperties,The method has 5 parameters. Parameters: node' parentNode' parentColor' blackCount' expectedBlackCount
Long Parameter List,ICSharpCode.TextEditor.Util,TextUtility,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TextUtility.cs,RegionMatches,The method has 5 parameters. Parameters: document' casesensitive' offset' length' word
Long Parameter List,ICSharpCode.TextEditor.Util,TextUtility,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TextUtility.cs,RegionMatches,The method has 5 parameters. Parameters: document' casesensitive' offset' length' word
Long Parameter List,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,GetLeftHandSideDrawingSizeHelpTipFromCombinedDescription,The method has 6 parameters. Parameters: control' graphics' font' countMessage' description' p
Long Parameter List,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,GetDrawingSizeHelpTipFromCombinedDescription,The method has 5 parameters. Parameters: control' graphics' font' countMessage' description
Long Parameter List,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,DrawHelpTipFromCombinedDescription,The method has 5 parameters. Parameters: control' graphics' font' countMessage' description
Long Parameter List,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,DrawFixedWidthHelpTipFromCombinedDescription,The method has 5 parameters. Parameters: control' graphics' font' countMessage' description
Long Parameter List,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,GetDrawingSizeDrawHelpTip,The method has 6 parameters. Parameters: control' graphics' font' countMessage' basicDescription' documentation
Long Parameter List,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,GetLeftHandSideDrawingSizeDrawHelpTip,The method has 7 parameters. Parameters: control' graphics' font' countMessage' basicDescription' documentation' p
Long Parameter List,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,DrawHelpTip,The method has 6 parameters. Parameters: control' graphics' font' countMessage' basicDescription' documentation
Long Parameter List,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,DrawFixedWidthHelpTip,The method has 6 parameters. Parameters: control' graphics' font' countMessage' basicDescription' documentation
Long Parameter List,ICSharpCode.TextEditor.Actions,ToggleLineComment,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,RemoveCommentAt,The method has 5 parameters. Parameters: document' comment' selection' y1' y2
Long Parameter List,ICSharpCode.TextEditor.Actions,ToggleLineComment,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,SetCommentAt,The method has 5 parameters. Parameters: document' comment' selection' y1' y2
Long Parameter List,ICSharpCode.TextEditor.Actions,ToggleLineComment,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,ShouldComment,The method has 5 parameters. Parameters: document' comment' selection' startLine' endLine
Long Parameter List,ICSharpCode.TextEditor.Actions,ToggleBlockComment,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,FindSelectedCommentRegion,The method has 5 parameters. Parameters: document' commentStart' commentEnd' selectionStartOffset' selectionEndOffset
Long Parameter List,ICSharpCode.TextEditor.Actions,ToggleBlockComment,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,SetCommentAt,The method has 5 parameters. Parameters: document' offsetStart' offsetEnd' commentStart' commentEnd
Long Parameter List,ICSharpCode.TextEditor.Gui.CompletionWindow,CodeCompletionWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\CodeCompletionWindow.cs,ShowCompletionWindow,The method has 5 parameters. Parameters: parent' control' fileName' completionDataProvider' firstChar
Long Parameter List,ICSharpCode.TextEditor.Gui.CompletionWindow,CodeCompletionWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\CodeCompletionWindow.cs,ShowCompletionWindow,The method has 7 parameters. Parameters: parent' control' fileName' completionDataProvider' firstChar' showDeclarationWindow' fixedListViewWidth
Long Parameter List,ICSharpCode.TextEditor.Gui.CompletionWindow,CodeCompletionWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\CodeCompletionWindow.cs,CodeCompletionWindow,The method has 6 parameters. Parameters: completionDataProvider' completionData' parentWindow' control' showDeclarationWindow' fixedListViewWidth
Long Identifier,ICSharpCode.TextEditor,Caret,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\Caret.cs,,The length of the parameter firePositionChangedAfterUpdateEnd is 33.
Long Statement,ICSharpCode.TextEditor.Document,DefaultFormattingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FormattingStrategy\DefaultFormattingStrategy.cs,SmartReplaceLine,The length of the statement  "					document.Replace(lineOffset + pos + newLineTextTrim.Length' line.Length - pos - newLineTextTrim.Length' newLineText.Substring(newLineText.Length - endWhitespaceLength)); " is 169.
Long Statement,ICSharpCode.TextEditor.Document,DefaultFormattingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FormattingStrategy\DefaultFormattingStrategy.cs,IndentLine,The length of the statement  "					throw new NotSupportedException("Unsupported value for IndentStyle: " + textArea.Document.TextEditorProperties.IndentStyle); " is 124.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,ResolveRuleSetReferences,The length of the statement  "							throw new HighlightingDefinitionInvalidException("The RuleSet " + aSpan.Rule + " could not be found in mode definition " + this.Name); " is 134.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,ResolveExternalReferences,The length of the statement  "						throw new HighlightingDefinitionInvalidException("The mode defintion " + ruleSet.Reference + " which is refered from the " + this.Name + " mode definition could not be found"); " is 176.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,ResolveExternalReferences,The length of the statement  "						throw new HighlightingDefinitionInvalidException("The mode defintion " + ruleSet.Reference + " which is refered from the " + this.Name + " mode definition does not implement IHighlightingStrategyUsingRuleSets"); " is 211.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,MarkTokens,The length of the statement  "				currentSpanStack = ((previousLine != null && previousLine.HighlightSpanStack != null) ? previousLine.HighlightSpanStack.Clone() : null); " is 136.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,MarkTokensInLine,The length of the statement  "			currentSpanStack = ((previousLine != null && previousLine.HighlightSpanStack != null) ? previousLine.HighlightSpanStack.Clone() : null); " is 136.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,MarkTokens,The length of the statement  "//				document.RequestUpdate(new TextAreaUpdate(TextAreaUpdateType.SingleLine' document.GetLineNumberForOffset(document.Caret.Offset))); " is 136.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,ParseLine,The length of the statement  "							if (!inSpan && (Char.IsDigit(ch) || (ch == '.' && i + 1 < currentLineLength && Char.IsDigit(document.GetCharAt(currentLineOffset + i + 1)))) && currentLength == 0) { " is 165.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,ParseLine,The length of the statement  "								if (ch == '0' && i + 1 < currentLineLength && Char.ToUpper(document.GetCharAt(currentLineOffset + i + 1)) == 'X') { // hex digits " is 129.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,ParseLine,The length of the statement  "									if (i + 1 < currentLineLength && (document.GetCharAt(currentLineOffset + i + 1) == '+' || document.GetCharAt(currentLine.Offset + i + 1) == '-')) { " is 147.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,ParseLine,The length of the statement  "									    && (!span.IsBeginStartOfLine.HasValue || span.IsBeginStartOfLine.Value == (currentLength == 0 && words.TrueForAll(delegate(TextWord textWord) { return textWord.Type != TextWordType.Word; }))) " is 191.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,PushCurWord,The length of the statement  "//									document.RequestUpdate(new TextAreaUpdate(TextAreaUpdateType.SingleLine' document.GetLineNumberForOffset(document.Caret.Offset))); " is 141.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,PushCurWord,The length of the statement  "					words.Add(new TextWord(document' currentLine' currentOffset' currentLength' markNext != null ? markNext : c' hasDefaultColor)); " is 127.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,PushCurWord,The length of the statement  "					HighlightColor c = markNext != null ? markNext : GetColor(activeRuleSet' document' currentLine' currentOffset' currentLength); " is 126.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,MatchExpr,The length of the statement  "											char docChar = ignoreCase ? Char.ToUpperInvariant(document.GetCharAt(lineSegment.Offset + index + j + k)) : document.GetCharAt(lineSegment.Offset + index + j + k); " is 163.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,MatchExpr,The length of the statement  "											char docChar = ignoreCase ? Char.ToUpperInvariant(document.GetCharAt(lineSegment.Offset + index - whatmatch.Length + k)) : document.GetCharAt(lineSegment.Offset + index - whatmatch.Length + k); " is 193.
Long Statement,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,MatchExpr,The length of the statement  "							char docChar = ignoreCase ? Char.ToUpperInvariant(document.GetCharAt(lineSegment.Offset + index + j)) : document.GetCharAt(lineSegment.Offset + index + j); " is 155.
Long Statement,ICSharpCode.TextEditor.Document,HighlightingDefinitionParser,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightingDefinitionParser.cs,Parse,The length of the statement  "				Stream shemaStream = typeof(HighlightingDefinitionParser).Assembly.GetManifestResourceStream("ICSharpCode.TextEditor.Resources.Mode.xsd"); " is 138.
Long Statement,ICSharpCode.TextEditor.Document,HighlightingDefinitionParser,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightingDefinitionParser.cs,Parse,The length of the statement  "					KeyValuePair<SyntaxMode' ISyntaxModeFileProvider> entry = HighlightingManager.Manager.FindHighlighterEntry(doc.DocumentElement.GetAttribute("extends")); " is 152.
Long Statement,ICSharpCode.TextEditor.Document,HighlightingDefinitionParser,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightingDefinitionParser.cs,Parse,The length of the statement  "						throw new HighlightingDefinitionInvalidException("Cannot find referenced highlighting source " + doc.DocumentElement.GetAttribute("extends")); " is 142.
Long Statement,ICSharpCode.TextEditor.Document,HighlightingDefinitionParser,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightingDefinitionParser.cs,Parse,The length of the statement  "								highlighter.SetColorFor(el.GetAttribute("name")' el.HasAttribute("bgcolor") ? new HighlightBackground(el) : new HighlightColor(el)); " is 132.
Long Statement,ICSharpCode.TextEditor.Document,HighlightingDefinitionParser,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightingDefinitionParser.cs,Parse,The length of the statement  "				throw new HighlightingDefinitionInvalidException("Could not load mode definition file '" + syntaxMode.FileName + "'.\n"' e); " is 124.
Long Statement,ICSharpCode.TextEditor.Document,HighlightingManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightingManager.cs,LoadDefinition,The length of the statement  "					throw new HighlightingDefinitionInvalidException("The name specified in the .xshd '" + highlightingStrategy.Name + "' must be equal the syntax mode name '" + syntaxMode.Name + "'"); " is 181.
Long Statement,ICSharpCode.TextEditor.Document,TextWord,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\TextWord.cs,Split,The length of the statement  "			TextWord after = new TextWord(word.document' word.line' word.offset + pos' word.length - pos' word.color' word.hasDefaultColor); " is 128.
Long Statement,ICSharpCode.TextEditor.Document,LineManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\LineManager\LineManager.cs,GetNextVisibleLineAbove,The length of the statement  "					while (curLineNumber < TotalNumberOfLines && (curLineNumber >= lineCollection.Count || !document.FoldingManager.IsLineVisible(curLineNumber))) { " is 144.
Long Statement,ICSharpCode.TextEditor.Document,LineSegment,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\LineManager\LineSegment.cs,ToString,The length of the statement  "				return "[LineSegment: (deleted) Length = " + Length + "' TotalLength = " + TotalLength + "' DelimiterLength = " + delimiterLength + "]"; " is 136.
Long Statement,ICSharpCode.TextEditor.Document,LineSegment,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\LineManager\LineSegment.cs,ToString,The length of the statement  "				return "[LineSegment: LineNumber=" + LineNumber + "' Offset = "+ Offset +"' Length = " + Length + "' TotalLength = " + TotalLength + "' DelimiterLength = " + delimiterLength + "]"; " is 180.
Long Statement,ICSharpCode.TextEditor.Document,LineLengthChangeEventArgs,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\LineManager\LineManagerEventArgs.cs,ToString,The length of the statement  "			return string.Format("[LineLengthEventArgs Document={0} LineSegment={1} LengthDelta={2}]"' this.Document' this.LineSegment' this.lengthDelta); " is 142.
Long Statement,ICSharpCode.TextEditor.Document,GapTextBufferStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\TextBufferStrategy\GapTextBufferStrategy.cs,GetText,The length of the statement  "				throw new ArgumentOutOfRangeException("length"' length' "0 <= length' offset(" + offset + ")+length <= " + Length.ToString()); " is 126.
Long Statement,ICSharpCode.TextEditor.Document,GapTextBufferStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\TextBufferStrategy\GapTextBufferStrategy.cs,MakeNewBuffer,The length of the statement  "				Array.Copy(buffer' gapEndOffset' newBuffer' newBuffer.Length - (buffer.Length - gapEndOffset)' buffer.Length - gapEndOffset); " is 125.
Long Statement,ICSharpCode.TextEditor.Document,DefaultSelection,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\Selection\DefaultSelection.cs,ContainsPosition,The length of the statement  "				startPosition.Y == position.Y && startPosition.X <= position.X && (startPosition.Y != endPosition.Y || position.X <= endPosition.X) || " is 134.
Long Statement,ICSharpCode.TextEditor.Document,SelectionManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\Selection\SelectionManager.cs,SetSelection,The length of the statement  "				document.RequestUpdate(new TextAreaUpdate(TextAreaUpdateType.LinesBetween' selection.StartPosition.Y' selection.EndPosition.Y)); " is 128.
Long Statement,ICSharpCode.TextEditor.Document,SelectionManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\Selection\SelectionManager.cs,ClearWithoutUpdate,The length of the statement  "				document.RequestUpdate(new TextAreaUpdate(TextAreaUpdateType.LinesBetween' selection.StartPosition.Y' selection.EndPosition.Y)); " is 128.
Long Statement,ICSharpCode.TextEditor.Document,SelectionManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\Selection\SelectionManager.cs,ClearSelection,The length of the statement  "			TextLocation newSelectionStart = textArea.TextView.GetLogicalPosition(mousepos.X - textArea.TextView.DrawingPosition.X' mousepos.Y - textArea.TextView.DrawingPosition.Y); " is 170.
Long Statement,ICSharpCode.TextEditor.Document,SyntaxMode,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\SyntaxModes\SyntaxMode.cs,ToString,The length of the statement  "			return String.Format("[SyntaxMode: FileName={0}' Name={1}' Extensions=({2})]"' fileName' name' String.Join("'"' extensions)); " is 125.
Long Statement,ICSharpCode.TextEditor.Document,ResourceSyntaxModeProvider,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\SyntaxModes\ResourceSyntaxModeProvider.cs,GetSyntaxModeFile,The length of the statement  "			return new XmlTextReader(assembly.GetManifestResourceStream("ICSharpCode.TextEditor.Resources." + syntaxMode.FileName)); " is 120.
Long Statement,ICSharpCode.TextEditor.Document,FileSyntaxModeProvider,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\SyntaxModes\FileSyntaxModeProvider.cs,GetSyntaxModeFile,The length of the statement  "				throw new HighlightingDefinitionInvalidException("Can't load highlighting definition " + syntaxModeFile + " (file not found)!"); " is 128.
Long Statement,ICSharpCode.TextEditor,Caret,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\Caret.cs,UpdateCaretPosition,The length of the statement  "					if (textArea.MotherTextAreaControl.TextEditorProperties.LineViewerStyle == LineViewerStyle.FullRow && oldLine != line) { " is 120.
Long Statement,ICSharpCode.TextEditor,TextArea,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextArea.cs,SearchMatchingBracket,The length of the statement  "			if (textView.Highlight != null && textView.Highlight.OpenBrace.Y >=0 && textView.Highlight.OpenBrace.Y < Document.TotalNumberOfLines) { " is 135.
Long Statement,ICSharpCode.TextEditor,TextArea,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextArea.cs,SearchMatchingBracket,The length of the statement  "			if (textView.Highlight != null && textView.Highlight.CloseBrace.Y >=0 && textView.Highlight.CloseBrace.Y < Document.TotalNumberOfLines) { " is 137.
Long Statement,ICSharpCode.TextEditor,TextArea,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextArea.cs,OnMouseMove,The length of the statement  "				TextLocation realmousepos = TextView.GetLogicalPosition(e.X - TextView.DrawingPosition.X' e.Y - TextView.DrawingPosition.Y); " is 124.
Long Statement,ICSharpCode.TextEditor,TextArea,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextArea.cs,ReplaceChar,The length of the statement  "			if (Document.TextEditorProperties.DocumentSelectionMode == DocumentSelectionMode.Normal && SelectionManager.SelectionCollection.Count > 0) { " is 140.
Long Statement,ICSharpCode.TextEditor,TextArea,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextArea.cs,InvalidateLines,The length of the statement  "			int height    = Math.Min(textView.DrawingPosition.Height' (int)((1 + lineEnd - lineBegin) * (textView.FontHeight + 1))); " is 120.
Long Statement,ICSharpCode.TextEditor,TextEditorControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextEditorControl.cs,MeasurePrintingHeight,The length of the statement  "						SizeF drawingSize = g.MeasureString(word.Word' word.GetFont(fontContainer)' new SizeF(maxWidth' fontHeight * 100)' printingStringFormat); " is 137.
Long Statement,ICSharpCode.TextEditor,TextEditorControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextEditorControl.cs,DrawLine,The length of the statement  "						SizeF drawingSize = g.MeasureString(word.Word' word.GetFont(fontContainer)' new SizeF(margin.Width' fontHeight * 100)' printingStringFormat); " is 141.
Long Statement,ICSharpCode.TextEditor,TextEditorControlBase,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextEditorControlBase.cs,OnReloadHighlighting,The length of the statement  "					Document.HighlightingStrategy = HighlightingStrategyFactory.CreateHighlightingStrategy(Document.HighlightingStrategy.Name); " is 123.
Long Statement,ICSharpCode.TextEditor,TextAreaClipboardHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaClipboardHandler.cs,Cut,The length of the statement  "				textArea.SelectionManager.SetSelection(textArea.Document.OffsetToPosition(lineWhereCaretIs.Offset)' textArea.Document.OffsetToPosition(lineWhereCaretIs.Offset + lineWhereCaretIs.TotalLength)); " is 192.
Long Statement,ICSharpCode.TextEditor,TextAreaClipboardHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaClipboardHandler.cs,Copy,The length of the statement  "			if (!CopyTextToClipboard(textArea.SelectionManager.SelectedText) && textArea.Document.TextEditorProperties.CutCopyWholeLine) { " is 126.
Long Statement,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintDocumentLine,The length of the statement  "					List<FoldMarker> starts = textArea.Document.FoldingManager.GetFoldedFoldingsWithStartAfterColumn(lineNumber' column - 1); " is 121.
Long Statement,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintDocumentLine,The length of the statement  "							physicalXPos = PaintLinePart(g' lineNumber' column' textArea.Document.GetLineSegment(lineNumber).Length' lineRectangle' physicalXPos); " is 134.
Long Statement,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintDocumentLine,The length of the statement  "					bool drawSelected = ColumnRange.WholeColumn.Equals(selectionRange2) || firstFolding.StartColumn >= selectionRange2.StartColumn && firstFolding.EndColumn <= selectionRange2.EndColumn; " is 182.
Long Statement,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintDocumentLine,The length of the statement  "				physicalXPos = PaintLinePart(g' lineNumber' 0' textArea.Document.GetLineSegment(lineNumber).Length' lineRectangle' physicalXPos); " is 129.
Long Statement,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintDocumentLine,The length of the statement  "				bool  selectionBeyondEOL = selectionRange.EndColumn > currentLine.Length || ColumnRange.WholeColumn.Equals(selectionRange); " is 123.
Long Statement,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintDocumentLine,The length of the statement  "					physicalXPos += DrawEOLMarker(g' eolMarkerColor.Color' selectionBeyondEOL ? bgColorBrush : backgroundBrush' physicalXPos' lineRectangle.Y); " is 139.
Long Statement,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintDocumentLine,The length of the statement  "						g.FillRectangle(BrushRegistry.GetBrush(selectionColor.BackgroundColor)' new RectangleF(physicalXPos' lineRectangle.Y' WideSpaceWidth' lineRectangle.Height)); " is 157.
Long Statement,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintDocumentLine,The length of the statement  "				                new RectangleF(physicalXPos' lineRectangle.Y' lineRectangle.Width - physicalXPos + lineRectangle.X' lineRectangle.Height)); " is 123.
Long Statement,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawLineMarkerAtLine,The length of the statement  "			return lineNumber == base.textArea.Caret.Line && textArea.MotherTextAreaControl.TextEditorProperties.LineViewerStyle == LineViewerStyle.FullRow; " is 144.
Long Statement,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintFoldingText,The length of the statement  "			Brush               bgColorBrush    = drawSelected ? BrushRegistry.GetBrush(selectionColor.BackgroundColor) : GetBgColorBrush(lineNumber); " is 138.
Long Statement,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintFoldingText,The length of the statement  "			g.DrawRectangle(BrushRegistry.GetPen(drawSelected ? Color.DarkGray : Color.Gray)' rect.X' rect.Y' rect.Width' rect.Height); " is 123.
Long Statement,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintLinePart,The length of the statement  "				Brush wordBackBrush = GetMarkerBrushAt(currentLine.Offset + currentWordOffset' currentWord.Length' ref wordForeColor' out markers); " is 131.
Long Statement,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintLinePart,The length of the statement  "						DrawBracketHighlight(g' new Rectangle((int)wordRectangle.X' lineRectangle.Y' (int)wordRectangle.Width - 1' lineRectangle.Height - 1)); " is 134.
Long Statement,ICSharpCode.TextEditor,GutterMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\GutterMargin.cs,Paint,The length of the statement  "			Brush fillBrush = textArea.Enabled ? BrushRegistry.GetBrush(lineNumberPainterColor.BackgroundColor) : SystemBrushes.InactiveBorder; " is 131.
Long Statement,ICSharpCode.TextEditor,GutterMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\GutterMargin.cs,Paint,The length of the statement  "					int curLine = textArea.Document.GetFirstLogicalLine(textArea.Document.GetVisibleLine(textArea.TextView.FirstVisibleLine) + y); " is 126.
Long Statement,ICSharpCode.TextEditor,GutterMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\GutterMargin.cs,HandleMouseDown,The length of the statement  "								textArea.SelectionManager.SetSelection(new DefaultSelection(textArea.Document' selectionStartPos' new TextLocation(0' realline + 1))); " is 134.
Long Statement,ICSharpCode.TextEditor,GutterMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\GutterMargin.cs,HandleMouseDown,The length of the statement  "								textArea.SelectionManager.SetSelection(new DefaultSelection(textArea.Document' selectionStartPos' new TextLocation(textArea.Document.GetLineSegment(realline).Length + 1' realline))); " is 182.
Long Statement,ICSharpCode.TextEditor,GutterMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\GutterMargin.cs,HandleMouseDown,The length of the statement  "							textArea.SelectionManager.SetSelection(new DefaultSelection(textArea.Document' selectionStartPos' new TextLocation(selectionStartPos.X' selectionStartPos.Y))); " is 159.
Long Statement,ICSharpCode.TextEditor,GutterMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\GutterMargin.cs,HandleMouseDown,The length of the statement  "							textArea.SelectionManager.ExtendSelection(new TextLocation(selectionStartPos.X' selectionStartPos.Y)' new TextLocation(0' realline)); " is 133.
Long Statement,ICSharpCode.TextEditor,GutterMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\GutterMargin.cs,HandleMouseDown,The length of the statement  "						textArea.SelectionManager.SetSelection(new DefaultSelection(textArea.Document' selectionStartPos' new TextLocation(selectionStartPos.X' selectionStartPos.Y + 1))); " is 163.
Long Statement,ICSharpCode.TextEditor,GutterMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\GutterMargin.cs,HandleMouseDown,The length of the statement  "						textArea.SelectionManager.SetSelection(new DefaultSelection(textArea.Document' new TextLocation(0' realline)' new TextLocation(textArea.Document.GetLineSegment(realline).Length + 1' selectionStartPos.Y))); " is 205.
Long Statement,ICSharpCode.TextEditor,TextAreaControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaControl.cs,SetScrollBarBounds,The length of the statement  "			vScrollBar.Bounds = new Rectangle(textArea.Bounds.Right' 0' SystemInformation.HorizontalScrollBarArrowWidth' Height - SystemInformation.VerticalScrollBarArrowHeight); " is 166.
Long Statement,ICSharpCode.TextEditor,TextAreaControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaControl.cs,AdjustScrollBars,The length of the statement  "			int lastLine = this.Document.GetFirstLogicalLine(textArea.TextView.FirstPhysicalLine + textArea.TextView.VisibleLineCount); " is 123.
Long Statement,ICSharpCode.TextEditor,TextAreaControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaControl.cs,ScrollTo,The length of the statement  "						hScrollBar.Value = (int)Math.Max(0' Math.Min(hScrollBar.Maximum' (pos - textArea.TextView.VisibleColumnCount + scrollMarginHeight))); " is 133.
Long Statement,ICSharpCode.TextEditor,TextAreaControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaControl.cs,ScrollTo,The length of the statement  "				this.vScrollBar.Value =  Math.Max(0' Math.Min(this.vScrollBar.Maximum' (line - scrollMarginHeight + 3) * textArea.TextView.FontHeight)) ; " is 137.
Long Statement,ICSharpCode.TextEditor,TextAreaControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaControl.cs,ScrollTo,The length of the statement  "						this.vScrollBar.Value =  Math.Max(0' Math.Min(this.vScrollBar.Maximum' (line - scrollMarginHeight - 1) * textArea.TextView.FontHeight)) ; " is 137.
Long Statement,ICSharpCode.TextEditor,TextAreaControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaControl.cs,CenterViewOn,The length of the statement  "				this.vScrollBar.Value =  Math.Max(0' Math.Min(this.vScrollBar.Maximum' (line - scrollMarginHeight + 3) * textArea.TextView.FontHeight)) ; " is 137.
Long Statement,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,ExtendSelectionToMouse,The length of the statement  "			if (!minSelection.IsEmpty && textArea.SelectionManager.SelectionCollection.Count > 0 && textArea.SelectionManager.selectFrom.where == WhereFrom.TArea) { " is 152.
Long Statement,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,ExtendSelectionToMouse,The length of the statement  "				if (textArea.SelectionManager.GreaterEqPos(max' realmousepos) && textArea.SelectionManager.GreaterEqPos(realmousepos' min)) { " is 125.
Long Statement,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,OnMouseDown,The length of the statement  "						TextLocation realmousepos = textArea.TextView.GetLogicalPosition(mousepos.X - textArea.TextView.DrawingPosition.X' mousepos.Y - textArea.TextView.DrawingPosition.Y); " is 165.
Long Statement,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,OnMouseDown,The length of the statement  "					TextLocation realmousepos = textArea.TextView.GetLogicalPosition(mousepos.X - textArea.TextView.DrawingPosition.X' mousepos.Y - textArea.TextView.DrawingPosition.Y); " is 165.
Long Statement,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,FindWordStart,The length of the statement  "			} else  if (IsSelectableChar(document.GetCharAt(offset)) || (offset > 0 && Char.IsWhiteSpace(document.GetCharAt(offset)) && IsSelectableChar(document.GetCharAt(offset - 1))))  { " is 177.
Long Statement,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,FindWordStart,The length of the statement  "				if (offset > 0 && !Char.IsWhiteSpace(document.GetCharAt(offset - 1)) && !IsSelectableChar(document.GetCharAt(offset - 1)) ) { " is 125.
Long Statement,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,Paint,The length of the statement  "			g.FillRectangle(SystemBrushes.Control' new Rectangle(drawingPosition.X' rect.Top' drawingPosition.Width - 1' rect.Height)); " is 123.
Long Statement,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,Paint,The length of the statement  "			g.DrawLine(SystemPens.ControlDark' base.drawingPosition.Right - 1' rect.Top' base.drawingPosition.Right - 1' rect.Bottom); " is 122.
Long Statement,ICSharpCode.TextEditor,FoldMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\FoldMargin.cs,Paint,The length of the statement  "			for (int y = 0; y < (DrawingPosition.Height + textArea.TextView.VisibleLineDrawingRemainder) / textArea.TextView.FontHeight + 1; ++y) { " is 135.
Long Statement,ICSharpCode.TextEditor,FoldMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\FoldMargin.cs,Paint,The length of the statement  "						g.FillRectangle(BrushRegistry.GetBrush(textArea.Enabled ? lineNumberPainterColor.BackgroundColor : SystemColors.InactiveBorder)' " is 128.
Long Statement,ICSharpCode.TextEditor,FoldMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\FoldMargin.cs,Paint,The length of the statement  "						g.FillRectangle(BrushRegistry.GetBrush(textArea.Enabled ? lineNumberPainterColor.BackgroundColor : SystemColors.InactiveBorder)' markerRectangle); " is 146.
Long Statement,ICSharpCode.TextEditor,FoldMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\FoldMargin.cs,PaintFoldMarker,The length of the statement  "					g.DrawLine(BrushRegistry.GetPen(isEndSelected || (isStartSelected && isVisible) || isBetweenSelected ? selectedFoldLine.Color : foldLineColor.Color)' " is 149.
Long Statement,ICSharpCode.TextEditor,HRuler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\HRuler.cs,OnPaint,The length of the statement  "			for (float x = textArea.TextView.DrawingPosition.Left; x < textArea.TextView.DrawingPosition.Right; x += textArea.TextView.WideSpaceWidth) { " is 140.
Long Statement,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,GetLeftHandSideDrawingSizeHelpTipFromCombinedDescription,The length of the statement  "			return GetLeftHandSideDrawingSizeDrawHelpTip(control' graphics' font' countMessage' basicDescription' documentation' p); " is 120.
Long Statement,ICSharpCode.TextEditor.Util,WeakCollection<T>,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\WeakCollection.cs,CheckNoEnumerator,The length of the statement  "				throw new InvalidOperationException("The WeakCollection is already being enumerated' it cannot be modified at the same time. Ensure you dispose the first enumerator before modifying the WeakCollection."); " is 204.
Long Statement,ICSharpCode.TextEditor.Util,WeakCollection<T>,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\WeakCollection.cs,GetEnumerator,The length of the statement  "				throw new InvalidOperationException("The WeakCollection is already being enumerated' it cannot be enumerated twice at the same time. Ensure you dispose the first enumerator before using another enumerator."); " is 208.
Long Statement,ICSharpCode.TextEditor.Actions,CaretUp,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\CaretActions.cs,Execute,The length of the statement  "				                      textArea.TextView.DrawingPosition.Y + (visualLine - 1) * textArea.TextView.FontHeight - textArea.TextView.TextArea.VirtualTop.Y); " is 129.
Long Statement,ICSharpCode.TextEditor.Actions,ShiftTab,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,RemoveTabs,The length of the statement  "					string newLine = TextUtilities.LeadingWhiteSpaceToTabs(document.GetText(line.Offset'line.Length)'document.Properties.Get("TabIndent"' 4)); " is 138.
Long Statement,ICSharpCode.TextEditor.Actions,ShiftTab,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,RemoveTabs,The length of the statement  "							for (leadingSpaces = 1; leadingSpaces < line.Length && document.GetCharAt(line.Offset + leadingSpaces) == ' '; leadingSpaces++) { " is 129.
Long Statement,ICSharpCode.TextEditor.Actions,ToggleBlockComment,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "				selectionEndOffset = textArea.SelectionManager.SelectionCollection[textArea.SelectionManager.SelectionCollection.Count - 1].EndOffset; " is 134.
Long Statement,ICSharpCode.TextEditor.Actions,ToggleBlockComment,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "			BlockCommentRegion commentRegion = FindSelectedCommentRegion(textArea.Document' commentStart' commentEnd' selectionStartOffset' selectionEndOffset); " is 148.
Long Statement,ICSharpCode.TextEditor.Actions,BlockCommentRegion,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Equals,The length of the statement  "			return this.commentStart == other.commentStart && this.commentEnd == other.commentEnd && this.startOffset == other.startOffset && this.endOffset == other.endOffset; " is 164.
Long Statement,ICSharpCode.TextEditor.Actions,Backspace,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "						textArea.Document.RequestUpdate(new TextAreaUpdate(TextAreaUpdateType.PositionToEnd' new TextLocation(0' curLineNr - 1))); " is 122.
Long Statement,ICSharpCode.TextEditor.Actions,Backspace,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "						textArea.Document.RequestUpdate(new TextAreaUpdate(TextAreaUpdateType.PositionToLineEnd' new TextLocation(textArea.Caret.Offset - textArea.Document.GetLineSegment(curLineNr).Offset' curLineNr))); " is 195.
Long Statement,ICSharpCode.TextEditor.Actions,Delete,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "//						textArea.Document.RequestUpdate(new TextAreaUpdate(TextAreaUpdateType.PositionToLineEnd' new TextLocation(textArea.Caret.Offset - textArea.Document.GetLineSegment(curLineNr).Offset' curLineNr))); " is 203.
Long Statement,ICSharpCode.TextEditor.Actions,MovePageDown,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "			int requestedLineNumber = Math.Min(textArea.Document.GetNextVisibleLineAbove(curLineNr' textArea.TextView.VisibleLineCount)' textArea.Document.TotalNumberOfLines - 1); " is 167.
Long Statement,ICSharpCode.TextEditor.Actions,MovePageUp,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "			int requestedLineNumber = Math.Max(textArea.Document.GetNextVisibleLineBelow(curLineNr' textArea.TextView.VisibleLineCount)' 0); " is 128.
Long Statement,ICSharpCode.TextEditor.Actions,Return,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "				textArea.Document.RequestUpdate(new TextAreaUpdate(TextAreaUpdateType.PositionToEnd' new TextLocation(0' curLineNr - 1))); " is 122.
Long Statement,ICSharpCode.TextEditor.Actions,WordBackspace,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "			textArea.Document.RequestUpdate(new TextAreaUpdate(TextAreaUpdateType.PositionToEnd' new TextLocation(0' textArea.Document.GetLineNumberForOffset(textArea.Caret.Offset)))); " is 172.
Long Statement,ICSharpCode.TextEditor.Actions,DeleteWord,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Execute,The length of the statement  "			textArea.Document.RequestUpdate(new TextAreaUpdate(TextAreaUpdateType.PositionToEnd' new TextLocation(0' textArea.Document.GetLineNumberForOffset(textArea.Caret.Offset)))); " is 172.
Long Statement,ICSharpCode.TextEditor.Actions,ConvertLeadingTabsToSpaces,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\FormatActions.cs,Convert,The length of the statement  "					for(whiteSpace = 0; whiteSpace < line.Length && Char.IsWhiteSpace(document.GetCharAt(line.Offset + whiteSpace)); whiteSpace++) { " is 128.
Long Statement,ICSharpCode.TextEditor.Actions,ConvertLeadingSpacesToTabs,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\FormatActions.cs,Convert,The length of the statement  "					string newLine = TextUtilities.LeadingWhiteSpaceToTabs(document.GetText(line.Offset'line.Length)' document.TextEditorProperties.TabIndent); " is 139.
Long Statement,ICSharpCode.TextEditor.Gui.CompletionWindow,CodeCompletionWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\CodeCompletionWindow.cs,ShowCompletionWindow,The length of the statement  "			ICompletionData[] completionData = completionDataProvider.GenerateCompletionData(fileName' control.ActiveTextAreaControl.TextArea' firstChar); " is 142.
Long Statement,ICSharpCode.TextEditor.Gui.CompletionWindow,CodeCompletionWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\CodeCompletionWindow.cs,ShowCompletionWindow,The length of the statement  "			CodeCompletionWindow codeCompletionWindow = new CodeCompletionWindow(completionDataProvider' completionData' parent' control' showDeclarationWindow' fixedListViewWidth); " is 169.
Long Statement,ICSharpCode.TextEditor.Gui.InsightWindow,InsightWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\InsightWindow\InsightWindow.cs,CaretOffsetChanged,The length of the statement  "			int ypos = (control.ActiveTextAreaControl.Document.GetVisibleLine(caretPos.Y) + 1) * control.ActiveTextAreaControl.TextArea.TextView.FontHeight " is 143.
Long Statement,ICSharpCode.TextEditor.Gui.InsightWindow,InsightWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\InsightWindow\InsightWindow.cs,CaretOffsetChanged,The length of the statement  "			int rulerHeight = control.TextEditorProperties.ShowHorizontalRuler ? control.ActiveTextAreaControl.TextArea.TextView.FontHeight : 0; " is 132.
Complex Conditional,ICSharpCode.TextEditor.Document,BookmarkManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\BookmarkManager\BookmarkManager.cs,GetFirstMark,The conditional expression  "predicate(bookmark[i]) && bookmark[i].IsEnabled && (first == null || bookmark[i].LineNumber < first.LineNumber)"  is complex.
Complex Conditional,ICSharpCode.TextEditor.Document,BookmarkManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\BookmarkManager\BookmarkManager.cs,GetLastMark,The conditional expression  "predicate(bookmark[i]) && bookmark[i].IsEnabled && (last == null || bookmark[i].LineNumber > last.LineNumber)"  is complex.
Complex Conditional,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,ParseLine,The conditional expression  "activeSpan != null && activeSpan.End != null && activeSpan.End.Length == 1  								    && escapeCharacter == activeSpan.End[0]"  is complex.
Complex Conditional,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,ParseLine,The conditional expression  "!inSpan && (Char.IsDigit(ch) || (ch == '.' && i + 1 < currentLineLength && Char.IsDigit(document.GetCharAt(currentLineOffset + i + 1)))) && currentLength == 0"  is complex.
Complex Conditional,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,ParseLine,The conditional expression  "(!span.IsBeginSingleWord || currentLength == 0)  									    && (!span.IsBeginStartOfLine.HasValue || span.IsBeginStartOfLine.Value == (currentLength == 0 && words.TrueForAll(delegate(TextWord textWord) { return textWord.Type != TextWordType.Word; })))  									    && MatchExpr(currentLine' span.Begin' i' document' activeRuleSet.IgnoreCase)"  is complex.
Complex Conditional,ICSharpCode.TextEditor.Document,FoldingManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FoldingStrategy\FoldingManager.cs,GetFoldingsFromPosition,The conditional expression  "(fm.StartLine == line && column > fm.StartColumn && !(fm.EndLine == line && column >= fm.EndColumn)) ||  					    (fm.EndLine == line && column < fm.EndColumn && !(fm.StartLine == line && column <= fm.StartColumn)) ||  					    (line > fm.StartLine && line < fm.EndLine)"  is complex.
Complex Conditional,ICSharpCode.TextEditor.Document,FoldingManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FoldingStrategy\FoldingManager.cs,GetTopLevelFoldedFoldings,The conditional expression  "fm.IsFolded && (fm.StartLine > end.Y || fm.StartLine == end.Y && fm.StartColumn >= end.X)"  is complex.
Complex Conditional,ICSharpCode.TextEditor.Document,MarkerStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\MarkerStrategy\MarkerStrategy.cs,GetMarkers,The conditional expression  "marker.Offset <= offset && offset <= marker.EndOffset ||  				    // end in marker region  				    marker.Offset <= endOffset && endOffset <= marker.EndOffset ||  				    // marker start in region  				    offset <= marker.Offset && marker.Offset <= endOffset ||  				    // marker end in region  				    offset <= marker.EndOffset && marker.EndOffset <= endOffset"  is complex.
Complex Conditional,ICSharpCode.TextEditor,Ime,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\Ime.cs,Ime,The conditional expression  "PROCESSOR_ARCHITEW6432 == "IA64" || PROCESSOR_ARCHITEW6432 == "AMD64" || Environment.OSVersion.Platform == PlatformID.Unix || Environment.Version >= new Version(4'0)"  is complex.
Complex Conditional,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,PaintLinePart,The conditional expression  "highlight.OpenBrace.Y == lineNumber && highlight.OpenBrace.X == currentWordOffset ||  					    highlight.CloseBrace.Y == lineNumber && highlight.CloseBrace.X == currentWordOffset"  is complex.
Complex Conditional,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,GetDrawingXPos,The conditional expression  "f == null || !(f.StartLine < logicalLine || f.StartLine == logicalLine && f.StartColumn < logicalColumn)"  is complex.
Complex Conditional,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,FindWordStart,The conditional expression  "IsSelectableChar(document.GetCharAt(offset)) || (offset > 0 && Char.IsWhiteSpace(document.GetCharAt(offset)) && IsSelectableChar(document.GetCharAt(offset - 1)))"  is complex.
Complex Conditional,ICSharpCode.TextEditor.Util,AugmentableRedBlackTree<T;Host>,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\AugmentableRedBlackTree.cs,FixTreeOnDelete,The conditional expression  "parentNode.color == BLACK  			    && sibling.color == BLACK  			    && GetColor(sibling.left) == BLACK  			    && GetColor(sibling.right) == BLACK"  is complex.
Complex Conditional,ICSharpCode.TextEditor.Util,AugmentableRedBlackTree<T;Host>,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\AugmentableRedBlackTree.cs,FixTreeOnDelete,The conditional expression  "parentNode.color == RED  			    && sibling.color == BLACK  			    && GetColor(sibling.left) == BLACK  			    && GetColor(sibling.right) == BLACK"  is complex.
Complex Conditional,ICSharpCode.TextEditor.Util,AugmentableRedBlackTree<T;Host>,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\AugmentableRedBlackTree.cs,FixTreeOnDelete,The conditional expression  "node == parentNode.left &&  			    sibling.color == BLACK &&  			    GetColor(sibling.left) == RED &&  			    GetColor(sibling.right) == BLACK"  is complex.
Complex Conditional,ICSharpCode.TextEditor.Util,AugmentableRedBlackTree<T;Host>,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\AugmentableRedBlackTree.cs,FixTreeOnDelete,The conditional expression  "node == parentNode.right &&  			         sibling.color == BLACK &&  			         GetColor(sibling.right) == RED &&  			         GetColor(sibling.left) == BLACK"  is complex.
Complex Conditional,ICSharpCode.TextEditor.Actions,ToggleBlockComment,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Execute,The conditional expression  "commentStart == null || commentStart.Length == 0 || commentEnd == null || commentEnd.Length == 0"  is complex.
Complex Conditional,ICSharpCode.TextEditor.Gui.CompletionWindow,CodeCompletionWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\CodeCompletionWindow.cs,CodeCompletionListViewSelectedItemChanged,The conditional expression  "showDeclarationWindow && data != null && data.Description != null && data.Description.Length > 0"  is complex.
Virtual Method Call from Constructor,ICSharpCode.TextEditor,TextEditorControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextEditorControl.cs,TextEditorControl,The constructor "TextEditorControl" calls a virtual method "InitializeTextAreaControl".
Virtual Method Call from Constructor,ICSharpCode.TextEditor.Gui.CompletionWindow,AbstractCompletionWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\AbstractCompletionWindow.cs,AbstractCompletionWindow,The constructor "AbstractCompletionWindow" calls a virtual method "SetLocation".
Empty Catch Block,ICSharpCode.TextEditor.Document,FoldingManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FoldingStrategy\FoldingManager.cs,DeserializeFromString,The method has an empty catch block.
Empty Catch Block,ICSharpCode.TextEditor,TextAreaClipboardHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaClipboardHandler.cs,SafeSetClipboard,The method has an empty catch block.
Magic Number,ICSharpCode.TextEditor.Document,TextUtilities,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\TextUtilities.cs,GetExpressionBeforeOffset,The following statement contains a magic number: switch (document.GetCharAt(offset - 1)) {  					case '\n':  					case '\r':  					case '}':  						goto done;  //						offset = SearchBracketBackward(document' offset - 2' '{'''}');  //						break;  					case ']':  						offset = SearchBracketBackward(document' offset - 2' '[''']');  						break;  					case ')':  						offset = SearchBracketBackward(document' offset - 2' '(''')');  						break;  					case '.':  						--offset;  						break;  					case '"':  						if (offset < initialOffset - 1) {  							return null;  						}  						return "\"\"";  					case '\'':  						if (offset < initialOffset - 1) {  							return null;  						}  						return "'a'";  					case '>':  						if (document.GetCharAt(offset - 2) == '-') {  							offset -= 2;  							break;  						}  						goto done;  					default:  						if (Char.IsWhiteSpace(document.GetCharAt(offset - 1))) {  							--offset;  							break;  						}  						int start = offset - 1;  						if (!IsLetterDigitOrUnderscore(document.GetCharAt(start))) {  							goto done;  						}  						  						while (start > 0 && IsLetterDigitOrUnderscore(document.GetCharAt(start - 1))) {  							--start;  						}  						string word = document.GetText(start' offset - start).Trim();  						switch (word) {  							case "ref":  							case "out":  							case "in":  							case "return":  							case "throw":  							case "case":  								goto done;  						}  						  						if (word.Length > 0 && !IsLetterDigitOrUnderscore(word[0])) {  							goto done;  						}  						offset = start;  						break;  				}
Magic Number,ICSharpCode.TextEditor.Document,TextUtilities,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\TextUtilities.cs,GetExpressionBeforeOffset,The following statement contains a magic number: switch (document.GetCharAt(offset - 1)) {  					case '\n':  					case '\r':  					case '}':  						goto done;  //						offset = SearchBracketBackward(document' offset - 2' '{'''}');  //						break;  					case ']':  						offset = SearchBracketBackward(document' offset - 2' '[''']');  						break;  					case ')':  						offset = SearchBracketBackward(document' offset - 2' '(''')');  						break;  					case '.':  						--offset;  						break;  					case '"':  						if (offset < initialOffset - 1) {  							return null;  						}  						return "\"\"";  					case '\'':  						if (offset < initialOffset - 1) {  							return null;  						}  						return "'a'";  					case '>':  						if (document.GetCharAt(offset - 2) == '-') {  							offset -= 2;  							break;  						}  						goto done;  					default:  						if (Char.IsWhiteSpace(document.GetCharAt(offset - 1))) {  							--offset;  							break;  						}  						int start = offset - 1;  						if (!IsLetterDigitOrUnderscore(document.GetCharAt(start))) {  							goto done;  						}  						  						while (start > 0 && IsLetterDigitOrUnderscore(document.GetCharAt(start - 1))) {  							--start;  						}  						string word = document.GetText(start' offset - start).Trim();  						switch (word) {  							case "ref":  							case "out":  							case "in":  							case "return":  							case "throw":  							case "case":  								goto done;  						}  						  						if (word.Length > 0 && !IsLetterDigitOrUnderscore(word[0])) {  							goto done;  						}  						offset = start;  						break;  				}
Magic Number,ICSharpCode.TextEditor.Document,TextUtilities,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\TextUtilities.cs,GetExpressionBeforeOffset,The following statement contains a magic number: switch (document.GetCharAt(offset - 1)) {  					case '\n':  					case '\r':  					case '}':  						goto done;  //						offset = SearchBracketBackward(document' offset - 2' '{'''}');  //						break;  					case ']':  						offset = SearchBracketBackward(document' offset - 2' '[''']');  						break;  					case ')':  						offset = SearchBracketBackward(document' offset - 2' '(''')');  						break;  					case '.':  						--offset;  						break;  					case '"':  						if (offset < initialOffset - 1) {  							return null;  						}  						return "\"\"";  					case '\'':  						if (offset < initialOffset - 1) {  							return null;  						}  						return "'a'";  					case '>':  						if (document.GetCharAt(offset - 2) == '-') {  							offset -= 2;  							break;  						}  						goto done;  					default:  						if (Char.IsWhiteSpace(document.GetCharAt(offset - 1))) {  							--offset;  							break;  						}  						int start = offset - 1;  						if (!IsLetterDigitOrUnderscore(document.GetCharAt(start))) {  							goto done;  						}  						  						while (start > 0 && IsLetterDigitOrUnderscore(document.GetCharAt(start - 1))) {  							--start;  						}  						string word = document.GetText(start' offset - start).Trim();  						switch (word) {  							case "ref":  							case "out":  							case "in":  							case "return":  							case "throw":  							case "case":  								goto done;  						}  						  						if (word.Length > 0 && !IsLetterDigitOrUnderscore(word[0])) {  							goto done;  						}  						offset = start;  						break;  				}
Magic Number,ICSharpCode.TextEditor.Document,TextUtilities,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\TextUtilities.cs,GetExpressionBeforeOffset,The following statement contains a magic number: switch (document.GetCharAt(offset - 1)) {  					case '\n':  					case '\r':  					case '}':  						goto done;  //						offset = SearchBracketBackward(document' offset - 2' '{'''}');  //						break;  					case ']':  						offset = SearchBracketBackward(document' offset - 2' '[''']');  						break;  					case ')':  						offset = SearchBracketBackward(document' offset - 2' '(''')');  						break;  					case '.':  						--offset;  						break;  					case '"':  						if (offset < initialOffset - 1) {  							return null;  						}  						return "\"\"";  					case '\'':  						if (offset < initialOffset - 1) {  							return null;  						}  						return "'a'";  					case '>':  						if (document.GetCharAt(offset - 2) == '-') {  							offset -= 2;  							break;  						}  						goto done;  					default:  						if (Char.IsWhiteSpace(document.GetCharAt(offset - 1))) {  							--offset;  							break;  						}  						int start = offset - 1;  						if (!IsLetterDigitOrUnderscore(document.GetCharAt(start))) {  							goto done;  						}  						  						while (start > 0 && IsLetterDigitOrUnderscore(document.GetCharAt(start - 1))) {  							--start;  						}  						string word = document.GetText(start' offset - start).Trim();  						switch (word) {  							case "ref":  							case "out":  							case "in":  							case "return":  							case "throw":  							case "case":  								goto done;  						}  						  						if (word.Length > 0 && !IsLetterDigitOrUnderscore(word[0])) {  							goto done;  						}  						offset = start;  						break;  				}
Magic Number,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,MarkTokens,The following statement contains a magic number: spanChanged || inputLines.Count > 20
Magic Number,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,ParseLine,The following statement contains a magic number: switch (ch) {  					case '\n':  					case '\r':  						PushCurWord(document' ref markNext' words);  						++currentOffset;  						break;  					case ' ':  						PushCurWord(document' ref markNext' words);  						if (activeSpan != null && activeSpan.Color.HasBackground) {  							words.Add(new TextWord.SpaceTextWord(activeSpan.Color));  						} else {  							words.Add(TextWord.Space);  						}  						++currentOffset;  						break;  					case '\t':  						PushCurWord(document' ref markNext' words);  						if (activeSpan != null && activeSpan.Color.HasBackground) {  							words.Add(new TextWord.TabTextWord(activeSpan.Color));  						} else {  							words.Add(TextWord.Tab);  						}  						++currentOffset;  						break;  					default:  						{  							// handle escape characters  							char escapeCharacter = '\0';  							if (activeSpan != null && activeSpan.EscapeCharacter != '\0') {  								escapeCharacter = activeSpan.EscapeCharacter;  							} else if (activeRuleSet != null) {  								escapeCharacter = activeRuleSet.EscapeCharacter;  							}  							if (escapeCharacter != '\0' && escapeCharacter == ch) {  								// we found the escape character  								if (activeSpan != null && activeSpan.End != null && activeSpan.End.Length == 1  								    && escapeCharacter == activeSpan.End[0])  								{  									// the escape character is a end-doubling escape character  									// it may count as escape only when the next character is the escape' too  									if (i + 1 < currentLineLength) {  										if (document.GetCharAt(currentLineOffset + i + 1) == escapeCharacter) {  											currentLength += 2;  											PushCurWord(document' ref markNext' words);  											++i;  											continue;  										}  									}  								} else {  									// this is a normal \-style escape  									++currentLength;  									if (i + 1 < currentLineLength) {  										++currentLength;  									}  									PushCurWord(document' ref markNext' words);  									++i;  									continue;  								}  							}  							  							// highlight digits  							if (!inSpan && (Char.IsDigit(ch) || (ch == '.' && i + 1 < currentLineLength && Char.IsDigit(document.GetCharAt(currentLineOffset + i + 1)))) && currentLength == 0) {  								bool ishex = false;  								bool isfloatingpoint = false;  								  								if (ch == '0' && i + 1 < currentLineLength && Char.ToUpper(document.GetCharAt(currentLineOffset + i + 1)) == 'X') { // hex digits  									const string hex = "0123456789ABCDEF";  									++currentLength;  									++i; // skip 'x'  									++currentLength;  									ishex = true;  									while (i + 1 < currentLineLength && hex.IndexOf(Char.ToUpper(document.GetCharAt(currentLineOffset + i + 1))) != -1) {  										++i;  										++currentLength;  									}  								} else {  									++currentLength;  									while (i + 1 < currentLineLength && Char.IsDigit(document.GetCharAt(currentLineOffset + i + 1))) {  										++i;  										++currentLength;  									}  								}  								if (!ishex && i + 1 < currentLineLength && document.GetCharAt(currentLineOffset + i + 1) == '.') {  									isfloatingpoint = true;  									++i;  									++currentLength;  									while (i + 1 < currentLineLength && Char.IsDigit(document.GetCharAt(currentLineOffset + i + 1))) {  										++i;  										++currentLength;  									}  								}  								  								if (i + 1 < currentLineLength && Char.ToUpper(document.GetCharAt(currentLineOffset + i + 1)) == 'E') {  									isfloatingpoint = true;  									++i;  									++currentLength;  									if (i + 1 < currentLineLength && (document.GetCharAt(currentLineOffset + i + 1) == '+' || document.GetCharAt(currentLine.Offset + i + 1) == '-')) {  										++i;  										++currentLength;  									}  									while (i + 1 < currentLine.Length && Char.IsDigit(document.GetCharAt(currentLineOffset + i + 1))) {  										++i;  										++currentLength;  									}  								}  								  								if (i + 1 < currentLine.Length) {  									char nextch = Char.ToUpper(document.GetCharAt(currentLineOffset + i + 1));  									if (nextch == 'F' || nextch == 'M' || nextch == 'D') {  										isfloatingpoint = true;  										++i;  										++currentLength;  									}  								}  								  								if (!isfloatingpoint) {  									bool isunsigned = false;  									if (i + 1 < currentLineLength && Char.ToUpper(document.GetCharAt(currentLineOffset + i + 1)) == 'U') {  										++i;  										++currentLength;  										isunsigned = true;  									}  									if (i + 1 < currentLineLength && Char.ToUpper(document.GetCharAt(currentLineOffset + i + 1)) == 'L') {  										++i;  										++currentLength;  										if (!isunsigned && i + 1 < currentLineLength && Char.ToUpper(document.GetCharAt(currentLineOffset + i + 1)) == 'U') {  											++i;  											++currentLength;  										}  									}  								}  								  								words.Add(new TextWord(document' currentLine' currentOffset' currentLength' DigitColor' false));  								currentOffset += currentLength;  								currentLength = 0;  								continue;  							}    							// Check for SPAN ENDs  							if (inSpan) {  								if (activeSpan.End != null && activeSpan.End.Length > 0) {  									if (MatchExpr(currentLine' activeSpan.End' i' document' activeSpan.IgnoreCase)) {  										PushCurWord(document' ref markNext' words);  										string regex = GetRegString(currentLine' activeSpan.End' i' document);  										currentLength += regex.Length;  										words.Add(new TextWord(document' currentLine' currentOffset' currentLength' activeSpan.EndColor' false));  										currentOffset += currentLength;  										currentLength = 0;  										i += regex.Length - 1;  										currentSpanStack.Pop();  										UpdateSpanStateVariables();  										continue;  									}  								}  							}  							  							// check for SPAN BEGIN  							if (activeRuleSet != null) {  								foreach (Span span in activeRuleSet.Spans) {  									if ((!span.IsBeginSingleWord || currentLength == 0)  									    && (!span.IsBeginStartOfLine.HasValue || span.IsBeginStartOfLine.Value == (currentLength == 0 && words.TrueForAll(delegate(TextWord textWord) { return textWord.Type != TextWordType.Word; })))  									    && MatchExpr(currentLine' span.Begin' i' document' activeRuleSet.IgnoreCase)) {  										PushCurWord(document' ref markNext' words);  										string regex = GetRegString(currentLine' span.Begin' i' document);  										  										if (!OverrideSpan(regex' document' words' span' ref i)) {  											currentLength += regex.Length;  											words.Add(new TextWord(document' currentLine' currentOffset' currentLength' span.BeginColor' false));  											currentOffset += currentLength;  											currentLength = 0;  											  											i += regex.Length - 1;  											if (currentSpanStack == null) {  												currentSpanStack = new SpanStack();  											}  											currentSpanStack.Push(span);  											span.IgnoreCase = activeRuleSet.IgnoreCase;  											  											UpdateSpanStateVariables();  										}  										  										goto skip;  									}  								}  							}  							  							// check if the char is a delimiter  							if (activeRuleSet != null && (int)ch < 256 && activeRuleSet.Delimiters[(int)ch]) {  								PushCurWord(document' ref markNext' words);  								if (currentOffset + currentLength +1 < currentLine.Length) {  									++currentLength;  									PushCurWord(document' ref markNext' words);  									goto skip;  								}  							}  							  							++currentLength;  							skip: continue;  						}  				}
Magic Number,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,ParseLine,The following statement contains a magic number: switch (ch) {  					case '\n':  					case '\r':  						PushCurWord(document' ref markNext' words);  						++currentOffset;  						break;  					case ' ':  						PushCurWord(document' ref markNext' words);  						if (activeSpan != null && activeSpan.Color.HasBackground) {  							words.Add(new TextWord.SpaceTextWord(activeSpan.Color));  						} else {  							words.Add(TextWord.Space);  						}  						++currentOffset;  						break;  					case '\t':  						PushCurWord(document' ref markNext' words);  						if (activeSpan != null && activeSpan.Color.HasBackground) {  							words.Add(new TextWord.TabTextWord(activeSpan.Color));  						} else {  							words.Add(TextWord.Tab);  						}  						++currentOffset;  						break;  					default:  						{  							// handle escape characters  							char escapeCharacter = '\0';  							if (activeSpan != null && activeSpan.EscapeCharacter != '\0') {  								escapeCharacter = activeSpan.EscapeCharacter;  							} else if (activeRuleSet != null) {  								escapeCharacter = activeRuleSet.EscapeCharacter;  							}  							if (escapeCharacter != '\0' && escapeCharacter == ch) {  								// we found the escape character  								if (activeSpan != null && activeSpan.End != null && activeSpan.End.Length == 1  								    && escapeCharacter == activeSpan.End[0])  								{  									// the escape character is a end-doubling escape character  									// it may count as escape only when the next character is the escape' too  									if (i + 1 < currentLineLength) {  										if (document.GetCharAt(currentLineOffset + i + 1) == escapeCharacter) {  											currentLength += 2;  											PushCurWord(document' ref markNext' words);  											++i;  											continue;  										}  									}  								} else {  									// this is a normal \-style escape  									++currentLength;  									if (i + 1 < currentLineLength) {  										++currentLength;  									}  									PushCurWord(document' ref markNext' words);  									++i;  									continue;  								}  							}  							  							// highlight digits  							if (!inSpan && (Char.IsDigit(ch) || (ch == '.' && i + 1 < currentLineLength && Char.IsDigit(document.GetCharAt(currentLineOffset + i + 1)))) && currentLength == 0) {  								bool ishex = false;  								bool isfloatingpoint = false;  								  								if (ch == '0' && i + 1 < currentLineLength && Char.ToUpper(document.GetCharAt(currentLineOffset + i + 1)) == 'X') { // hex digits  									const string hex = "0123456789ABCDEF";  									++currentLength;  									++i; // skip 'x'  									++currentLength;  									ishex = true;  									while (i + 1 < currentLineLength && hex.IndexOf(Char.ToUpper(document.GetCharAt(currentLineOffset + i + 1))) != -1) {  										++i;  										++currentLength;  									}  								} else {  									++currentLength;  									while (i + 1 < currentLineLength && Char.IsDigit(document.GetCharAt(currentLineOffset + i + 1))) {  										++i;  										++currentLength;  									}  								}  								if (!ishex && i + 1 < currentLineLength && document.GetCharAt(currentLineOffset + i + 1) == '.') {  									isfloatingpoint = true;  									++i;  									++currentLength;  									while (i + 1 < currentLineLength && Char.IsDigit(document.GetCharAt(currentLineOffset + i + 1))) {  										++i;  										++currentLength;  									}  								}  								  								if (i + 1 < currentLineLength && Char.ToUpper(document.GetCharAt(currentLineOffset + i + 1)) == 'E') {  									isfloatingpoint = true;  									++i;  									++currentLength;  									if (i + 1 < currentLineLength && (document.GetCharAt(currentLineOffset + i + 1) == '+' || document.GetCharAt(currentLine.Offset + i + 1) == '-')) {  										++i;  										++currentLength;  									}  									while (i + 1 < currentLine.Length && Char.IsDigit(document.GetCharAt(currentLineOffset + i + 1))) {  										++i;  										++currentLength;  									}  								}  								  								if (i + 1 < currentLine.Length) {  									char nextch = Char.ToUpper(document.GetCharAt(currentLineOffset + i + 1));  									if (nextch == 'F' || nextch == 'M' || nextch == 'D') {  										isfloatingpoint = true;  										++i;  										++currentLength;  									}  								}  								  								if (!isfloatingpoint) {  									bool isunsigned = false;  									if (i + 1 < currentLineLength && Char.ToUpper(document.GetCharAt(currentLineOffset + i + 1)) == 'U') {  										++i;  										++currentLength;  										isunsigned = true;  									}  									if (i + 1 < currentLineLength && Char.ToUpper(document.GetCharAt(currentLineOffset + i + 1)) == 'L') {  										++i;  										++currentLength;  										if (!isunsigned && i + 1 < currentLineLength && Char.ToUpper(document.GetCharAt(currentLineOffset + i + 1)) == 'U') {  											++i;  											++currentLength;  										}  									}  								}  								  								words.Add(new TextWord(document' currentLine' currentOffset' currentLength' DigitColor' false));  								currentOffset += currentLength;  								currentLength = 0;  								continue;  							}    							// Check for SPAN ENDs  							if (inSpan) {  								if (activeSpan.End != null && activeSpan.End.Length > 0) {  									if (MatchExpr(currentLine' activeSpan.End' i' document' activeSpan.IgnoreCase)) {  										PushCurWord(document' ref markNext' words);  										string regex = GetRegString(currentLine' activeSpan.End' i' document);  										currentLength += regex.Length;  										words.Add(new TextWord(document' currentLine' currentOffset' currentLength' activeSpan.EndColor' false));  										currentOffset += currentLength;  										currentLength = 0;  										i += regex.Length - 1;  										currentSpanStack.Pop();  										UpdateSpanStateVariables();  										continue;  									}  								}  							}  							  							// check for SPAN BEGIN  							if (activeRuleSet != null) {  								foreach (Span span in activeRuleSet.Spans) {  									if ((!span.IsBeginSingleWord || currentLength == 0)  									    && (!span.IsBeginStartOfLine.HasValue || span.IsBeginStartOfLine.Value == (currentLength == 0 && words.TrueForAll(delegate(TextWord textWord) { return textWord.Type != TextWordType.Word; })))  									    && MatchExpr(currentLine' span.Begin' i' document' activeRuleSet.IgnoreCase)) {  										PushCurWord(document' ref markNext' words);  										string regex = GetRegString(currentLine' span.Begin' i' document);  										  										if (!OverrideSpan(regex' document' words' span' ref i)) {  											currentLength += regex.Length;  											words.Add(new TextWord(document' currentLine' currentOffset' currentLength' span.BeginColor' false));  											currentOffset += currentLength;  											currentLength = 0;  											  											i += regex.Length - 1;  											if (currentSpanStack == null) {  												currentSpanStack = new SpanStack();  											}  											currentSpanStack.Push(span);  											span.IgnoreCase = activeRuleSet.IgnoreCase;  											  											UpdateSpanStateVariables();  										}  										  										goto skip;  									}  								}  							}  							  							// check if the char is a delimiter  							if (activeRuleSet != null && (int)ch < 256 && activeRuleSet.Delimiters[(int)ch]) {  								PushCurWord(document' ref markNext' words);  								if (currentOffset + currentLength +1 < currentLine.Length) {  									++currentLength;  									PushCurWord(document' ref markNext' words);  									goto skip;  								}  							}  							  							++currentLength;  							skip: continue;  						}  				}
Magic Number,ICSharpCode.TextEditor.Document,FontContainer,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\FontContainer.cs,ParseFont,The following statement contains a magic number: return new Font(descr[1]' Single.Parse(descr[3]));
Magic Number,ICSharpCode.TextEditor.Document,HighlightColor,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightColor.cs,ParseColorString,The following statement contains a magic number: double factor = Double.Parse(cNames[1]) / 100;
Magic Number,ICSharpCode.TextEditor.Document,HighlightColor,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightColor.cs,ParseColorString,The following statement contains a magic number: cNames.Length == 2
Magic Number,ICSharpCode.TextEditor.Document,HighlightColor,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightColor.cs,ParseColor,The following statement contains a magic number: int a = 255;
Magic Number,ICSharpCode.TextEditor.Document,HighlightColor,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightColor.cs,ParseColor,The following statement contains a magic number: offset = 2;
Magic Number,ICSharpCode.TextEditor.Document,HighlightColor,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightColor.cs,ParseColor,The following statement contains a magic number: a = Int32.Parse(c.Substring(1'2)' NumberStyles.HexNumber);
Magic Number,ICSharpCode.TextEditor.Document,HighlightColor,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightColor.cs,ParseColor,The following statement contains a magic number: c.Length > 7
Magic Number,ICSharpCode.TextEditor.Document,HighlightColor,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightColor.cs,ParseColor,The following statement contains a magic number: int r = Int32.Parse(c.Substring(1 + offset'2)' NumberStyles.HexNumber);
Magic Number,ICSharpCode.TextEditor.Document,HighlightColor,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightColor.cs,ParseColor,The following statement contains a magic number: int g = Int32.Parse(c.Substring(3 + offset'2)' NumberStyles.HexNumber);
Magic Number,ICSharpCode.TextEditor.Document,HighlightColor,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightColor.cs,ParseColor,The following statement contains a magic number: int g = Int32.Parse(c.Substring(3 + offset'2)' NumberStyles.HexNumber);
Magic Number,ICSharpCode.TextEditor.Document,HighlightColor,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightColor.cs,ParseColor,The following statement contains a magic number: int b = Int32.Parse(c.Substring(5 + offset'2)' NumberStyles.HexNumber);
Magic Number,ICSharpCode.TextEditor.Document,HighlightColor,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\HighlightColor.cs,ParseColor,The following statement contains a magic number: int b = Int32.Parse(c.Substring(5 + offset'2)' NumberStyles.HexNumber);
Magic Number,ICSharpCode.TextEditor.Document,LineManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\LineManager\LineManager.cs,NextDelimiter,The following statement contains a magic number: switch (text[i]) {  					case '\r':  						if (i + 1 < text.Length) {  							if (text[i + 1] == '\n') {  								delimiterSegment.Offset = i;  								delimiterSegment.Length = 2;  								return delimiterSegment;  							}  						}  						#if DATACONSISTENCYTEST  						Debug.Assert(false' "Found lone \\r' data consistency problems?");  						#endif  						goto case '\n';  					case '\n':  						delimiterSegment.Offset = i;  						delimiterSegment.Length = 1;  						return delimiterSegment;  				}
Magic Number,ICSharpCode.TextEditor.Document,IndentFoldingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FoldingStrategy\IndentFoldingStrategy.cs,GetLevel,The following statement contains a magic number: c == '\t' || (c == ' ' && ++spaces == 4)
Magic Number,ICSharpCode.TextEditor.Document,FoldingManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FoldingStrategy\FoldingManager.cs,DeserializeFromString,The following statement contains a magic number: string text   = lines[i + 2];
Magic Number,ICSharpCode.TextEditor.Document,FoldingManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\FoldingStrategy\FoldingManager.cs,DeserializeFromString,The following statement contains a magic number: bool isFolded = Boolean.Parse(lines[i + 3]);
Magic Number,ICSharpCode.TextEditor.Document,ColumnRange,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\Selection\ColumnRange.cs,GetHashCode,The following statement contains a magic number: return startColumn + (endColumn << 16);
Magic Number,ICSharpCode.TextEditor.Document,DefaultTextEditorProperties,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\DefaultTextEditorProperties.cs,DefaultTextEditorProperties,The following statement contains a magic number: DefaultFont = new Font("Courier New"' 10);
Magic Number,ICSharpCode.TextEditor,TextLocation,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\TextLocation.cs,GetHashCode,The following statement contains a magic number: return unchecked (87 * x.GetHashCode() ^ y.GetHashCode());
Magic Number,ICSharpCode.TextEditor,Ime,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\Ime.cs,Ime,The following statement contains a magic number: PROCESSOR_ARCHITEW6432 == "IA64" || PROCESSOR_ARCHITEW6432 == "AMD64" || Environment.OSVersion.Platform == PlatformID.Unix || Environment.Version >= new Version(4'0)
Magic Number,ICSharpCode.TextEditor,Caret,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\Caret.cs,CreateCaret,The following statement contains a magic number: switch (caretMode) {  					case CaretMode.InsertMode:  						caretCreated = caretImplementation.Create(2' textArea.TextView.FontHeight);  						break;  					case CaretMode.OverwriteMode:  						caretCreated = caretImplementation.Create((int)textArea.TextView.SpaceWidth' textArea.TextView.FontHeight);  						break;  				}
Magic Number,ICSharpCode.TextEditor,ManagedCaret,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\Caret.cs,Create,The following statement contains a magic number: this.width = width - 2;
Magic Number,ICSharpCode.TextEditor,TextArea,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextArea.cs,RequestToolTip,The following statement contains a magic number: toolTipRectangle = new Rectangle(mousePos.X - 4' mousePos.Y - 4' 8' 8);
Magic Number,ICSharpCode.TextEditor,TextArea,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextArea.cs,RequestToolTip,The following statement contains a magic number: toolTipRectangle = new Rectangle(mousePos.X - 4' mousePos.Y - 4' 8' 8);
Magic Number,ICSharpCode.TextEditor,TextArea,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextArea.cs,RequestToolTip,The following statement contains a magic number: toolTipRectangle = new Rectangle(mousePos.X - 4' mousePos.Y - 4' 8' 8);
Magic Number,ICSharpCode.TextEditor,TextArea,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextArea.cs,RequestToolTip,The following statement contains a magic number: toolTipRectangle = new Rectangle(mousePos.X - 4' mousePos.Y - 4' 8' 8);
Magic Number,ICSharpCode.TextEditor,TextArea,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextArea.cs,InvalidateLines,The following statement contains a magic number: Rectangle r = new Rectangle(0'  			                            y - 1 - this.virtualTop.Y'  			                            Width'  			                            height + 3);
Magic Number,ICSharpCode.TextEditor,TextEditorControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextEditorControl.cs,Split,The following statement contains a magic number: secondaryTextArea.Height = Height / 2;
Magic Number,ICSharpCode.TextEditor,TextEditorControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextEditorControl.cs,Split,The following statement contains a magic number: textAreaSplitter.Height = 8;
Magic Number,ICSharpCode.TextEditor,TextEditorControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextEditorControl.cs,BeginPrint,The following statement contains a magic number: float[] tabStops = new float[100];
Magic Number,ICSharpCode.TextEditor,TextEditorControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextEditorControl.cs,MeasurePrintingHeight,The following statement contains a magic number: switch (word.Type) {  					case TextWordType.Space:  						Advance(ref xPos' ref yPos' maxWidth' primaryTextArea.TextArea.TextView.SpaceWidth' fontHeight);  //						if (!gotNonWhitespace) {  //							curTabIndent = xPos;  //						}  						break;  					case TextWordType.Tab:  						Advance(ref xPos' ref yPos' maxWidth' TabIndent * primaryTextArea.TextArea.TextView.WideSpaceWidth' fontHeight);  //						if (!gotNonWhitespace) {  //							curTabIndent = xPos;  //						}  						break;  					case TextWordType.Word:  //						if (!gotNonWhitespace) {  //							gotNonWhitespace = true;  //							curTabIndent    += TabIndent * primaryTextArea.TextArea.TextView.GetWidth(' ');  //						}  						SizeF drawingSize = g.MeasureString(word.Word' word.GetFont(fontContainer)' new SizeF(maxWidth' fontHeight * 100)' printingStringFormat);  						Advance(ref xPos' ref yPos' maxWidth' drawingSize.Width' fontHeight);  						break;  				}
Magic Number,ICSharpCode.TextEditor,TextEditorControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextEditorControl.cs,DrawLine,The following statement contains a magic number: switch (word.Type) {  					case TextWordType.Space:  						Advance(ref xPos' ref yPos' margin.Width' primaryTextArea.TextArea.TextView.SpaceWidth' fontHeight);  //						if (!gotNonWhitespace) {  //							curTabIndent = xPos;  //						}  						break;  					case TextWordType.Tab:  						Advance(ref xPos' ref yPos' margin.Width' TabIndent * primaryTextArea.TextArea.TextView.WideSpaceWidth' fontHeight);  //						if (!gotNonWhitespace) {  //							curTabIndent = xPos;  //						}  						break;  					case TextWordType.Word:  //						if (!gotNonWhitespace) {  //							gotNonWhitespace = true;  //							curTabIndent    += TabIndent * primaryTextArea.TextArea.TextView.GetWidth(' ');  //						}  						g.DrawString(word.Word' word.GetFont(fontContainer)' BrushRegistry.GetBrush(word.Color)' xPos + margin.X' yPos);  						SizeF drawingSize = g.MeasureString(word.Word' word.GetFont(fontContainer)' new SizeF(margin.Width' fontHeight * 100)' printingStringFormat);  						Advance(ref xPos' ref yPos' margin.Width' drawingSize.Width' fontHeight);  						break;  				}
Magic Number,ICSharpCode.TextEditor,TextEditorControlBase,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextEditorControlBase.cs,ParseFont,The following statement contains a magic number: return new Font(descr[1]' Single.Parse(descr[3]));
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawMarkerDraw,The following statement contains a magic number: switch (marker.TextMarkerType) {  					case TextMarkerType.Underlined:  						g.DrawLine(BrushRegistry.GetPen(marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  						break;  					case TextMarkerType.WaveLine:  						int reminder = ((int)drawingRect.X) % 6;  						for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 6) {  							g.DrawLine(BrushRegistry.GetPen(marker.Color)' i'     drawYPos + 3 - 4' i + 3' drawYPos + 1 - 4);  							if (i + 3 < drawingRect.Right) {  								g.DrawLine(BrushRegistry.GetPen(marker.Color)' i + 3' drawYPos + 1 - 4' i + 6' drawYPos + 3 - 4);  							}  						}  						break;  					case TextMarkerType.SolidBlock:  						g.FillRectangle(BrushRegistry.GetBrush(marker.Color)' drawingRect);  						break;  				}
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawMarkerDraw,The following statement contains a magic number: switch (marker.TextMarkerType) {  					case TextMarkerType.Underlined:  						g.DrawLine(BrushRegistry.GetPen(marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  						break;  					case TextMarkerType.WaveLine:  						int reminder = ((int)drawingRect.X) % 6;  						for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 6) {  							g.DrawLine(BrushRegistry.GetPen(marker.Color)' i'     drawYPos + 3 - 4' i + 3' drawYPos + 1 - 4);  							if (i + 3 < drawingRect.Right) {  								g.DrawLine(BrushRegistry.GetPen(marker.Color)' i + 3' drawYPos + 1 - 4' i + 6' drawYPos + 3 - 4);  							}  						}  						break;  					case TextMarkerType.SolidBlock:  						g.FillRectangle(BrushRegistry.GetBrush(marker.Color)' drawingRect);  						break;  				}
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawMarkerDraw,The following statement contains a magic number: switch (marker.TextMarkerType) {  					case TextMarkerType.Underlined:  						g.DrawLine(BrushRegistry.GetPen(marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  						break;  					case TextMarkerType.WaveLine:  						int reminder = ((int)drawingRect.X) % 6;  						for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 6) {  							g.DrawLine(BrushRegistry.GetPen(marker.Color)' i'     drawYPos + 3 - 4' i + 3' drawYPos + 1 - 4);  							if (i + 3 < drawingRect.Right) {  								g.DrawLine(BrushRegistry.GetPen(marker.Color)' i + 3' drawYPos + 1 - 4' i + 6' drawYPos + 3 - 4);  							}  						}  						break;  					case TextMarkerType.SolidBlock:  						g.FillRectangle(BrushRegistry.GetBrush(marker.Color)' drawingRect);  						break;  				}
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawMarkerDraw,The following statement contains a magic number: switch (marker.TextMarkerType) {  					case TextMarkerType.Underlined:  						g.DrawLine(BrushRegistry.GetPen(marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  						break;  					case TextMarkerType.WaveLine:  						int reminder = ((int)drawingRect.X) % 6;  						for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 6) {  							g.DrawLine(BrushRegistry.GetPen(marker.Color)' i'     drawYPos + 3 - 4' i + 3' drawYPos + 1 - 4);  							if (i + 3 < drawingRect.Right) {  								g.DrawLine(BrushRegistry.GetPen(marker.Color)' i + 3' drawYPos + 1 - 4' i + 6' drawYPos + 3 - 4);  							}  						}  						break;  					case TextMarkerType.SolidBlock:  						g.FillRectangle(BrushRegistry.GetBrush(marker.Color)' drawingRect);  						break;  				}
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawMarkerDraw,The following statement contains a magic number: switch (marker.TextMarkerType) {  					case TextMarkerType.Underlined:  						g.DrawLine(BrushRegistry.GetPen(marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  						break;  					case TextMarkerType.WaveLine:  						int reminder = ((int)drawingRect.X) % 6;  						for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 6) {  							g.DrawLine(BrushRegistry.GetPen(marker.Color)' i'     drawYPos + 3 - 4' i + 3' drawYPos + 1 - 4);  							if (i + 3 < drawingRect.Right) {  								g.DrawLine(BrushRegistry.GetPen(marker.Color)' i + 3' drawYPos + 1 - 4' i + 6' drawYPos + 3 - 4);  							}  						}  						break;  					case TextMarkerType.SolidBlock:  						g.FillRectangle(BrushRegistry.GetBrush(marker.Color)' drawingRect);  						break;  				}
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawMarkerDraw,The following statement contains a magic number: switch (marker.TextMarkerType) {  					case TextMarkerType.Underlined:  						g.DrawLine(BrushRegistry.GetPen(marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  						break;  					case TextMarkerType.WaveLine:  						int reminder = ((int)drawingRect.X) % 6;  						for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 6) {  							g.DrawLine(BrushRegistry.GetPen(marker.Color)' i'     drawYPos + 3 - 4' i + 3' drawYPos + 1 - 4);  							if (i + 3 < drawingRect.Right) {  								g.DrawLine(BrushRegistry.GetPen(marker.Color)' i + 3' drawYPos + 1 - 4' i + 6' drawYPos + 3 - 4);  							}  						}  						break;  					case TextMarkerType.SolidBlock:  						g.FillRectangle(BrushRegistry.GetBrush(marker.Color)' drawingRect);  						break;  				}
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawMarkerDraw,The following statement contains a magic number: switch (marker.TextMarkerType) {  					case TextMarkerType.Underlined:  						g.DrawLine(BrushRegistry.GetPen(marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  						break;  					case TextMarkerType.WaveLine:  						int reminder = ((int)drawingRect.X) % 6;  						for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 6) {  							g.DrawLine(BrushRegistry.GetPen(marker.Color)' i'     drawYPos + 3 - 4' i + 3' drawYPos + 1 - 4);  							if (i + 3 < drawingRect.Right) {  								g.DrawLine(BrushRegistry.GetPen(marker.Color)' i + 3' drawYPos + 1 - 4' i + 6' drawYPos + 3 - 4);  							}  						}  						break;  					case TextMarkerType.SolidBlock:  						g.FillRectangle(BrushRegistry.GetBrush(marker.Color)' drawingRect);  						break;  				}
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawMarkerDraw,The following statement contains a magic number: switch (marker.TextMarkerType) {  					case TextMarkerType.Underlined:  						g.DrawLine(BrushRegistry.GetPen(marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  						break;  					case TextMarkerType.WaveLine:  						int reminder = ((int)drawingRect.X) % 6;  						for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 6) {  							g.DrawLine(BrushRegistry.GetPen(marker.Color)' i'     drawYPos + 3 - 4' i + 3' drawYPos + 1 - 4);  							if (i + 3 < drawingRect.Right) {  								g.DrawLine(BrushRegistry.GetPen(marker.Color)' i + 3' drawYPos + 1 - 4' i + 6' drawYPos + 3 - 4);  							}  						}  						break;  					case TextMarkerType.SolidBlock:  						g.FillRectangle(BrushRegistry.GetBrush(marker.Color)' drawingRect);  						break;  				}
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawMarkerDraw,The following statement contains a magic number: switch (marker.TextMarkerType) {  					case TextMarkerType.Underlined:  						g.DrawLine(BrushRegistry.GetPen(marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  						break;  					case TextMarkerType.WaveLine:  						int reminder = ((int)drawingRect.X) % 6;  						for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 6) {  							g.DrawLine(BrushRegistry.GetPen(marker.Color)' i'     drawYPos + 3 - 4' i + 3' drawYPos + 1 - 4);  							if (i + 3 < drawingRect.Right) {  								g.DrawLine(BrushRegistry.GetPen(marker.Color)' i + 3' drawYPos + 1 - 4' i + 6' drawYPos + 3 - 4);  							}  						}  						break;  					case TextMarkerType.SolidBlock:  						g.FillRectangle(BrushRegistry.GetBrush(marker.Color)' drawingRect);  						break;  				}
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawMarkerDraw,The following statement contains a magic number: switch (marker.TextMarkerType) {  					case TextMarkerType.Underlined:  						g.DrawLine(BrushRegistry.GetPen(marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  						break;  					case TextMarkerType.WaveLine:  						int reminder = ((int)drawingRect.X) % 6;  						for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 6) {  							g.DrawLine(BrushRegistry.GetPen(marker.Color)' i'     drawYPos + 3 - 4' i + 3' drawYPos + 1 - 4);  							if (i + 3 < drawingRect.Right) {  								g.DrawLine(BrushRegistry.GetPen(marker.Color)' i + 3' drawYPos + 1 - 4' i + 6' drawYPos + 3 - 4);  							}  						}  						break;  					case TextMarkerType.SolidBlock:  						g.FillRectangle(BrushRegistry.GetBrush(marker.Color)' drawingRect);  						break;  				}
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawMarkerDraw,The following statement contains a magic number: switch (marker.TextMarkerType) {  					case TextMarkerType.Underlined:  						g.DrawLine(BrushRegistry.GetPen(marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  						break;  					case TextMarkerType.WaveLine:  						int reminder = ((int)drawingRect.X) % 6;  						for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 6) {  							g.DrawLine(BrushRegistry.GetPen(marker.Color)' i'     drawYPos + 3 - 4' i + 3' drawYPos + 1 - 4);  							if (i + 3 < drawingRect.Right) {  								g.DrawLine(BrushRegistry.GetPen(marker.Color)' i + 3' drawYPos + 1 - 4' i + 6' drawYPos + 3 - 4);  							}  						}  						break;  					case TextMarkerType.SolidBlock:  						g.FillRectangle(BrushRegistry.GetBrush(marker.Color)' drawingRect);  						break;  				}
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawMarkerDraw,The following statement contains a magic number: switch (marker.TextMarkerType) {  					case TextMarkerType.Underlined:  						g.DrawLine(BrushRegistry.GetPen(marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  						break;  					case TextMarkerType.WaveLine:  						int reminder = ((int)drawingRect.X) % 6;  						for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 6) {  							g.DrawLine(BrushRegistry.GetPen(marker.Color)' i'     drawYPos + 3 - 4' i + 3' drawYPos + 1 - 4);  							if (i + 3 < drawingRect.Right) {  								g.DrawLine(BrushRegistry.GetPen(marker.Color)' i + 3' drawYPos + 1 - 4' i + 6' drawYPos + 3 - 4);  							}  						}  						break;  					case TextMarkerType.SolidBlock:  						g.FillRectangle(BrushRegistry.GetBrush(marker.Color)' drawingRect);  						break;  				}
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,GetDrawingXPos,The following statement contains a magic number: FoldMarker f2 = foldings[i / 2];
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,GetDrawingXPos,The following statement contains a magic number: i /= 2;
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawBracketHighlight,The following statement contains a magic number: g.FillRectangle(BrushRegistry.GetBrush(Color.FromArgb(50' 0' 0' 255))' rect);
Magic Number,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawBracketHighlight,The following statement contains a magic number: g.FillRectangle(BrushRegistry.GetBrush(Color.FromArgb(50' 0' 0' 255))' rect);
Magic Number,ICSharpCode.TextEditor,TextAreaControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaControl.cs,AdjustScrollBarsClearCache,The following statement contains a magic number: lineLengthCache.Length < this.Document.TotalNumberOfLines + 2 * LineLengthCacheAdditionalSize
Magic Number,ICSharpCode.TextEditor,TextAreaControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaControl.cs,AdjustScrollBars,The following statement contains a magic number: hScrollBar.Maximum = (Math.Max(max + 20' textArea.TextView.VisibleColumnCount - 1));
Magic Number,ICSharpCode.TextEditor,TextAreaControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaControl.cs,ScrollTo,The following statement contains a magic number: this.vScrollBar.Value =  Math.Max(0' Math.Min(this.vScrollBar.Maximum' (line - scrollMarginHeight + 3) * textArea.TextView.FontHeight)) ;
Magic Number,ICSharpCode.TextEditor,TextAreaControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaControl.cs,ScrollTo,The following statement contains a magic number: line - scrollMarginHeight + 3 < curLineMin
Magic Number,ICSharpCode.TextEditor,TextAreaControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaControl.cs,CenterViewOn,The following statement contains a magic number: line -= textArea.TextView.VisibleLineCount / 2;
Magic Number,ICSharpCode.TextEditor,TextAreaControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaControl.cs,CenterViewOn,The following statement contains a magic number: this.vScrollBar.Value =  Math.Max(0' Math.Min(this.vScrollBar.Maximum' (line - scrollMarginHeight + 3) * textArea.TextView.FontHeight)) ;
Magic Number,ICSharpCode.TextEditor,TextAreaControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaControl.cs,WndProc,The following statement contains a magic number: int y = unchecked((short)((lParam & 0xffff0000) >> 16));
Magic Number,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,OnToolTipRequest,The following statement contains a magic number: endLines >= 10
Magic Number,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,TextAreaMouseMove,The following statement contains a magic number: Math.Abs(mousedownpos.X - e.X) >= SystemInformation.DragSize.Width / 2 ||  				    Math.Abs(mousedownpos.Y - e.Y) >= SystemInformation.DragSize.Height / 2
Magic Number,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,TextAreaMouseMove,The following statement contains a magic number: Math.Abs(mousedownpos.X - e.X) >= SystemInformation.DragSize.Width / 2 ||  				    Math.Abs(mousedownpos.Y - e.Y) >= SystemInformation.DragSize.Height / 2
Magic Number,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,OnMouseDown,The following statement contains a magic number: button == MouseButtons.Left && e.Clicks == 2
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,DrawBreakpoint,The following statement contains a magic number: int diameter = Math.Min(iconBarWidth - 2' textArea.TextView.FontHeight);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,DrawBreakpoint,The following statement contains a magic number: Rectangle rect = new Rectangle(1'  			                               y + (textArea.TextView.FontHeight - diameter) / 2'  			                               diameter'  			                               diameter);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,DrawBreakpoint,The following statement contains a magic number: pthGrBrush.CenterPoint = new PointF(rect.Left + rect.Width / 3 ' rect.Top + rect.Height / 3);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,DrawBreakpoint,The following statement contains a magic number: pthGrBrush.CenterPoint = new PointF(rect.Left + rect.Width / 3 ' rect.Top + rect.Height / 3);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,DrawBookmark,The following statement contains a magic number: int delta = textArea.TextView.FontHeight / 8;
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,DrawBookmark,The following statement contains a magic number: Rectangle rect = new Rectangle(1' y + delta' base.drawingPosition.Width - 4' textArea.TextView.FontHeight - delta * 2);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,DrawBookmark,The following statement contains a magic number: Rectangle rect = new Rectangle(1' y + delta' base.drawingPosition.Width - 4' textArea.TextView.FontHeight - delta * 2);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,DrawArrow,The following statement contains a magic number: int delta = textArea.TextView.FontHeight / 8;
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,DrawArrow,The following statement contains a magic number: Rectangle rect = new Rectangle(1' y + delta' base.drawingPosition.Width - 4' textArea.TextView.FontHeight - delta * 2);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,DrawArrow,The following statement contains a magic number: Rectangle rect = new Rectangle(1' y + delta' base.drawingPosition.Width - 4' textArea.TextView.FontHeight - delta * 2);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateArrowGraphicsPath,The following statement contains a magic number: int halfX = r.Width / 2;
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateArrowGraphicsPath,The following statement contains a magic number: int halfY = r.Height/ 2;
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine(r.X' r.Y + halfY/2' r.X + halfX' r.Y + halfY/2);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine(r.X' r.Y + halfY/2' r.X + halfX' r.Y + halfY/2);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine(r.X + halfX' r.Y + halfY/2' r.X + halfX' r.Y);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine(r.X + halfX' r.Bottom' r.X + halfX' r.Bottom - halfY/2);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine(r.X + halfX' r.Bottom - halfY/2' r.X' r.Bottom - halfY/2);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine(r.X + halfX' r.Bottom - halfY/2' r.X' r.Bottom - halfY/2);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine(r.X' r.Bottom - halfY/2' r.X' r.Y + halfY/2);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateArrowGraphicsPath,The following statement contains a magic number: gp.AddLine(r.X' r.Bottom - halfY/2' r.X' r.Y + halfY/2);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateRoundRectGraphicsPath,The following statement contains a magic number: int radius = r.Width / 2;
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateRoundRectGraphicsPath,The following statement contains a magic number: gp.AddArc(r.Right - radius' r.Y' radius' radius' 270' 90);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateRoundRectGraphicsPath,The following statement contains a magic number: gp.AddArc(r.Right - radius' r.Y' radius' radius' 270' 90);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateRoundRectGraphicsPath,The following statement contains a magic number: gp.AddArc(r.Right - radius' r.Bottom - radius' radius' radius' 0' 90);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateRoundRectGraphicsPath,The following statement contains a magic number: gp.AddArc(r.X' r.Bottom - radius' radius' radius' 90' 90);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateRoundRectGraphicsPath,The following statement contains a magic number: gp.AddArc(r.X' r.Bottom - radius' radius' radius' 90' 90);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateRoundRectGraphicsPath,The following statement contains a magic number: gp.AddArc(r.X' r.Y' radius' radius' 180' 90);
Magic Number,ICSharpCode.TextEditor,IconBarMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\IconBarMargin.cs,CreateRoundRectGraphicsPath,The following statement contains a magic number: gp.AddArc(r.X' r.Y' radius' radius' 180' 90);
Magic Number,ICSharpCode.TextEditor,FoldMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\FoldMargin.cs,PaintFoldMarker,The following statement contains a magic number: int foldMarkerSize = (int)Math.Round(textArea.TextView.FontHeight * 0.57f);
Magic Number,ICSharpCode.TextEditor,FoldMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\FoldMargin.cs,PaintFoldMarker,The following statement contains a magic number: foldMarkerSize -= (foldMarkerSize) % 2;
Magic Number,ICSharpCode.TextEditor,FoldMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\FoldMargin.cs,PaintFoldMarker,The following statement contains a magic number: int foldMarkerYPos = drawingRectangle.Y + (int)((drawingRectangle.Height - foldMarkerSize) / 2);
Magic Number,ICSharpCode.TextEditor,FoldMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\FoldMargin.cs,PaintFoldMarker,The following statement contains a magic number: int xPos = drawingRectangle.X + (drawingRectangle.Width - foldMarkerSize) / 2 + foldMarkerSize / 2;
Magic Number,ICSharpCode.TextEditor,FoldMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\FoldMargin.cs,PaintFoldMarker,The following statement contains a magic number: int xPos = drawingRectangle.X + (drawingRectangle.Width - foldMarkerSize) / 2 + foldMarkerSize / 2;
Magic Number,ICSharpCode.TextEditor,FoldMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\FoldMargin.cs,PaintFoldMarker,The following statement contains a magic number: DrawFoldMarker(g' new RectangleF(drawingRectangle.X + (drawingRectangle.Width - foldMarkerSize) / 2'  				                                 foldMarkerYPos'  				                                 foldMarkerSize'  				                                 foldMarkerSize)'  				               isVisible'  				               isStartSelected  				              );
Magic Number,ICSharpCode.TextEditor,FoldMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\FoldMargin.cs,DrawFoldMarker,The following statement contains a magic number: int space  = (int)Math.Round(((double)rectangle.Height) / 8d) + 1;
Magic Number,ICSharpCode.TextEditor,FoldMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\FoldMargin.cs,DrawFoldMarker,The following statement contains a magic number: int mid    = intRect.Height / 2 + intRect.Height % 2;
Magic Number,ICSharpCode.TextEditor,FoldMargin,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\FoldMargin.cs,DrawFoldMarker,The following statement contains a magic number: int mid    = intRect.Height / 2 + intRect.Height % 2;
Magic Number,ICSharpCode.TextEditor,TextAreaDragDropHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaDragDropHandler.cs,GetDragDropEffect,The following statement contains a magic number: return (e.KeyState & 8) > 0 ? DragDropEffects.Copy : DragDropEffects.Move;
Magic Number,ICSharpCode.TextEditor,HRuler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\HRuler.cs,OnPaint,The following statement contains a magic number: int offset = (Height * 2) / 3;
Magic Number,ICSharpCode.TextEditor,HRuler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\HRuler.cs,OnPaint,The following statement contains a magic number: int offset = (Height * 2) / 3;
Magic Number,ICSharpCode.TextEditor,HRuler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\HRuler.cs,OnPaint,The following statement contains a magic number: offset = (Height * 4) / 5;
Magic Number,ICSharpCode.TextEditor,HRuler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\HRuler.cs,OnPaint,The following statement contains a magic number: offset = (Height * 4) / 5;
Magic Number,ICSharpCode.TextEditor,HRuler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\HRuler.cs,OnPaint,The following statement contains a magic number: num % 5 == 0
Magic Number,ICSharpCode.TextEditor,HRuler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\HRuler.cs,OnPaint,The following statement contains a magic number: num % 10 == 0
Magic Number,ICSharpCode.TextEditor,DrawableLine,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\DrawableLine.cs,DrawDocumentWord,The following statement contains a magic number: SizeF wordSize = g.MeasureString(word' font' 32768' sf);
Magic Number,ICSharpCode.TextEditor,DrawableLine,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\DrawableLine.cs,DrawLine,The following statement contains a magic number: switch (word.Type) {  					case TextWordType.Space:  						xPos += spaceSize.Width;  						break;  					case TextWordType.Tab:  						float tabWidth = spaceSize.Width * 4;  						xPos += tabWidth;  						xPos = (int)((xPos + 2) / tabWidth) * tabWidth;  						break;  					case TextWordType.Word:  						xPos += DrawDocumentWord(g'  						                         word.Word'  						                         new PointF(xPos + xOffset' yPos)'  						                         word.Bold ? boldMonospacedFont : monospacedFont'  						                         c == Color.Empty ? word.Color : c  						                        );  						break;  				}
Magic Number,ICSharpCode.TextEditor,DrawableLine,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\DrawableLine.cs,DrawLine,The following statement contains a magic number: switch (word.Type) {  					case TextWordType.Space:  						xPos += spaceSize.Width;  						break;  					case TextWordType.Tab:  						float tabWidth = spaceSize.Width * 4;  						xPos += tabWidth;  						xPos = (int)((xPos + 2) / tabWidth) * tabWidth;  						break;  					case TextWordType.Word:  						xPos += DrawDocumentWord(g'  						                         word.Word'  						                         new PointF(xPos + xOffset' yPos)'  						                         word.Bold ? boldMonospacedFont : monospacedFont'  						                         c == Color.Empty ? word.Color : c  						                        );  						break;  				}
Magic Number,ICSharpCode.TextEditor,DrawableLine,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\DrawableLine.cs,MeasureWidth,The following statement contains a magic number: switch (word.Type) {  					case TextWordType.Space:  						xPos += spaceSize.Width;  						break;  					case TextWordType.Tab:  						float tabWidth = spaceSize.Width * 4;  						xPos += tabWidth;  						xPos = (int)((xPos + 2) / tabWidth) * tabWidth;  						break;  					case TextWordType.Word:  						if (word.Word != null && word.Word.Length > 0) {  							xPos += g.MeasureString(word.Word' word.Bold ? boldMonospacedFont : monospacedFont' 32768' sf).Width;  						}  						break;  				}
Magic Number,ICSharpCode.TextEditor,DrawableLine,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\DrawableLine.cs,MeasureWidth,The following statement contains a magic number: switch (word.Type) {  					case TextWordType.Space:  						xPos += spaceSize.Width;  						break;  					case TextWordType.Tab:  						float tabWidth = spaceSize.Width * 4;  						xPos += tabWidth;  						xPos = (int)((xPos + 2) / tabWidth) * tabWidth;  						break;  					case TextWordType.Word:  						if (word.Word != null && word.Word.Length > 0) {  							xPos += g.MeasureString(word.Word' word.Bold ? boldMonospacedFont : monospacedFont' 32768' sf).Width;  						}  						break;  				}
Magic Number,ICSharpCode.TextEditor,DrawableLine,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\DrawableLine.cs,MeasureWidth,The following statement contains a magic number: switch (word.Type) {  					case TextWordType.Space:  						xPos += spaceSize.Width;  						break;  					case TextWordType.Tab:  						float tabWidth = spaceSize.Width * 4;  						xPos += tabWidth;  						xPos = (int)((xPos + 2) / tabWidth) * tabWidth;  						break;  					case TextWordType.Word:  						if (word.Word != null && word.Word.Length > 0) {  							xPos += g.MeasureString(word.Word' word.Bold ? boldMonospacedFont : monospacedFont' 32768' sf).Width;  						}  						break;  				}
Magic Number,ICSharpCode.TextEditor.Util,AugmentableRedBlackTree<T;Host>,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\AugmentableRedBlackTree.cs,AppendTreeToString,The following statement contains a magic number: indent += 2;
Magic Number,ICSharpCode.TextEditor.Util,RtfWriter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\RtfWriter.cs,BuildFileContent,The following statement contains a magic number: switch (word.Type) {  							case TextWordType.Space:  								if (selection.ContainsOffset(offset)) {  									rtf.Append(' ');  								}  								++offset;  								break;  							  							case TextWordType.Tab:  								if (selection.ContainsOffset(offset)) {  									rtf.Append(@"\tab");  								}  								++offset;  								escapeSequence = true;  								break;  							  							case TextWordType.Word:  								Color c = word.Color;  								  								if (offset + word.Word.Length > selectionOffset && offset < selectionEndOffset) {  									string colorstr = c.R + "' " + c.G + "' " + c.B;  									  									if (!colors.ContainsKey(colorstr)) {  										colors[colorstr] = ++colorNum;  										colorString.Append(@"\red" + c.R + @"\green" + c.G + @"\blue" + c.B + ";");  									}  									if (c != curColor || firstLine) {  										rtf.Append(@"\cf" + colors[colorstr].ToString());  										curColor = c;  										escapeSequence = true;  									}  									  									if (oldItalic != word.Italic) {  										if (word.Italic) {  											rtf.Append(@"\i");  										} else {  											rtf.Append(@"\i0");  										}  										oldItalic = word.Italic;  										escapeSequence = true;  									}  									  									if (oldBold != word.Bold) {  										if (word.Bold) {  											rtf.Append(@"\b");  										} else {  											rtf.Append(@"\b0");  										}  										oldBold = word.Bold;  										escapeSequence = true;  									}  									  									if (firstLine) {  										rtf.Append(@"\f0\fs" + (textArea.TextEditorProperties.Font.Size * 2));  										firstLine = false;  									}  									if (escapeSequence) {  										rtf.Append(' ');  										escapeSequence = false;  									}  									string printWord;  									if (offset < selectionOffset) {  										printWord = word.Word.Substring(selectionOffset - offset);  									} else if (offset + word.Word.Length > selectionEndOffset) {  										printWord = word.Word.Substring(0' (offset + word.Word.Length) - selectionEndOffset);  									} else {  										printWord = word.Word;  									}  									  									AppendText(rtf' printWord);  								}  								offset += word.Length;  								break;  						}
Magic Number,ICSharpCode.TextEditor.Util,RtfWriter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\RtfWriter.cs,AppendText,The following statement contains a magic number: switch (c) {  					case '\\':  						rtfOutput.Append(@"\\");  						break;  					case '{':  						rtfOutput.Append("\\{");  						break;  					case '}':  						rtfOutput.Append("\\}");  						break;  					default:  						if (c < 256) {  							rtfOutput.Append(c);  						} else {  							// yes' RTF really expects signed 16-bit integers!  							rtfOutput.Append("\\u" + unchecked((short)c).ToString() + "?");  						}  						break;  				}
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,GetTipSize,The following statement contains a magic number: SizeF maxLayoutSize = new SizeF(workingArea.Right - screenLocation.X - HorizontalBorder * 2'  			                                workingArea.Bottom - screenLocation.Y - VerticalBorder * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,GetTipSize,The following statement contains a magic number: SizeF maxLayoutSize = new SizeF(workingArea.Right - screenLocation.X - HorizontalBorder * 2'  			                                workingArea.Bottom - screenLocation.Y - VerticalBorder * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,GetTipSize,The following statement contains a magic number: tipSizeF += new SizeF(HorizontalBorder * 2'  				                      VerticalBorder   * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,GetTipSize,The following statement contains a magic number: tipSizeF += new SizeF(HorizontalBorder * 2'  				                      VerticalBorder   * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,GetLeftHandSideTipSize,The following statement contains a magic number: SizeF maxLayoutSize = new SizeF(screenLocation.X - HorizontalBorder * 2'  			                                workingArea.Bottom - screenLocation.Y - VerticalBorder * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,GetLeftHandSideTipSize,The following statement contains a magic number: SizeF maxLayoutSize = new SizeF(screenLocation.X - HorizontalBorder * 2'  			                                workingArea.Bottom - screenLocation.Y - VerticalBorder * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,GetLeftHandSideTipSize,The following statement contains a magic number: tipSizeF += new SizeF(HorizontalBorder * 2'  				                      VerticalBorder   * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,GetLeftHandSideTipSize,The following statement contains a magic number: tipSizeF += new SizeF(HorizontalBorder * 2'  				                      VerticalBorder   * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,DrawTip,The following statement contains a magic number: SizeF maxLayoutSize = new SizeF(workingArea.Right - screenLocation.X - HorizontalBorder * 2'  			                                workingArea.Bottom - screenLocation.Y - VerticalBorder * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,DrawTip,The following statement contains a magic number: SizeF maxLayoutSize = new SizeF(workingArea.Right - screenLocation.X - HorizontalBorder * 2'  			                                workingArea.Bottom - screenLocation.Y - VerticalBorder * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,DrawTip,The following statement contains a magic number: tipSizeF += new SizeF(HorizontalBorder * 2'  				                      VerticalBorder   * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,DrawTip,The following statement contains a magic number: tipSizeF += new SizeF(HorizontalBorder * 2'  				                      VerticalBorder   * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,DrawTip,The following statement contains a magic number: RectangleF displayRectangle = new RectangleF  					(HorizontalBorder' VerticalBorder'  					 tipSizeF.Width - HorizontalBorder * 2'  					 tipSizeF.Height - VerticalBorder * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,DrawTip,The following statement contains a magic number: RectangleF displayRectangle = new RectangleF  					(HorizontalBorder' VerticalBorder'  					 tipSizeF.Width - HorizontalBorder * 2'  					 tipSizeF.Height - VerticalBorder * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,DrawFixedWidthTip,The following statement contains a magic number: SizeF maxLayoutSize = new SizeF(screenLocation.X - HorizontalBorder * 2'  			                                workingArea.Bottom - screenLocation.Y - VerticalBorder * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,DrawFixedWidthTip,The following statement contains a magic number: SizeF maxLayoutSize = new SizeF(screenLocation.X - HorizontalBorder * 2'  			                                workingArea.Bottom - screenLocation.Y - VerticalBorder * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,DrawFixedWidthTip,The following statement contains a magic number: tipSizeF += new SizeF(HorizontalBorder * 2'  				                      VerticalBorder   * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,DrawFixedWidthTip,The following statement contains a magic number: tipSizeF += new SizeF(HorizontalBorder * 2'  				                      VerticalBorder   * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,DrawFixedWidthTip,The following statement contains a magic number: RectangleF displayRectangle = new RectangleF  					(HorizontalBorder' VerticalBorder'  					 tipSizeF.Width - HorizontalBorder * 2'  					 tipSizeF.Height - VerticalBorder * 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainter.cs,DrawFixedWidthTip,The following statement contains a magic number: RectangleF displayRectangle = new RectangleF  					(HorizontalBorder' VerticalBorder'  					 tipSizeF.Width - HorizontalBorder * 2'  					 tipSizeF.Height - VerticalBorder * 2);
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,DrawTriangle,The following statement contains a magic number: Brush brush = BrushRegistry.GetBrush(Color.FromArgb(192' 192' 192));
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,DrawTriangle,The following statement contains a magic number: Brush brush = BrushRegistry.GetBrush(Color.FromArgb(192' 192' 192));
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,DrawTriangle,The following statement contains a magic number: Brush brush = BrushRegistry.GetBrush(Color.FromArgb(192' 192' 192));
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,DrawTriangle,The following statement contains a magic number: float triHeight2 = triHeight / 2;
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,DrawTriangle,The following statement contains a magic number: float triHeight4 = triHeight / 4;
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,DrawTriangle,The following statement contains a magic number: base.Graphics.FillPolygon(brush' new PointF[] {  				                          	new PointF(x'                y + triHeight2 - triHeight4)'  				                          	new PointF(x + triWidth / 2' y + triHeight2 + triHeight4)'  				                          	new PointF(x + triWidth'     y + triHeight2 - triHeight4)'  				                          });
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,Draw,The following statement contains a magic number: base.Draw(new PointF(location.X + triWidth + 4' location.Y));
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,Draw,The following statement contains a magic number: DrawingRectangle1 = new Rectangle((int)location.X + 2'  				                                  (int)location.Y + 2'  				                                  (int)(triWidth)'  				                                  (int)(triHeight));
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,Draw,The following statement contains a magic number: DrawingRectangle1 = new Rectangle((int)location.X + 2'  				                                  (int)location.Y + 2'  				                                  (int)(triWidth)'  				                                  (int)(triHeight));
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,Draw,The following statement contains a magic number: DrawingRectangle2 = new Rectangle((int)(location.X + base.AllocatedSize.Width - triWidth  - 2)'  				                                  (int)location.Y + 2'  				                                  (int)(triWidth)'  				                                  (int)(triHeight));
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,Draw,The following statement contains a magic number: DrawingRectangle2 = new Rectangle((int)(location.X + base.AllocatedSize.Width - triWidth  - 2)'  				                                  (int)location.Y + 2'  				                                  (int)(triWidth)'  				                                  (int)(triHeight));
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,Draw,The following statement contains a magic number: DrawTriangle(location.X + 2' location.Y + 2' false);
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,Draw,The following statement contains a magic number: DrawTriangle(location.X + 2' location.Y + 2' false);
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,Draw,The following statement contains a magic number: DrawTriangle(location.X + base.AllocatedSize.Width - triWidth  - 2' location.Y + 2' true);
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,Draw,The following statement contains a magic number: DrawTriangle(location.X + base.AllocatedSize.Width - triWidth  - 2' location.Y + 2' true);
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,OnMaximumSizeChanged,The following statement contains a magic number: tipSize.Width += triWidth * 2 + 8;
Magic Number,ICSharpCode.TextEditor.Util,CountTipText,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipText.cs,OnMaximumSizeChanged,The following statement contains a magic number: tipSize.Width += triWidth * 2 + 8;
Magic Number,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,GetLeftHandSideDrawingSizeHelpTipFromCombinedDescription,The following statement contains a magic number: string[] splitDescription = description.Split(new char[] { '\n' }' 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,GetDrawingSizeHelpTipFromCombinedDescription,The following statement contains a magic number: string[] splitDescription = description.Split(new char[] { '\n' }' 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,DrawHelpTipFromCombinedDescription,The following statement contains a magic number: string[] splitDescription = description.Split  					(new char[] { '\n' }' 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,DrawFixedWidthHelpTipFromCombinedDescription,The following statement contains a magic number: string[] splitDescription = description.Split  					(new char[] { '\n' }' 2);
Magic Number,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,GetDrawingSizeDrawHelpTip,The following statement contains a magic number: TipSpacer countSpacer = new TipSpacer(graphics' new SizeF(IsVisibleText(countMessage) ? 4 : 0' 0));
Magic Number,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,GetDrawingSizeDrawHelpTip,The following statement contains a magic number: TipSpacer docSpacer = new TipSpacer(graphics' new SizeF(0' IsVisibleText(documentation) ? 4 : 0));
Magic Number,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,GetLeftHandSideDrawingSizeDrawHelpTip,The following statement contains a magic number: TipSpacer countSpacer = new TipSpacer(graphics' new SizeF(IsVisibleText(countMessage) ? 4 : 0' 0));
Magic Number,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,GetLeftHandSideDrawingSizeDrawHelpTip,The following statement contains a magic number: TipSpacer docSpacer = new TipSpacer(graphics' new SizeF(0' IsVisibleText(documentation) ? 4 : 0));
Magic Number,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,DrawHelpTip,The following statement contains a magic number: TipSpacer countSpacer = new TipSpacer(graphics' new SizeF(IsVisibleText(countMessage) ? 4 : 0' 0));
Magic Number,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,DrawHelpTip,The following statement contains a magic number: TipSpacer docSpacer = new TipSpacer(graphics' new SizeF(0' IsVisibleText(documentation) ? 4 : 0));
Magic Number,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,DrawFixedWidthHelpTip,The following statement contains a magic number: TipSpacer countSpacer = new TipSpacer(graphics' new SizeF(IsVisibleText(countMessage) ? 4 : 0' 0));
Magic Number,ICSharpCode.TextEditor.Util,TipPainterTools,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\TipPainterTools.cs,DrawFixedWidthHelpTip,The following statement contains a magic number: TipSpacer docSpacer = new TipSpacer(graphics' new SizeF(0' IsVisibleText(documentation) ? 4 : 0));
Magic Number,ICSharpCode.TextEditor.Util,FileReader,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\FileReader.cs,IsUnicode,The following statement contains a magic number: return codepage == 65001 || codepage == 65000 || codepage == 1200 || codepage == 1201;
Magic Number,ICSharpCode.TextEditor.Util,FileReader,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\FileReader.cs,IsUnicode,The following statement contains a magic number: return codepage == 65001 || codepage == 65000 || codepage == 1200 || codepage == 1201;
Magic Number,ICSharpCode.TextEditor.Util,FileReader,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\FileReader.cs,IsUnicode,The following statement contains a magic number: return codepage == 65001 || codepage == 65000 || codepage == 1200 || codepage == 1201;
Magic Number,ICSharpCode.TextEditor.Util,FileReader,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\FileReader.cs,IsUnicode,The following statement contains a magic number: return codepage == 65001 || codepage == 65000 || codepage == 1200 || codepage == 1201;
Magic Number,ICSharpCode.TextEditor.Util,FileReader,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\FileReader.cs,OpenStream,The following statement contains a magic number: switch ((firstByte << 8) | secondByte) {  					case 0x0000: // either UTF-32 Big Endian or a binary file; use StreamReader  					case 0xfffe: // Unicode BOM (UTF-16 LE or UTF-32 LE)  					case 0xfeff: // UTF-16 BE BOM  					case 0xefbb: // start of UTF-8 BOM  						// StreamReader autodetection works  						fs.Position = 0;  						return new StreamReader(fs);  					default:  						return AutoDetect(fs' (byte)firstByte' (byte)secondByte' defaultEncoding);  				}
Magic Number,ICSharpCode.TextEditor.Util,FileReader,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\FileReader.cs,OpenStream,The following statement contains a magic number: fs.Length >= 2
Magic Number,ICSharpCode.TextEditor.Util,FileReader,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\FileReader.cs,AutoDetect,The following statement contains a magic number: int max = (int)Math.Min(fs.Length' 500000);
Magic Number,ICSharpCode.TextEditor.Util,FileReader,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\FileReader.cs,AutoDetect,The following statement contains a magic number: const int UTF8  = 2;
Magic Number,ICSharpCode.TextEditor.Util,FileReader,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\FileReader.cs,AutoDetect,The following statement contains a magic number: const int UTF8Sequence = 3;
Magic Number,ICSharpCode.TextEditor.Util,WeakCollection<T>,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\WeakCollection.cs,Add,The following statement contains a magic number: innerList.Count == innerList.Capacity || (innerList.Count % 32) == 31
Magic Number,ICSharpCode.TextEditor.Util,WeakCollection<T>,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\WeakCollection.cs,Add,The following statement contains a magic number: innerList.Count == innerList.Capacity || (innerList.Count % 32) == 31
Magic Number,ICSharpCode.TextEditor.Actions,BlockCommentRegion,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,GetHashCode,The following statement contains a magic number: hashCode += 1000000007 * commentStart.GetHashCode();
Magic Number,ICSharpCode.TextEditor.Actions,BlockCommentRegion,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,GetHashCode,The following statement contains a magic number: hashCode += 1000000009 * commentEnd.GetHashCode();
Magic Number,ICSharpCode.TextEditor.Actions,BlockCommentRegion,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,GetHashCode,The following statement contains a magic number: hashCode += 1000000021 * startOffset.GetHashCode();
Magic Number,ICSharpCode.TextEditor.Actions,BlockCommentRegion,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,GetHashCode,The following statement contains a magic number: hashCode += 1000000033 * endOffset.GetHashCode();
Magic Number,ICSharpCode.TextEditor.Gui.CompletionWindow,CodeCompletionWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\CodeCompletionWindow.cs,SetDeclarationViewLocation,The following statement contains a magic number: rightSpace * 2 > leftSpace
Magic Number,ICSharpCode.TextEditor.Gui.CompletionWindow,CodeCompletionWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\CodeCompletionWindow.cs,GetListViewSize,The following statement contains a magic number: int width = codeCompletionListView.ItemHeight * 10;
Magic Number,ICSharpCode.TextEditor.Gui.CompletionWindow,AbstractCompletionWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\AbstractCompletionWindow.cs,AddShadowToWindow,The following statement contains a magic number: ver.Major > 5 || ver.Major == 5 && ver.Minor >= 1
Magic Number,ICSharpCode.TextEditor.Gui.CompletionWindow,AbstractCompletionWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\AbstractCompletionWindow.cs,AddShadowToWindow,The following statement contains a magic number: ver.Major > 5 || ver.Major == 5 && ver.Minor >= 1
Magic Number,ICSharpCode.TextEditor.Gui.CompletionWindow,CodeCompletionListView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\CodeCompletionListView.cs,CenterViewOn,The following statement contains a magic number: int firstItem = index - MaxVisibleItem / 2;
Magic Number,ICSharpCode.TextEditor.Gui.CompletionWindow,CodeCompletionListView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\CodeCompletionListView.cs,SelectItemWithStart,The following statement contains a magic number: quality = 3;
Magic Number,ICSharpCode.TextEditor.Gui.CompletionWindow,CodeCompletionListView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\CodeCompletionListView.cs,OnPaint,The following statement contains a magic number: RectangleF drawingBackground = new RectangleF(1' yPos' Width - 2' itemHeight);
Magic Number,ICSharpCode.TextEditor.Gui.CompletionWindow,CodeCompletionListView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\CodeCompletionListView.cs,OnMouseDown,The following statement contains a magic number: RectangleF drawingBackground = new RectangleF(1' yPos' Width - 2' itemHeight);
Missing Default,ICSharpCode.TextEditor.Document,TextUtilities,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\TextUtilities.cs,GetExpressionBeforeOffset,The following switch statement is missing a default case: switch (word) {  							case "ref":  							case "out":  							case "in":  							case "return":  							case "throw":  							case "case":  								goto done;  						}
Missing Default,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,GetRegString,The following switch statement is missing a default case: switch (expr[i]) {  							case '!': // don't match the following expression  								StringBuilder whatmatch = new StringBuilder();  								++i;  								while (i < expr.Length && expr[i] != '@') {  									whatmatch.Append(expr[i++]);  								}  								break;  							case '@': // matches @  								regexpr.Append(document.GetCharAt(lineSegment.Offset + index + j));  								break;  						}
Missing Default,ICSharpCode.TextEditor.Document,DefaultHighlightingStrategy,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\HighlightingStrategy\DefaultHighlightingStrategy.cs,MatchExpr,The following switch statement is missing a default case: switch (expr[i]) {  							case 'C': // match whitespace or punctuation  								if (index + j == lineSegment.Offset || index + j >= lineSegment.Offset + lineSegment.Length) {  									// nothing (EOL or SOL)  								} else {  									char ch = document.GetCharAt(lineSegment.Offset + index + j);  									if (!Char.IsWhiteSpace(ch) && !Char.IsPunctuation(ch)) {  										return false;  									}  								}  								break;  							case '!': // don't match the following expression  								{  									StringBuilder whatmatch = new StringBuilder();  									++i;  									while (i < expr.Length && expr[i] != '@') {  										whatmatch.Append(expr[i++]);  									}  									if (lineSegment.Offset + index + j + whatmatch.Length < document.TextLength) {  										int k = 0;  										for (; k < whatmatch.Length; ++k) {  											char docChar = ignoreCase ? Char.ToUpperInvariant(document.GetCharAt(lineSegment.Offset + index + j + k)) : document.GetCharAt(lineSegment.Offset + index + j + k);  											char spanChar = ignoreCase ? Char.ToUpperInvariant(whatmatch[k]) : whatmatch[k];  											if (docChar != spanChar) {  												break;  											}  										}  										if (k >= whatmatch.Length) {  											return false;  										}  									}  //									--j;  									break;  								}  							case '-': // don't match the  expression before  								{  									StringBuilder whatmatch = new StringBuilder();  									++i;  									while (i < expr.Length && expr[i] != '@') {  										whatmatch.Append(expr[i++]);  									}  									if (index - whatmatch.Length >= 0) {  										int k = 0;  										for (; k < whatmatch.Length; ++k) {  											char docChar = ignoreCase ? Char.ToUpperInvariant(document.GetCharAt(lineSegment.Offset + index - whatmatch.Length + k)) : document.GetCharAt(lineSegment.Offset + index - whatmatch.Length + k);  											char spanChar = ignoreCase ? Char.ToUpperInvariant(whatmatch[k]) : whatmatch[k];  											if (docChar != spanChar)  												break;  										}  										if (k >= whatmatch.Length) {  											return false;  										}  									}  //									--j;  									break;  								}  							case '@': // matches @  								if (index + j >= lineSegment.Length || '@' != document.GetCharAt(lineSegment.Offset + index + j)) {  									return false;  								}  								break;  						}
Missing Default,ICSharpCode.TextEditor.Document,LineManager,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Document\LineManager\LineManager.cs,NextDelimiter,The following switch statement is missing a default case: switch (text[i]) {  					case '\r':  						if (i + 1 < text.Length) {  							if (text[i + 1] == '\n') {  								delimiterSegment.Offset = i;  								delimiterSegment.Length = 2;  								return delimiterSegment;  							}  						}  						#if DATACONSISTENCYTEST  						Debug.Assert(false' "Found lone \\r' data consistency problems?");  						#endif  						goto case '\n';  					case '\n':  						delimiterSegment.Offset = i;  						delimiterSegment.Length = 1;  						return delimiterSegment;  				}
Missing Default,ICSharpCode.TextEditor,Caret,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\Caret.cs,CreateCaret,The following switch statement is missing a default case: switch (caretMode) {  					case CaretMode.InsertMode:  						caretCreated = caretImplementation.Create(2' textArea.TextView.FontHeight);  						break;  					case CaretMode.OverwriteMode:  						caretCreated = caretImplementation.Create((int)textArea.TextView.SpaceWidth' textArea.TextView.FontHeight);  						break;  				}
Missing Default,ICSharpCode.TextEditor,TextEditorControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextEditorControl.cs,CommitUpdateRequested,The following switch statement is missing a default case: switch (update.TextAreaUpdateType) {  					case TextAreaUpdateType.PositionToEnd:  						this.primaryTextArea.TextArea.UpdateToEnd(update.Position.Y);  						if (this.secondaryTextArea != null) {  							this.secondaryTextArea.TextArea.UpdateToEnd(update.Position.Y);  						}  						break;  					case TextAreaUpdateType.PositionToLineEnd:  					case TextAreaUpdateType.SingleLine:  						this.primaryTextArea.TextArea.UpdateLine(update.Position.Y);  						if (this.secondaryTextArea != null) {  							this.secondaryTextArea.TextArea.UpdateLine(update.Position.Y);  						}  						break;  					case TextAreaUpdateType.SinglePosition:  						this.primaryTextArea.TextArea.UpdateLine(update.Position.Y' update.Position.X' update.Position.X);  						if (this.secondaryTextArea != null) {  							this.secondaryTextArea.TextArea.UpdateLine(update.Position.Y' update.Position.X' update.Position.X);  						}  						break;  					case TextAreaUpdateType.LinesBetween:  						this.primaryTextArea.TextArea.UpdateLines(update.Position.X' update.Position.Y);  						if (this.secondaryTextArea != null) {  							this.secondaryTextArea.TextArea.UpdateLines(update.Position.X' update.Position.Y);  						}  						break;  					case TextAreaUpdateType.WholeTextArea:  						this.primaryTextArea.TextArea.Invalidate();  						if (this.secondaryTextArea != null) {  							this.secondaryTextArea.TextArea.Invalidate();  						}  						break;  				}
Missing Default,ICSharpCode.TextEditor,TextEditorControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextEditorControl.cs,MeasurePrintingHeight,The following switch statement is missing a default case: switch (word.Type) {  					case TextWordType.Space:  						Advance(ref xPos' ref yPos' maxWidth' primaryTextArea.TextArea.TextView.SpaceWidth' fontHeight);  //						if (!gotNonWhitespace) {  //							curTabIndent = xPos;  //						}  						break;  					case TextWordType.Tab:  						Advance(ref xPos' ref yPos' maxWidth' TabIndent * primaryTextArea.TextArea.TextView.WideSpaceWidth' fontHeight);  //						if (!gotNonWhitespace) {  //							curTabIndent = xPos;  //						}  						break;  					case TextWordType.Word:  //						if (!gotNonWhitespace) {  //							gotNonWhitespace = true;  //							curTabIndent    += TabIndent * primaryTextArea.TextArea.TextView.GetWidth(' ');  //						}  						SizeF drawingSize = g.MeasureString(word.Word' word.GetFont(fontContainer)' new SizeF(maxWidth' fontHeight * 100)' printingStringFormat);  						Advance(ref xPos' ref yPos' maxWidth' drawingSize.Width' fontHeight);  						break;  				}
Missing Default,ICSharpCode.TextEditor,TextEditorControl,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextEditorControl.cs,DrawLine,The following switch statement is missing a default case: switch (word.Type) {  					case TextWordType.Space:  						Advance(ref xPos' ref yPos' margin.Width' primaryTextArea.TextArea.TextView.SpaceWidth' fontHeight);  //						if (!gotNonWhitespace) {  //							curTabIndent = xPos;  //						}  						break;  					case TextWordType.Tab:  						Advance(ref xPos' ref yPos' margin.Width' TabIndent * primaryTextArea.TextArea.TextView.WideSpaceWidth' fontHeight);  //						if (!gotNonWhitespace) {  //							curTabIndent = xPos;  //						}  						break;  					case TextWordType.Word:  //						if (!gotNonWhitespace) {  //							gotNonWhitespace = true;  //							curTabIndent    += TabIndent * primaryTextArea.TextArea.TextView.GetWidth(' ');  //						}  						g.DrawString(word.Word' word.GetFont(fontContainer)' BrushRegistry.GetBrush(word.Color)' xPos + margin.X' yPos);  						SizeF drawingSize = g.MeasureString(word.Word' word.GetFont(fontContainer)' new SizeF(margin.Width' fontHeight * 100)' printingStringFormat);  						Advance(ref xPos' ref yPos' margin.Width' drawingSize.Width' fontHeight);  						break;  				}
Missing Default,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,DrawMarkerDraw,The following switch statement is missing a default case: switch (marker.TextMarkerType) {  					case TextMarkerType.Underlined:  						g.DrawLine(BrushRegistry.GetPen(marker.Color)' drawingRect.X' drawYPos' drawingRect.Right' drawYPos);  						break;  					case TextMarkerType.WaveLine:  						int reminder = ((int)drawingRect.X) % 6;  						for (float i = (int)drawingRect.X - reminder; i < drawingRect.Right; i += 6) {  							g.DrawLine(BrushRegistry.GetPen(marker.Color)' i'     drawYPos + 3 - 4' i + 3' drawYPos + 1 - 4);  							if (i + 3 < drawingRect.Right) {  								g.DrawLine(BrushRegistry.GetPen(marker.Color)' i + 3' drawYPos + 1 - 4' i + 6' drawYPos + 3 - 4);  							}  						}  						break;  					case TextMarkerType.SolidBlock:  						g.FillRectangle(BrushRegistry.GetBrush(marker.Color)' drawingRect);  						break;  				}
Missing Default,ICSharpCode.TextEditor,TextView,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextView.cs,CountColumns,The following switch statement is missing a default case: switch (word.Type) {  						case TextWordType.Space:  							drawingPos += spaceWidth;  							break;  						case TextWordType.Tab:  							// go to next tab position  							drawingPos = (int)((drawingPos + MinTabWidth) / tabIndent / WideSpaceWidth) * tabIndent * WideSpaceWidth;  							drawingPos += tabIndent * WideSpaceWidth;  							break;  						case TextWordType.Word:  							int wordStart = Math.Max(wordOffset' start);  							int wordLength = Math.Min(wordOffset + word.Length' end) - wordStart;  							string text = Document.GetText(currentLine.Offset + wordStart' wordLength);  							drawingPos += MeasureStringWidth(g' text' word.GetFont(fontContainer) ?? fontContainer.RegularFont);  							break;  					}
Missing Default,ICSharpCode.TextEditor,TextAreaMouseHandler,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\TextAreaMouseHandler.cs,TextAreaMouseMove,The following switch statement is missing a default case: switch (textArea.SelectionManager.selectFrom.where)  			{  				case WhereFrom.Gutter:  					ExtendSelectionToMouse();  					return;    				case WhereFrom.TArea:  					break;    			}
Missing Default,ICSharpCode.TextEditor,DrawableLine,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\DrawableLine.cs,DrawLine,The following switch statement is missing a default case: switch (word.Type) {  					case TextWordType.Space:  						xPos += spaceSize.Width;  						break;  					case TextWordType.Tab:  						float tabWidth = spaceSize.Width * 4;  						xPos += tabWidth;  						xPos = (int)((xPos + 2) / tabWidth) * tabWidth;  						break;  					case TextWordType.Word:  						xPos += DrawDocumentWord(g'  						                         word.Word'  						                         new PointF(xPos + xOffset' yPos)'  						                         word.Bold ? boldMonospacedFont : monospacedFont'  						                         c == Color.Empty ? word.Color : c  						                        );  						break;  				}
Missing Default,ICSharpCode.TextEditor,DrawableLine,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\DrawableLine.cs,MeasureWidth,The following switch statement is missing a default case: switch (word.Type) {  					case TextWordType.Space:  						xPos += spaceSize.Width;  						break;  					case TextWordType.Tab:  						float tabWidth = spaceSize.Width * 4;  						xPos += tabWidth;  						xPos = (int)((xPos + 2) / tabWidth) * tabWidth;  						break;  					case TextWordType.Word:  						if (word.Word != null && word.Word.Length > 0) {  							xPos += g.MeasureString(word.Word' word.Bold ? boldMonospacedFont : monospacedFont' 32768' sf).Width;  						}  						break;  				}
Missing Default,ICSharpCode.TextEditor.Util,RtfWriter,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Util\RtfWriter.cs,BuildFileContent,The following switch statement is missing a default case: switch (word.Type) {  							case TextWordType.Space:  								if (selection.ContainsOffset(offset)) {  									rtf.Append(' ');  								}  								++offset;  								break;  							  							case TextWordType.Tab:  								if (selection.ContainsOffset(offset)) {  									rtf.Append(@"\tab");  								}  								++offset;  								escapeSequence = true;  								break;  							  							case TextWordType.Word:  								Color c = word.Color;  								  								if (offset + word.Word.Length > selectionOffset && offset < selectionEndOffset) {  									string colorstr = c.R + "' " + c.G + "' " + c.B;  									  									if (!colors.ContainsKey(colorstr)) {  										colors[colorstr] = ++colorNum;  										colorString.Append(@"\red" + c.R + @"\green" + c.G + @"\blue" + c.B + ";");  									}  									if (c != curColor || firstLine) {  										rtf.Append(@"\cf" + colors[colorstr].ToString());  										curColor = c;  										escapeSequence = true;  									}  									  									if (oldItalic != word.Italic) {  										if (word.Italic) {  											rtf.Append(@"\i");  										} else {  											rtf.Append(@"\i0");  										}  										oldItalic = word.Italic;  										escapeSequence = true;  									}  									  									if (oldBold != word.Bold) {  										if (word.Bold) {  											rtf.Append(@"\b");  										} else {  											rtf.Append(@"\b0");  										}  										oldBold = word.Bold;  										escapeSequence = true;  									}  									  									if (firstLine) {  										rtf.Append(@"\f0\fs" + (textArea.TextEditorProperties.Font.Size * 2));  										firstLine = false;  									}  									if (escapeSequence) {  										rtf.Append(' ');  										escapeSequence = false;  									}  									string printWord;  									if (offset < selectionOffset) {  										printWord = word.Word.Substring(selectionOffset - offset);  									} else if (offset + word.Word.Length > selectionEndOffset) {  										printWord = word.Word.Substring(0' (offset + word.Word.Length) - selectionEndOffset);  									} else {  										printWord = word.Word;  									}  									  									AppendText(rtf' printWord);  								}  								offset += word.Length;  								break;  						}
Missing Default,ICSharpCode.TextEditor.Actions,Tab,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,InsertTabAtCaretPosition,The following switch statement is missing a default case: switch (textArea.Caret.CaretMode) {  				case CaretMode.InsertMode:  					textArea.InsertString(GetIndentationString(textArea.Document' textArea));  					break;  				case CaretMode.OverwriteMode:  					string indentStr = GetIndentationString(textArea.Document' textArea);  					textArea.ReplaceChar(indentStr[0]);  					if (indentStr.Length > 1) {  						textArea.InsertString(indentStr.Substring(1));  					}  					break;  			}
Missing Default,ICSharpCode.TextEditor.Actions,ToggleEditMode,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Actions\MiscActions.cs,Execute,The following switch statement is missing a default case: switch (textArea.Caret.CaretMode) {  				case CaretMode.InsertMode:  					textArea.Caret.CaretMode = CaretMode.OverwriteMode;  					break;  				case CaretMode.OverwriteMode:  					textArea.Caret.CaretMode = CaretMode.InsertMode;  					break;  			}
Missing Default,ICSharpCode.TextEditor.Gui.CompletionWindow,CodeCompletionWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\CodeCompletionWindow.cs,ProcessTextAreaKey,The following switch statement is missing a default case: switch (keyData) {  				case Keys.Home:  					codeCompletionListView.SelectIndex(0);  					return true;  				case Keys.End:  					codeCompletionListView.SelectIndex(completionData.Length-1);  					return true;  				case Keys.PageDown:  					codeCompletionListView.PageDown();  					return true;  				case Keys.PageUp:  					codeCompletionListView.PageUp();  					return true;  				case Keys.Down:  					codeCompletionListView.SelectNextItem();  					return true;  				case Keys.Up:  					codeCompletionListView.SelectPrevItem();  					return true;  				case Keys.Tab:  					InsertSelectedItem('\t');  					return true;  				case Keys.Return:  					InsertSelectedItem('\n');  					return true;  			}
Missing Default,ICSharpCode.TextEditor.Gui.CompletionWindow,AbstractCompletionWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\CompletionWindow\AbstractCompletionWindow.cs,ProcessTextAreaKey,The following switch statement is missing a default case: switch (keyData) {  				case Keys.Escape:  					Close();  					return true;  			}
Missing Default,ICSharpCode.TextEditor.Gui.InsightWindow,InsightWindow,D:\research\architectureSmells\repos1\telerik_justdecompile-plugins\Reflexil.JustDecompile\reflexil.1.5.src\Libs\Sources\ICSharpCode.TextEditor\Gui\InsightWindow\InsightWindow.cs,ProcessTextAreaKey,The following switch statement is missing a default case: switch (keyData) {  				case Keys.Down:  					if (DataProvider != null && DataProvider.InsightDataCount > 0) {  						CurrentData = (CurrentData + 1) % DataProvider.InsightDataCount;  						Refresh();  					}  					return true;  				case Keys.Up:  					if (DataProvider != null && DataProvider.InsightDataCount > 0) {  						CurrentData = (CurrentData + DataProvider.InsightDataCount - 1) % DataProvider.InsightDataCount;  						Refresh();  					}  					return true;  			}
