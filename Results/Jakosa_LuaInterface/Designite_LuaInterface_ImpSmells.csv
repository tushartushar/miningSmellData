Implementation smell,Namespace,Class,File,Method,Description
Long Method,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getMember,The method has 126 lines of code.
Long Method,LuaInterface,CodeGeneration,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\GenerateEventAssembly\CodeGeneration.cs,GenerateDelegate,The method has 147 lines of code.
Long Method,LuaInterface,CodeGeneration,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\GenerateEventAssembly\CodeGeneration.cs,GenerateMethod,The method has 199 lines of code.
Long Method,LuaInterface.Method,LuaMethodWrapper,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Method\LuaMethodWrapper.cs,call,The method has 195 lines of code.
Complex Method,LuaInterface,CheckType,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\CheckType.cs,checkType,Cyclomatic complexity of the method is 9
Complex Method,LuaInterface,CodeGeneration,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\GenerateEventAssembly\CodeGeneration.cs,GenerateDelegate,Cyclomatic complexity of the method is 16
Complex Method,LuaInterface,CodeGeneration,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\GenerateEventAssembly\CodeGeneration.cs,GenerateMethod,Cyclomatic complexity of the method is 23
Complex Method,LuaInterface.Method,LuaMethodWrapper,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Method\LuaMethodWrapper.cs,call,Cyclomatic complexity of the method is 24
Long Parameter List,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getMember,The method has 5 parameters. Parameters: luaState' objType' obj' methodName' bindingType
Long Parameter List,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,trySetMember,The method has 5 parameters. Parameters: luaState' targetType' target' bindingType' detailMessage
Long Parameter List,LuaInterface,ProxyType,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ProxyType.cs,GetMethod,The method has 5 parameters. Parameters: name' bindingAttr' binder' types' modifiers
Long Parameter List,LuaInterface,ProxyType,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ProxyType.cs,GetProperty,The method has 6 parameters. Parameters: name' bindingAttr' binder' returnType' types' modifiers
Long Parameter List,LuaInterface,ProxyType,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ProxyType.cs,InvokeMember,The method has 8 parameters. Parameters: name' invokeAttr' binder' target' args' modifiers' culture' namedParameters
Long Parameter List,LuaInterface,CodeGeneration,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\GenerateEventAssembly\CodeGeneration.cs,GenerateMethod,The method has 8 parameters. Parameters: myType' method' attributes' methodIndex' luaTableField' returnTypesField' generateBase' returnTypes
Long Parameter List,LuaInterface.Method,LuaClassHelper,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Method\LuaClassHelper.cs,callFunction,The method has 5 parameters. Parameters: function' args' returnTypes' inArgs' outArgs
Long Statement,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,Close,The length of the statement  "			//luaState = LuaCore.lua_State.Zero; <- suggested by Christopher Cebulski http://luaforge.net/forum/forum.php?thread_id = 44593&forum_id = 146 " is 142.
Long Statement,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,callFunction,The length of the statement  "			return !returnTypes.IsNull() ? translator.popValues(luaState' oldTop' returnTypes) : translator.popValues(luaState' oldTop); " is 124.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,dumpStack,The length of the statement  "				// we dump stacks when deep in calls' calling typename while the stack is in flux can fail sometimes' so manually check for key types " is 133.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getBaseMethod,The length of the statement  "			getMember(luaState' obj.GetType()' obj' "__luaInterface_base_" + methodName' BindingFlags.Instance | BindingFlags.IgnoreCase); " is 126.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,isMemberPresent,The length of the statement  "			var members = objType.GetMember(methodName' BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreCase/* | BindingFlags.NonPublic*/); " is 166.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getMember,The length of the statement  "				var members = objType.GetMember(methodName' bindingType | BindingFlags.Public | BindingFlags.IgnoreCase/*| BindingFlags.NonPublic*/); " is 133.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getMember,The length of the statement  "					// If we can't find any suitable instance members' try to find them as statics - but we only want to allow implicit static " is 122.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getMember,The length of the statement  "					members = objType.GetMember(methodName' bindingType | BindingFlags.Static | BindingFlags.Public | BindingFlags.IgnoreCase/*| BindingFlags.NonPublic*/); " is 151.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getMember,The length of the statement  "					// If we reach this point we found a static method' but can't use it in this context because the user passed in an instance " is 123.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,setFieldOrProperty,The length of the statement  "			bool didMember = trySetMember(luaState' type' target' BindingFlags.Instance | BindingFlags.IgnoreCase' out detailMessage); " is 122.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,setFieldOrProperty,The length of the statement  "						translator.throwError(luaState' detailMessage); // Pass the original message from trySetMember because it is probably best " is 122.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,trySetMember,The length of the statement  "				var members = targetType.GetMember(fieldName' bindingType | BindingFlags.Public | BindingFlags.IgnoreCase/*| BindingFlags.NonPublic*/); " is 135.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getClassMethod,The length of the statement  "					return getMember(luaState' klass' null' methodName' BindingFlags.FlattenHierarchy | BindingFlags.Static | BindingFlags.IgnoreCase); " is 131.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,setClassFieldOrProperty,The length of the statement  "			return setMember(luaState' target' null' BindingFlags.FlattenHierarchy | BindingFlags.Static | BindingFlags.IgnoreCase); " is 120.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,matchParameters,The length of the statement  "							paramArray.SetValue(Convert.ChangeType(tableEnumerator.Value' currentNetParam.ParameterType.GetElementType())' paramArrayIndex); " is 128.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,_IsTypeCorrect,The length of the statement  "				return (extractValue = translator.typeChecker.checkType(luaState' currentLuaParam' currentNetParam.ParameterType)) != null; " is 123.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,_IsParamsArray,The length of the statement  "						Debug.WriteLine("An error occurred during an attempt to retrieve a LuaTable extractor while checking for params array status."); " is 128.
Long Statement,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,_IsParamsArray,The length of the statement  "						Debug.WriteLine(string.Format("An error occurred during an attempt to retrieve an extractor ({0}) while checking for params array status."' paramElementType.FullName)); " is 168.
Long Statement,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushObject,The length of the statement  "				// Note: starting with lua5.1 the garbage collector may remove weak reference items (such as our luaNet_objects values) when the initial GC sweep  " is 145.
Long Statement,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushObject,The length of the statement  "				// occurs' but the actual call of the __gc finalizer for that object may not happen until a little while later.  During that window we might call " is 145.
Long Statement,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushObject,The length of the statement  "				// this routine and find the element missing from luaNet_objects' but collectObject() has not yet been called.  In that case' we go ahead and call collect " is 154.
Long Statement,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,collectObject,The length of the statement  "			// The other variant of collectObject might have gotten here first' in that case we will silently ignore the missing entry " is 122.
Long Statement,LuaInterface,CodeGeneration,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\GenerateEventAssembly\CodeGeneration.cs,GenerateEvent,The length of the statement  "			var handleMethod = myType.DefineMethod("HandleEvent"' MethodAttributes.Public | MethodAttributes.HideBySig' returnType' paramTypes); " is 132.
Long Statement,LuaInterface,CodeGeneration,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\GenerateEventAssembly\CodeGeneration.cs,GenerateClass,The length of the statement  "				myType = newModule.DefineType(typeName' TypeAttributes.Public' typeof(object)' new Type[] { klass' typeof(ILuaGeneratedType) }); " is 128.
Long Statement,LuaInterface,CodeGeneration,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\GenerateEventAssembly\CodeGeneration.cs,GenerateClass,The length of the statement  "			var constructor = myType.DefineConstructor(MethodAttributes.Public' CallingConventions.Standard' new Type[] { typeof(LuaTable)' typeof(Type[][]) }); " is 148.
Long Statement,LuaInterface.Method,LuaMethodWrapper,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Method\LuaMethodWrapper.cs,call,The length of the statement  "					int numStackToSkip = isStatic ? 0 : 1; // If this is an instance invoe we will have an extra arg on the stack for the targetObject " is 130.
Long Statement,LuaInterface.Method,LuaMethodWrapper,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Method\LuaMethodWrapper.cs,call,The length of the statement  "							_Translator.throwError(luaState' String.Format("instance method '{0}' requires a non null target object"' _MethodName)); " is 120.
Long Statement,LuaInterface.Method,LuaMethodWrapper,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Method\LuaMethodWrapper.cs,call,The length of the statement  "						string msg = (candidateName == null) ? "invalid arguments to method call" : ("invalid arguments to method: " + candidateName); " is 126.
Long Statement,LuaInterface.Method,LuaMethodWrapper,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Method\LuaMethodWrapper.cs,call,The length of the statement  "						_Translator.throwError(luaState' "unable to invoke method on generic class as the current method is an open generic method"); " is 125.
Complex Conditional,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,registerGlobal,The conditional expression  "(type.IsClass || type.IsInterface) && type != typeof(string) && recursionCounter < 2"  is complex.
Complex Conditional,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,registerGlobal,The conditional expression  "(method.GetCustomAttributes(typeof(LuaHideAttribute)' false).Length == 0) &&  						(method.GetCustomAttributes(typeof(LuaGlobalAttribute)' false).Length == 0) &&  						// Exclude some generic .NET methods that wouldn't be very usefull in Lua  						method.Name != "GetType" && method.Name != "GetHashCode" && method.Name != "Equals" &&  						method.Name != "ToString" && method.Name != "Clone" && method.Name != "Dispose" &&  						method.Name != "GetEnumerator" && method.Name != "CopyTo" &&  						!method.Name.StartsWith("get_"' StringComparison.Ordinal) &&  						!method.Name.StartsWith("set_"' StringComparison.Ordinal) &&  						!method.Name.StartsWith("add_"' StringComparison.Ordinal) &&  						!method.Name.StartsWith("remove_"' StringComparison.Ordinal)"  is complex.
Complex Conditional,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,trySetMember,The conditional expression  "fieldName.IsNull() || fieldName.Length < 1 || !(char.IsLetter(fieldName[0]) || fieldName[0] == '_')"  is complex.
Complex Conditional,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,push,The conditional expression  "o is sbyte || o is byte || o is short || o is ushort ||  				o is int || o is uint || o is long || o is float ||  				o is ulong || o is decimal || o is double"  is complex.
Empty Catch Block,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getMethod,The method has an empty catch block.
Empty Catch Block,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,loadAssembly,The method has an empty catch block.
Magic Number,LuaInterface,CheckType,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\CheckType.cs,checkType,The following statement contains a magic number: if(paramType == typeof(bool))  			{  				if(LuaLib.lua_isboolean(luaState' stackPos))  					return extractValues[runtimeHandleValue];  			}  			else if(paramType == typeof(string))  			{  				if(LuaLib.lua_isstring(luaState' stackPos))  					return extractValues[runtimeHandleValue];  				else if(luatype == LuaTypes.Nil)  					return extractNetObject; // kevinh - silently convert nil to a null string pointer  			}  			else if(paramType == typeof(LuaTable))  			{  				if(luatype == LuaTypes.Table)  					return extractValues[runtimeHandleValue];  			}  			else if(paramType == typeof(LuaUserData))  			{  				if(luatype == LuaTypes.UserData)  					return extractValues[runtimeHandleValue];  			}  			else if(paramType == typeof(LuaFunction))  			{  				if(luatype == LuaTypes.Function)  					return extractValues[runtimeHandleValue];  			}  			else if(typeof(Delegate).IsAssignableFrom(paramType) && luatype == LuaTypes.Function)  				return new ExtractValue(new DelegateGenerator(translator' paramType).extractGenerated);  			else if(paramType.IsInterface && luatype == LuaTypes.Table)  				return new ExtractValue(new ClassGenerator(translator' paramType).extractGenerated);  			else if((paramType.IsInterface || paramType.IsClass) && luatype == LuaTypes.Nil)  			{  				// kevinh - allow nil to be silently converted to null - extractNetObject will return null when the item ain't found  				return extractNetObject;  			}  			else if(LuaLib.lua_type(luaState' stackPos) == LuaTypes.Table)  			{  				if(LuaLib.luaL_getmetafield(luaState' stackPos' "__index"))  				{  					object obj = translator.getNetObject(luaState' -1);  					LuaLib.lua_settop(luaState' -2);  					if(!obj.IsNull() && paramType.IsAssignableFrom(obj.GetType()))  						return extractNetObject;  				}  				else  					return null;  			}  			else  			{  				object obj = translator.getNetObject(luaState' stackPos);  				if(!obj.IsNull() && paramType.IsAssignableFrom(obj.GetType()))  					return extractNetObject;  			}
Magic Number,LuaInterface,CheckType,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\CheckType.cs,getAsObject,The following statement contains a magic number: if(LuaLib.lua_type(luaState' stackPos) == LuaTypes.Table)   			{  				if(LuaLib.luaL_getmetafield(luaState' stackPos' "__index"))   				{  					if(LuaLib.luaL_checkmetatable(luaState' -1))   					{  						LuaLib.lua_insert(luaState' stackPos);  						LuaLib.lua_remove(luaState' stackPos+1);  					}   					else  						LuaLib.lua_settop(luaState' -2);  				}  			}
Magic Number,LuaInterface,CheckType,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\CheckType.cs,getAsNetObject,The following statement contains a magic number: if(obj.IsNull() && LuaLib.lua_type(luaState' stackPos) == LuaTypes.Table)   			{  				if(LuaLib.luaL_getmetafield(luaState' stackPos' "__index"))   				{  					if(LuaLib.luaL_checkmetatable(luaState' -1))   					{  						LuaLib.lua_insert(luaState' stackPos);  						LuaLib.lua_remove(luaState' stackPos+1);  						obj = translator.getNetObject(luaState' stackPos);  					}   					else   						LuaLib.lua_settop(luaState' -2);  				}  			}
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,Lua,The following statement contains a magic number: LuaLib.lua_settable(luaState' -3);
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,Lua,The following statement contains a magic number: if(LuaLib.lua_toboolean(lState' -1))   			{  				LuaLib.lua_settop(lState' -2);  				throw new LuaException("There is already a LuaInterface.Lua instance associated with this Lua state");  			}   			else   			{  				LuaLib.lua_settop(lState' -2);  				LuaLib.lua_pushstring(lState' "LUAINTERFACE LOADED");  				LuaLib.lua_pushboolean(lState' true);  				LuaLib.lua_settable(lState' (int)LuaIndexes.Registry);  				luaState = lState;  				LuaLib.lua_pushvalue(lState' (int)LuaIndexes.Globals);  				LuaLib.lua_getglobal(lState' "luanet");  				LuaLib.lua_pushstring(lState' "getmetatable");  				LuaLib.lua_getglobal(lState' "getmetatable");  				LuaLib.lua_settable(lState' -3);  				LuaLib.lua_replace(lState' (int)LuaIndexes.Globals);  				translator = new ObjectTranslator(this' luaState);  				LuaLib.lua_replace(lState' (int)LuaIndexes.Globals);  				LuaLib.luaL_dostring(lState' Lua.init_luanet);	// steffenj: lua_dostring renamed to luaL_dostring  			}
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,Lua,The following statement contains a magic number: if(LuaLib.lua_toboolean(lState' -1))   			{  				LuaLib.lua_settop(lState' -2);  				throw new LuaException("There is already a LuaInterface.Lua instance associated with this Lua state");  			}   			else   			{  				LuaLib.lua_settop(lState' -2);  				LuaLib.lua_pushstring(lState' "LUAINTERFACE LOADED");  				LuaLib.lua_pushboolean(lState' true);  				LuaLib.lua_settable(lState' (int)LuaIndexes.Registry);  				luaState = lState;  				LuaLib.lua_pushvalue(lState' (int)LuaIndexes.Globals);  				LuaLib.lua_getglobal(lState' "luanet");  				LuaLib.lua_pushstring(lState' "getmetatable");  				LuaLib.lua_getglobal(lState' "getmetatable");  				LuaLib.lua_settable(lState' -3);  				LuaLib.lua_replace(lState' (int)LuaIndexes.Globals);  				translator = new ObjectTranslator(this' luaState);  				LuaLib.lua_replace(lState' (int)LuaIndexes.Globals);  				LuaLib.luaL_dostring(lState' Lua.init_luanet);	// steffenj: lua_dostring renamed to luaL_dostring  			}
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,Lua,The following statement contains a magic number: if(LuaLib.lua_toboolean(lState' -1))   			{  				LuaLib.lua_settop(lState' -2);  				throw new LuaException("There is already a LuaInterface.Lua instance associated with this Lua state");  			}   			else   			{  				LuaLib.lua_settop(lState' -2);  				LuaLib.lua_pushstring(lState' "LUAINTERFACE LOADED");  				LuaLib.lua_pushboolean(lState' true);  				LuaLib.lua_settable(lState' (int)LuaIndexes.Registry);  				luaState = lState;  				LuaLib.lua_pushvalue(lState' (int)LuaIndexes.Globals);  				LuaLib.lua_getglobal(lState' "luanet");  				LuaLib.lua_pushstring(lState' "getmetatable");  				LuaLib.lua_getglobal(lState' "getmetatable");  				LuaLib.lua_settable(lState' -3);  				LuaLib.lua_replace(lState' (int)LuaIndexes.Globals);  				translator = new ObjectTranslator(this' luaState);  				LuaLib.lua_replace(lState' (int)LuaIndexes.Globals);  				LuaLib.luaL_dostring(lState' Lua.init_luanet);	// steffenj: lua_dostring renamed to luaL_dostring  			}
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,registerGlobal,The following statement contains a magic number: if(type == typeof(LuaCore.lua_CFunction))  			{  				// Format for easy method invocation  				globals.Add(path + "(");  			}  			// If the type is a class or an interface and recursion hasn't been running too long' list the members  			else if((type.IsClass || type.IsInterface) && type != typeof(string) && recursionCounter < 2)  			{  				#region Methods  				foreach(var method in type.GetMethods(BindingFlags.Public | BindingFlags.Instance))  				{  					if(  						// Check that the LuaHideAttribute and LuaGlobalAttribute were not applied  						(method.GetCustomAttributes(typeof(LuaHideAttribute)' false).Length == 0) &&  						(method.GetCustomAttributes(typeof(LuaGlobalAttribute)' false).Length == 0) &&  						// Exclude some generic .NET methods that wouldn't be very usefull in Lua  						method.Name != "GetType" && method.Name != "GetHashCode" && method.Name != "Equals" &&  						method.Name != "ToString" && method.Name != "Clone" && method.Name != "Dispose" &&  						method.Name != "GetEnumerator" && method.Name != "CopyTo" &&  						!method.Name.StartsWith("get_"' StringComparison.Ordinal) &&  						!method.Name.StartsWith("set_"' StringComparison.Ordinal) &&  						!method.Name.StartsWith("add_"' StringComparison.Ordinal) &&  						!method.Name.StartsWith("remove_"' StringComparison.Ordinal))  					{  						// Format for easy method invocation  						string command = path + ":" + method.Name + "(";    						if(method.GetParameters().Length == 0) command += ")";  							globals.Add(command);  					}  				}  				#endregion    				#region Fields  				foreach(var field in type.GetFields(BindingFlags.Public | BindingFlags.Instance))  				{  					if(  						// Check that the LuaHideAttribute and LuaGlobalAttribute were not applied  						(field.GetCustomAttributes(typeof(LuaHideAttribute)' false).Length == 0) &&  						(field.GetCustomAttributes(typeof(LuaGlobalAttribute)' false).Length == 0))  					{  						// Go into recursion for members  						registerGlobal(path + "." + field.Name' field.FieldType' recursionCounter + 1);  					}  				}  				#endregion    				#region Properties  				foreach(var property in type.GetProperties(BindingFlags.Public | BindingFlags.Instance))  				{  					if(  						// Check that the LuaHideAttribute and LuaGlobalAttribute were not applied  						(property.GetCustomAttributes(typeof(LuaHideAttribute)' false).Length == 0) &&  						(property.GetCustomAttributes(typeof(LuaGlobalAttribute)' false).Length == 0)  						// Exclude some generic .NET properties that wouldn't be very usefull in Lua  						&& property.Name != "Item")  					{  						// Go into recursion for members  						registerGlobal(path + "." + property.Name' property.PropertyType' recursionCounter + 1);  					}  				}  				#endregion  			}  			else  				globals.Add(path);
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,getObject,The following statement contains a magic number: for(int i = 0; i < remainingPath.Length; i++)   			{  				LuaLib.lua_pushstring(luaState' remainingPath[i]);  				LuaLib.lua_gettable(luaState' -2);  				returnValue = translator.getObject(luaState' -1);    				if(returnValue.IsNull())  					break;	  			}
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,callFunction,The following statement contains a magic number: if(!LuaLib.lua_checkstack(luaState' args.Length+6))  				throw new LuaException("Lua stack overflow");
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,setObject,The following statement contains a magic number: for(int i = 0; i < remainingPath.Length-1; i++)   			{  				LuaLib.lua_pushstring(luaState' remainingPath[i]);  				LuaLib.lua_gettable(luaState' -2);  			}
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,setObject,The following statement contains a magic number: LuaLib.lua_settable(luaState' -3);
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,NewTable,The following statement contains a magic number: if(path.Length == 1)   			{  				LuaLib.lua_newtable(luaState);  				LuaLib.lua_setglobal(luaState' fullPath);  			}   			else   			{  				LuaLib.lua_getglobal(luaState' path[0]);    				for(int i = 1; i < path.Length-1; i++)   				{  					LuaLib.lua_pushstring(luaState' path[i]);  					LuaLib.lua_gettable(luaState' -2);  				}    				LuaLib.lua_pushstring(luaState' path[path.Length-1]);  				LuaLib.lua_newtable(luaState);  				LuaLib.lua_settable(luaState' -3);  			}
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,NewTable,The following statement contains a magic number: if(path.Length == 1)   			{  				LuaLib.lua_newtable(luaState);  				LuaLib.lua_setglobal(luaState' fullPath);  			}   			else   			{  				LuaLib.lua_getglobal(luaState' path[0]);    				for(int i = 1; i < path.Length-1; i++)   				{  					LuaLib.lua_pushstring(luaState' path[i]);  					LuaLib.lua_gettable(luaState' -2);  				}    				LuaLib.lua_pushstring(luaState' path[path.Length-1]);  				LuaLib.lua_newtable(luaState);  				LuaLib.lua_settable(luaState' -3);  			}
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,GetTableDict,The following statement contains a magic number: while(LuaLib.lua_next(luaState' -2) != 0)   			{  				dict[translator.getObject(luaState' -2)] = translator.getObject(luaState' -1);  				LuaLib.lua_settop(luaState' -2);  			}
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,GetTableDict,The following statement contains a magic number: while(LuaLib.lua_next(luaState' -2) != 0)   			{  				dict[translator.getObject(luaState' -2)] = translator.getObject(luaState' -1);  				LuaLib.lua_settop(luaState' -2);  			}
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,GetTableDict,The following statement contains a magic number: while(LuaLib.lua_next(luaState' -2) != 0)   			{  				dict[translator.getObject(luaState' -2)] = translator.getObject(luaState' -1);  				LuaLib.lua_settop(luaState' -2);  			}
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,rawGetObject,The following statement contains a magic number: LuaLib.lua_rawget(luaState' -2);
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,getObject,The following statement contains a magic number: LuaLib.lua_gettable(luaState' -2);
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,setObject,The following statement contains a magic number: LuaLib.lua_settable(luaState' -3);
Magic Number,LuaInterface,Lua,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Lua.cs,compareRef,The following statement contains a magic number: int equal = LuaLib.lua_equal(luaState' -1' -2);
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getMethod,The following statement contains a magic number: object index = translator.getObject(luaState' 2);
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getMethod,The following statement contains a magic number: if(objType.IsArray && index is double)  			{  				int intIndex = (int)((double)index);    				if(objType.UnderlyingSystemType == typeof(float[]))  				{  					float[] arr = ((float[])obj);  					translator.push(luaState' arr[intIndex]);  				}  				else if(objType.UnderlyingSystemType == typeof(double[]))  				{  					double[] arr = ((double[])obj);  					translator.push(luaState' arr[intIndex]);  				}  				else if(objType.UnderlyingSystemType == typeof(int[]))  				{  					int[] arr = ((int[])obj);  					translator.push(luaState' arr[intIndex]);  				}  				else  				{  					object[] arr = (object[])obj;  					translator.push(luaState' arr[intIndex]);  				}  			}  			else  			{  				// Try to use get_Item to index into this .net object  				//MethodInfo getter = objType.GetMethod("get_Item");  				var methods = objType.GetMethods();    				foreach(var mInfo in methods)  				{  					if(mInfo.Name == "get_Item")  					{  						//check if the signature matches the input  						if(mInfo.GetParameters().Length == 1)  						{  							var getter = mInfo;  							var actualParms = (!getter.IsNull()) ? getter.GetParameters() : null;    							if(actualParms.IsNull() || actualParms.Length != 1)  							{  								translator.throwError(luaState' "method not found (or no indexer): " + index);  								LuaLib.lua_pushnil(luaState);  							}  							else  							{  								// Get the index in a form acceptable to the getter  								index = translator.getAsType(luaState' 2' actualParms[0].ParameterType);  								object[] args = new object[1];    								// Just call the indexer - if out of bounds an exception will happen  								args[0] = index;    								try  								{  									object result = getter.Invoke(obj' args);  									translator.push(luaState' result);  								}  								catch(TargetInvocationException e)  								{  									// Provide a more readable description for the common case of key not found  									if(e.InnerException is KeyNotFoundException)  										translator.throwError(luaState' "key '" + index + "' not found ");  									else  										translator.throwError(luaState' "exception indexing '" + index + "' " + e.Message);    									LuaLib.lua_pushnil(luaState);  								}  							}  						}  					}  				}  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getMethod,The following statement contains a magic number: return 2;
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getBaseMethod,The following statement contains a magic number: if(obj.IsNull())  			{  				translator.throwError(luaState' "trying to index an invalid object reference");  				LuaLib.lua_pushnil(luaState);  				LuaLib.lua_pushboolean(luaState' false);  				return 2;  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getBaseMethod,The following statement contains a magic number: string methodName = LuaLib.lua_tostring(luaState' 2).ToString();
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getBaseMethod,The following statement contains a magic number: if(methodName.IsNull())  			{  				LuaLib.lua_pushnil(luaState);  				LuaLib.lua_pushboolean(luaState' false);  				return 2;  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getBaseMethod,The following statement contains a magic number: LuaLib.lua_settop(luaState' -2);
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getBaseMethod,The following statement contains a magic number: if(LuaLib.lua_type(luaState' -1) == LuaTypes.Nil)  			{  				LuaLib.lua_settop(luaState' -2);  				return getMember(luaState' obj.GetType()' obj' methodName' BindingFlags.Instance | BindingFlags.IgnoreCase);  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getBaseMethod,The following statement contains a magic number: return 2;
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getMember,The following statement contains a magic number: if(cachedMember is LuaCore.lua_CFunction)  			{  				translator.pushFunction(luaState' (LuaCore.lua_CFunction)cachedMember);  				translator.push(luaState' true);  				return 2;  			}  			else if(!cachedMember.IsNull())  				member = (MemberInfo)cachedMember;  			else  			{  				//CP: Removed NonPublic binding search  				var members = objType.GetMember(methodName' bindingType | BindingFlags.Public | BindingFlags.IgnoreCase/*| BindingFlags.NonPublic*/);    				if(members.Length > 0)  					member = members[0];  				else  				{  					// If we can't find any suitable instance members' try to find them as statics - but we only want to allow implicit static  					// lookups for fields/properties/events -kevinh  					//CP: Removed NonPublic binding search and made case insensitive  					members = objType.GetMember(methodName' bindingType | BindingFlags.Static | BindingFlags.Public | BindingFlags.IgnoreCase/*| BindingFlags.NonPublic*/);    					if(members.Length > 0)  					{  						member = members[0];  						implicitStatic = true;  					}  				}  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getMember,The following statement contains a magic number: if(!member.IsNull())  			{  				if(member.MemberType == MemberTypes.Field)  				{  					var field = (FieldInfo)member;    					if(cachedMember.IsNull())  						setMemberCache(memberCache' objType' methodName' member);    					try  					{  						translator.push(luaState' field.GetValue(obj));  					}  					catch  					{  						LuaLib.lua_pushnil(luaState);  					}  				}  				else if(member.MemberType == MemberTypes.Property)  				{  					var property = (PropertyInfo)member;  					if(cachedMember.IsNull())  						setMemberCache(memberCache' objType' methodName' member);    					try  					{  						object val = property.GetValue(obj' null);  						translator.push(luaState' val);  					}  					catch(ArgumentException)  					{  						// If we can't find the getter in our class' recurse up to the base class and see  						// if they can help.  						if(objType is Type && !(((Type)objType) == typeof(object)))  							return getMember(luaState' ((Type)objType).BaseType' obj' methodName' bindingType);  						else  							LuaLib.lua_pushnil(luaState);  					}  					catch(TargetInvocationException e)  // Convert this exception into a Lua error  					{  						ThrowError(luaState' e);  						LuaLib.lua_pushnil(luaState);  					}  				}  				else if(member.MemberType == MemberTypes.Event)  				{  					var eventInfo = (EventInfo)member;  					if(cachedMember.IsNull())  						setMemberCache(memberCache' objType' methodName' member);    					translator.push(luaState' new RegisterEventHandler(translator.pendingEvents' obj' eventInfo));  				}  				else if(!implicitStatic)  				{  					if(member.MemberType == MemberTypes.NestedType)  					{  						// kevinh - added support for finding nested types  						// cache us  						if(cachedMember.IsNull())  							setMemberCache(memberCache' objType' methodName' member);    						// Find the name of our class  						string name = member.Name;  						var dectype = member.DeclaringType;    						// Build a new long name and try to find the type by name  						string longname = dectype.FullName + "+" + name;  						var nestedType = translator.FindType(longname);  						translator.pushType(luaState' nestedType);  					}  					else  					{  						// Member type must be 'method'  						var wrapper = new LuaCore.lua_CFunction((new LuaMethodWrapper(translator' objType' methodName' bindingType)).call);    						if(cachedMember.IsNull())  							setMemberCache(memberCache' objType' methodName' wrapper);    						translator.pushFunction(luaState' wrapper);  						translator.push(luaState' true);  						return 2;  					}  				}  				else  				{  					// If we reach this point we found a static method' but can't use it in this context because the user passed in an instance  					translator.throwError(luaState' "can't pass instance to static method " + methodName);  					LuaLib.lua_pushnil(luaState);  				}  			}  			else  			{  				// kevinh - we want to throw an exception because meerly returning 'nil' in this case  				// is not sufficient.  valid data members may return nil and therefore there must be some  				// way to know the member just doesn't exist.  				translator.throwError(luaState' "unknown member name " + methodName);  				LuaLib.lua_pushnil(luaState);  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getMember,The following statement contains a magic number: return 2;
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,setFieldOrProperty,The following statement contains a magic number: try  			{  				if(type.IsArray && LuaLib.lua_isnumber(luaState' 2))  				{  					int index = (int)LuaLib.lua_tonumber(luaState' 2);  					var arr = (Array)target;  					object val = translator.getAsType(luaState' 3' arr.GetType().GetElementType());  					arr.SetValue(val' index);  				}  				else  				{  					// Try to see if we have a this[] accessor  					var setter = type.GetMethod("set_Item");  					if(!setter.IsNull())  					{  						var args = setter.GetParameters();  						var valueType = args[1].ParameterType;    						// The new val ue the user specified   						object val = translator.getAsType(luaState' 3' valueType);  						var indexType = args[0].ParameterType;  						object index = translator.getAsType(luaState' 2' indexType);    						object[] methodArgs = new object[2];    						// Just call the indexer - if out of bounds an exception will happen  						methodArgs[0] = index;  						methodArgs[1] = val;  						setter.Invoke(target' methodArgs);  					}  					else  						translator.throwError(luaState' detailMessage); // Pass the original message from trySetMember because it is probably best  				}  			}  			catch(SEHException)  			{  				// If we are seeing a C++ exception - this must actually be for Lua's private use.  Let it handle it  				throw;  			}  			catch(Exception e)  			{  				ThrowError(luaState' e);  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,setFieldOrProperty,The following statement contains a magic number: try  			{  				if(type.IsArray && LuaLib.lua_isnumber(luaState' 2))  				{  					int index = (int)LuaLib.lua_tonumber(luaState' 2);  					var arr = (Array)target;  					object val = translator.getAsType(luaState' 3' arr.GetType().GetElementType());  					arr.SetValue(val' index);  				}  				else  				{  					// Try to see if we have a this[] accessor  					var setter = type.GetMethod("set_Item");  					if(!setter.IsNull())  					{  						var args = setter.GetParameters();  						var valueType = args[1].ParameterType;    						// The new val ue the user specified   						object val = translator.getAsType(luaState' 3' valueType);  						var indexType = args[0].ParameterType;  						object index = translator.getAsType(luaState' 2' indexType);    						object[] methodArgs = new object[2];    						// Just call the indexer - if out of bounds an exception will happen  						methodArgs[0] = index;  						methodArgs[1] = val;  						setter.Invoke(target' methodArgs);  					}  					else  						translator.throwError(luaState' detailMessage); // Pass the original message from trySetMember because it is probably best  				}  			}  			catch(SEHException)  			{  				// If we are seeing a C++ exception - this must actually be for Lua's private use.  Let it handle it  				throw;  			}  			catch(Exception e)  			{  				ThrowError(luaState' e);  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,setFieldOrProperty,The following statement contains a magic number: try  			{  				if(type.IsArray && LuaLib.lua_isnumber(luaState' 2))  				{  					int index = (int)LuaLib.lua_tonumber(luaState' 2);  					var arr = (Array)target;  					object val = translator.getAsType(luaState' 3' arr.GetType().GetElementType());  					arr.SetValue(val' index);  				}  				else  				{  					// Try to see if we have a this[] accessor  					var setter = type.GetMethod("set_Item");  					if(!setter.IsNull())  					{  						var args = setter.GetParameters();  						var valueType = args[1].ParameterType;    						// The new val ue the user specified   						object val = translator.getAsType(luaState' 3' valueType);  						var indexType = args[0].ParameterType;  						object index = translator.getAsType(luaState' 2' indexType);    						object[] methodArgs = new object[2];    						// Just call the indexer - if out of bounds an exception will happen  						methodArgs[0] = index;  						methodArgs[1] = val;  						setter.Invoke(target' methodArgs);  					}  					else  						translator.throwError(luaState' detailMessage); // Pass the original message from trySetMember because it is probably best  				}  			}  			catch(SEHException)  			{  				// If we are seeing a C++ exception - this must actually be for Lua's private use.  Let it handle it  				throw;  			}  			catch(Exception e)  			{  				ThrowError(luaState' e);  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,setFieldOrProperty,The following statement contains a magic number: try  			{  				if(type.IsArray && LuaLib.lua_isnumber(luaState' 2))  				{  					int index = (int)LuaLib.lua_tonumber(luaState' 2);  					var arr = (Array)target;  					object val = translator.getAsType(luaState' 3' arr.GetType().GetElementType());  					arr.SetValue(val' index);  				}  				else  				{  					// Try to see if we have a this[] accessor  					var setter = type.GetMethod("set_Item");  					if(!setter.IsNull())  					{  						var args = setter.GetParameters();  						var valueType = args[1].ParameterType;    						// The new val ue the user specified   						object val = translator.getAsType(luaState' 3' valueType);  						var indexType = args[0].ParameterType;  						object index = translator.getAsType(luaState' 2' indexType);    						object[] methodArgs = new object[2];    						// Just call the indexer - if out of bounds an exception will happen  						methodArgs[0] = index;  						methodArgs[1] = val;  						setter.Invoke(target' methodArgs);  					}  					else  						translator.throwError(luaState' detailMessage); // Pass the original message from trySetMember because it is probably best  				}  			}  			catch(SEHException)  			{  				// If we are seeing a C++ exception - this must actually be for Lua's private use.  Let it handle it  				throw;  			}  			catch(Exception e)  			{  				ThrowError(luaState' e);  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,setFieldOrProperty,The following statement contains a magic number: try  			{  				if(type.IsArray && LuaLib.lua_isnumber(luaState' 2))  				{  					int index = (int)LuaLib.lua_tonumber(luaState' 2);  					var arr = (Array)target;  					object val = translator.getAsType(luaState' 3' arr.GetType().GetElementType());  					arr.SetValue(val' index);  				}  				else  				{  					// Try to see if we have a this[] accessor  					var setter = type.GetMethod("set_Item");  					if(!setter.IsNull())  					{  						var args = setter.GetParameters();  						var valueType = args[1].ParameterType;    						// The new val ue the user specified   						object val = translator.getAsType(luaState' 3' valueType);  						var indexType = args[0].ParameterType;  						object index = translator.getAsType(luaState' 2' indexType);    						object[] methodArgs = new object[2];    						// Just call the indexer - if out of bounds an exception will happen  						methodArgs[0] = index;  						methodArgs[1] = val;  						setter.Invoke(target' methodArgs);  					}  					else  						translator.throwError(luaState' detailMessage); // Pass the original message from trySetMember because it is probably best  				}  			}  			catch(SEHException)  			{  				// If we are seeing a C++ exception - this must actually be for Lua's private use.  Let it handle it  				throw;  			}  			catch(Exception e)  			{  				ThrowError(luaState' e);  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,setFieldOrProperty,The following statement contains a magic number: try  			{  				if(type.IsArray && LuaLib.lua_isnumber(luaState' 2))  				{  					int index = (int)LuaLib.lua_tonumber(luaState' 2);  					var arr = (Array)target;  					object val = translator.getAsType(luaState' 3' arr.GetType().GetElementType());  					arr.SetValue(val' index);  				}  				else  				{  					// Try to see if we have a this[] accessor  					var setter = type.GetMethod("set_Item");  					if(!setter.IsNull())  					{  						var args = setter.GetParameters();  						var valueType = args[1].ParameterType;    						// The new val ue the user specified   						object val = translator.getAsType(luaState' 3' valueType);  						var indexType = args[0].ParameterType;  						object index = translator.getAsType(luaState' 2' indexType);    						object[] methodArgs = new object[2];    						// Just call the indexer - if out of bounds an exception will happen  						methodArgs[0] = index;  						methodArgs[1] = val;  						setter.Invoke(target' methodArgs);  					}  					else  						translator.throwError(luaState' detailMessage); // Pass the original message from trySetMember because it is probably best  				}  			}  			catch(SEHException)  			{  				// If we are seeing a C++ exception - this must actually be for Lua's private use.  Let it handle it  				throw;  			}  			catch(Exception e)  			{  				ThrowError(luaState' e);  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,trySetMember,The following statement contains a magic number: if(LuaLib.lua_type(luaState' 2) != LuaTypes.String)  			{  				detailMessage = "property names must be strings";  				return false;  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,trySetMember,The following statement contains a magic number: string fieldName = LuaLib.lua_tostring(luaState' 2).ToString();
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,trySetMember,The following statement contains a magic number: if(member.MemberType == MemberTypes.Field)  			{  				var field = (FieldInfo)member;  				object val = translator.getAsType(luaState' 3' field.FieldType);    				try  				{  					field.SetValue(target' val);  				}  				catch (Exception e)  				{  					ThrowError(luaState' e);  				}    				// We did a call  				return true;  			}  			else if(member.MemberType == MemberTypes.Property)  			{  				var property = (PropertyInfo)member;  				object val = translator.getAsType(luaState' 3' property.PropertyType);    				try  				{  					property.SetValue(target' val' null);  				}  				catch (Exception e)  				{  					ThrowError(luaState' e);  				}    				// We did a call  				return true;  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,trySetMember,The following statement contains a magic number: if(member.MemberType == MemberTypes.Field)  			{  				var field = (FieldInfo)member;  				object val = translator.getAsType(luaState' 3' field.FieldType);    				try  				{  					field.SetValue(target' val);  				}  				catch (Exception e)  				{  					ThrowError(luaState' e);  				}    				// We did a call  				return true;  			}  			else if(member.MemberType == MemberTypes.Property)  			{  				var property = (PropertyInfo)member;  				object val = translator.getAsType(luaState' 3' property.PropertyType);    				try  				{  					property.SetValue(target' val' null);  				}  				catch (Exception e)  				{  					ThrowError(luaState' e);  				}    				// We did a call  				return true;  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getClassMethod,The following statement contains a magic number: if(LuaLib.lua_isnumber(luaState' 2))  			{  				int size = (int)LuaLib.lua_tonumber(luaState' 2);  				translator.push(luaState' Array.CreateInstance(klass.UnderlyingSystemType' size));  				return 1;  			}  			else  			{  				string methodName = LuaLib.lua_tostring(luaState' 2).ToString();    				if(methodName.IsNull())  				{  					LuaLib.lua_pushnil(luaState);  					return 1;  				} //CP: Ignore case  				else  					return getMember(luaState' klass' null' methodName' BindingFlags.FlattenHierarchy | BindingFlags.Static | BindingFlags.IgnoreCase);  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getClassMethod,The following statement contains a magic number: if(LuaLib.lua_isnumber(luaState' 2))  			{  				int size = (int)LuaLib.lua_tonumber(luaState' 2);  				translator.push(luaState' Array.CreateInstance(klass.UnderlyingSystemType' size));  				return 1;  			}  			else  			{  				string methodName = LuaLib.lua_tostring(luaState' 2).ToString();    				if(methodName.IsNull())  				{  					LuaLib.lua_pushnil(luaState);  					return 1;  				} //CP: Ignore case  				else  					return getMember(luaState' klass' null' methodName' BindingFlags.FlattenHierarchy | BindingFlags.Static | BindingFlags.IgnoreCase);  			}
Magic Number,LuaInterface,MetaFunctions,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Metatables.cs,getClassMethod,The following statement contains a magic number: if(LuaLib.lua_isnumber(luaState' 2))  			{  				int size = (int)LuaLib.lua_tonumber(luaState' 2);  				translator.push(luaState' Array.CreateInstance(klass.UnderlyingSystemType' size));  				return 1;  			}  			else  			{  				string methodName = LuaLib.lua_tostring(luaState' 2).ToString();    				if(methodName.IsNull())  				{  					LuaLib.lua_pushnil(luaState);  					return 1;  				} //CP: Ignore case  				else  					return getMember(luaState' klass' null' methodName' BindingFlags.FlattenHierarchy | BindingFlags.Static | BindingFlags.IgnoreCase);  			}
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createLuaObjectList,The following statement contains a magic number: LuaLib.lua_settable(luaState' -3);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createLuaObjectList,The following statement contains a magic number: LuaLib.lua_setmetatable(luaState' -2);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createBaseClassMetatable,The following statement contains a magic number: LuaLib.lua_settable(luaState' -3);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createBaseClassMetatable,The following statement contains a magic number: LuaLib.lua_settable(luaState' -3);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createBaseClassMetatable,The following statement contains a magic number: LuaLib.lua_settable(luaState' -3);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createBaseClassMetatable,The following statement contains a magic number: LuaLib.lua_settable(luaState' -3);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createBaseClassMetatable,The following statement contains a magic number: LuaLib.lua_settop(luaState' -2);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createClassMetatable,The following statement contains a magic number: LuaLib.lua_settable(luaState' -3);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createClassMetatable,The following statement contains a magic number: LuaLib.lua_settable(luaState' -3);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createClassMetatable,The following statement contains a magic number: LuaLib.lua_settable(luaState' -3);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createClassMetatable,The following statement contains a magic number: LuaLib.lua_settable(luaState' -3);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createClassMetatable,The following statement contains a magic number: LuaLib.lua_settable(luaState' -3);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createClassMetatable,The following statement contains a magic number: LuaLib.lua_settop(luaState' -2);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createFunctionMetatable,The following statement contains a magic number: LuaLib.lua_settable(luaState' -3);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createFunctionMetatable,The following statement contains a magic number: LuaLib.lua_settable(luaState' -3);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,createFunctionMetatable,The following statement contains a magic number: LuaLib.lua_settop(luaState' -2);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,registerTable,The following statement contains a magic number: if(LuaLib.lua_type(luaState' 1) == LuaTypes.Table)  			{  				var luaTable = getTable(luaState' 1);  				string superclassName = LuaLib.lua_tostring(luaState' 2).ToString();    				if(!superclassName.IsNull())  				{  					var klass = FindType(superclassName);    					if(!klass.IsNull())  					{  						// Creates and pushes the object in the stack' setting  						// it as the  metatable of the first argument  						object obj = CodeGeneration.Instance.GetClassInstance(klass' luaTable);  						pushObject(luaState' obj' "luaNet_metatable");  						LuaLib.lua_newtable(luaState);  						LuaLib.lua_pushstring(luaState' "__index");  						LuaLib.lua_pushvalue(luaState' -3);  						LuaLib.lua_settable(luaState' -3);  						LuaLib.lua_pushstring(luaState' "__newindex");  						LuaLib.lua_pushvalue(luaState' -3);  						LuaLib.lua_settable(luaState' -3);  						LuaLib.lua_setmetatable(luaState' 1);  						// Pushes the object again' this time as the base field  						// of the table and with the luaNet_searchbase metatable  						LuaLib.lua_pushstring(luaState' "base");  						int index = addObject(obj);  						pushNewObject(luaState' obj' index' "luaNet_searchbase");  						LuaLib.lua_rawset(luaState' 1);  					}  					else  						throwError(luaState' "register_table: can not find superclass '" + superclassName + "'");  				}  				else  					throwError(luaState' "register_table: superclass name can not be null");  			}  			else  				throwError(luaState' "register_table: first arg is not a table");
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,registerTable,The following statement contains a magic number: if(LuaLib.lua_type(luaState' 1) == LuaTypes.Table)  			{  				var luaTable = getTable(luaState' 1);  				string superclassName = LuaLib.lua_tostring(luaState' 2).ToString();    				if(!superclassName.IsNull())  				{  					var klass = FindType(superclassName);    					if(!klass.IsNull())  					{  						// Creates and pushes the object in the stack' setting  						// it as the  metatable of the first argument  						object obj = CodeGeneration.Instance.GetClassInstance(klass' luaTable);  						pushObject(luaState' obj' "luaNet_metatable");  						LuaLib.lua_newtable(luaState);  						LuaLib.lua_pushstring(luaState' "__index");  						LuaLib.lua_pushvalue(luaState' -3);  						LuaLib.lua_settable(luaState' -3);  						LuaLib.lua_pushstring(luaState' "__newindex");  						LuaLib.lua_pushvalue(luaState' -3);  						LuaLib.lua_settable(luaState' -3);  						LuaLib.lua_setmetatable(luaState' 1);  						// Pushes the object again' this time as the base field  						// of the table and with the luaNet_searchbase metatable  						LuaLib.lua_pushstring(luaState' "base");  						int index = addObject(obj);  						pushNewObject(luaState' obj' index' "luaNet_searchbase");  						LuaLib.lua_rawset(luaState' 1);  					}  					else  						throwError(luaState' "register_table: can not find superclass '" + superclassName + "'");  				}  				else  					throwError(luaState' "register_table: superclass name can not be null");  			}  			else  				throwError(luaState' "register_table: first arg is not a table");
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,registerTable,The following statement contains a magic number: if(LuaLib.lua_type(luaState' 1) == LuaTypes.Table)  			{  				var luaTable = getTable(luaState' 1);  				string superclassName = LuaLib.lua_tostring(luaState' 2).ToString();    				if(!superclassName.IsNull())  				{  					var klass = FindType(superclassName);    					if(!klass.IsNull())  					{  						// Creates and pushes the object in the stack' setting  						// it as the  metatable of the first argument  						object obj = CodeGeneration.Instance.GetClassInstance(klass' luaTable);  						pushObject(luaState' obj' "luaNet_metatable");  						LuaLib.lua_newtable(luaState);  						LuaLib.lua_pushstring(luaState' "__index");  						LuaLib.lua_pushvalue(luaState' -3);  						LuaLib.lua_settable(luaState' -3);  						LuaLib.lua_pushstring(luaState' "__newindex");  						LuaLib.lua_pushvalue(luaState' -3);  						LuaLib.lua_settable(luaState' -3);  						LuaLib.lua_setmetatable(luaState' 1);  						// Pushes the object again' this time as the base field  						// of the table and with the luaNet_searchbase metatable  						LuaLib.lua_pushstring(luaState' "base");  						int index = addObject(obj);  						pushNewObject(luaState' obj' index' "luaNet_searchbase");  						LuaLib.lua_rawset(luaState' 1);  					}  					else  						throwError(luaState' "register_table: can not find superclass '" + superclassName + "'");  				}  				else  					throwError(luaState' "register_table: superclass name can not be null");  			}  			else  				throwError(luaState' "register_table: first arg is not a table");
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,registerTable,The following statement contains a magic number: if(LuaLib.lua_type(luaState' 1) == LuaTypes.Table)  			{  				var luaTable = getTable(luaState' 1);  				string superclassName = LuaLib.lua_tostring(luaState' 2).ToString();    				if(!superclassName.IsNull())  				{  					var klass = FindType(superclassName);    					if(!klass.IsNull())  					{  						// Creates and pushes the object in the stack' setting  						// it as the  metatable of the first argument  						object obj = CodeGeneration.Instance.GetClassInstance(klass' luaTable);  						pushObject(luaState' obj' "luaNet_metatable");  						LuaLib.lua_newtable(luaState);  						LuaLib.lua_pushstring(luaState' "__index");  						LuaLib.lua_pushvalue(luaState' -3);  						LuaLib.lua_settable(luaState' -3);  						LuaLib.lua_pushstring(luaState' "__newindex");  						LuaLib.lua_pushvalue(luaState' -3);  						LuaLib.lua_settable(luaState' -3);  						LuaLib.lua_setmetatable(luaState' 1);  						// Pushes the object again' this time as the base field  						// of the table and with the luaNet_searchbase metatable  						LuaLib.lua_pushstring(luaState' "base");  						int index = addObject(obj);  						pushNewObject(luaState' obj' index' "luaNet_searchbase");  						LuaLib.lua_rawset(luaState' 1);  					}  					else  						throwError(luaState' "register_table: can not find superclass '" + superclassName + "'");  				}  				else  					throwError(luaState' "register_table: superclass name can not be null");  			}  			else  				throwError(luaState' "register_table: first arg is not a table");
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,registerTable,The following statement contains a magic number: if(LuaLib.lua_type(luaState' 1) == LuaTypes.Table)  			{  				var luaTable = getTable(luaState' 1);  				string superclassName = LuaLib.lua_tostring(luaState' 2).ToString();    				if(!superclassName.IsNull())  				{  					var klass = FindType(superclassName);    					if(!klass.IsNull())  					{  						// Creates and pushes the object in the stack' setting  						// it as the  metatable of the first argument  						object obj = CodeGeneration.Instance.GetClassInstance(klass' luaTable);  						pushObject(luaState' obj' "luaNet_metatable");  						LuaLib.lua_newtable(luaState);  						LuaLib.lua_pushstring(luaState' "__index");  						LuaLib.lua_pushvalue(luaState' -3);  						LuaLib.lua_settable(luaState' -3);  						LuaLib.lua_pushstring(luaState' "__newindex");  						LuaLib.lua_pushvalue(luaState' -3);  						LuaLib.lua_settable(luaState' -3);  						LuaLib.lua_setmetatable(luaState' 1);  						// Pushes the object again' this time as the base field  						// of the table and with the luaNet_searchbase metatable  						LuaLib.lua_pushstring(luaState' "base");  						int index = addObject(obj);  						pushNewObject(luaState' obj' index' "luaNet_searchbase");  						LuaLib.lua_rawset(luaState' 1);  					}  					else  						throwError(luaState' "register_table: can not find superclass '" + superclassName + "'");  				}  				else  					throwError(luaState' "register_table: superclass name can not be null");  			}  			else  				throwError(luaState' "register_table: first arg is not a table");
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,unregisterTable,The following statement contains a magic number: try   			{  				if(LuaLib.lua_getmetatable(luaState' 1) != 0)  				{  					LuaLib.lua_pushstring(luaState' "__index");  					LuaLib.lua_gettable(luaState' -2);  					object obj = getRawNetObject(luaState' -1);    					if(obj.IsNull())  						throwError(luaState' "unregister_table: arg is not valid table");    					var luaTableField = obj.GetType().GetField("__luaInterface_luaTable");    					if(luaTableField.IsNull())  						throwError(luaState' "unregister_table: arg is not valid table");    					luaTableField.SetValue(obj' null);  					LuaLib.lua_pushnil(luaState);  					LuaLib.lua_setmetatable(luaState' 1);  					LuaLib.lua_pushstring(luaState' "base");  					LuaLib.lua_pushnil(luaState);  					LuaLib.lua_settable(luaState' 1);  				}  				else  					throwError(luaState' "unregister_table: arg is not valid table");  			}  			catch(Exception e)  			{  				throwError(luaState' e.Message);  			}
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,getMethodSignature,The following statement contains a magic number: string methodName = LuaLib.lua_tostring(luaState' 2).ToString();
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,getMethodSignature,The following statement contains a magic number: var signature = new Type[LuaLib.lua_gettop(luaState)-2];
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,getMethodSignature,The following statement contains a magic number: for(int i = 0; i < signature.Length; i++)  				signature[i] = FindType(LuaLib.lua_tostring(luaState' i+3).ToString());
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,getConstructorSignature,The following statement contains a magic number: for(int i = 0; i < signature.Length; i++)  				signature[i] = FindType(LuaLib.lua_tostring(luaState' i+2).ToString());
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushObject,The following statement contains a magic number: if(found)  			{  				LuaLib.luaL_getmetatable(luaState' "luaNet_objects");  				LuaLib.lua_rawgeti(luaState' -1' index);    				// Note: starting with lua5.1 the garbage collector may remove weak reference items (such as our luaNet_objects values) when the initial GC sweep   				// occurs' but the actual call of the __gc finalizer for that object may not happen until a little while later.  During that window we might call  				// this routine and find the element missing from luaNet_objects' but collectObject() has not yet been called.  In that case' we go ahead and call collect  				// object here  				// did we find a non nil object in our table? if not' we need to call collect object  				var type = LuaLib.lua_type(luaState' -1);  				if(type != LuaTypes.Nil)  				{  					LuaLib.lua_remove(luaState' -2);	 // drop the metatable - we're going to leave our object on the stack  					return;  				}    				// MetaFunctions.dumpStack(this' luaState);  				LuaLib.lua_remove(luaState' -1);	// remove the nil object value  				LuaLib.lua_remove(luaState' -1);	// remove the metatable  				collectObject(o' index);			// Remove from both our tables and fall out to get a new ID  			}
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushNewObject,The following statement contains a magic number: if(metatable == "luaNet_metatable")  			{  				// Gets or creates the metatable for the object's type  				LuaLib.luaL_getmetatable(luaState' o.GetType().AssemblyQualifiedName);    				if(LuaLib.lua_isnil(luaState' -1))  				{  					LuaLib.lua_settop(luaState' -2);  					LuaLib.luaL_newmetatable(luaState' o.GetType().AssemblyQualifiedName);  					LuaLib.lua_pushstring(luaState' "cache");  					LuaLib.lua_newtable(luaState);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushlightuserdata(luaState' LuaLib.luanet_gettag());  					LuaLib.lua_pushnumber(luaState' 1);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__index");  					LuaLib.lua_pushstring(luaState' "luaNet_indexfunction");  					LuaLib.lua_rawget(luaState' (int)LuaIndexes.Registry);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__gc");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.gcFunction);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__tostring");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.toStringFunction);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__newindex");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.newindexFunction);  					LuaLib.lua_rawset(luaState' -3);  				}  			}  			else  				LuaLib.luaL_getmetatable(luaState' metatable);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushNewObject,The following statement contains a magic number: if(metatable == "luaNet_metatable")  			{  				// Gets or creates the metatable for the object's type  				LuaLib.luaL_getmetatable(luaState' o.GetType().AssemblyQualifiedName);    				if(LuaLib.lua_isnil(luaState' -1))  				{  					LuaLib.lua_settop(luaState' -2);  					LuaLib.luaL_newmetatable(luaState' o.GetType().AssemblyQualifiedName);  					LuaLib.lua_pushstring(luaState' "cache");  					LuaLib.lua_newtable(luaState);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushlightuserdata(luaState' LuaLib.luanet_gettag());  					LuaLib.lua_pushnumber(luaState' 1);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__index");  					LuaLib.lua_pushstring(luaState' "luaNet_indexfunction");  					LuaLib.lua_rawget(luaState' (int)LuaIndexes.Registry);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__gc");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.gcFunction);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__tostring");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.toStringFunction);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__newindex");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.newindexFunction);  					LuaLib.lua_rawset(luaState' -3);  				}  			}  			else  				LuaLib.luaL_getmetatable(luaState' metatable);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushNewObject,The following statement contains a magic number: if(metatable == "luaNet_metatable")  			{  				// Gets or creates the metatable for the object's type  				LuaLib.luaL_getmetatable(luaState' o.GetType().AssemblyQualifiedName);    				if(LuaLib.lua_isnil(luaState' -1))  				{  					LuaLib.lua_settop(luaState' -2);  					LuaLib.luaL_newmetatable(luaState' o.GetType().AssemblyQualifiedName);  					LuaLib.lua_pushstring(luaState' "cache");  					LuaLib.lua_newtable(luaState);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushlightuserdata(luaState' LuaLib.luanet_gettag());  					LuaLib.lua_pushnumber(luaState' 1);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__index");  					LuaLib.lua_pushstring(luaState' "luaNet_indexfunction");  					LuaLib.lua_rawget(luaState' (int)LuaIndexes.Registry);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__gc");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.gcFunction);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__tostring");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.toStringFunction);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__newindex");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.newindexFunction);  					LuaLib.lua_rawset(luaState' -3);  				}  			}  			else  				LuaLib.luaL_getmetatable(luaState' metatable);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushNewObject,The following statement contains a magic number: if(metatable == "luaNet_metatable")  			{  				// Gets or creates the metatable for the object's type  				LuaLib.luaL_getmetatable(luaState' o.GetType().AssemblyQualifiedName);    				if(LuaLib.lua_isnil(luaState' -1))  				{  					LuaLib.lua_settop(luaState' -2);  					LuaLib.luaL_newmetatable(luaState' o.GetType().AssemblyQualifiedName);  					LuaLib.lua_pushstring(luaState' "cache");  					LuaLib.lua_newtable(luaState);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushlightuserdata(luaState' LuaLib.luanet_gettag());  					LuaLib.lua_pushnumber(luaState' 1);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__index");  					LuaLib.lua_pushstring(luaState' "luaNet_indexfunction");  					LuaLib.lua_rawget(luaState' (int)LuaIndexes.Registry);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__gc");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.gcFunction);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__tostring");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.toStringFunction);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__newindex");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.newindexFunction);  					LuaLib.lua_rawset(luaState' -3);  				}  			}  			else  				LuaLib.luaL_getmetatable(luaState' metatable);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushNewObject,The following statement contains a magic number: if(metatable == "luaNet_metatable")  			{  				// Gets or creates the metatable for the object's type  				LuaLib.luaL_getmetatable(luaState' o.GetType().AssemblyQualifiedName);    				if(LuaLib.lua_isnil(luaState' -1))  				{  					LuaLib.lua_settop(luaState' -2);  					LuaLib.luaL_newmetatable(luaState' o.GetType().AssemblyQualifiedName);  					LuaLib.lua_pushstring(luaState' "cache");  					LuaLib.lua_newtable(luaState);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushlightuserdata(luaState' LuaLib.luanet_gettag());  					LuaLib.lua_pushnumber(luaState' 1);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__index");  					LuaLib.lua_pushstring(luaState' "luaNet_indexfunction");  					LuaLib.lua_rawget(luaState' (int)LuaIndexes.Registry);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__gc");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.gcFunction);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__tostring");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.toStringFunction);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__newindex");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.newindexFunction);  					LuaLib.lua_rawset(luaState' -3);  				}  			}  			else  				LuaLib.luaL_getmetatable(luaState' metatable);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushNewObject,The following statement contains a magic number: if(metatable == "luaNet_metatable")  			{  				// Gets or creates the metatable for the object's type  				LuaLib.luaL_getmetatable(luaState' o.GetType().AssemblyQualifiedName);    				if(LuaLib.lua_isnil(luaState' -1))  				{  					LuaLib.lua_settop(luaState' -2);  					LuaLib.luaL_newmetatable(luaState' o.GetType().AssemblyQualifiedName);  					LuaLib.lua_pushstring(luaState' "cache");  					LuaLib.lua_newtable(luaState);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushlightuserdata(luaState' LuaLib.luanet_gettag());  					LuaLib.lua_pushnumber(luaState' 1);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__index");  					LuaLib.lua_pushstring(luaState' "luaNet_indexfunction");  					LuaLib.lua_rawget(luaState' (int)LuaIndexes.Registry);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__gc");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.gcFunction);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__tostring");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.toStringFunction);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__newindex");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.newindexFunction);  					LuaLib.lua_rawset(luaState' -3);  				}  			}  			else  				LuaLib.luaL_getmetatable(luaState' metatable);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushNewObject,The following statement contains a magic number: if(metatable == "luaNet_metatable")  			{  				// Gets or creates the metatable for the object's type  				LuaLib.luaL_getmetatable(luaState' o.GetType().AssemblyQualifiedName);    				if(LuaLib.lua_isnil(luaState' -1))  				{  					LuaLib.lua_settop(luaState' -2);  					LuaLib.luaL_newmetatable(luaState' o.GetType().AssemblyQualifiedName);  					LuaLib.lua_pushstring(luaState' "cache");  					LuaLib.lua_newtable(luaState);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushlightuserdata(luaState' LuaLib.luanet_gettag());  					LuaLib.lua_pushnumber(luaState' 1);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__index");  					LuaLib.lua_pushstring(luaState' "luaNet_indexfunction");  					LuaLib.lua_rawget(luaState' (int)LuaIndexes.Registry);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__gc");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.gcFunction);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__tostring");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.toStringFunction);  					LuaLib.lua_rawset(luaState' -3);  					LuaLib.lua_pushstring(luaState' "__newindex");  					LuaLib.lua_pushstdcallcfunction(luaState' metaFunctions.newindexFunction);  					LuaLib.lua_rawset(luaState' -3);  				}  			}  			else  				LuaLib.luaL_getmetatable(luaState' metatable);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushNewObject,The following statement contains a magic number: LuaLib.lua_pushvalue(luaState' -3);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushNewObject,The following statement contains a magic number: LuaLib.lua_remove(luaState' -4);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushNewObject,The following statement contains a magic number: LuaLib.lua_setmetatable(luaState' -2);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushNewObject,The following statement contains a magic number: LuaLib.lua_rawseti(luaState' -3' index);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,pushNewObject,The following statement contains a magic number: LuaLib.lua_remove(luaState' -2);
Magic Number,LuaInterface,ObjectTranslator,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\ObjectTranslator.cs,returnValues,The following statement contains a magic number: if(LuaLib.lua_checkstack(luaState' returnValues.Length+5))  			{  				for(int i = 0; i < returnValues.Length; i++)  					push(luaState' returnValues[i]);    				return returnValues.Length;  			}  			else  				return 0;
Magic Number,LuaInterface,CodeGeneration,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\GenerateEventAssembly\CodeGeneration.cs,GenerateEvent,The following statement contains a magic number: var paramTypes = new Type[2];
Magic Number,LuaInterface,LuaLib,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\LuaLib\LuaLib.cs,lua_setglobal,The following statement contains a magic number: lua_insert(luaState'-2);
Magic Number,LuaInterface,LuaLib,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\LuaLib\LuaLib.cs,checkudata_raw,The following statement contains a magic number: if(p != null)   			{  				/* value is a userdata? */  				if(LuaCore.lua_getmetatable(L' ud) != 0)   				{   					bool isEqual;    					/* does it have a metatable? */  					LuaCore.lua_getfield(L' (int)LuaIndexes.Registry' tname);  /* get correct metatable */    					isEqual = LuaCore.lua_rawequal(L' -1' -2) != 0;    					// NASTY - we need our own version of the lua_pop macro  					// lua_pop(L' 2);  /* remove both metatables */  					LuaCore.lua_settop(L' -(2) - 1);    					if(isEqual)	/* does it have the correct mt? */  						return p;  				}  			}
Magic Number,LuaInterface,LuaLib,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\LuaLib\LuaLib.cs,checkudata_raw,The following statement contains a magic number: if(p != null)   			{  				/* value is a userdata? */  				if(LuaCore.lua_getmetatable(L' ud) != 0)   				{   					bool isEqual;    					/* does it have a metatable? */  					LuaCore.lua_getfield(L' (int)LuaIndexes.Registry' tname);  /* get correct metatable */    					isEqual = LuaCore.lua_rawequal(L' -1' -2) != 0;    					// NASTY - we need our own version of the lua_pop macro  					// lua_pop(L' 2);  /* remove both metatables */  					LuaCore.lua_settop(L' -(2) - 1);    					if(isEqual)	/* does it have the correct mt? */  						return p;  				}  			}
Magic Number,LuaInterface,LuaLib,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\LuaLib\LuaLib.cs,luaL_checkmetatable,The following statement contains a magic number: if(lua_getmetatable(luaState' index) != 0)   			{  				lua_pushlightuserdata(luaState' tag);  				lua_rawget(luaState' -2);  				retVal = !lua_isnil(luaState' -1);  				lua_settop(luaState' -3);  			}
Magic Number,LuaInterface,LuaLib,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\LuaLib\LuaLib.cs,luaL_checkmetatable,The following statement contains a magic number: if(lua_getmetatable(luaState' index) != 0)   			{  				lua_pushlightuserdata(luaState' tag);  				lua_rawget(luaState' -2);  				retVal = !lua_isnil(luaState' -1);  				lua_settop(luaState' -3);  			}
Magic Number,LuaInterface,LuaLib,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\LuaLib\LuaLib.cs,fourBytesToInt,The following statement contains a magic number: return bytes[0] + (bytes[1] << 8) + (bytes[2] << 16) + (bytes[3] << 24);
Magic Number,LuaInterface,LuaLib,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\LuaLib\LuaLib.cs,fourBytesToInt,The following statement contains a magic number: return bytes[0] + (bytes[1] << 8) + (bytes[2] << 16) + (bytes[3] << 24);
Magic Number,LuaInterface,LuaLib,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\LuaLib\LuaLib.cs,fourBytesToInt,The following statement contains a magic number: return bytes[0] + (bytes[1] << 8) + (bytes[2] << 16) + (bytes[3] << 24);
Magic Number,LuaInterface,LuaLib,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\LuaLib\LuaLib.cs,fourBytesToInt,The following statement contains a magic number: return bytes[0] + (bytes[1] << 8) + (bytes[2] << 16) + (bytes[3] << 24);
Magic Number,LuaInterface,LuaLib,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\LuaLib\LuaLib.cs,fourBytesToInt,The following statement contains a magic number: return bytes[0] + (bytes[1] << 8) + (bytes[2] << 16) + (bytes[3] << 24);
Magic Number,LuaInterface,LuaLib,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\LuaLib\LuaLib.cs,intToFourBytes,The following statement contains a magic number: bytes[1] = (byte)(val >> 8);
Magic Number,LuaInterface,LuaLib,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\LuaLib\LuaLib.cs,intToFourBytes,The following statement contains a magic number: bytes[2] = (byte)(val >> 16);
Magic Number,LuaInterface,LuaLib,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\LuaLib\LuaLib.cs,intToFourBytes,The following statement contains a magic number: bytes[2] = (byte)(val >> 16);
Magic Number,LuaInterface,LuaLib,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\LuaLib\LuaLib.cs,intToFourBytes,The following statement contains a magic number: bytes[3] = (byte)(val >> 24);
Magic Number,LuaInterface,LuaLib,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\LuaLib\LuaLib.cs,intToFourBytes,The following statement contains a magic number: bytes[3] = (byte)(val >> 24);
Magic Number,LuaInterface.Method,LuaMethodWrapper,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Method\LuaMethodWrapper.cs,call,The following statement contains a magic number: if(!LuaLib.lua_checkstack(luaState' 5))  				throw new LuaException("Lua stack overflow");
Magic Number,LuaInterface.Method,LuaMethodWrapper,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Method\LuaMethodWrapper.cs,call,The following statement contains a magic number: if(methodToCall.IsNull()) // Method from name  			{  				if(isStatic)  					targetObject = null;  				else  					targetObject = _ExtractTarget(luaState' 1);    				//LuaLib.lua_remove(luaState'1); // Pops the receiver  				if(!_LastCalledMethod.cachedMethod.IsNull()) // Cached?  				{  					int numStackToSkip = isStatic ? 0 : 1; // If this is an instance invoe we will have an extra arg on the stack for the targetObject  					int numArgsPassed = LuaLib.lua_gettop(luaState) - numStackToSkip;    					if(numArgsPassed == _LastCalledMethod.argTypes.Length) // No. of args match?  					{  						if(!LuaLib.lua_checkstack(luaState' _LastCalledMethod.outList.Length + 6))  							throw new LuaException("Lua stack overflow");    						try  						{  							for(int i = 0; i < _LastCalledMethod.argTypes.Length; i++)  							{  								if(_LastCalledMethod.argTypes[i].isParamsArray)  								{  									object luaParamValue = _LastCalledMethod.argTypes[i].extractValue(luaState' i + 1 + numStackToSkip);  									var paramArrayType = _LastCalledMethod.argTypes[i].paramsArrayType;  									Array paramArray;    									if(luaParamValue is LuaTable)  									{  										var table = (LuaTable)luaParamValue;  										paramArray = Array.CreateInstance(paramArrayType' table.Values.Count);    										for(int x = 1; x <= table.Values.Count; x++)  											paramArray.SetValue(Convert.ChangeType(table[x]' paramArrayType)' x - 1);  									}  									else  									{  										paramArray = Array.CreateInstance(paramArrayType' 1);  										paramArray.SetValue(luaParamValue' 0);  									}    									_LastCalledMethod.args[_LastCalledMethod.argTypes[i].index] = paramArray;  								}  								else  								{  									_LastCalledMethod.args[_LastCalledMethod.argTypes[i].index] =  										_LastCalledMethod.argTypes[i].extractValue(luaState' i + 1 + numStackToSkip);  								}    								if(_LastCalledMethod.args[_LastCalledMethod.argTypes[i].index] == null &&  									!LuaLib.lua_isnil(luaState' i + 1 + numStackToSkip))  									throw new LuaException("argument number " + (i + 1) + " is invalid");  							}    							if((_BindingType & BindingFlags.Static) == BindingFlags.Static)  								_Translator.push(luaState' _LastCalledMethod.cachedMethod.Invoke(null' _LastCalledMethod.args));  							else  							{  								if(_LastCalledMethod.cachedMethod.IsConstructor)  									_Translator.push(luaState' ((ConstructorInfo)_LastCalledMethod.cachedMethod).Invoke(_LastCalledMethod.args));  								else  									_Translator.push(luaState' _LastCalledMethod.cachedMethod.Invoke(targetObject' _LastCalledMethod.args));  							}    							failedCall = false;  						}  						catch(TargetInvocationException e)  						{  							// Failure of method invocation  							return SetPendingException(e.GetBaseException());  						}  						catch(Exception e)  						{  							if(_Members.Length == 1) // Is the method overloaded?  								// No' throw error  								return SetPendingException(e);  						}  					}  				}    				// Cache miss  				if(failedCall)  				{  					// System.Diagnostics.Debug.WriteLine("cache miss on " + methodName);  					// If we are running an instance variable' we can now pop the targetObject from the stack  					if(!isStatic)  					{  						if(targetObject.IsNull())  						{  							_Translator.throwError(luaState' String.Format("instance method '{0}' requires a non null target object"' _MethodName));  							LuaLib.lua_pushnil(luaState);  							return 1;  						}    						LuaLib.lua_remove(luaState' 1); // Pops the receiver  					}    					bool hasMatch = false;  					string candidateName = null;    					foreach(var member in _Members)  					{  						candidateName = member.ReflectedType.Name + "." + member.Name;  						var m = (MethodInfo)member;  						bool isMethod = _Translator.matchParameters(luaState' m' ref _LastCalledMethod);    						if(isMethod)  						{  							hasMatch = true;  							break;  						}  					}    					if(!hasMatch)  					{  						string msg = (candidateName == null) ? "invalid arguments to method call" : ("invalid arguments to method: " + candidateName);  						_Translator.throwError(luaState' msg);  						LuaLib.lua_pushnil(luaState);  						return 1;  					}  				}  			}  			else // Method from MethodBase instance   			{  				if(methodToCall.ContainsGenericParameters)  				{  					/*bool isMethod = */_Translator.matchParameters(luaState' methodToCall' ref _LastCalledMethod);    					if(methodToCall.IsGenericMethodDefinition)  					{  						//need to make a concrete type of the generic method definition  						var typeArgs = new List<Type>();    						foreach(object arg in _LastCalledMethod.args)  							typeArgs.Add(arg.GetType());    						var concreteMethod = (methodToCall as MethodInfo).MakeGenericMethod(typeArgs.ToArray());  						_Translator.push(luaState' concreteMethod.Invoke(targetObject' _LastCalledMethod.args));  						failedCall = false;  					}  					else if(methodToCall.ContainsGenericParameters)  					{  						_Translator.throwError(luaState' "unable to invoke method on generic class as the current method is an open generic method");  						LuaLib.lua_pushnil(luaState);  						return 1;  					}  				}  				else  				{  					if(!methodToCall.IsStatic && !methodToCall.IsConstructor && targetObject == null)  					{  						targetObject = _ExtractTarget(luaState' 1);  						LuaLib.lua_remove(luaState' 1); // Pops the receiver  					}    					if(!_Translator.matchParameters(luaState' methodToCall' ref _LastCalledMethod))  					{  						_Translator.throwError(luaState' "invalid arguments to method call");  						LuaLib.lua_pushnil(luaState);  						return 1;  					}  				}  			}
Magic Number,LuaInterface.Method,LuaMethodWrapper,C:\repos\Jakosa_LuaInterface\Core\LuaInterface\Method\LuaMethodWrapper.cs,call,The following statement contains a magic number: if(failedCall)  			{  				if(!LuaLib.lua_checkstack(luaState' _LastCalledMethod.outList.Length + 6))  					throw new LuaException("Lua stack overflow");    				try  				{  					if(isStatic)  						_Translator.push(luaState' _LastCalledMethod.cachedMethod.Invoke(null' _LastCalledMethod.args));  					else  					{  						if(_LastCalledMethod.cachedMethod.IsConstructor)  							_Translator.push(luaState' ((ConstructorInfo)_LastCalledMethod.cachedMethod).Invoke(_LastCalledMethod.args));  						else  							_Translator.push(luaState' _LastCalledMethod.cachedMethod.Invoke(targetObject' _LastCalledMethod.args));  					}  				}  				catch(TargetInvocationException e)  				{  					return SetPendingException(e.GetBaseException());  				}  				catch(Exception e)  				{  					return SetPendingException(e);  				}  			}
