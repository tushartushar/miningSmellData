Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Board,Board,C:\repos\RonFields72_C64Emulator\c64_system\Board.cs,Board,The following statement contains a magic number: for (int i = 0; i < _memoryMaps.Length; i++) {  	_memoryMaps [i].Map (_systemRam' true);  	_memoryMaps [i].Map (_systemCpu.Port' true);  	if ((i & 2) != 0) {  		_memoryMaps [i].Map (_kernelRom' Memory.MemoryMapEntry.AccessType.Read' true);  		if ((i & 1) != 0)  			_memoryMaps [i].Map (_basicRom' Memory.MemoryMapEntry.AccessType.Read' true);  	}  	if ((i & 3) != 0) {  		if ((i & 4) != 0) {  			_memoryMaps [i].Map (_systemVic' true);  			_memoryMaps [i].Map (_systemSid' true);  			_memoryMaps [i].Map (_systemVic.ColorRam' true);  			_memoryMaps [i].Map (_systemCias [0]' true);  			_memoryMaps [i].Map (_systemCias [1]' true);  		}  		else  			_memoryMaps [i].Map (_charRom' Memory.MemoryMapEntry.AccessType.Read' true);  	}  }  
Magic Number,Board,Board,C:\repos\RonFields72_C64Emulator\c64_system\Board.cs,Board,The following statement contains a magic number: for (int i = 0; i < _memoryMaps.Length; i++) {  	_memoryMaps [i].Map (_systemRam' true);  	_memoryMaps [i].Map (_systemCpu.Port' true);  	if ((i & 2) != 0) {  		_memoryMaps [i].Map (_kernelRom' Memory.MemoryMapEntry.AccessType.Read' true);  		if ((i & 1) != 0)  			_memoryMaps [i].Map (_basicRom' Memory.MemoryMapEntry.AccessType.Read' true);  	}  	if ((i & 3) != 0) {  		if ((i & 4) != 0) {  			_memoryMaps [i].Map (_systemVic' true);  			_memoryMaps [i].Map (_systemSid' true);  			_memoryMaps [i].Map (_systemVic.ColorRam' true);  			_memoryMaps [i].Map (_systemCias [0]' true);  			_memoryMaps [i].Map (_systemCias [1]' true);  		}  		else  			_memoryMaps [i].Map (_charRom' Memory.MemoryMapEntry.AccessType.Read' true);  	}  }  
Magic Number,Board,Board,C:\repos\RonFields72_C64Emulator\c64_system\Board.cs,Board,The following statement contains a magic number: for (int i = 0; i < _memoryMaps.Length; i++) {  	_memoryMaps [i].Map (_systemRam' true);  	_memoryMaps [i].Map (_systemCpu.Port' true);  	if ((i & 2) != 0) {  		_memoryMaps [i].Map (_kernelRom' Memory.MemoryMapEntry.AccessType.Read' true);  		if ((i & 1) != 0)  			_memoryMaps [i].Map (_basicRom' Memory.MemoryMapEntry.AccessType.Read' true);  	}  	if ((i & 3) != 0) {  		if ((i & 4) != 0) {  			_memoryMaps [i].Map (_systemVic' true);  			_memoryMaps [i].Map (_systemSid' true);  			_memoryMaps [i].Map (_systemVic.ColorRam' true);  			_memoryMaps [i].Map (_systemCias [0]' true);  			_memoryMaps [i].Map (_systemCias [1]' true);  		}  		else  			_memoryMaps [i].Map (_charRom' Memory.MemoryMapEntry.AccessType.Read' true);  	}  }  
Magic Number,Board,Board,C:\repos\RonFields72_C64Emulator\c64_system\Board.cs,Board,The following statement contains a magic number: if ((i & 2) != 0) {  	_memoryMaps [i].Map (_kernelRom' Memory.MemoryMapEntry.AccessType.Read' true);  	if ((i & 1) != 0)  		_memoryMaps [i].Map (_basicRom' Memory.MemoryMapEntry.AccessType.Read' true);  }  
Magic Number,Board,Board,C:\repos\RonFields72_C64Emulator\c64_system\Board.cs,Board,The following statement contains a magic number: if ((i & 3) != 0) {  	if ((i & 4) != 0) {  		_memoryMaps [i].Map (_systemVic' true);  		_memoryMaps [i].Map (_systemSid' true);  		_memoryMaps [i].Map (_systemVic.ColorRam' true);  		_memoryMaps [i].Map (_systemCias [0]' true);  		_memoryMaps [i].Map (_systemCias [1]' true);  	}  	else  		_memoryMaps [i].Map (_charRom' Memory.MemoryMapEntry.AccessType.Read' true);  }  
Magic Number,Board,Board,C:\repos\RonFields72_C64Emulator\c64_system\Board.cs,Board,The following statement contains a magic number: if ((i & 3) != 0) {  	if ((i & 4) != 0) {  		_memoryMaps [i].Map (_systemVic' true);  		_memoryMaps [i].Map (_systemSid' true);  		_memoryMaps [i].Map (_systemVic.ColorRam' true);  		_memoryMaps [i].Map (_systemCias [0]' true);  		_memoryMaps [i].Map (_systemCias [1]' true);  	}  	else  		_memoryMaps [i].Map (_charRom' Memory.MemoryMapEntry.AccessType.Read' true);  }  
Magic Number,Board,Board,C:\repos\RonFields72_C64Emulator\c64_system\Board.cs,Board,The following statement contains a magic number: if ((i & 4) != 0) {  	_memoryMaps [i].Map (_systemVic' true);  	_memoryMaps [i].Map (_systemSid' true);  	_memoryMaps [i].Map (_systemVic.ColorRam' true);  	_memoryMaps [i].Map (_systemCias [0]' true);  	_memoryMaps [i].Map (_systemCias [1]' true);  }  else  	_memoryMaps [i].Map (_charRom' Memory.MemoryMapEntry.AccessType.Read' true);  
Magic Number,Board,Board,C:\repos\RonFields72_C64Emulator\c64_system\Board.cs,Board,The following statement contains a magic number: _systemClock.QueueOpsStart (_systemCias [0].CreateOps ()' 2);  
Magic Number,Board,Board,C:\repos\RonFields72_C64Emulator\c64_system\Board.cs,Board,The following statement contains a magic number: _systemClock.QueueOpsStart (_systemCias [1].CreateOps ()' 3);  
Magic Number,Board,Board,C:\repos\RonFields72_C64Emulator\c64_system\Board.cs,Cia1_PortA_OnPortOut,The following statement contains a magic number: _systemVic.MemoryBank = (ushort)((~states & 3) << 14);  
Magic Number,Board,Board,C:\repos\RonFields72_C64Emulator\c64_system\Board.cs,Cia1_PortA_OnPortOut,The following statement contains a magic number: _systemVic.MemoryBank = (ushort)((~states & 3) << 14);  
Magic Number,Board,Board,C:\repos\RonFields72_C64Emulator\c64_system\Board.cs,CpuPort_OnMemoryMapChanged,The following statement contains a magic number: _systemCpu.Memory = _memoryMaps [map & 7];  
Magic Number,Input,Keyboard,C:\repos\RonFields72_C64Emulator\c64_system\Keyboard.cs,RowSelectPort_OnPortOut,The following statement contains a magic number: for (byte i = 0; i < 8; i++' states >>= 1) {  	if ((states & 1) == 0)  		_currentState &= _matrix [i];  }  
Magic Number,Input,Keyboard,C:\repos\RonFields72_C64Emulator\c64_system\Keyboard.cs,KeyUp,The following statement contains a magic number: if ((_currentRow & (1 << row)) == 0) {  	_currentState = 0xff;  	for (byte i = 0; i < 8; i++' _currentRow >>= 1) {  		if ((_currentRow & 1) == 0)  			_currentState &= _matrix [i];  	}  }  
Magic Number,Input,Keyboard,C:\repos\RonFields72_C64Emulator\c64_system\Keyboard.cs,KeyUp,The following statement contains a magic number: for (byte i = 0; i < 8; i++' _currentRow >>= 1) {  	if ((_currentRow & 1) == 0)  		_currentState &= _matrix [i];  }  
Missing Default,Board,Board,C:\repos\RonFields72_C64Emulator\c64_system\Board.cs,_checkPendingStateOperations_OnTimeSlice,The following switch statement is missing a default case: switch (_pendingStateOperation) {  case PendingStateOperations.Load:  	ReadDeviceState (_currentStateFile);  	if (OnLoadState != null)  		OnLoadState (_currentStateFile);  	_currentStateFile.Close ();  	_currentStateFile = null;  	break;  case PendingStateOperations.Save:  	WriteDeviceState (_currentStateFile);  	if (OnSaveState != null)  		OnSaveState (_currentStateFile);  	_currentStateFile.Close ();  	_currentStateFile = null;  	break;  }  
